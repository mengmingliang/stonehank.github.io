{
	"content": "```jsx\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n```\n## 第一个参数：element\n\n必须是一个存在的React组件或者原生DOM，以下都可以\n\n`React.cloneElement(<div />)`\n`React.cloneElement(<Child />)`\n\n但我们通常发现用的最多的是搭配React.Children.map和this.props.children使用，如下：\n```jsx\nReact.Children.map(this.props.children,child=>{\n    React.cloneElement(child,{...props},children)\n})\n```\n首先不能直接和this.props.children使用，一旦子元素数量大于1，type为undefined的React对象\n```\n// 子元素数量大于1,返回空\nrender(){\n    return React.cloneElement(this.props.children,...)\n}\n```\n其次，这个方法的作用是为了给子组件进行自定义属性配置，这用到了第二个和第三个参数\n\n## 第二个参数：props\n\n配置当前element的props\n\n```jsx\n// 我们的意图是希望每个child组件都继承父组件props\nReact.Children.map(this.props.children,child=>{\n    React.cloneElement(child,this.props)\n})\n```\n\n但上面的写法一旦遇到嵌套组件，则会触发```maximum call stack size is exceeded```，因为\n```this.props```包含了```children```属性，因此将一直迭代执行.\n\n这么写能安全的继承父组件props\n```jsx\nconst {children,...otherPorps}=this.porps\nReact.Children.map(children,child=>{\n    React.cloneElement(child,otherPorps)\n})\n```\n\n当然，props参数还可以自行配置新的属性，最终都能分别传递给每一个子组件\n\n## 第三个参数：children\n\n配置当前element的children，用的频率比起第二个参数相对较少\n\n和第二个参数一样，这里也不能使用this.props.children，否则也将进入死循环"
}
