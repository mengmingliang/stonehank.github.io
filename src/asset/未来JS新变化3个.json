{
	"content": "#### 变化1：\n\n原写法：\n```js\nconst data = {\n  user: {},\n};\nconst street = data && data.user && data.user.address && data.user.address.street;\nconsole.log(data.user.address.street); // undefined\n```\n新写法：\n```js\nconst data = {\n  user: {},\n};\nconsole.log(data.user?.address?.street); // undefined\n```\n遇到数组：\n\n`data?.user?.address?.neighbors?.[number]`\n\n遇到函数：\n\n`data?.user?.someFunction?.()`\n\n####变化2：\n\n原写法：\n\n`value != null ? value : 'default value';`\n\n新写法：\n\n`value ?? 'default value';`\n\n#### 变化3：\n\n原写法：\n\n```js\nfunction doubleSay (str) {\n  return str + \", \" + str;\n}\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.substring(1);\n}\nfunction exclaim (str) {\n  return str + '!';\n}\nlet result = exclaim(capitalize(doubleSay(\"hello\")));\nresult //=> \"Hello, hello!\"\n```\n\n新写法：\n\n```\nlet result = \"hello\"\n  |> doubleSay\n  |> capitalize\n  |> exclaim;\n\nresult //=> \"Hello, hello!\"\n```\n\n另外：也可以用composes\n\n```js\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\nlet result = compose(exclaim,capitalize,doubleSay)(\"hello\");\nresult //=> \"Hello, hello!\"\n```"
}
