{
	"version": "1.0.0",
	"getDerivedStateFromProps": {
		"sha": "5773c257a100e1f2106db59fb0bc4ad273375da0",
		"label": [
			"getDerivedStateFromProps",
			"props",
			"state",
			"myFetch",
			"list",
			"return",
			"null"
		],
		"createdTime": "6/7/2018",
		"timeArr": [
			2018,
			5,
			7,
			0,
			0,
			0,
			0
		],
		"title": "getDerivedStateFromProps",
		"summary": "`getDerivedStateFromProps`内部不可以有副作用，因为现在是无论是state改变还是props改变，\n都会执行它。\n\n例如：\n\n这种写法会导致多次循环渲染直到报错\n```jsx\nclass App extends Component {\n  constructor(props){\n    supe..."
	},
	"React获取DOM": {
		"sha": "9e89f03a3762051de93b842c53564befbc0dc27c",
		"label": [
			"React",
			"组件",
			"Fragment",
			"获取",
			"Child"
		],
		"createdTime": "6/8/2018",
		"timeArr": [
			2018,
			5,
			8,
			0,
			0,
			0,
			0
		],
		"title": "React获取DOM",
		"summary": "#### createRef\n当 ref 属性在组件时，获取组件实例；当ref属性在dom时，获取dom实例\n\n### findDOMNode\n\n获取findDOMNode(this)参数组件(this)的DOM（所有DOM）\n\n如果只是Fragment包裹，则只能获取其第一个子组件的DOM\n\n例如：\n\n获取的第一个子组..."
	},
	"es6箭头函数的this": {
		"sha": "662ce20e60723f1b990376486a6f12aef2e2935c",
		"label": [
			"es6",
			"箭头",
			"console",
			"window",
			"function",
			"windowScope",
			"指针"
		],
		"createdTime": "6/9/2018",
		"timeArr": [
			2018,
			5,
			9,
			0,
			0,
			0,
			0
		],
		"title": "es6箭头函数的this",
		"summary": "箭头函数()=>{},没有自己的this指针,this为上一层的的this指针\n\nfunction(){},有自己的this指针,this指向调用时的对象\n\n例子：\n```js\na=\"windowScope\"\nlet obj1={\n  a:1,\n  // 向上找不到this指针，指向window\n  show:()=>..."
	},
	"React.Children": {
		"sha": "1440a870a8ef487d085e89b8002a9e6e9c4f2f3d",
		"label": [
			"React",
			"children",
			"Children",
			"元素",
			"Object",
			"组件",
			"text",
			"forEach"
		],
		"createdTime": "6/10/2018",
		"timeArr": [
			2018,
			5,
			10,
			0,
			0,
			0,
			0
		],
		"title": "React.Children",
		"summary": "`React.Children`和`this.props.children`都是获取父组件的子元素(子组件)\n\nthis.props.children:\n1. 1个子元素  => {Object}(React元素(组件)对象)\n2. 多个子元素 => [{Object},{Object}...]\n3. 无子元素   =..."
	},
	"React.cloneElement": {
		"sha": "f758381282764ccf2eeb5e222145b6ab40de7d78",
		"label": [
			"React",
			"cloneElement",
			"props",
			"children",
			"child",
			"组件",
			"参数"
		],
		"createdTime": "6/11/2018",
		"timeArr": [
			2018,
			5,
			11,
			0,
			0,
			0,
			0
		],
		"title": "React.cloneElement",
		"summary": "```jsx\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n```#### 第一个参数：element\n\n必须是一个存在的React组件或者原生DOM，以下都可以\n\n`React.cloneElement(<div />)`\n`React.clon..."
	},
	"redux-observable笔记1": {
		"sha": "2c3ca78c66c568c2182c1a0a3db4f01790f268e3",
		"label": [
			"笔记",
			"action",
			"payload",
			"redux",
			"const",
			"observable",
			"type",
			"FETCH",
			"USER",
			"response",
			"dispatch"
		],
		"createdTime": "6/12/2018",
		"timeArr": [
			2018,
			5,
			12,
			0,
			0,
			0,
			0
		],
		"title": "redux-observable笔记1",
		"summary": "#### 一\n```js\nconst pingEpic = action$ =>\n  action$.filter(action => action.type === 'PING')\n    .mapTo({ type: 'PONG' });\n```\n>pingEpic 会监听类型为 PING 的 actions，然后投..."
	},
	"源码阅读-学习redux的compose": {
		"sha": "1c31d66483e93c9656f2d42ae1164c3b016501b8",
		"label": [
			"compose",
			"args",
			"源码",
			"reduce",
			"redux",
			"funcs",
			"return",
			"参数",
			"套进",
			"fun3"
		],
		"createdTime": "6/13/2018",
		"timeArr": [
			2018,
			5,
			13,
			0,
			0,
			0,
			0
		],
		"title": "源码阅读-学习redux的compose",
		"summary": "先上源码：\n```js\n// 将(fun1,fun2,fun3)转换成fun1(fun2(fun3()))\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (f..."
	},
	"源码阅读-redux源码一个小技巧": {
		"sha": "f2bdc7f7ed9f3d78acc23221e83c625f7b8568f8",
		"label": [
			"dispatch",
			"源码",
			"redux",
			"middleware",
			"报错",
			"getState",
			"chain",
			"middlewareAPI",
			"const"
		],
		"createdTime": "6/14/2018",
		"timeArr": [
			2018,
			5,
			14,
			0,
			0,
			0,
			0
		],
		"title": "源码阅读-redux源码一个小技巧",
		"summary": "先上源码：\n```js\nexport default function applyMiddleware(...middlewares) {\n  // ...\n  \n  let dispatch = () => {\n    throw new Error(\n    `Dispatching while construct..."
	},
	"redux的鸭子类型": {
		"sha": "fb8d734075bef018a7449f06ddd06ffbb203848f",
		"label": [
			"redux",
			"type",
			"鸭子",
			"action",
			"reducer",
			"product",
			"constant",
			"login",
			"gallery"
		],
		"createdTime": "6/15/2018",
		"timeArr": [
			2018,
			5,
			15,
			0,
			0,
			0,
			0
		],
		"title": "redux的鸭子类型",
		"summary": "* 之前的项目架构写法\n```\nproduct/\n├── product.js\n├── constant.js\n├── productActions.js\n├── productReducers.js\n...\nwidget/\n├── widget.js\n├── constant.js\n├── widgetActions..."
	},
	"reactComponent.displayName": {
		"sha": "fde82993f585c209a25f00c57ea4fb1713626d27",
		"label": [
			"displayName",
			"reactComponent",
			"WrapComponent",
			"withHOC",
			"定义",
			"未定义",
			"return",
			"名称"
		],
		"createdTime": "6/16/2018",
		"timeArr": [
			2018,
			5,
			16,
			0,
			0,
			0,
			0
		],
		"title": "reactComponent.displayName",
		"summary": "`displayName`定义调试时的组件name，例如：\n```jsx\n function withHOC(WrapComponent) {\n   // 此处未定义名称或者希望动态定义名称\n   return class extends React.Component {\n     // 定义displayName\n..."
	},
	"cssModule": {
		"sha": "6ccea1616a61dc321481094dcb50899b11c98624",
		"label": [
			"cssModule",
			"color",
			"common",
			"样式",
			"title",
			"composes"
		],
		"createdTime": "6/17/2018",
		"timeArr": [
			2018,
			5,
			17,
			0,
			0,
			0,
			0
		],
		"title": "cssModule",
		"summary": "cssModule配置，先进行webpack配置：\n```\n// ...\ntest: /\\.css$/,\nuse: ['style-loader', {\n  loader: 'css-loader',\n  options: {\n    module: true,\n    localIdentName: '[name]-..."
	},
	"两个字符串最小编辑距离算法": {
		"sha": "be3a5d23fd6575a2a323c8daa62b9432f71776ec",
		"label": [
			"算法",
			"字符串",
			"length",
			"字符",
			"变动",
			"位置",
			"最小",
			"adbc"
		],
		"createdTime": "6/18/2018",
		"timeArr": [
			2018,
			5,
			18,
			0,
			0,
			0,
			0
		],
		"title": "两个字符串最小编辑距离算法",
		"summary": "#### 学习Levenshtein Distance算法\n \n  任意单个字符变动有3种情况，替换，增加和删除：\n\n**1. 如果对应的字符相同，则从它的左，斜或者上方选取最小值，直接填写**\n**2. 如果对应的字符不相同，则从它的左，斜或者上方选取最小值，+1后填写**\n\n括号内部表示需要进行移动的步数\n\n * ..."
	},
	"初始化数组为index的方法": {
		"sha": "f977deaae11294329ad90f84652f0f5c485a5cb6",
		"label": [
			"index",
			"performance",
			"初始化",
			"数组",
			"console",
			"Array"
		],
		"createdTime": "6/19/2018",
		"timeArr": [
			2018,
			5,
			19,
			0,
			0,
			0,
			0
		],
		"title": "初始化数组为index的方法",
		"summary": "#### 一些常用的初始化数组为index的方法\n\n注释为执行时间，这就是为什么循环推荐使用for循环了\n\n(整段复制到控制台执行)\n```js\n// 一、\nvar a=performance.now()\nvar arr=[];\nfor(let i=0;i<10000000;i++){\n    arr[i]=i;\n}\n..."
	},
	"react-transition-group": {
		"sha": "b5d87c2587e379b1a49439e374774336f7abd1a1",
		"label": [
			"transition",
			"组件",
			"group",
			"opacity",
			"react",
			"fade",
			"timeout",
			"CSSTransition",
			"state"
		],
		"createdTime": "6/20/2018",
		"timeArr": [
			2018,
			5,
			20,
			0,
			0,
			0,
			0
		],
		"title": "react-transition-group",
		"summary": "#### ReactTransitionGroup#### Transition\n\n默认展示组件某个特定状态的样式，而不是创建渐变动画\n\n例如：\n```jsx\n<Transition\n        in={toggleShow}\n        timeout={1000}\n        unmountOnExit..."
	},
	"react-diff": {
		"sha": "72679ef8a02a3f6de74ce6e263bb199d7dfea398",
		"label": [
			"lastIndex",
			"diff",
			"mountIndex",
			"react",
			"组件",
			"child",
			"更新",
			"比较",
			"满足",
			"index"
		],
		"createdTime": "6/21/2018",
		"timeArr": [
			2018,
			5,
			21,
			0,
			0,
			0,
			0
		],
		"title": "react-diff",
		"summary": "\n####Diff算法3个策略\n\n1. 跨层级不进行不比较\n2. 不同类不进行比较\n3. 同类同级通过key比较\n\n主要对第三种进行解释#### 例子\n\n更新前组件：`A-B-C-D` => 更新后组件：`C-B-E-A`\n\n满足`child._mountIndex < lastIndex`才会进行组件移动\n\n* `c..."
	}
}
