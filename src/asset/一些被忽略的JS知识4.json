{
	"content": "## 按值传递和按引用传递\n\n按值传递的例子：\n```js\nfunction passByValue(x){\n  x=999\n}\nvar a=5;\nvar b={a:1}\npassByValue(a);\npassByValue(b)\na   // 5\nb   // {a:1}\n```\n\n按引用传递的例子(虚构)：\n```js\nfunction passByReference(x){\n  x=999\n}\nvar a=5;\nvar b={a:1}\npassByReference(a);\npassByReference(b)\na   // 999\nb   // 999\n```\n\n## JSON.stringify()\n\n支持转换安全的JSON结构\n\n不安全的 JSON 值：\n\n `undefined`、 `function`、 `symbol`\n（ES6+）和包含循环引用（对象之间相互引用，形成一个无限循环）的对象都不符合 JSON\n结构标准\n\n那么遇到不安全JSON值怎么处理呢？有2种方法\n\n一、\n\n使用`toJSON`，如果对象内部用`toJSON`方法，`JSON.stringify`的时候回首先执行`toJSON`，\n再对其返回值进行处理\n\n例如：\n```js\nvar a={x:1,y:2}\nObject.setPrototypeOf(a,{z:3})\nJSON.stringify(a)   // \"{\"x\":1,\"y\":2}\"\n\na.toJSON=function(){\n  // 注意：返回的是对象，不是字符串\n  return {z:this.z}\n}\nJSON.stringify(a)   // \"{\"z\":3}\"\n```\n\n二、\n\n使用参数，`JSON.stringify`还有第二和第三个参数\n\n* 第二个参数`replace`\n\n为数组时，表示需要进行字符串化的对象\n\n```js\nvar a={x:1,y:2,z:3}\nJSON.stringify(a,[\"x\",\"z\"])   // \"{\"x\":1,\"z\":3}\"\n```\n\n为函数时，接受2个参数(k,v)，k表示每一个键值对对应的key，v表示对应的value，\n***遇到value也为可遍历对象时，递归遍历***\n\n```js\nvar a={x:1,y:2,z:{x:3,y:4,z:5}}\nJSON.stringify(a,function(k,v){\n  if(k!=='y'){\n    return v\n  }\n})\n// \"{\"x\":1,\"z\":{\"x\":3,\"z\":5}}\"\n// z里面的y也被去除\n```\n\n* 第三个参数`space`\n\n可以是正整数或者字符串，指定输出的缩进格式\n```js\n// 正整数\nvar a={x:1,y:2,z:{x:3,y:4,z:5}}\nJSON.stringify(a,null,2)  // 2格缩进\n/*\n\"{\n  \"x\": 1,\n  \"y\": 2,\n  \"z\": {\n    \"x\": 3,\n    \"y\": 4,\n    \"z\": 5\n  }\n}\"\n*/\n\n// 字符串\nvar a={x:1,y:2,z:{x:3,y:4,z:5}}\nJSON.stringify(a,null,\"--\")  // 2个-缩进\n/*\n\"{\n--\"x\": 1,\n--\"y\": 2,\n--\"z\": {\n----\"x\": 3,\n----\"y\": 4,\n----\"z\": 5\n--}\n}\"\n*/\n```\n\n"
}
