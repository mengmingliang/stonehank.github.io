{
  "content": "<h2>JS按位操作符</h2>\n<ul>\n<li>\n<p>按位异或(^)：二进制编码中，每一位两者相同，则为0，两者不同，则为1</p>\n</li>\n<li>\n<p>按位与 (&amp;)：二进制编码中，每一位两者都为1，则为1，否则，则为0</p>\n</li>\n<li>\n<p>按位或 (|)：二进制编码中，每一位两者其中一个为1，则为1，否则，则为0</p>\n</li>\n<li>\n<p>按位非(~)：二进制编码中，每一位的反码，1为0，0为1（十进制数值的负数-1）</p>\n</li>\n<li>\n<p>左移(&lt;&lt;) 右移(&gt;&gt;)：转换成32位二进制编码后进行移位，其中最左侧位为符号位，数字只占用31位</p>\n<p>对Math.pow(2,31)-1以内的数值，符合以下等式\n<code>n&gt;&gt;m===parseInt(n/Math.pow(2,m))</code></p>\n</li>\n<li>\n<p>无符号右移(&gt;&gt;&gt;) 无符号左移(&lt;&lt;&lt;)：转换成32位二进制编码后进行移位，无符号位</p>\n<p>对Math.pow(2,32)-1以内的数值符合以下等式\n<code>n&gt;&gt;&gt;m===parseInt(n/Math.pow(2,m))</code></p>\n</li>\n</ul>\n<h2>使用</h2>\n<ol>\n<li>\n<p>Hamming distance(海明距离)</p>\n<p>当两个二进制编码中，对应位数不同的次数</p>\n<p>例如：10001和11000，其中第2，5位不同，海明距离为2</p>\n<p>计算方式：可用^（异或），然后计算1的次数</p>\n</li>\n<li>\n<p>判断某个数字的二进制格式有多少个1</p>\n</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calcBitSet</span>(<span class=\"hljs-params\">n</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>,tmp=n\n  <span class=\"hljs-keyword\">while</span>(tmp){\n    count++;\n    <span class=\"hljs-comment\">// 每次执行都会消除最后一个1</span>\n    tmp = tmp &amp; (tmp - <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> count\n}\n</code></pre>\n"
}
