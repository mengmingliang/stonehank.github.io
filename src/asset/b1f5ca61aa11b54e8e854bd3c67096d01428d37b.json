{
  "content": "<h4>Fiber的结构</h4>\n<p><code>Fiber</code>可以看成一种数据结构，它内部包含了对当前组件的行为，包括对组件行为的跟踪、安排、暂停和取消。</p>\n<p>不像<code>React</code>组件对象，<code>React</code>组件对象每次<code>render</code>的时候都会重新创建</p>\n<p><code>React</code>组件对象如下：</p>\n<pre class=\"hljs\"><code>{\n    $$typeof: Symbol(react.element),\n    type: 'button',\n    key: &quot;1&quot;,\n    props: {\n        children: 'Update counter',\n        onClick: () =&gt; { ... }\n    }\n}\n</code></pre>\n<p>而<code>Fiber</code>并不会每次创建，而是直接在原内容上修改。</p>\n<p>每个组件都有一个<code>Fiber</code>结构，它们共同组成了树，而它们互相连接通过<code>child</code>,<code>sibling</code>,<code>return</code>(相当于parent)。</p>\n<pre class=\"hljs\"><code>  return\n    |\n  FiberNode --sibling\n    |\n  child\n</code></pre>\n<h4>Fiber内部工作方式</h4>\n<p><code>Fiber</code>展示给用户的界面的的树称为<code>current</code>树，内部还有一个<code>workInProgress</code>树，它们二者互相通过属性<code>alternate</code>引用对方。</p>\n<p>当组件内部执行更新时，都是在<code>workInProgress</code>内部进行，当已经完成更新后，一次性转换，\n<code>workInProgress</code>树变为<code>current</code>树，<code>current</code>树变为<code>workInProgress</code>树。</p>\n<h4><code>Fiber</code>的<code>EffectList</code>，<code>React</code>更新快的奥秘之一</h4>\n<p>当一棵组件树内部有多个组件需要更新，<code>Fiber</code>标记出需要更新的组件，并且对它们进行线性处理。</p>\n<p>而不是在一棵树内部遍历处理更新。</p>\n<p>其中<code>firstEffect</code>属性标记了从哪个组件开始更新，然后不断执行<code>nextEffect</code>对应的组件的更新。</p>\n<h4>Fiber的render和commit</h4>\n<ul>\n<li>\n<p>render</p>\n<p><code>render</code>是异步执行，可以执行多次，执行效果对用户不可见。</p>\n<p>执行方式是通过4个方法去遍历一棵树(dfs)，如果子组件有需要更新会优先执行，如下gif图：</p>\n<ul>\n<li>performUnitOfWork</li>\n<li>beginWork</li>\n<li>completeUnitOfWork</li>\n<li>completeWork</li>\n</ul>\n<p><img src=\"https://stonehank.github.io/articles/img/fiber-render-phase.gif\" alt=\"\"></p>\n<p><code>render</code>通过<code>nextEffect</code>将每个执行更新的组件连接。</p>\n</li>\n<li>\n<p>commit</p>\n<p><code>commit</code>是同步执行更新阶段，只执行1次，执行效果对用户可见。</p>\n<p>通过<code>nextEffect</code>线性执行<code>commit</code>更新。</p>\n</li>\n</ul>\n<p>原文：<a href=\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\">https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e</a></p>\n"
}
