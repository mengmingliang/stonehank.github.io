{
  "content": "## reselect源码亮点介绍\n\n[完整源码说明注释](https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.reselect/README.md)\n\n导图：\n\n![](./img/reselect.png)\n\n### defaultMemoize\n\n一个缓存函数，其内部：\n1. 通过闭包保存参数和结果\n2. 每次调用对参数进行浅比较\n3. 参数比较结果相同，返回缓存的结果\n\n--------\n### createSelectorCreator, createSelector\n\nreselect最主要函数\n1. `createSelectorCreator`返回一个函数，称为`createSelector`\n \n2. `createSelector`接受2类参数\n\n    `依赖数据函数`(可以有多个)\n    \n    `数据处理函数`(必须放在参数的最后)：\n    \n3. `createSelector`的内部操作\n    1. 对`依赖数据函数`和`数据处理函数`执行缓存函数\n    2. 每次执行`createSelector`的时候，依次比较`依赖数据函数`和`数据处理函数`的缓存\n    \n       这样处理就可以知道要想返回缓存的结果，必须要达到以下条件任一：\n       1. `依赖数据函数`的参数(一般为`store`)全等比较为true\n       2. `依赖数据函数`的参数(一般为`store`)全等比较为false, `数据处理函数`的参数全等比较为true\n\n4. 返回`依赖数据函数`\n\n    [reselect使用例子](https://codesandbox.io/s/jlpozpjprw)\n\n-------------\n\n### createStructuredSelector\n\n一个便利的函数，可以用于变更数据的key值，通过嵌套可以变更数据的结构\n\n它的内部正是调用了`createSelector`\n\n1. 接受2个函数，分别为一个(参数1)对象，一个(参数2)`selectorCreator`(默认就是createSelector)\n\n2. 调用`createSelector`，将参数1(对象)的value值作为`依赖数据函数`，\n其`数据处理函数`就是一个将参数1(对象)的key值和`依赖数据函数`的返回值组成一个新的对象的过程。\n\n    [createStructuredSelector使用例子](https://codesandbox.io/s/53kvl30564)\n\n\n--------\n注意点：\n\n1. 缓存函数只能保存上一次缓存的值(单个)。\n\n2. 缓存函数是通过对比参数而进行判断的，因此必须保证所提供的`依赖数据函数`和`数据处理函数`都是纯函数，而且它只保存上一次函数。\n\n    [非纯函数例子](https://codesandbox.io/s/n6y126v2p)\n    \n3. 要想取消缓存，必须取消引用，包括`依赖数据函数`参数(store)的引用和内部`数据处理函数`的参数引用\n\n    [取消缓存例子](https://codesandbox.io/s/lx1kq3lj39)"
}
