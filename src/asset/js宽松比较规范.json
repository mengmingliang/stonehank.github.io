{
	"content": "## JS宽松比较(==)规范\n\n摘自《你不知道的javascript》\n\n1. 字符串和数字之间的相等比较\n\n    >ES5 规范 11.9.3.4-5 这样定义：\n    >1. 如果 Type(x) 是数字， Type(y) 是字符串，则返回 x == ToNumber(y)\n    的结果。\n    >2. 如果 Type(x) 是字符串， Type(y) 是数字，则返回 ToNumber(x) == y\n    的结果。\n    \n    例如：`\"\" == 0; // true`\n2. 其他类型和布尔类型之间的相等比较\n    >规范 11.9.3.6-7 是这样说的：\n    >1. 如果 Type(x) 是布尔类型，则返回 ToNumber(x) == y 的结果；\n    >2. 如果 Type(y) 是布尔类型，则返回 x == ToNumber(y) 的结果。\n    \n     ```js\n     [] === true;    // false\n     [] == true;     // false\n     !![];            // true\n     \"42\" == true;   // false\n     false == \"\";    // true\n     ```\n3.  null 和 undefined 之间的相等比较\n    >ES5 规范 11.9.3.2-3 规定：\n    >1. 如果 x 为 null ， y 为 undefined ，则结果为 true 。\n    >2. 如果 x 为 undefined ， y 为 null ，则结果为 true 。\n\n4. 对象和非对象之间的相等比较\n    >ES5 规范 11.9.3.8-9 做如下规定：\n    >1. 如果 Type(x) 是字符串或数字， Type(y) 是对象，则返回 x == ToPrimitive(y)\n    的结果；\n    >2. 如果 Type(x) 是对象， Type(y) 是字符串或数字，则返回 ToPromitive(x) == y\n    的结果。\n    \n    ```js\n    [42] == 42;  // true\n    [] == \"\";    // true\n    ```\n"
}
