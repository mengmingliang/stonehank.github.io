{
  "content": "#### Strict Mode\n\n在React v16.3时添加，目的是帮助找出应用中潜在的问题。\n\n使用：\n```jsx\nimport React from 'react';\n\nfunction ExampleApplication() {\n  return (\n    <div>\n      <Header />\n      <React.StrictMode>\n        <div>\n          <ComponentOne />\n          <ComponentTwo />\n        </div>\n      </React.StrictMode>\n      <Footer />\n    </div>\n  );\n}\n```\n\n-----\n\n简单总结：\n\nStrictMode目前有助于\n\n* 识别具有不安全生命周期的组件\n* 有关旧式字符串`ref`用法的警告\n* 有关`findDOMNode`使用的警告\n* 检测意外的副作用\n* 检测是否有旧的`context`API\n\n1. 识别具有不安全生命周期的组件\n\n    检测是否使用已经列入废弃的生命周期(检测第三方工具很方便)。\n\n2. 有关旧式字符串`ref`用法的警告\n\n    `ref`字符串虽然方便，但有许多[缺陷](https://github.com/facebook/react/issues/1373)\n    \n    检测是否使用了`ref`字符串。\n\n3. 有关`findDOMNode`使用的警告\n\n    如果需要获取DOM元素引用，优先使用ref，而不是`findDOMNode`。\n    \n    第一、因为当使用了<Fragment>的时候，`findDOMNode`只会引用到第一个元素，而当时渲染的元素可能有很多。\n    \n    第二、`findDOMNode`是一个一次性的调用，当渲染元素改变，它(之前的结果)并不会改变。\n\n4. 检测意外的副作用\n\n    React更新会经过2个阶段\n    \n    * `render` 这个阶段会决定哪些需要更新。\n    * `commit` 这个阶段会执行更新。\n    \n    其中`render`阶段很慢(相对)，因此未来的`async mode`会将`render`阶段分割成许多小块。\n    \n    因此在`render`阶段的生命周期函数有可能会重复执行。\n    \n    而这个检测功能，会有意进行双调用，如果`render`阶段不是一致的结果，则有可能更容易发现bug。\n\n5. 检测是否有旧的`context`API\n\n    旧的`context`API更容易出现bug。"
}
