{
	"content": "####创建数组的思考\n\n`lodash.js--->.internal-->baseClone.js`内部\n\n有一句：`const result = new array.constructor(length)`\n\n这里array是一个经过`Array.isArray(array)===true`判断的数组，\n\n这句话就是使用原数组的构造函数去创建，参数是原数组的长度。\n\n那么为什么不直接`const result = new Array(length)`\n\n因为如果我们使用了自定义构造函数，`new Array`则会将自定义方法都删除\n\n例如：\n\n一个自定义构造函数(Array),包含自定义sum和avg方法\n```js\nfunction CustomArray(length=0){\n  let custom=Object.create([],Array.prototype)\n  let proto=Object.getPrototypeOf(custom)\n  proto.constructor=CustomArray\n  proto.sum=function(){\n    return this.reduce((acc,cur)=>acc+cur,0)\n  }\n  proto.avg=function(){\n    return this.sum()/this.length\n  }\n  return custom\n}\n```\n验证：\n```js\nlet myArray=new CustomArray()\nmyArray.push(5)\nmyArray.push(6)\nmyArray.push(7)\nmyArray.sum() // 18\nmyArray.avg() // 6\n```\n使用`new array.constructor`\n```js\nconst {length}=myArray\nconst result = new myArray.constructor(length)\nresult.push(5)\nresult.push(6)\nresult.push(7)\nresult.sum()   // 18\nresult.avg()   // 6\n```\n使用`new Array`\n```js\nconst {length}=myArray\nconst resultRaw = new Array(length)\nresultRaw.push(5)\nresultRaw.push(6)\nresultRaw.push(7)\nresultRaw.sum()   // 报错 not a function\nresultRaw.avg()   // 报错 not a function\n```"
}
