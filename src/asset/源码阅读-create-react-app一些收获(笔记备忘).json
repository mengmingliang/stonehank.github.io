{
  "content": "## ./creat-react-app/createReactApp.js\n\n* os.EOL\n\n    不同系统的行尾符号\n    \n    > A string constant defining the operating system-specific end-of-line marker:\n    \n    `\\n` on POSIX\n    \n    `\\r\\n` on Windows\n\n* process.cwd()\n\n    返回当前node进程的目录\n    \n    > The process.cwd() method returns the current working directory of the Node.js process.\n\n\n* child_process.spawn\n\n    使用给定的 command 和 args 中的命令行参数来衍生一个新进程\n\n    例如：\n    ```js\n    const {spawn}=require('child_process');\n    const a=spawn('npm.cmd',['config','list'])\n    a.stdout.on('data', (data) => {\n      console.log(`stdout: ${data}`);\n    });\n    ```\n    \n    注意，windows下要使用npm.cmd，否则会查找不到npm, \n    https://github.com/nodejs/node/issues/3675\n    \n    或者使用`cross-spawn`\n\n* semver\n\n    进行版本号对比，官网例子备忘\n    ```js\n    semver.valid('1.2.3') // '1.2.3'\n    semver.valid('a.b.c') // null\n    semver.clean('  =v1.2.3   ') // '1.2.3'\n    semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true\n    semver.gt('1.2.3', '9.8.7') // false\n    semver.lt('1.2.3', '9.8.7') // true\n    semver.valid(semver.coerce('v2')) // '2.0.0'\n    semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'\n    ```\n* path.delimiter\n\n    对不同平台的路径进行分割成数组\n    \n    Windows 上是 ;(分号)\n    \n    POSIX 上是 :(冒号)\n    \n* 一个Boolean的使用方法：\n\n    `process.env.NODE_PATH.split(path.delimiter).filter(Boolean)`\n    \n    这里的意思是先对`NODE_PATH`进行分割，再过滤出存在的值"
}
