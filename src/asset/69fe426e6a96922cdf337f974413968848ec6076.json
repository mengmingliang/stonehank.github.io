{
  "content": "<p>先上源码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyMiddleware</span>(<span class=\"hljs-params\">...middlewares</span>) </span>{\n  <span class=\"hljs-comment\">// ...</span>\n  \n  <span class=\"hljs-keyword\">let</span> dispatch = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(\n    <span class=\"hljs-string\">`Dispatching while constructing your middleware is not allowed. `</span> +\n    <span class=\"hljs-string\">`Other middleware would not be applied to this dispatch.`</span>\n    )\n  }\n\n  <span class=\"hljs-keyword\">const</span> middlewareAPI = {\n    <span class=\"hljs-attr\">getState</span>: store.getState,\n    <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> dispatch(...args)\n  }\n\n  <span class=\"hljs-keyword\">const</span> chain = middlewares.map(<span class=\"hljs-function\"><span class=\"hljs-params\">middleware</span> =&gt;</span> middleware(middlewareAPI))\n  dispatch = compose(...chain)(store.dispatch)\n  \n  <span class=\"hljs-comment\">// ...</span>\n</code></pre>\n<ol>\n<li>这里定义了一个直接报错的dispatch方法</li>\n<li>然后设定了API中的dispatch就是会报错的dispatch方法，因此在这个阶段任何使用dispatch都会得到错误提示</li>\n<li>最后构造结束后重新赋值dispatch</li>\n</ol>\n<p>当时第一眼看到觉得API那个对象都已经设定了dispatch是个提示错误的函数，后面重新赋值dispatch又没有引用关系，怎么能影响到API内的dispatch呢？</p>\n<p>后来再仔细一看，原来API中是这么设置的<code>dispatch:()=&gt;dispatch()</code>，用了函数包裹，是动态的；</p>\n<p>当调用这个API时，则会执行当前最新的dispatch函数。</p>\n"
}
