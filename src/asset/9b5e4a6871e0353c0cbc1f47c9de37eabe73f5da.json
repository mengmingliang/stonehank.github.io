{
  "content": "* 为什么要实现一个`GraphQL`服务器\n\n    通过自己实现，更深入了解`GraphQL`怎么构造，怎么获取，一些术语\n\n* 直接入正题，如何实现一个`GraphQL`服务器\n\n    了解4种类型\n    \n    * Query\n    \n        执行内容查询\n        \n    * Mutation\n        \n        执行内容变更\n        \n    * Schema\n    \n        模式，定义内容结构及类型\n        \n    * Resolvers\n    \n        连接`Schema`和`Query`，也就是具体内容。\n        \n\n1. 定义Schema\n\n    ```js\n    import { gql } from 'apollo-server-express';\n    \n    const typeDefs = gql`\n        type Person {\n            id: Int\n            name: String\n            gender: String\n            homeworld: String\n        }\n        input DataInput {\t\t\n            id: Int!\n            name: String\n            gender: String\n            homeworld: String\n        }\n        type Mutation {\n            setPerson(input:DataInput!):Person\n        }\n        type Query {\n            allPeople: [Person]\n            person(id: Int!): Person\n        }\n    `;\n    \n    export default typeDefs;\n    ```\n    \n    这里定义了1个自定义查询类`Person`，1个自定义修改类`DataInput`，1个`Mutation`方法，2个`Query`方法，其中加`!`表示这个字段不可缺少。\n\n2. 定义`Resolvers`\n\n    ```js\n    const defaultData = [\n      {\n        id: 1,\n        name: 'Luke SkyWaler',\n        gender: 'male',\n        homeworld: 'Tattoine'\n      },\n      {\n        id: 2,\n        name: 'C-3PO',\n        gender: 'bot',\n        homeworld: 'Tattoine'\n      }\n    ];\n    \n    const resolvers = {\n      Mutation: {\n        setPerson: (firstParam, {input}) => {\n          let matchIdx = defaultData.length\n          const {id} = input\n          let matchObj = defaultData.find((obj, i) => {\n            if (obj.id === id) {\n              matchIdx = i\n              return true\n            }\n          })\n          let defaultObj\n          if (matchObj) defaultObj = matchObj\n          else defaultObj = {name: '', gender: '', homeworld: ''}\n          let newObj = Object.assign(defaultObj, input)\n          defaultData[matchIdx] = newObj\n          return newObj\n        }\n      },\n      Query: {\n        allPeople: () => {\n          return defaultData;\n        },\n        person: (root, {id}) => {\n          return defaultData.filter(character => {\n            return (character.id === id);\n          })[0];\n        }\n      }\n    };\n    \n    export default resolvers;\n    ```\n    \n    这里定义了对`Query`和`Mutation`的具体执行方法，注意，它们的值必须是`Object`或者`Function`。\n    \n    > PS: 这里我没搞清楚 `Mutation` 第一个参数`firstParam`的作用，一直都是`undefined`\n\n3. 创建服务器\n\n    ```js\n    import express from 'express';\n    import {ApolloServer, gql } from 'apollo-server-express';\n    import typeDefs from './api/schema';\n    import resolvers from './api/resolvers';\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n    });\n    \n    const app = express();\n    server.applyMiddleware({ app });\n    \n    app.get('/', (req, res) => res.send('Babel Working!'));\n    \n    app.listen({ port: 4000 }, () =>\n      console.log(`🚀 Server ready at http://localhost:4000${server.graphqlPath}`)\n    );\n    ```\n\n4. package.json\n\n    ```\n    {\n      \"name\": \"gh-demo\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n      \"dev\": \"babel-watch index.js\"\n    },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"apollo-server-express\": \"^2.2.1\",\n        \"express\": \"^4.16.4\",\n        \"graphql\": \"^14.0.2\"\n    },\n      \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\",\n        \"babel-preset-env\": \"^1.7.0\",\n        \"babel-watch\": \"^2.0.7\"\n    }\n    }\n    ```\n\n参考：[Creating a GraphQL server with NodeJS](https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6)"
}
