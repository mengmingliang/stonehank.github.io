{
  "content": "今天碰到一个需求，获取函数参数名称，\n刚开始打算用正则去处理，但函数写法(包括es6)也挺多的，\n\n例如：\n```\nfunction x(a,b){}\nfunction x(a=5,b=3){}\nlet x=function(a=5,b){}\nlet x=(a=5,b)=>a+b\nlet x=a=>a*2\nfunction x(a,/* b */){}\n```\n\n如果用正则去兼容所有情况，考虑的会比较复杂，而且不能有冲突。\n\n这里使用`AST`语法树去获取，思路就是\n\n1. 函数可以分为3类，分别是\n   \n   `FunctionDeclaration`，对应 `function x(a,b){}`\n   `FunctionExpression`，对应`let x=function(a=5,b){}`\n   `ArrowFunctionExpression`，对应`let x=a=>a*2`\n\n2. 获取语法分析包`npm install --save esprima`，\n    获取语法树递归解析包`npm install --save estraverse`\n    \n    使用`estraverse`去处理语法树，可以省去很多判断处理，因为它已经帮你处理好了\n    \n3. 编写代码处理\n\n```js\nconst esprima=require('esprima');\nconst estraverse =require('estraverse');\nconst astEsprima=esprima.parse(testFunc)\nlet res\n  estraverse.traverse(astEsprima, {\n    // estraverse递归进入的时候触发\n    enter: function (node) {\n      // 函数对应3种类型\n      if(node.type===\"FunctionDeclaration\" || \n      node.type===\"ArrowFunctionExpression\" || \n      node.type===\"FunctionExpression\"){\n        let params=node.params\n        params=params.map(o=>{\n          // 当参数是表达式时，需要递归解析，找到`Identifier`\n          while(o.type!=='Identifier')o=o.left\n          return o.name\n        })\n        res=params\n        // 中断estraverse递归\n        this.break()\n      }\n    }\n  });\n```\n-------------\n测试：\n\n```js\nlet test=[\n  'function d(a,b,c){}' // returns [\"a\",\"b\",\"c\"]\n  ,'function d(){}' // returns []\n  ,'function named(a, b, c) {}' // returns [\"a\",\"b\",\"c\"]\n  ,'function x(a /* = 1 */, b /* = true */) {}' // returns [\"a\",\"b\"]\n  ,'function fprintf(handle, fmt /*, {}*/) {}' // returns [\"handle\",\"fmt\"]\n  ,'function x( a, b = 1, c ){}' // returns [\"a\",\"b\",\"c\"]\n  ,'function x(a=4*(5/3), b) {}' // returns [\"a\",\"b\"]\n  ,'function x(a /* function() yes */, \\n /* no, */b)/* omg! */{}' // returns [\"a\",\"b\"]\n  ,'function x( A, b \\n,c ,d \\n ) \\n {}' // returns [\"A\",\"b\",\"c\",\"d\"]\n  ,'function x(a,b){}' // returns [\"a\",\"b\"]\n  ,'function $args(func) {}' // returns [\"func\"]\n  ,'function Object() {}' // returns []\n  ,'e=>{}'  // [\"e\"]\n  ,'(a,b)=>{}'  // [\"a\",\"b\"]\n  ,'(e)=>1' // [\"e\"]\n  ,'(a=65,b=undefined)=>\"string\"' // [\"a\",\"b\"]\n  ,'ddd=e=>{}'  // [\"e\"]\n  ,'let xx=(e,b)=>{}' // [\"e\",\"b\"]\n  ,'xx=function(bb){}'  // [\"bb\"]\n  ,'let x=function(aa,cc){}'  // [\"aa\",\"cc\"]\n  ,`let x=(controller) =>{  \n    }`                      // [\"controller\"] \n]\n```"
}
