{
  "code": [
    "/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n    let denominator=1 , numerator =0\n    let splitExp=expression.match(/([-+]*\\d*)\\/([-+]*\\d*)/g)\n    \n    for(let i=0;i<splitExp.length;i++){\n        let curExp=splitExp[i].split('/')\n        let curNumerator=curExp[0],curDenominator=curExp[1]\n        numerator=numerator*curDenominator+curNumerator*denominator\n        denominator*=curDenominator\n    }\n    \n    // for(let i=0;i<expression.length;i++){\n    //     if(expression[i]==='/'){\n    //         let symbol,curNumerator,curDenominator\n    //         if(expression[i-1]==0){\n    //             symbol=expression[i-3]\n    //             curNumerator=10\n    //         }else{\n    //             symbol=expression[i-2]\n    //             curNumerator=expression[i-1]\n    //         }\n    //         if(expression[i+2]==0){\n    //             curDenominator=10\n    //         }else{\n    //             curDenominator=expression[i+1]\n    //         }\n    //         let exp=symbol?symbol==='+'?1:-1:1\n    //         // console.log(numerator,denominator,i)\n    //         numerator=numerator*curDenominator+curNumerator*exp*denominator\n    //         // console.log(numerator)\n    //         denominator*=curDenominator\n    //     }\n    //     // console.log(numerator,denominator)\n    // }\n    // console.log(numerator,denominator)\n    let gcd=getGCD(numerator,denominator)\n    return (numerator/gcd)+\"/\"+(denominator/gcd)\n    function getGCD(a,b){\n        a=Math.abs(a)\n        b=Math.abs(b)\n        let mod\n        while(a%b>0){\n            mod=a%b\n            a=b\n            b=mod\n        }\n        return b\n    }\n};"
  ],
  "titleSlug": "fraction-addition-and-subtraction",
  "content": "<p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href = \"https://en.wikipedia.org/wiki/Irreducible_fraction\">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2\"\r\n<b>Output:</b> \"0/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2+1/3\"\r\n<b>Output:</b> \"1/3\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>\"1/3-1/2\"\r\n<b>Output:</b> \"-1/6\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b>\"5/3+1/3\"\r\n<b>Output:</b> \"2/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li>\r\n<li>Each fraction (input and output) has format <code>±numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li>\r\n<li>The input only contains valid <b>irreducible fractions</b>, where the <b>numerator</b> and <b>denominator</b> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.</li> \r\n<li>The number of given fractions will be in the range [1,10].</li>\r\n<li>The numerator and denominator of the <b>final result</b> are guaranteed to be valid and in the range of 32-bit int.</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>给定一个表示分数加减运算表达式的字符串，你需要返回一个字符串形式的计算结果。&nbsp;这个结果应该是不可约分的分数，即<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\" target=\"_blank\">最简分数</a>。&nbsp;如果最终结果是一个整数，例如&nbsp;<code>2</code>，你需要将它转换成分数形式，其分母为&nbsp;<code>1</code>。所以在上述例子中, <code>2</code>&nbsp;应该被转换为&nbsp;<code>2/1</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;-1/2+1/2&quot;\n<strong>输出:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;-1/2+1/2+1/3&quot;\n<strong>输出:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;1/3-1/2&quot;\n<strong>输出:</strong> &quot;-1/6&quot;\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong>&quot;5/3+1/3&quot;\n<strong>输出:</strong> &quot;2/1&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入和输出字符串只包含&nbsp;<code>&#39;0&#39;</code> 到&nbsp;<code>&#39;9&#39;</code>&nbsp;的数字，以及&nbsp;<code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> 和&nbsp;<code>&#39;-&#39;</code>。&nbsp;</li>\n\t<li>输入和输出分数格式均为&nbsp;<code>&plusmn;分子/分母</code>。如果输入的第一个分数或者输出的分数是正数，则&nbsp;<code>&#39;+&#39;</code>&nbsp;会被省略掉。</li>\n\t<li>输入只包含合法的<strong>最简分数</strong>，每个分数的<strong>分子</strong>与<strong>分母</strong>的范围是&nbsp;&nbsp;[1,10]。&nbsp;如果分母是1，意味着这个分数实际上是一个整数。</li>\n\t<li>输入的分数个数范围是 [1,10]。</li>\n\t<li><strong>最终结果</strong>的分子与分母保证是 32 位整数范围内的有效整数。</li>\n</ol>\n"
}
