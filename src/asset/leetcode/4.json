{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMedianSortedArrays = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1, nums2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> x=nums1.length,y=nums2.length\n  <span class=\"hljs-keyword\">if</span>(x&gt;y){\n    <span class=\"hljs-keyword\">return</span> findMedianSortedArrays(nums2,nums1)\n  }\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=x\n  <span class=\"hljs-keyword\">while</span>(lo&lt;=hi){\n    <span class=\"hljs-comment\">// partition1表示nums1的分割点，分割为左右两边；</span>\n    <span class=\"hljs-comment\">// partition2表示nums2的分割点，分割为左右两边；</span>\n    <span class=\"hljs-comment\">// 分割后的数量上，nums1左+nums2左===nums1右+nums2右 (±[-1~1])</span>\n    <span class=\"hljs-keyword\">let</span> partition1=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> partition2=<span class=\"hljs-built_in\">Math</span>.floor((x+y+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>)-partition1\n    <span class=\"hljs-keyword\">let</span> left1=partition1===<span class=\"hljs-number\">0</span> ? -<span class=\"hljs-literal\">Infinity</span> : nums1[partition1<span class=\"hljs-number\">-1</span>],\n        left2=partition2===<span class=\"hljs-number\">0</span> ? -<span class=\"hljs-literal\">Infinity</span> : nums2[partition2<span class=\"hljs-number\">-1</span>]\n    \n    <span class=\"hljs-keyword\">let</span> right1=partition1===x ? <span class=\"hljs-literal\">Infinity</span> : nums1[partition1],\n        right2=partition2===y ? <span class=\"hljs-literal\">Infinity</span> : nums2[partition2]\n    <span class=\"hljs-comment\">// 最终目的是nums1左全部小于nums2右；nums2左全部小于nums1右</span>\n    <span class=\"hljs-keyword\">if</span>(left1 &lt;= right2 &amp;&amp; left2&lt;=right1){\n      <span class=\"hljs-keyword\">if</span>((x+y)%<span class=\"hljs-number\">2</span>===<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">Math</span>.max(left1,left2)+<span class=\"hljs-built_in\">Math</span>.min(right1,right2))/<span class=\"hljs-number\">2</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(left1,left2)\n      }\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(left1&gt;right2){\n      hi=partition1<span class=\"hljs-number\">-1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      lo=partition1+<span class=\"hljs-number\">1</span>\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "median-of-two-sorted-arrays",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>对于中位数，如果我们能将<strong>一半的小的数字</strong>放左边，<strong>另一半大的数字</strong>放右边，那么如果他们的数字总和为偶数，就是<code>(小堆的最大值+大堆的最小值)/2</code>；\n如果是奇数，那么就是<code>小堆的最大值</code>。</p>\n<p>因此，如何将它们分割成了问题的关键。</p>\n<p>我们先选择<code>nums1</code>的分割点<code>partition1</code>为<code>Math.floor((m+n)/2)</code>，这里<code>m</code>是<code>nums1.length</code>，<code>n</code>是<code>nums2.length</code>，由于两边的数量要平衡，\n因此对<code>nums2</code>的分割点<code>partition2</code>也可以确定，为<code>Math.floor((m+n+1)/2)-partition1</code>。</p>\n<p>因为是有序的，<code>nums</code>左侧一定小于右侧，因此需要检查分割后的<code>nums1</code>左边的最大值是否能小于等于<code>nums2</code>右边的最小值，并且<code>nums2</code>左边的最大值是否小于等于<code>nums1</code>右边的最小值；</p>\n<p>如果能达到这两个条件，说明分割是成功的，可以直接求出中位值；</p>\n<p>如果<code>nums1</code>左侧最大值大于<code>nums2</code>右侧最小值，说明<code>nums1</code>的分割点还需要左移；</p>\n<h2>如果<code>nums2</code>左侧的最大值大于<code>nums1</code>右侧最小值，说明<code>nums2</code>的分割点还需要左移，也就是<code>nums1</code>的分割点需要右移。</h2>\n",
  "content": "<p>给定两个大小为 m 和 n 的有序数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>。</p>\n\n<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为&nbsp;O(log(m + n))。</p>\n\n<p>你可以假设&nbsp;<code>nums1</code>&nbsp;和&nbsp;<code>nums2</code>&nbsp;不会同时为空。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>nums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>nums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n</pre>\n"
}
