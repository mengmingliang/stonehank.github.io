{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> decodeString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">0</span>,end=<span class=\"hljs-number\">0</span>,stack=[],temp=[],result=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i])){\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i<span class=\"hljs-number\">-1</span>])){\n                stack[stack.length<span class=\"hljs-number\">-1</span>]=stack[stack.length<span class=\"hljs-number\">-1</span>]*<span class=\"hljs-number\">10</span>+(+s[i])\n            }<span class=\"hljs-keyword\">else</span> stack.push(+s[i])\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"[\"</span>){\n            start++\n            temp[temp.length]=<span class=\"hljs-string\">''</span>\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"]\"</span>){\n    <span class=\"hljs-comment\">// console.log(temp)</span>\n            <span class=\"hljs-keyword\">let</span> t=temp.pop(),n=stack.pop()\n            <span class=\"hljs-keyword\">if</span>(temp.length===<span class=\"hljs-number\">0</span> || temp[temp.length<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-literal\">null</span>)result+=t.repeat(n)\n            <span class=\"hljs-keyword\">else</span> temp[temp.length<span class=\"hljs-number\">-1</span>]+=t.repeat(n)\n            <span class=\"hljs-comment\">// if(temp.length&gt;0)temp[temp.length-1]+=t.repeat(n)</span>\n            <span class=\"hljs-comment\">// else result+=t.repeat(n)</span>\n            <span class=\"hljs-comment\">// console.log(temp,t,n)</span>\n            end++\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(end&lt;start){\n            <span class=\"hljs-comment\">// console.log(temp,s[i])</span>\n            temp[temp.length<span class=\"hljs-number\">-1</span>]+=s[i]\n            <span class=\"hljs-comment\">// if(temp.length&gt;0)temp[temp.length-1]+=s[i]</span>\n            <span class=\"hljs-comment\">// else temp.push(s[i])</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            result+=s[i]\n        }\n        \n    }\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "decode-string",
  "content": "<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n\n<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p>\n\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\ns = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.\n</pre>\n"
}
