{
  "code": [
    "/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    let start=0,end=0,stack=[],temp=[],result=''\n    for(let i=0;i<s.length;i++){\n        if(/\\d/.test(s[i])){\n            if(/\\d/.test(s[i-1])){\n                stack[stack.length-1]=stack[stack.length-1]*10+(+s[i])\n            }else stack.push(+s[i])\n        }\n        else if(s[i]===\"[\"){\n            start++\n            temp[temp.length]=''\n        }\n        else if(s[i]===\"]\"){\n    // console.log(temp)\n            let t=temp.pop(),n=stack.pop()\n            if(temp.length===0 || temp[temp.length-1]==null)result+=t.repeat(n)\n            else temp[temp.length-1]+=t.repeat(n)\n            // if(temp.length>0)temp[temp.length-1]+=t.repeat(n)\n            // else result+=t.repeat(n)\n            // console.log(temp,t,n)\n            end++\n        }\n        else if(end<start){\n            // console.log(temp,s[i])\n            temp[temp.length-1]+=s[i]\n            // if(temp.length>0)temp[temp.length-1]+=s[i]\n            // else temp.push(s[i])\n        }else{\n            result+=s[i]\n        }\n        \n    }\n    return result\n};"
  ],
  "titleSlug": "decode-string",
  "content": "<p>\r\nGiven an encoded string, return it's decoded string.\r\n</p>\r\n<p>\r\nThe encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times. Note that <i>k</i> is guaranteed to be a positive integer.</p>\r\n\r\n<p>\r\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\r\n\r\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <i>k</i>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.\r\n</p>\r\n\r\n<p><b>Examples:</b>\r\n<pre>\r\ns = \"3[a]2[bc]\", return \"aaabcbc\".\r\ns = \"3[a2[c]]\", return \"accaccacc\".\r\ns = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n\n<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p>\n\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\ns = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.\n</pre>\n"
}
