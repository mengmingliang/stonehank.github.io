{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> decodeString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> decode(s)[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">decode</span>(<span class=\"hljs-params\">s</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>,str=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(;i&lt;s.length;i++){\n      <span class=\"hljs-comment\">// 将后面的内容递归处理</span>\n      <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"[\"</span>){\n        <span class=\"hljs-keyword\">let</span> [res,nxtId]=decode(s.substring(i+<span class=\"hljs-number\">1</span>))\n        str+=res.repeat(count)\n        count=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\">// 从下一个i接着开始</span>\n        i+=nxtId+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-comment\">// 直接跳出</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"]\"</span>){\n        <span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-comment\">// 遇到数字增加count</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i])){\n        count=count*<span class=\"hljs-number\">10</span>+(+s[i])\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-comment\">// 属于单个没有重复的，就直接添加到str</span>\n        str+=s[i]\n      }\n    }\n    <span class=\"hljs-comment\">// 返回str和当前i，因为避免重复执行</span>\n    <span class=\"hljs-keyword\">return</span> [str,i]\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "decode-string",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>典型的存在括号的递归问题，具体在代码中注释了。</p>\n",
  "content": "<p>给定一个经过编码的字符串，返回它解码后的字符串。</p>\n\n<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p>\n\n<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>\n\n<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\ns = &quot;3[a]2[bc]&quot;, 返回 &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, 返回 &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, 返回 &quot;abcabccdcdcdef&quot;.\n</pre>\n"
}
