{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} graph\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> eventualSafeNodes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">graph</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> safe=<span class=\"hljs-literal\">true</span>,res=[]\n  <span class=\"hljs-keyword\">let</span> cache=<span class=\"hljs-built_in\">Array</span>(graph.length).fill(<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;graph.length;i++){\n    dfs(i,[])\n    <span class=\"hljs-keyword\">if</span>(cache[i])res.push(i)\n  }\n  <span class=\"hljs-keyword\">return</span> res\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">v,marked</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(cache[v]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> cache[v]\n    marked[v]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> adj=graph[v],res=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;adj.length;i++){\n      <span class=\"hljs-keyword\">if</span>(marked[adj[i]])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(!dfs(adj[i],marked)){\n        res=<span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">break</span>\n      }\n    }\n    cache[v]=res\n    marked[v]=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> res\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-eventual-safe-states",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>可以将这题看成给每个节点上颜色的问题，</p>\n<p><code>0</code>表示这个节点还未访问\n<code>1</code>表示是一个安全节点\n<code>2</code>表示是一个非安全节点</p>\n<p>当遇到非<code>0</code>的节点，直接返回<code>color[i]===1</code>。</p>\n<p>遇到<code>0</code>节点，首先给它设置为<code>2</code>，然后遍历相邻节点，如果遍历的时候存在节点为<code>2</code>，要么就是已经确定是一个非安全节点，\n要么就是在遍历的时候重复访问了，都要返回<code>false</code>。</p>\n<p>如果相邻节点中没有节点为<code>2</code>，那么当前节点设置为<code>1</code>。</p>\n<hr>\n",
  "content": "<p>在有向图中, 我们从某个节点和每个转向处开始, 沿着图的有向边走。 如果我们到达的节点是终点 (即它没有连出的有向边), 我们停止。</p>\n\n<p>现在, 如果我们最后能走到终点，那么我们的起始节点是<em>最终安全</em>的。 更具体地说, 存在一个自然数 <code>K</code>,&nbsp; 无论选择从哪里开始行走, 我们走了不到 <code>K</code> 步后必能停止在一个终点。</p>\n\n<p>哪些节点最终是安全的？ 结果返回一个有序的数组。</p>\n\n<p>该有向图有 <code>N</code> 个节点，标签为 <code>0, 1, ..., N-1</code>, 其中 <code>N</code> 是&nbsp;<code>graph</code>&nbsp;的节点数.&nbsp; 图以以下的形式给出: <code>graph[i]</code> 是节点 <code>j</code> 的一个列表，满足 <code>(i, j)</code> 是图的一条有向边。</p>\n\n<pre>\n<strong>示例：</strong>\n<strong>输入：</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>输出：</strong>[2,4,5,6]\n这里是上图的示意图。\n\n</pre>\n\n<p><img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height:86px; width:300px\" /></p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>graph</code> 节点数不超过 <code>10000</code>.</li>\n\t<li>图的边数不会超过 <code>32000</code>.</li>\n\t<li>每个 <code>graph[i]</code> 被排序为不同的整数列表， 在区间 <code>[0, graph.length - 1]</code>&nbsp;中选取。</li>\n</ul>\n"
}
