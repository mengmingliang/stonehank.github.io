{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxProduct = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> aCode=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compute</span>(<span class=\"hljs-params\">word</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> val=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;word.length;i++){\n            val |= (<span class=\"hljs-number\">1</span> &lt;&lt; (word.charCodeAt(i)-aCode))\n        }\n        <span class=\"hljs-keyword\">return</span> val\n    }\n    <span class=\"hljs-keyword\">let</span> pretreate=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n        pretreate[i]=compute(words[i])\n    }\n    <span class=\"hljs-keyword\">let</span> maxSum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length<span class=\"hljs-number\">-1</span>;i++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;words.length;j++){\n            <span class=\"hljs-keyword\">let</span> len1=words[i].length,len2=words[j].length\n            <span class=\"hljs-keyword\">if</span>(len1*len2&gt;maxSum &amp;&amp; (pretreate[i] &amp; pretreate[j])===<span class=\"hljs-number\">0</span>){\n                 maxSum=len1*len2\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> maxSum\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-product-of-word-lengths",
  "content": "<p>给定一个字符串数组&nbsp;<code>words</code>，找到&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\n<strong>输出: </strong><code>16 \n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>&quot;abcw&quot;, &quot;xtfn&quot;</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\n<strong>输出: </strong><code>4 \n<strong>解释: </strong></code>这两个单词为 <code>&quot;ab&quot;, &quot;cd&quot;</code>。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\n<strong>输出: </strong><code>0 \n<strong>解释: </strong>不存在这样的两个单词。</code></pre>\n"
}
