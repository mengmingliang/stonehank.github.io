{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> ladderLength = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">beginWord, endWord, wordList</span>) </span>{\n  <span class=\"hljs-comment\">// bfs</span>\n  <span class=\"hljs-comment\">// if(!wordList.includes(endWord))return 0</span>\n  <span class=\"hljs-comment\">// wordList.push(beginWord)</span>\n  <span class=\"hljs-comment\">// let steps=Array(wordList.length).fill(Infinity)</span>\n  <span class=\"hljs-comment\">// let arr=[endWord],aux=[]</span>\n  <span class=\"hljs-comment\">// let stepCount=0</span>\n  <span class=\"hljs-comment\">// while(arr.length&gt;0){</span>\n  <span class=\"hljs-comment\">//   stepCount++</span>\n  <span class=\"hljs-comment\">//   for(let i=0;i&lt;arr.length;i++){</span>\n  <span class=\"hljs-comment\">//     let cur=arr[i]</span>\n  <span class=\"hljs-comment\">//     for(let j=0;j&lt;wordList.length;j++){</span>\n  <span class=\"hljs-comment\">//       if(cur===wordList[j])continue</span>\n  <span class=\"hljs-comment\">//       let res=checkSteps(cur,wordList[j])</span>\n  <span class=\"hljs-comment\">//       if(res &amp;&amp; steps[j]&gt;1){</span>\n  <span class=\"hljs-comment\">//         if(wordList[j]===beginWord)return stepCount+1</span>\n  <span class=\"hljs-comment\">//         aux.push(wordList[j])</span>\n  <span class=\"hljs-comment\">//         steps[j]=1</span>\n  <span class=\"hljs-comment\">//       }</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   arr=aux</span>\n  <span class=\"hljs-comment\">//   aux=[]</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return 0</span>\n  <span class=\"hljs-comment\">// function checkSteps(s1,s2){</span>\n  <span class=\"hljs-comment\">//   let diff=0</span>\n  <span class=\"hljs-comment\">//   for(let i=0;i&lt;s1.length;i++){</span>\n  <span class=\"hljs-comment\">//     if(s1[i]!==s2[i])diff++</span>\n  <span class=\"hljs-comment\">//     if(diff&gt;1)return false</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   return true</span>\n  <span class=\"hljs-comment\">// }</span>\n  \n  <span class=\"hljs-comment\">// bfs2</span>\n  <span class=\"hljs-keyword\">let</span> hash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> word <span class=\"hljs-keyword\">of</span> wordList)hash.set(word,<span class=\"hljs-literal\">true</span>)\n  <span class=\"hljs-keyword\">if</span>(!hash.has(endWord))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> arr=[beginWord]\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    step++\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> cur=arr.shift()\n      <span class=\"hljs-keyword\">let</span> newStr=<span class=\"hljs-string\">''</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;cur.length;j++){\n        <span class=\"hljs-keyword\">let</span> l=cur.substring(<span class=\"hljs-number\">0</span>,j),r=cur.substring(j+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;<span class=\"hljs-number\">26</span>;k++){\n          newStr=l+<span class=\"hljs-built_in\">String</span>.fromCharCode(k+<span class=\"hljs-number\">97</span>)+r\n          <span class=\"hljs-keyword\">if</span>(hash.has(newStr)){\n            <span class=\"hljs-keyword\">if</span>(newStr===endWord)<span class=\"hljs-keyword\">return</span> step+<span class=\"hljs-number\">1</span>\n            arr.push(newStr)\n            hash.delete(newStr)\n          }\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "word-ladder",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>BFS</code>。</p>\n<p>思路一：</p>\n<p>首先将<code>startWord</code>添加到<code>arr</code>中，对<code>arr</code>内部的每个字符串，从<code>wordList</code>找出与它只相差<code>1</code>个字母的字符串，添加到<code>arr</code>中。</p>\n<p>思路二：</p>\n<p>同样将<code>startWord</code>添加到<code>arr</code>中，对<code>arr</code>内部的每个字符串的每个字母，不断替换它为另外的其他<code>25</code>个字母，\n然后查看<code>hash</code>(wordList)中是否存在，如果存在，添加到<code>arr</code>并且删除当前字符串的<code>hash</code>，因为不需要再次使用。</p>\n<p>注意：</p>\n<p><code>思路一</code>的缺陷就是如果<code>wordList</code>过大，相对的每次查找相差<code>1</code>字母的时间也同样增加；</p>\n<p><code>思路二</code>不需要考虑<code>wordList</code>的长度，但它的缺陷在于每一个字符都要替换<code>26</code>次，因此如果每一个字符串的长度过长，同样会出现性能问题。</p>\n<hr>\n",
  "content": "<p>给定两个单词（<em>beginWord&nbsp;</em>和 <em>endWord</em>）和一个字典，找到从&nbsp;<em>beginWord</em> 到&nbsp;<em>endWord</em> 的最短转换序列的长度。转换需遵循如下规则：</p>\n\n<ol>\n\t<li>每次转换只能改变一个字母。</li>\n\t<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>如果不存在这样的转换序列，返回 0。</li>\n\t<li>所有单词具有相同的长度。</li>\n\t<li>所有单词只由小写字母组成。</li>\n\t<li>字典中不存在重复的单词。</li>\n\t<li>你可以假设 <em>beginWord</em> 和 <em>endWord </em>是非空的，且二者不相同。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>输出: </strong>5\n\n<strong>解释: </strong>一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,\n     返回它的长度 5。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>输出:</strong>&nbsp;0\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; 不在字典中，所以无法进行转换。</pre>\n"
}
