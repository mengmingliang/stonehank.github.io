{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} t\n * @return {string}\n */\nvar tree2str = function(t) {\n    function pre(node){\n        if(!node)return ''\n        let leftS,rightS\n        if(node.left)leftS= pre(node.left)\n        if(node.right)rightS= pre(node.right)   \n        if(!leftS && rightS){\n            return node.val+\"()\"+\"(\"+rightS+\")\"       \n        }else {\n            return node.val+(leftS?\"(\"+leftS+\")\":'')+(rightS?\"(\"+rightS+\")\":'')\n        }\n    }\n    return pre(t)\n};"
  ],
  "titleSlug": "construct-string-from-binary-tree",
  "content": "<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\r\n\r\n<p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\n<b>Output:</b> \"1(2(4))(3)\"\r\n<br/><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br/>but you need to omit all the unnecessary empty parenthesis pairs. <br/>And it will be \"1(2(4))(3)\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\n<b>Output:</b> \"1(2()(4))(3)\"\r\n<br/><b>Explanation:</b> Almost the same as the first example, <br/>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n</pre>\r\n</p>",
  "translatedContent": "<p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p>\n\n<p>空节点则用一对空括号 &quot;()&quot; 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉树: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>输出:</strong> &quot;1(2(4))(3)&quot;\n\n<strong>解释:</strong> 原本将是&ldquo;1(2(4)())(3())&rdquo;，\n在你省略所有不必要的空括号对之后，\n它将是&ldquo;1(2(4))(3)&rdquo;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉树: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>输出:</strong> &quot;1(2()(4))(3)&quot;\n\n<strong>解释:</strong> 和第一个示例相似，\n除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。\n</pre>\n"
}
