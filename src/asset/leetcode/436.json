{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for an interval.\n * function Interval(start, end) {\n *     this.start = start;\n *     this.end = end;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Interval[]} intervals\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findRightInterval = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">intervals</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> startArrs=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;intervals.length;i++){\n    startArrs.push([intervals[i].start,i])\n  }\n  startArrs.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">binarySearch</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(n&gt;arr[arr.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid][<span class=\"hljs-number\">0</span>]&gt;=n)hi=mid\n      <span class=\"hljs-keyword\">else</span> lo=mid+<span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-keyword\">return</span> arr[lo][<span class=\"hljs-number\">1</span>]\n  }\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-comment\">// console.log(startArrs)</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;intervals.length;i++){\n    <span class=\"hljs-keyword\">let</span> po=binarySearch(startArrs,intervals[i].end)\n    <span class=\"hljs-comment\">// console.log(intervals[i].end,po,startArrs[po])</span>\n    result.push(po)\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-right-interval",
  "hasThinking": false,
  "content": "<p>给定一组区间，对于每一个区间 i，检查是否存在一个区间 j，它的起始点大于或等于区间&nbsp;i 的终点，这可以称为 j 在 i 的&ldquo;右侧&rdquo;。</p>\n\n<p>对于任何区间，你需要存储的满足条件的区间&nbsp;j 的最小索引，这意味着区间 j 有最小的起始点可以使其成为&ldquo;右侧&rdquo;区间。如果区间&nbsp;j 不存在，则将区间 i 存储为 -1。最后，你需要输出一个值为存储的区间值的数组。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设区间的终点总是大于它的起始点。</li>\n\t<li>你可以假定这些区间都不具有相同的起始点。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,2] ]\n<strong>输出:</strong> [-1]\n\n<strong>解释:</strong>集合中只有一个区间，所以输出-1。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [3,4], [2,3], [1,2] ]\n<strong>输出:</strong> [-1, 0, 1]\n\n<strong>解释:</strong>对于[3,4]，没有满足条件的&ldquo;右侧&rdquo;区间。\n对于[2,3]，区间[3,4]具有最小的&ldquo;右&rdquo;起点;\n对于[1,2]，区间[2,3]具有最小的&ldquo;右&rdquo;起点。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [ [1,4], [2,3], [3,4] ]\n<strong>输出:</strong> [-1, 2, -1]\n\n<strong>解释:对于</strong>区间[1,4]和[3,4]，没有满足条件的&ldquo;右侧&rdquo;区间。\n对于[2,3]，区间[3,4]有最小的&ldquo;右&rdquo;起点。\n</pre>\n"
}
