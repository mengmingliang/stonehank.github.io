{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxSumSubmatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (matrix.length===<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> row=matrix.length,col=matrix[<span class=\"hljs-number\">0</span>].length,res=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-number\">0</span>;left&lt;col;left++){\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-built_in\">Array</span>(row).fill(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> right=left;right&lt;col;right++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> r=<span class=\"hljs-number\">0</span>;r&lt;row;r++){\n        sum[r]+=matrix[r][right]\n      }\n      <span class=\"hljs-keyword\">let</span> curSums=[<span class=\"hljs-number\">0</span>]\n      <span class=\"hljs-keyword\">let</span> curMax=-<span class=\"hljs-literal\">Infinity</span>, cum=<span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> sum){\n        cum+=s;\n        <span class=\"hljs-keyword\">if</span>(cum===target)<span class=\"hljs-keyword\">return</span> target\n        <span class=\"hljs-keyword\">let</span> tar=cum-target\n          <span class=\"hljs-comment\">// search</span>\n          <span class=\"hljs-keyword\">if</span>(curSums[curSums.length<span class=\"hljs-number\">-1</span>]&gt;=tar){\n            <span class=\"hljs-keyword\">let</span> idx=bsEnd(curSums,tar)\n            curMax=<span class=\"hljs-built_in\">Math</span>.max(curMax,cum-curSums[idx]);\n          }\n          <span class=\"hljs-comment\">// insert 成为一个升序数组</span>\n          <span class=\"hljs-keyword\">if</span>(curSums[curSums.length<span class=\"hljs-number\">-1</span>]&lt;cum){\n            curSums.push(cum)\n          }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">let</span> insertIdx=bsEnd(curSums,cum)\n            curSums.splice(insertIdx,<span class=\"hljs-number\">0</span>,cum) \n          }\n      }\n      res=<span class=\"hljs-built_in\">Math</span>.max(res,curMax);      \n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n  <span class=\"hljs-keyword\">return</span> res;\n};\n</code></pre>\n"
  ],
  "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
  "content": "<p>给定一个非空二维矩阵&nbsp;<em>matrix&nbsp;</em>和一个整数<em> k</em>，找到这个矩阵内部不大于 <em>k</em> 的最大矩形和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong>matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>输出: </strong>2 \n<strong>解释:</strong>&nbsp;矩形区域&nbsp;<code>[[0, 1], [-2, 3]]</code>&nbsp;的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li>矩阵内的矩形区域面积必须大于 0。</li>\n\t<li>如果行数远大于列数，你将如何解答呢？</li>\n</ol>\n"
}
