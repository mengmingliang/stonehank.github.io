{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> averageOfLevels = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> res=[],arr=[root]\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length,sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> node=arr.shift()\n      sum+=node.val\n      <span class=\"hljs-keyword\">if</span>(node.left)arr.push(node.left)\n      <span class=\"hljs-keyword\">if</span>(node.right)arr.push(node.right)\n    }\n    res.push(sum/len)\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "average-of-levels-in-binary-tree",
  "hasThinking": false,
  "content": "<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>输出:</strong> [3, 14.5, 11]\n<strong>解释:</strong>\n第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>节点值的范围在32位有符号整数范围内。</li>\n</ol>\n"
}
