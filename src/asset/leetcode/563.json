{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findTilt = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getSum</span>(<span class=\"hljs-params\">node</span>)</span>{       \n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> node.sum=getSum(node.left)+getSum(node.right)+node.val\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTilt</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(node.left)getTilt(node.left)\n        <span class=\"hljs-keyword\">if</span>(node.right)getTilt(node.right)\n        sum+=<span class=\"hljs-built_in\">Math</span>.abs((node.left?node.left.sum:<span class=\"hljs-number\">0</span>)-(node.right?node.right.sum:<span class=\"hljs-number\">0</span>))\n    }\n    getSum(root)\n    getTilt(root)\n    <span class=\"hljs-keyword\">return</span> sum\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-tilt",
  "content": "<p>给定一个二叉树，计算<strong>整个树</strong>的坡度。</p>\n\n<p>一个树的<strong>节点的坡度</strong>定义即为，该节点左子树的结点之和和右子树结点之和的<strong>差的绝对值</strong>。空结点的的坡度是0。</p>\n\n<p><strong>整个树</strong>的坡度就是其所有节点的坡度之和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n         1\n       /   \\\n      2     3\n<strong>输出:</strong> 1\n<strong>解释:</strong> \n结点的坡度 2 : 0\n结点的坡度 3 : 0\n结点的坡度 1 : |2-3| = 1\n树的坡度 : 0 + 0 + 1 = 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>任何子树的结点的和不会超过32位整数的范围。</li>\n\t<li>坡度的值不会超过32位整数的范围。</li>\n</ol>\n"
}
