{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} forest\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> cutOffTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">forest</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> targets=[],used=[]\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>]]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;forest.length;i++){\n    used[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;forest[i].length;j++){\n      <span class=\"hljs-keyword\">if</span>(forest[i][j]&gt;<span class=\"hljs-number\">1</span>)targets.push([i,j,forest[i][j]])\n      used[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  \n  targets.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>b[<span class=\"hljs-number\">2</span>]-a[<span class=\"hljs-number\">2</span>])\n  <span class=\"hljs-keyword\">if</span>(targets[targets.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]===<span class=\"hljs-number\">0</span> &amp;&amp;  targets[targets.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]===<span class=\"hljs-number\">0</span>){\n    targets.pop()\n  }\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>,start=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> uniqueIdx=<span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">while</span>(targets.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> [x,y,height]=targets.pop()\n    <span class=\"hljs-keyword\">let</span> target=[x,y]\n    uniqueIdx++\n    used[start[<span class=\"hljs-number\">0</span>]][start[<span class=\"hljs-number\">1</span>]]=uniqueIdx\n    <span class=\"hljs-keyword\">if</span>(!bfs(start,target))<span class=\"hljs-keyword\">return</span><span class=\"hljs-number\">-1</span>\n    start=target\n  }\n  <span class=\"hljs-keyword\">return</span> step\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bfs</span>(<span class=\"hljs-params\">from,to</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-keyword\">from</span>],aux=[]\n    <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">let</span> len=arr.length\n      step++\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n        <span class=\"hljs-keyword\">let</span> [cX,cY]=arr[i]\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dX,dY] <span class=\"hljs-keyword\">of</span> moves){\n          <span class=\"hljs-keyword\">let</span> newX=cX+dX,newY=cY+dY\n          <span class=\"hljs-keyword\">if</span>(newX===to[<span class=\"hljs-number\">0</span>] &amp;&amp; newY===to[<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-keyword\">if</span>(newX&lt;forest.length &amp;&amp; newX&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; newY&lt;forest[<span class=\"hljs-number\">0</span>].length &amp;&amp; newY&gt;=<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">if</span>(used[newX][newY]===uniqueIdx)<span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span>(forest[newX][newY]!==<span class=\"hljs-number\">0</span>){\n              aux.push([newX,newY])\n              used[newX][newY]=uniqueIdx\n            }\n          }\n        }\n      }\n      arr=aux\n      aux=[]\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "cut-off-trees-for-golf-event",
  "content": "<p>你被请来给一个要举办高尔夫比赛的树林砍树. 树林由一个非负的二维数组表示， 在这个数组中：</p>\n\n<ol>\n\t<li><code>0</code> 表示障碍，无法触碰到.</li>\n\t<li><code>1</code>&nbsp;表示可以行走的地面.</li>\n\t<li><code>比1大的数</code>&nbsp;表示一颗允许走过的树的高度.</li>\n</ol>\n\n<p>你被要求按照树的高度从低向高砍掉所有的树，每砍过一颗树，树的高度变为1。</p>\n\n<p>你将从（0，0）点开始工作，你应该返回你砍完所有树需要走的最小步数。 如果你无法砍完所有的树，返回 -1 。</p>\n\n<p>可以保证的是，没有两棵树的高度是相同的，并且至少有一颗树需要你砍。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [1,2,3],\n [0,0,4],\n [7,6,5]\n]\n<strong>输出:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [1,2,3],\n [0,0,0],\n [7,6,5]\n]\n<strong>输出:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n[\n [2,3,4],\n [0,0,5],\n [8,7,6]\n]\n<strong>输出:</strong> 6\n\n<strong>解释:</strong> (0,0) 位置的树，你可以直接砍去，不用算步数\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示</strong>: 矩阵大小不会超过 50x50 。</p>\n"
}
