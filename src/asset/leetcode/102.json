{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    if(!root)return []\n    let result=[]\n    let arr=[root]\n    function bfs(arr){\n        let aux=[]\n        while(arr.length>0){\n            let val=[]\n            for(let i=0;i<arr.length;i++){\n                val.push(arr[i].val)\n                if(arr[i].left)aux.push(arr[i].left)\n                if(arr[i].right)aux.push(arr[i].right)\n            }\n            result.push(val)\n            arr=aux\n            aux=[]\n        }\n    }\n    bfs(arr)\n    return result\n};"
  ],
  "titleSlug": "binary-tree-level-order-traversal",
  "content": "<p>Given a binary tree, return the <i>level order</i> traversal of its nodes' values. (ie, from left to right, level by level).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its level order traversal as:<br />\r\n<pre>\r\n[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n\n<p>例如:<br>\n给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其层次遍历结果：</p>\n\n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n"
}
