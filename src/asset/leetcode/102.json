{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> levelOrder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n    <span class=\"hljs-keyword\">let</span> result=[]\n    <span class=\"hljs-keyword\">let</span> arr=[root]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bfs</span>(<span class=\"hljs-params\">arr</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> aux=[]\n        <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">let</span> val=[]\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n                val.push(arr[i].val)\n                <span class=\"hljs-keyword\">if</span>(arr[i].left)aux.push(arr[i].left)\n                <span class=\"hljs-keyword\">if</span>(arr[i].right)aux.push(arr[i].right)\n            }\n            result.push(val)\n            arr=aux\n            aux=[]\n        }\n    }\n    bfs(arr)\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-level-order-traversal",
  "translatedContent": "<p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n\n<p>例如:<br>\n给定二叉树:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其层次遍历结果：</p>\n\n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n"
}
