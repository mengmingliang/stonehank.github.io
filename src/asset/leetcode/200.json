{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numIslands = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span>(grid.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> res\n  <span class=\"hljs-keyword\">let</span> m=grid.length,n=grid[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">if</span>(grid[i][j]===<span class=\"hljs-string\">\"2\"</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(grid[i][j]!==<span class=\"hljs-string\">\"1\"</span>)<span class=\"hljs-keyword\">continue</span>\n      res++\n      dfs([i,j])\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    grid[x][y]=<span class=\"hljs-string\">\"2\"</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n      <span class=\"hljs-keyword\">let</span> nx=dx+x,ny=dy+y\n      <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || ny&lt;<span class=\"hljs-number\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(grid[nx][ny]!==<span class=\"hljs-string\">\"1\"</span>)<span class=\"hljs-keyword\">continue</span>\n      dfs([nx,ny])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-islands",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>dfs</code>遍历，将所有连接的<code>1</code>都改为<code>2</code>(或者使用<code>visited</code>记录)，每次找到新没有被visit的<code>1</code>，<code>res++</code>。</p>\n",
  "content": "<p>给定一个由&nbsp;<code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n11110\n11010\n11000\n00000\n\n<strong>输出:</strong>&nbsp;1\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n11000\n11000\n00100\n00011\n\n<strong>输出: </strong>3\n</pre>\n"
}
