{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} path\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> simplifyPath = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">path</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">let</span> p=path.split(<span class=\"hljs-string\">'/'</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> p){\n    <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">'..'</span>){\n      <span class=\"hljs-keyword\">if</span>(stack.length&gt;<span class=\"hljs-number\">0</span>)stack.pop()\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s!==<span class=\"hljs-string\">'.'</span> &amp;&amp; s!==<span class=\"hljs-string\">''</span>){\n      stack.push(s)\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> result=stack.join(<span class=\"hljs-string\">'/'</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'/'</span>+result\n};\n</code></pre>\n"
  ],
  "titleSlug": "simplify-path",
  "hasThinking": false,
  "content": "<p>以 Unix 风格给出一个文件的<strong>绝对路径</strong>，你需要简化它。或者换句话说，将其转换为规范路径。</p>\n\n<p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>）&nbsp;表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：<a href=\"https://blog.csdn.net/u011327334/article/details/50355600\" target=\"_blank\">Linux / Unix中的绝对路径 vs 相对路径</a></p>\n\n<p>请注意，返回的规范路径必须始终以斜杠 <code>/</code> 开头，并且两个目录名之间必须只有一个斜杠 <code>/</code>。最后一个目录名（如果存在）<strong>不能</strong>以 <code>/</code> 结尾。此外，规范路径必须是表示绝对路径的<strong>最短</strong>字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/home/&quot;\n<strong>输出：&quot;</strong>/home&quot;\n<strong>解释：</strong>注意，最后一个目录名后面没有斜杠。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/../&quot;\n<strong>输出：&quot;</strong>/&quot;\n<strong>解释：</strong>从根目录向上一级是不可行的，因为根是你可以到达的最高级。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/home//foo/&quot;\n<strong>输出：&quot;</strong>/home/foo&quot;\n<strong>解释：</strong>在规范路径中，多个连续斜杠需要用一个斜杠替换。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/a/./b/../../c/&quot;\n<strong>输出：&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/a/../../b/../c//.//&quot;\n<strong>输出：&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>示例 6：</strong></p>\n\n<pre><strong>输入：&quot;</strong>/a//b////c/d//././/..&quot;\n<strong>输出：&quot;</strong>/a/b/c&quot;</pre>\n"
}
