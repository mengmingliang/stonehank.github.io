{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {Node}\n */</span>\n<span class=\"hljs-keyword\">var</span> construct = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBol</span>(<span class=\"hljs-params\">xs,xe,ys,ye</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> Node()\n    <span class=\"hljs-keyword\">if</span>(xs===xe &amp;&amp; ys===ye){\n      root.isLeaf=<span class=\"hljs-literal\">true</span>\n      root.val=grid[ye][xe]\n      <span class=\"hljs-keyword\">return</span> root\n    }\n    <span class=\"hljs-keyword\">let</span> halfX=<span class=\"hljs-built_in\">Math</span>.floor((xe-xs)/<span class=\"hljs-number\">2</span>),\n        halfY=<span class=\"hljs-built_in\">Math</span>.floor((ye-ys)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> topLeft=getBol(xs,xs+halfX,ys,ys+halfY)\n    <span class=\"hljs-keyword\">let</span> topRight=getBol(xs+halfX+<span class=\"hljs-number\">1</span>,xe,ys,ys+halfY)\n    <span class=\"hljs-keyword\">let</span> bottomLeft=getBol(xs,xs+halfX,ys+halfY+<span class=\"hljs-number\">1</span>,ye)\n    <span class=\"hljs-keyword\">let</span> bottomRight=getBol(xs+halfX+<span class=\"hljs-number\">1</span>,xe,ys+halfY+<span class=\"hljs-number\">1</span>,ye)\n    <span class=\"hljs-keyword\">if</span>((topLeft.val===<span class=\"hljs-number\">1</span> &amp;&amp; topRight.val===<span class=\"hljs-number\">1</span> &amp;&amp; bottomLeft.val===<span class=\"hljs-number\">1</span> &amp;&amp; bottomRight.val===<span class=\"hljs-number\">1</span>) || \n       (topLeft.val===<span class=\"hljs-number\">0</span> &amp;&amp; topRight.val===<span class=\"hljs-number\">0</span> &amp;&amp; bottomLeft.val===<span class=\"hljs-number\">0</span> &amp;&amp; bottomRight.val===<span class=\"hljs-number\">0</span>)){\n      root.val=topLeft.val\n      root.isLeaf=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">return</span> root\n    }<span class=\"hljs-keyword\">else</span>{\n      root.val=<span class=\"hljs-string\">'*'</span>\n      root.isLeaf=<span class=\"hljs-literal\">false</span>\n      root.topLeft=topLeft\n      root.topRight=topRight\n      root.bottomLeft=bottomLeft\n      root.bottomRight=bottomRight\n    }\n    <span class=\"hljs-keyword\">return</span> root\n  }\n  <span class=\"hljs-keyword\">return</span> getBol(<span class=\"hljs-number\">0</span>,grid.length<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,grid[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "construct-quad-tree",
  "hasThinking": false,
  "content": "<p>我们想要使用一棵四叉树来储存一个&nbsp;<code>N x N</code> 的布尔值网络。网络中每一格的值只会是真或假。树的根结点代表整个网络。对于每个结点, 它将被分等成四个孩子结点<strong>直到这个区域内的值都是相同的.</strong></p>\n\n<p>每个结点还有另外两个布尔变量:&nbsp;<code>isLeaf</code> 和&nbsp;<code>val</code>。<code>isLeaf</code> 当这个节点是一个叶子结点时为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>你的任务是使用一个四叉树表示给定的网络。下面的例子将有助于你理解这个问题：</p>\n\n<p>给定下面这个<code>8 x 8</code>&nbsp;网络，我们将这样建立一个对应的四叉树：</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png\" style=\"height:27%; width:27%\" /></p>\n\n<p>由上文的定义，它能被这样分割：</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png\" style=\"height:100%; width:100%\" /></p>\n\n<p>&nbsp;</p>\n\n<p>对应的四叉树应该像下面这样，每个结点由一对&nbsp;<code>(isLeaf, val)</code>&nbsp;所代表.</p>\n\n<p>对于非叶子结点，<code>val</code>&nbsp;可以是任意的，所以使用&nbsp;<code>*</code>&nbsp;代替。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png\" style=\"height:100%; width:100%\" /></p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;将小于&nbsp;<code>1000</code>&nbsp;且确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n</ol>\n"
}
