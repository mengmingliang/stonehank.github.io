{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> leafSimilar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root1, root2</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root1 &amp;&amp; !root2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(!root1 || !root2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> res1=[],res2=[]\n  res1.push(root1)\n  res2.push(root2)\n  \n  <span class=\"hljs-keyword\">while</span>(res1.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; res2.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">if</span>(dfsCompare(res1)!==dfsCompare(res2))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> res1.length===<span class=\"hljs-number\">0</span> &amp;&amp; res2.length===<span class=\"hljs-number\">0</span>\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfsCompare</span>(<span class=\"hljs-params\">res</span>)</span>{\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>){\n      <span class=\"hljs-keyword\">let</span> node=res.pop()\n      <span class=\"hljs-keyword\">if</span>(node.left)res.push(node.left)\n      <span class=\"hljs-keyword\">if</span>(node.right)res.push(node.right)\n      <span class=\"hljs-keyword\">if</span>(!node.left &amp;&amp; !node.right)<span class=\"hljs-keyword\">return</span> node.val\n    }\n  }\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "leaf-similar-trees",
  "hasThinking": false,
  "content": "<p>请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个&nbsp;<em>叶值序列</em> 。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 240px; width: 300px;\"></p>\n\n<p>举个例子，如上图所示，给定一颗叶值序列为&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;的树。</p>\n\n<p>如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是&nbsp;<em>叶相似&nbsp;</em>的。</p>\n\n<p>如果给定的两个头结点分别为&nbsp;<code>root1</code> 和&nbsp;<code>root2</code>&nbsp;的树是叶相似的，则返回&nbsp;<code>true</code>；否则返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>给定的两颗树可能会有&nbsp;<code>1</code>&nbsp;到&nbsp;<code>100</code>&nbsp;个结点。</li>\n</ul>\n"
}
