{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numSquares = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-comment\">// BFS</span>\n  \n    <span class=\"hljs-comment\">// let floor=Math.floor(Math.sqrt(n))</span>\n    <span class=\"hljs-comment\">// let nums=[]</span>\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;floor;i++){</span>\n    <span class=\"hljs-comment\">//     nums[i]=Math.pow((i+1),2)</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// let res=0,aux=[]</span>\n    <span class=\"hljs-comment\">// let targets=[n]</span>\n    <span class=\"hljs-comment\">// while(targets.length&gt;0){</span>\n    <span class=\"hljs-comment\">//     res++</span>\n    <span class=\"hljs-comment\">//     for(let i=0;i&lt;targets.length;i++){</span>\n    <span class=\"hljs-comment\">//         for(let j=0;j&lt;nums.length;j++){</span>\n    <span class=\"hljs-comment\">//             if(targets[i]-nums[j]&lt;0)break</span>\n    <span class=\"hljs-comment\">//             if(targets[i]-nums[j]===0)return res</span>\n    <span class=\"hljs-comment\">//             aux.push(targets[i]-nums[j])</span>\n    <span class=\"hljs-comment\">//         }</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">//     targets=aux</span>\n    <span class=\"hljs-comment\">//     aux=[]</span>\n    <span class=\"hljs-comment\">// }</span>\n  \n  <span class=\"hljs-comment\">// DP</span>\n  \n  <span class=\"hljs-keyword\">let</span> dp=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],sqrt=<span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">4</span>;i&lt;=n;i++){\n    <span class=\"hljs-keyword\">if</span>(sqrt*sqrt===i){\n      dp[i]=<span class=\"hljs-number\">1</span>\n      sqrt++\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;sqrt;j++){\n        <span class=\"hljs-keyword\">if</span>(dp[i-j*j]&lt;min)min=dp[i-j*j]\n      }\n      dp[i]=min+<span class=\"hljs-number\">1</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[n]\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "perfect-squares",
  "content": "<p>给定正整数&nbsp;<em>n</em>，找到若干个完全平方数（比如&nbsp;<code>1, 4, 9, 16, ...</code>）使得它们的和等于<em> n</em>。你需要让组成和的完全平方数的个数最少。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <em>n</em> = <code>12</code>\n<strong>输出:</strong> 3 \n<strong>解释: </strong><code>12 = 4 + 4 + 4.</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <em>n</em> = <code>13</code>\n<strong>输出:</strong> 2\n<strong>解释: </strong><code>13 = 4 + 9.</code></pre>\n"
}
