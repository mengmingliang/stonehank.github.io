{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MagicDictionary = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.dictArr=[]\n    <span class=\"hljs-keyword\">this</span>.check=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">os,ms</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;os.length;i++){\n            <span class=\"hljs-keyword\">if</span>(os[i]!==ms[i]){\n                <span class=\"hljs-keyword\">if</span>(count===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n                <span class=\"hljs-keyword\">else</span> count++\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * Build a dictionary through a list of words \n * @param {string[]} dict\n * @return {void}\n */</span>\nMagicDictionary.prototype.buildDict = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">dict</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.dictArr=dict\n};\n\n<span class=\"hljs-comment\">/**\n * Returns if there is any word in the trie that equals to the given word after modifying exactly one character \n * @param {string} word\n * @return {boolean}\n */</span>\nMagicDictionary.prototype.search = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">this</span>.dictArr.length;i++){\n        <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-keyword\">this</span>.dictArr[i]\n        <span class=\"hljs-keyword\">if</span>(cur.length!==word.length || cur===word)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.check(cur,word))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n\n<span class=\"hljs-comment\">/** \n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = Object.create(MagicDictionary).createNew()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "implement-magic-dictionary",
  "translatedContent": "<p>实现一个带有<code>buildDict</code>, 以及&nbsp;<code>search</code>方法的魔法字典。</p>\n\n<p>对于<code>buildDict</code>方法，你将被给定一串不重复的单词来构建一个字典。</p>\n\n<p>对于<code>search</code>方法，你将被给定一个单词，并且判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设所有输入都是小写字母&nbsp;<code>a-z</code>。</li>\n\t<li>为了便于竞赛，测试所用的数据量很小。你可以在竞赛结束后，考虑更高效的算法。</li>\n\t<li>请记住<strong>重置</strong>MagicDictionary类中声明的类变量，因为静态/类变量会在多个测试用例中保留。 请参阅<a href=\"http://leetcode.com/faq/#different-output\">这里</a>了解更多详情。</li>\n</ol>\n"
}
