{
  "code": [
    "/**\n * Initialize your data structure here.\n */\nvar MagicDictionary = function() {\n    this.dictArr=[]\n    this.check=function(os,ms){\n        let count=0\n        for(let i=0;i<os.length;i++){\n            if(os[i]!==ms[i]){\n                if(count===1)return false\n                else count++\n            }\n        }\n        return true\n    }\n};\n\n/**\n * Build a dictionary through a list of words \n * @param {string[]} dict\n * @return {void}\n */\nMagicDictionary.prototype.buildDict = function(dict) {\n    this.dictArr=dict\n};\n\n/**\n * Returns if there is any word in the trie that equals to the given word after modifying exactly one character \n * @param {string} word\n * @return {boolean}\n */\nMagicDictionary.prototype.search = function(word) {\n    for(let i=0;i<this.dictArr.length;i++){\n        let cur=this.dictArr[i]\n        if(cur.length!==word.length || cur===word)continue\n        if(this.check(cur,word))return true\n    }\n    return false\n};\n\n/** \n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = Object.create(MagicDictionary).createNew()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)\n */"
  ],
  "titleSlug": "implement-magic-dictionary",
  "content": "<p>\r\nImplement a magic directory with <code>buildDict</code>, and <code>search</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>buildDict</code>, you'll be given a list of non-repetitive words to build a dictionary.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>search</code>, you'll be given a word, and judge whether if you modify <b>exactly</b> one character into <b>another</b> character in this word, the modified word is in the dictionary you just built.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: buildDict([\"hello\", \"leetcode\"]), Output: Null\r\nInput: search(\"hello\"), Output: False\r\nInput: search(\"hhllo\"), Output: True\r\nInput: search(\"hell\"), Output: False\r\nInput: search(\"leetcoded\"), Output: False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that all the inputs are consist of lowercase letters <code>a-z</code>.</li>\r\n<li>For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.</li>\r\n<li>Please remember to <b>RESET</b> your class variables declared in class MagicDictionary, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>实现一个带有<code>buildDict</code>, 以及&nbsp;<code>search</code>方法的魔法字典。</p>\n\n<p>对于<code>buildDict</code>方法，你将被给定一串不重复的单词来构建一个字典。</p>\n\n<p>对于<code>search</code>方法，你将被给定一个单词，并且判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>你可以假设所有输入都是小写字母&nbsp;<code>a-z</code>。</li>\n\t<li>为了便于竞赛，测试所用的数据量很小。你可以在竞赛结束后，考虑更高效的算法。</li>\n\t<li>请记住<strong>重置</strong>MagicDictionary类中声明的类变量，因为静态/类变量会在多个测试用例中保留。 请参阅<a href=\"http://leetcode.com/faq/#different-output\">这里</a>了解更多详情。</li>\n</ol>\n"
}
