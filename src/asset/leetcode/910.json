{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> smallestRangeII = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, K</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> adds=<span class=\"hljs-built_in\">Array</span>(A.length).fill().map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>A[i]+K)\n  adds.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-keyword\">let</span> max=adds[adds.length<span class=\"hljs-number\">-1</span>],min=adds[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> minGap=max-min, endNum=max<span class=\"hljs-number\">-2</span>*K\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=adds.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">1</span>;i--){\n    <span class=\"hljs-keyword\">if</span>(endNum&gt;=max)<span class=\"hljs-keyword\">return</span> minGap\n    min=<span class=\"hljs-built_in\">Math</span>.min(min,max<span class=\"hljs-number\">-2</span>*K)\n    max=<span class=\"hljs-built_in\">Math</span>.max(adds[i<span class=\"hljs-number\">-1</span>],endNum)\n    minGap=<span class=\"hljs-built_in\">Math</span>.min(minGap,max-min)\n  }\n  <span class=\"hljs-keyword\">return</span> minGap\n};\n</code></pre>\n"
  ],
  "titleSlug": "smallest-range-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这道题每个数字只能<code>+K</code>或者<code>-K</code>，因此是两条平行的折线，如下图。</p>\n<pre class=\"hljs\"><code>              4\n        2    /\\ \n  +K    /\\  /  \\\n       /  \\/    5\n      /   3\n     1       /\\ \n        /\\  /  \\\n  -K   /  \\/\n      /\n</code></pre>\n<p>上面这幅图，要想间距最小，我们从最高的点到最低的点排序，上面图就是<code>4-&gt;2-&gt;5-&gt;3-&gt;1</code>，依次检查。</p>\n<p>首先定义一个边界<code>endNum</code>为<code>点4-2*K</code>，因为<code>点4</code>是最高的点，一旦发现<code>endNum&gt;点X</code>，那么就可以直接返回结果了，\n因为剩下的点都是比<code>endNum</code>更小的，因此最大值就是<code>endNum</code>，而最小值继续比较可能会更小，因此可以直接返回结果。</p>\n<p>在到达<code>endNum</code>这个边界之前，</p>\n<p>最小值<code>min</code>就是在<code>点1</code>的高度和者当前<code>点i-2*K</code>中选更小的。</p>\n<p>最大值<code>max</code>在<code>endNum</code>和<code>下一个点</code>之间选择更大的。</p>\n",
  "content": "<p>给定一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，我们可以选择<strong>&nbsp;<code>x = -K</code>&nbsp;或是&nbsp;<code>x = K</code></strong>，并将&nbsp;<code>x</code>&nbsp;加到&nbsp;<code>A[i]</code>&nbsp;中。</p>\n\n<p>在此过程之后，我们得到一些数组&nbsp;<code>B</code>。</p>\n\n<p>返回 <code>B</code>&nbsp;的最大值和 <code>B</code>&nbsp;的最小值之间可能存在的最小差值。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [1], K = 0\n<strong>输出：</strong>0\n<strong>解释：</strong>B = [1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [0,10], K = 2\n<strong>输出：</strong>6\n<strong>解释：</strong>B = [2,8]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,3,6], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>B = [4,6,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n"
}
