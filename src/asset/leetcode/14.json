{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} strs\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestCommonPrefix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strs</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(strs.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">let</span> comPre=strs[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;strs.length;i++){\n    <span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(;j&lt;strs[i].length;j++){\n      <span class=\"hljs-keyword\">if</span>(strs[i][j]!==comPre[j])<span class=\"hljs-keyword\">break</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(j===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n    comPre=comPre.substring(<span class=\"hljs-number\">0</span>,j)\n  }\n  <span class=\"hljs-keyword\">return</span> comPre\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-common-prefix",
  "content": "<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n\n<p>如果不存在公共前缀，返回空字符串&nbsp;<code>&quot;&quot;</code>。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>输出:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>输出:</strong> &quot;&quot;\n<strong>解释:</strong> 输入不存在公共前缀。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>所有输入只包含小写字母&nbsp;<code>a-z</code>&nbsp;。</p>\n"
}
