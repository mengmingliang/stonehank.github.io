{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> nthUglyNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n<span class=\"hljs-comment\">// function PriorityQueueMin(){</span>\n<span class=\"hljs-comment\">//   let heap=[null]</span>\n<span class=\"hljs-comment\">//   function swim(idx){</span>\n<span class=\"hljs-comment\">//     if(idx&lt;2)return</span>\n<span class=\"hljs-comment\">//     let k=Math.floor(idx/2)</span>\n<span class=\"hljs-comment\">//     if((heap[idx])&lt;(heap[k])){</span>\n<span class=\"hljs-comment\">//       swap(heap,idx,k)</span>\n<span class=\"hljs-comment\">//       idx=k</span>\n<span class=\"hljs-comment\">//       swim(idx)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   function sink(idx){</span>\n<span class=\"hljs-comment\">//     let k=Math.floor(idx*2)</span>\n<span class=\"hljs-comment\">//     if(k&gt;=heap.length)return</span>\n<span class=\"hljs-comment\">//     if(k&lt;heap.length &amp;&amp; heap[k+1] &amp;&amp; (heap[k])&gt;(heap[k+1])) k++</span>\n<span class=\"hljs-comment\">//     if((heap[idx])&gt;(heap[k])){</span>\n<span class=\"hljs-comment\">//       swap(heap,idx,k)</span>\n<span class=\"hljs-comment\">//       idx=k</span>\n<span class=\"hljs-comment\">//       sink(idx)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   function swap(arr,i,j){</span>\n<span class=\"hljs-comment\">//     let temp=arr[i]</span>\n<span class=\"hljs-comment\">//     arr[i]=arr[j]</span>\n<span class=\"hljs-comment\">//     arr[j]=temp</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   this.insert=function (v) {</span>\n<span class=\"hljs-comment\">//     heap.push(v)</span>\n<span class=\"hljs-comment\">//     swim(heap.length-1)</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   this.delMin=function () {</span>\n<span class=\"hljs-comment\">//     swap(heap,1,heap.length-1)</span>\n<span class=\"hljs-comment\">//     let min=heap.pop()</span>\n<span class=\"hljs-comment\">//     sink(1)</span>\n<span class=\"hljs-comment\">//     return min</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   this.min=function () {</span>\n<span class=\"hljs-comment\">//     return heap[1]</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   this.isEmpty=function () {</span>\n<span class=\"hljs-comment\">//     return heap.length===1</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">// }</span>\n<span class=\"hljs-comment\">//   let pq=new PriorityQueueMin()</span>\n<span class=\"hljs-comment\">//   pq.insert(1)</span>\n<span class=\"hljs-comment\">//   let cur=0</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;n;i++){</span>\n<span class=\"hljs-comment\">//     cur=pq.delMin()</span>\n<span class=\"hljs-comment\">//     pq.insert(cur*2)</span>\n<span class=\"hljs-comment\">//     if(cur % 2 !=0){</span>\n<span class=\"hljs-comment\">//         pq.insert(cur*3)   </span>\n<span class=\"hljs-comment\">//         if(cur % 3!=0)</span>\n<span class=\"hljs-comment\">//           pq.insert(cur*5)        </span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   return cur</span>\n  \n  <span class=\"hljs-keyword\">let</span> i2=<span class=\"hljs-number\">0</span>,i3=<span class=\"hljs-number\">0</span>,i5=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> count=[<span class=\"hljs-number\">1</span>]\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n<span class=\"hljs-number\">-1</span>;i++){\n    <span class=\"hljs-keyword\">let</span> r2=count[i2]*<span class=\"hljs-number\">2</span>,\n        r3=count[i3]*<span class=\"hljs-number\">3</span>,\n        r5=count[i5]*<span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-built_in\">Math</span>.min(r2,r3,r5)\n    <span class=\"hljs-keyword\">if</span>(r2===min)i2++\n    <span class=\"hljs-keyword\">if</span>(r3===min)i3++\n    <span class=\"hljs-keyword\">if</span>(r5===min)i5++\n    <span class=\"hljs-keyword\">if</span>(min!==count[count.length<span class=\"hljs-number\">-1</span>]){\n      count.push(min)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> count[count.length<span class=\"hljs-number\">-1</span>]\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "ugly-number-ii",
  "hasThinking": false,
  "content": "<p>编写一个程序，找出第 <code>n</code> 个丑数。</p>\n\n<p>丑数就是只包含质因数&nbsp;<code>2, 3, 5</code> 的<strong>正整数</strong>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> n = 10\n<strong>输出:</strong> 12\n<strong>解释: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> 是前 10 个丑数。</pre>\n\n<p><strong>说明:&nbsp;</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1</code>&nbsp;是丑数。</li>\n\t<li><code>n</code>&nbsp;<strong>不超过</strong>1690。</li>\n</ol>\n"
}
