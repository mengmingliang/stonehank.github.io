{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n//     let cache={}\n//     for(let i=0;i<nums.length;i++){\n//         if(cache[nums[i]]===undefined){\n//             cache[nums[i]]=1\n//         }else{\n//             delete(cache[nums[i]])\n//         }\n        \n//     }\n//     return parseInt(Object.keys(cache)[0],10)\n    return nums.reduce((a,b)=>a^b)\n};"
  ],
  "titleSlug": "single-number",
  "content": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,1]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,1,2,1,2]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n",
  "translatedContent": "<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,1]\n<strong>输出:</strong> 1\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [4,1,2,1,2]\n<strong>输出:</strong> 4</pre>\n"
}
