{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n  // let res=[];\n  // function swap(a,i,j){\n  //   let t=a[i]\n  //   a[i]=a[j]\n  //   a[j]=t\n  // }\n  // function backtrace(init,len){\n  //   if(len===1){\n  //     res.push(nums.slice())\n  //     return\n  //   }\n  //   for(let i=init;i<nums.length;i++){\n  //     swap(nums,i,init)\n  //     backtrace(init+1,len-1)\n  //     swap(nums,i,init)\n  //   }\n  // }\n  // backtrace(0,nums.length)\n  // return res\n    \n    let result=[],temp=[]\n    backtrack(result,temp,nums)\n    return result\n    \n    function backtrack(result,temp,nums){\n        if(temp.length===nums.length)result.push(temp.slice())\n        for(let i=0;i<nums.length;i++){\n            if(temp.includes(nums[i]))continue\n            temp.push(nums[i])\n            backtrack(result,temp,nums)\n            temp.pop()\n        }\n    }\n};"
  ],
  "titleSlug": "permutations",
  "content": "<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n<strong>Output:</strong>\r\n[\r\n  [1,2,3],\r\n  [1,3,2],\r\n  [2,1,3],\r\n  [2,3,1],\r\n  [3,1,2],\r\n  [3,2,1]\r\n]\r\n</pre>\r\n",
  "translatedContent": "<p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n"
}
