{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> permute = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">let</span> N=nums.length\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">arr</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(arr.length===N){\n      <span class=\"hljs-keyword\">return</span> res.push(arr.slice())\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n      <span class=\"hljs-keyword\">if</span>(used[i])<span class=\"hljs-keyword\">continue</span>\n      used[i]=<span class=\"hljs-literal\">true</span>\n      arr.push(nums[i])\n      backtrack(arr)\n      arr.pop()\n      used[i]=<span class=\"hljs-literal\">false</span>\n    }\n  }\n  backtrack([])\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "permutations",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>无重复，最基础的回溯，用一个数组<code>used</code>保存已经使用过的数字，再用一个数组<code>arr</code>跟踪当前的排列状态，如果<code>arr.length===nums.length</code>，说明已经完成，\n添加到结果<code>res</code>中，注意每次递归返回需要回复<code>used</code>和<code>arr</code>，以便下次继续使用。</p>\n<hr>\n",
  "content": "<p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n<strong>输出:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n"
}
