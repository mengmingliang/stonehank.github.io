{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> Trie = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> tree=[]\n  <span class=\"hljs-comment\">// let tree={}</span>\n  <span class=\"hljs-keyword\">this</span>.insert=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>)</span>{\n  <span class=\"hljs-comment\">//   tree.push(word)</span>\n    <span class=\"hljs-keyword\">let</span> node=tree\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;word.length;i++){\n      <span class=\"hljs-keyword\">let</span> curIdx=word.charCodeAt(i)<span class=\"hljs-number\">-97</span>\n      <span class=\"hljs-keyword\">if</span>(!node[curIdx])node[curIdx]={<span class=\"hljs-attr\">exact</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">next</span>:[]}\n      <span class=\"hljs-keyword\">if</span>(i===word.length<span class=\"hljs-number\">-1</span>){\n        node[curIdx].exact=<span class=\"hljs-literal\">true</span>\n      }\n      node=node[curIdx].next\n    }\n  }\n  <span class=\"hljs-keyword\">this</span>.search=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>)</span>{\n    <span class=\"hljs-comment\">// return tree.includes(word)</span>\n    <span class=\"hljs-keyword\">let</span> node=tree\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;word.length;i++){\n      <span class=\"hljs-keyword\">let</span> curIdx=word.charCodeAt(i)<span class=\"hljs-number\">-97</span>\n      <span class=\"hljs-keyword\">if</span>(!node[curIdx])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(i===word.length<span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">return</span> node[curIdx].exact\n      }\n      node=node[curIdx].next\n    }\n  }\n  \n  <span class=\"hljs-keyword\">this</span>.startsWith=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prefix</span>)</span>{\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;tree.length;i++){</span>\n    <span class=\"hljs-comment\">//   if(tree[i].startsWith(prefix))return true</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// return false</span>\n    <span class=\"hljs-keyword\">let</span> node=tree\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prefix.length;i++){\n      <span class=\"hljs-keyword\">let</span> curIdx=prefix.charCodeAt(i)<span class=\"hljs-number\">-97</span>\n      <span class=\"hljs-keyword\">if</span>(!node[curIdx])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      node=node[curIdx].next\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>    \n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */</span>\n<span class=\"hljs-comment\">// Trie.prototype.insert = function(word) {</span>\n\n\n\n  \n  <span class=\"hljs-comment\">// let tree=this.tree.next</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;word.length-1;i++){</span>\n  <span class=\"hljs-comment\">//   let cur=word[i]</span>\n  <span class=\"hljs-comment\">//   if(!tree[cur])tree[cur]={exact:false,next:{}}</span>\n  <span class=\"hljs-comment\">//   tree=tree[cur].next</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// let last=tree[word[word.length-1]]</span>\n  <span class=\"hljs-comment\">// if(!tree[word[word.length-1]])tree[word[word.length-1]]={exact:true,next:{}}</span>\n  <span class=\"hljs-comment\">// else tree[word[word.length-1]].exact=true</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-comment\">/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */</span>\n<span class=\"hljs-comment\">// Trie.prototype.search = function(word) {</span>\n<span class=\"hljs-comment\">//   let tree=this.tree.next</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;word.length-1;i++){</span>\n<span class=\"hljs-comment\">//     let cur=word[i]</span>\n<span class=\"hljs-comment\">//     if(!tree[cur])return false</span>\n<span class=\"hljs-comment\">//     tree=tree[cur].next</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   if(tree[word[word.length-1]])return tree[word[word.length-1]].exact</span>\n<span class=\"hljs-comment\">//   else return false</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-comment\">/**\n * Returns if there is any word in the trie that starts with the given prefix. \n * @param {string} prefix\n * @return {boolean}\n */</span>\n<span class=\"hljs-comment\">// Trie.prototype.startsWith = function(prefix) {</span>\n<span class=\"hljs-comment\">//   let tree=this.tree.next</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;prefix.length;i++){</span>\n<span class=\"hljs-comment\">//     let cur=prefix[i]</span>\n<span class=\"hljs-comment\">//     if(!tree[cur])return false</span>\n<span class=\"hljs-comment\">//     tree=tree[cur].next</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   return true</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-comment\">/** \n * Your Trie object will be instantiated and called as such:\n * var obj = Object.create(Trie).createNew()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "implement-trie-prefix-tree",
  "content": "<p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // 返回 true\ntrie.search(&quot;app&quot;);     // 返回 false\ntrie.startsWith(&quot;app&quot;); // 返回 true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // 返回 true</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>\n\t<li>保证所有输入均为非空字符串。</li>\n</ul>\n"
}
