{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> Trie = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.tire={}\n};\n\n<span class=\"hljs-comment\">/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */</span>\nTrie.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  _insert(<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.tire)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_insert</span>(<span class=\"hljs-params\">id,t</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(id===word.length)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(t[word[id]]==<span class=\"hljs-literal\">null</span>){\n      t[word[id]]={}\n    }\n    <span class=\"hljs-keyword\">if</span>(id===word.length<span class=\"hljs-number\">-1</span>){\n      t[word[id]].exact=<span class=\"hljs-literal\">true</span>\n    }\n    _insert(id+<span class=\"hljs-number\">1</span>,t[word[id]])\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */</span>\nTrie.prototype.search = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> _search(<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.tire)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_search</span>(<span class=\"hljs-params\">id,t</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(id===word.length)<span class=\"hljs-keyword\">return</span> !!t.exact\n    <span class=\"hljs-keyword\">if</span>(t[word[id]]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> _search(id+<span class=\"hljs-number\">1</span>,t[word[id]])\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Returns if there is any word in the trie that starts with the given prefix. \n * @param {string} prefix\n * @return {boolean}\n */</span>\nTrie.prototype.startsWith = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prefix</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> _startsWith(<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.tire)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_startsWith</span>(<span class=\"hljs-params\">id,t</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(id===prefix.length)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(t[prefix[id]]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> _startsWith(id+<span class=\"hljs-number\">1</span>,t[prefix[id]])\n  }  \n};\n\n<span class=\"hljs-comment\">/** \n * Your Trie object will be instantiated and called as such:\n * var obj = Object.create(Trie).createNew()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "implement-trie-prefix-tree",
  "hasThinking": false,
  "content": "<p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // 返回 true\ntrie.search(&quot;app&quot;);     // 返回 false\ntrie.startsWith(&quot;app&quot;); // 返回 true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // 返回 true</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>\n\t<li>保证所有输入均为非空字符串。</li>\n</ul>\n"
}
