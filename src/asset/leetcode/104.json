{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxDepth = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">BFS</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">let</span> arr=[root],temp=[];\n        <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n            max++;\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n                <span class=\"hljs-keyword\">if</span>(arr[i].left)temp.push(arr[i].left)\n                <span class=\"hljs-keyword\">if</span>(arr[i].right)temp.push(arr[i].right)\n            }\n            arr=temp;\n            temp=[]\n        }\n        \n    }\n    BFS(root)\n    <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-depth-of-binary-tree",
  "translatedContent": "<p>给定一个二叉树，找出其最大深度。</p>\n\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例：</strong><br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>返回它的最大深度&nbsp;3 。</p>\n"
}
