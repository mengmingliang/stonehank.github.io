{
  "code": [
    "/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */\nvar shortestToChar = function(S, C) {\n    let arr=[];\n    let res=[];\n    let len=S.length;\n    [].filter.call(S,(n,i)=>{if(n===C){arr.push(i)}});\n    for(let i=0;i<len;i++){\n        let min=len;\n        for(let j=0;j<arr.length;j++){\n            let distance=Math.abs(arr[j]-i);\n            if(distance<min){\n                min=distance\n            }\n        }\n        res.push(min)\n    }\n    return res\n};"
  ],
  "titleSlug": "shortest-distance-to-a-character",
  "content": "<p>Given a string <code>S</code>&nbsp;and a character <code>C</code>, return an array of integers representing the shortest distance from the character <code>C</code> in the string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\r\n<strong>Output:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> string length is&nbsp;in&nbsp;<code>[1, 10000].</code></li>\r\n\t<li><code>C</code>&nbsp;is a single character, and guaranteed to be in string <code>S</code>.</li>\r\n\t<li>All letters in <code>S</code> and <code>C</code> are lowercase.</li>\r\n</ol>\r\n",
  "translatedContent": "<p>给定一个字符串&nbsp;<code>S</code>&nbsp;和一个字符&nbsp;<code>C</code>。返回一个代表字符串&nbsp;<code>S</code>&nbsp;中每个字符到字符串&nbsp;<code>S</code>&nbsp;中的字符&nbsp;<code>C</code>&nbsp;的最短距离的数组。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\n<strong>输出:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>字符串&nbsp;<code>S</code>&nbsp;的长度范围为&nbsp;<code>[1, 10000]</code>。</li>\n\t<li><code>C</code>&nbsp;是一个单字符，且保证是字符串&nbsp;<code>S</code>&nbsp;里的字符。</li>\n\t<li><code>S</code>&nbsp;和&nbsp;<code>C</code>&nbsp;中的所有字母均为小写字母。</li>\n</ol>\n"
}
