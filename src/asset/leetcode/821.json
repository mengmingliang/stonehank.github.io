{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {character} C\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestToChar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, C</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> arr=[];\n    <span class=\"hljs-keyword\">let</span> res=[];\n    <span class=\"hljs-keyword\">let</span> len=S.length;\n    [].filter.call(S,(n,i)=&gt;{<span class=\"hljs-keyword\">if</span>(n===C){arr.push(i)}});\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n        <span class=\"hljs-keyword\">let</span> min=len;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;arr.length;j++){\n            <span class=\"hljs-keyword\">let</span> distance=<span class=\"hljs-built_in\">Math</span>.abs(arr[j]-i);\n            <span class=\"hljs-keyword\">if</span>(distance&lt;min){\n                min=distance\n            }\n        }\n        res.push(min)\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-distance-to-a-character",
  "content": "<p>给定一个字符串&nbsp;<code>S</code>&nbsp;和一个字符&nbsp;<code>C</code>。返回一个代表字符串&nbsp;<code>S</code>&nbsp;中每个字符到字符串&nbsp;<code>S</code>&nbsp;中的字符&nbsp;<code>C</code>&nbsp;的最短距离的数组。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\n<strong>输出:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>字符串&nbsp;<code>S</code>&nbsp;的长度范围为&nbsp;<code>[1, 10000]</code>。</li>\n\t<li><code>C</code>&nbsp;是一个单字符，且保证是字符串&nbsp;<code>S</code>&nbsp;里的字符。</li>\n\t<li><code>S</code>&nbsp;和&nbsp;<code>C</code>&nbsp;中的所有字母均为小写字母。</li>\n</ol>\n"
}
