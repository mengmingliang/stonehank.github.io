{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> crackSafe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> allC=<span class=\"hljs-built_in\">Math</span>.pow(k,n)\n  <span class=\"hljs-keyword\">let</span> maxLen=allC*n-(allC<span class=\"hljs-number\">-1</span>)*(n<span class=\"hljs-number\">-1</span>)\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">let</span> ans=<span class=\"hljs-string\">''</span>, initS=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n<span class=\"hljs-number\">-1</span>;i++)initS+=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> find=<span class=\"hljs-literal\">false</span>\n  dfs(initS,initS)\n  <span class=\"hljs-keyword\">return</span> ans\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">res,temp</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(res.length===maxLen){\n      ans=res\n      <span class=\"hljs-keyword\">return</span> find=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s=<span class=\"hljs-number\">0</span>;s&lt;k;s++){\n      <span class=\"hljs-keyword\">let</span> newTemp=temp+s\n      <span class=\"hljs-keyword\">if</span>(newTemp.length===n){\n        <span class=\"hljs-keyword\">if</span>(hash[newTemp])<span class=\"hljs-keyword\">continue</span>\n        hash[newTemp]=<span class=\"hljs-literal\">true</span>\n        dfs(res+s,newTemp.slice(<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-keyword\">if</span>(find)<span class=\"hljs-keyword\">return</span>\n        hash[newTemp]=<span class=\"hljs-literal\">false</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        dfs(res,temp+s)\n        <span class=\"hljs-keyword\">if</span>(find)<span class=\"hljs-keyword\">return</span>\n      }\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "cracking-the-safe",
  "content": "<p>有一个需要密码才能打开的保险箱。密码是&nbsp;<code>n</code> 位数, 密码的每一位是&nbsp;<code>k</code>&nbsp;位序列&nbsp;<code>0, 1, ..., k-1</code>&nbsp;中的一个 。</p>\n\n<p>你可以随意输入密码，保险箱会自动记住最后&nbsp;<code>n</code>&nbsp;位输入，如果匹配，则能够打开保险箱。</p>\n\n<p>举个例子，假设密码是&nbsp;<code>&quot;345&quot;</code>，你可以输入&nbsp;<code>&quot;012345&quot;</code>&nbsp;来打开它，只是你输入了 6&nbsp;个字符.</p>\n\n<p>请返回一个能打开保险箱的最短字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong>输入:</strong> n = 1, k = 2\n<strong>输出:</strong> &quot;01&quot;\n<strong>说明:</strong> &quot;10&quot;也可以打开保险箱。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例2:</strong></p>\n\n<pre><strong>输入:</strong> n = 2, k = 2\n<strong>输出:</strong> &quot;00110&quot;\n<strong>说明: </strong>&quot;01100&quot;, &quot;10011&quot;, &quot;11001&quot; 也能打开保险箱。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>n</code> 的范围是&nbsp;<code>[1, 4]</code>。</li>\n\t<li><code>k</code> 的范围是&nbsp;<code>[1, 10]</code>。</li>\n\t<li><code>k^n</code> 最大可能为&nbsp;<code>4096</code>。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
