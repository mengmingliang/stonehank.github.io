{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findCheapestPrice = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n, flights, src, dst, K</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> graph=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)graph[i]=[]\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;flights.length;i++){\n    <span class=\"hljs-keyword\">let</span> [v,w,p]=flights[i]\n    graph[v].push([w,p])\n  }\n  <span class=\"hljs-keyword\">let</span> prices=<span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">Infinity</span>)\n  <span class=\"hljs-keyword\">let</span> temp=<span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">Infinity</span>)\n  temp[src]=<span class=\"hljs-number\">0</span>\n  prices[src]=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> arr=[src]\n  \n  <span class=\"hljs-comment\">// 默认BFS 使用一个数组记录prices，当有最小，替换最小</span>\n  <span class=\"hljs-comment\">// 这里使用2个数组记录，当有最小，不在原表上更改，而在temp上更改，等本次bfs路径走完，更新prices表</span>\n  <span class=\"hljs-comment\">// 这样可以让上一次prices的值没有被替换，始终能跟踪到不被中途捷径修改(prices变小)，最快到达(不一定是最小)终点的路径</span>\n  <span class=\"hljs-comment\">// 如果当最快的到达时，K还有余，那么继续等待第二到达的，如果它更小，则更新终点price</span>\n  <span class=\"hljs-comment\">// 这里不能用mark记录，因为存在2条路径</span>\n  <span class=\"hljs-comment\">// 如果使用mark记录，当中途在v点发现更小路径，并且更新temp的时候，如果不调整mark，那么它下一次就会被截断，因为mark[v]已经存在</span>\n  <span class=\"hljs-comment\">// 如果调整mark[v]=false，让它下一次不会被截断，但是已经存在一个更快的路径，因此即使v没有被截断，v后面的点也会被截断</span>\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; K--&gt;=<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> w=arr.shift()\n      <span class=\"hljs-keyword\">let</span> adj=graph[w]\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;adj.length;j++){\n        <span class=\"hljs-keyword\">let</span> [w_adj,p_adj]=adj[j]\n        temp[w_adj]=<span class=\"hljs-built_in\">Math</span>.min(p_adj+prices[w],temp[w_adj])\n        <span class=\"hljs-keyword\">if</span>(arr.includes(w_adj))<span class=\"hljs-keyword\">continue</span>\n        arr.push(w_adj)\n      }\n    }\n      prices=temp.slice()\n  }\n  <span class=\"hljs-keyword\">return</span> prices[dst]===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-number\">-1</span>:prices[dst]\n};\n</code></pre>\n"
  ],
  "titleSlug": "cheapest-flights-within-k-stops",
  "hasThinking": false,
  "content": "<p>有 <code>n</code> 个城市通过 <code>m</code> 个航班连接。每个航班都从城市 <code>u</code> 开始，以价格 <code>w</code> 抵达 <code>v</code>。</p>\n\n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到从 <code>src</code> 到 <code>dst</code> 最多经过 <code>k</code>&nbsp;站中转的最便宜的价格。 如果没有这样的路线，则输出 <code>-1</code>。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>输出:</strong> 200\n<strong>解释:</strong> \n城市航班图如下\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>输出:</strong> 500\n<strong>解释:</strong> \n城市航班图如下\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n</code> 范围是 <code>[1, 100]</code>，城市标签从 <code>0</code> 到 <code>n</code><code> - 1</code>.</li>\n\t<li>航班数量范围是 <code>[0, n * (n - 1) / 2]</code>.</li>\n\t<li>每个航班的格式 <code>(src, </code><code>dst</code><code>, price)</code>.</li>\n\t<li>每个航班的价格范围是 <code>[1, 10000]</code>.</li>\n\t<li><code>k</code> 范围是 <code>[0, n - 1]</code>.</li>\n\t<li>航班没有重复，且不存在环路</li>\n</ul>\n"
}
