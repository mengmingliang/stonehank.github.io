{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findWords = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> str1=<span class=\"hljs-string\">'qwertyuiiop'</span>,str2=<span class=\"hljs-string\">'asdfghjkl'</span>,str3=<span class=\"hljs-string\">'zxcvbnm'</span>\n  <span class=\"hljs-keyword\">let</span> hash1={},hash2={},hash3={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> str1)hash1[s]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> str2)hash2[s]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> str3)hash3[s]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">let</span> line=<span class=\"hljs-literal\">null</span>,j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> lowCase=words[i].toLowerCase()\n    <span class=\"hljs-keyword\">for</span>(;j&lt;lowCase.length;j++){\n      <span class=\"hljs-keyword\">let</span> s=lowCase[j]\n      <span class=\"hljs-keyword\">if</span>(hash1[s]!=<span class=\"hljs-literal\">null</span>){\n        <span class=\"hljs-keyword\">if</span>(line==<span class=\"hljs-literal\">null</span>)line=<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(line!==<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">break</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(hash2[s]!=<span class=\"hljs-literal\">null</span>){\n        <span class=\"hljs-keyword\">if</span>(line==<span class=\"hljs-literal\">null</span>)line=<span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(line!==<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">break</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(line==<span class=\"hljs-literal\">null</span>)line=<span class=\"hljs-number\">3</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(line!==<span class=\"hljs-number\">3</span>)<span class=\"hljs-keyword\">break</span>\n      }\n    }\n    <span class=\"hljs-keyword\">if</span>(j===words[i].length){\n      res.push(words[i])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "keyboard-row",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>对每一行键盘的字母构建<code>hash</code>，然后逐个对<code>words</code>内部的字母转换成小写后，在检查是否在同一行，发现不在同一行就直接<code>break</code></p>\n",
  "content": "<p>给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"American keyboard\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre><strong>输入:</strong> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<strong>输出:</strong> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>注意：</strong></p>\r\n\r\n<ol>\r\n\t<li>你可以重复使用键盘上同一字符。</li>\r\n\t<li>你可以假设输入的字符串将只包含字母。</li>\r\n</ol>"
}
