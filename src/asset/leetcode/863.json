{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {TreeNode} target\n * @param {number} K\n * @return {number[]}\n */\nvar distanceK = function(root, target, K) {\n    function check(obj,n){\n        if(!obj[n])obj[n]=[]\n    }\n    let cache={};\n    let res=[]\n    function DFS(node){\n        check(cache,node.val)\n        if(node.left){\n            check(cache,node.left.val)\n            cache[node.val].push(node.left.val)\n            cache[node.left.val].push(node.val)\n            DFS(node.left)\n        }\n        if(node.right){\n            check(cache,node.right.val)\n            cache[node.val].push(node.right.val)\n            cache[node.right.val].push(node.val)\n            DFS(node.right)\n        }\n    }\n    function delDou(arr){\n        arr.d\n    }\n    DFS(root)\n    function recur(arr,n,k){\n        if(k===0)return [n]\n        if(k===1){return arr}\n        let res=[]\n        for(let i=0;i<arr.length;i++){\n            let cur=cache[arr[i]];\n            let curRes=[]\n            for(let j=0;j<cur.length;j++){\n                if(cur[j]!==n){\n                    curRes.push(cur[j])\n                }\n            }\n            res=res.concat(recur(curRes,arr[i],k-1))\n            // console.log(res)\n        }\n        return res\n    }\n    res=recur(cache[target.val],target.val,K)\n    return res\n   \n};"
  ],
  "titleSlug": "all-nodes-distance-k-in-binary-tree",
  "content": "<p>We are given a binary tree (with root node&nbsp;<code>root</code>), a <code>target</code> node, and an integer value <code>K</code>.</p>\r\n\r\n<p>Return a list of the values of all&nbsp;nodes that have a distance <code>K</code> from the <code>target</code> node.&nbsp; The answer can be returned in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[3,5,1,6,2,0,8,null,null,7,4]</span>, target = <span id=\"example-input-1-2\">5</span>, K = <span id=\"example-input-1-3\">2</span>\r\n\r\n<strong>Output: </strong><span id=\"example-output-1\">[7,4,1]</span>\r\n\r\n<strong>Explanation: </strong>\r\nThe nodes that are a distance 2 from the target node (with value 5)\r\nhave values 7, 4, and 1.\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"width: 280px; height: 240px;\" />\r\n\r\nNote that the inputs &quot;root&quot; and &quot;target&quot; are actually TreeNodes.\r\nThe descriptions of the inputs above are just serializations of these objects.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The given tree is non-empty.</li>\r\n\t<li>Each node in the tree has unique values&nbsp;<code>0 &lt;= node.val &lt;= 500</code>.</li>\r\n\t<li>The <code>target</code>&nbsp;node is a node in the tree.</li>\r\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\r\n</ol>\r\n</div>\r\n",
  "translatedContent": "<p>给定一个二叉树（具有根结点&nbsp;<code>root</code>），&nbsp;一个目标结点&nbsp;<code>target</code>&nbsp;，和一个整数值 <code>K</code> 。</p>\n\n<p>返回到目标结点 <code>target</code> 距离为 <code>K</code> 的所有结点的值的列表。 答案可以以任何顺序返回。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n\n<strong>输出：</strong>[7,4,1]\n\n<strong>解释：</strong>\n所求结点为与目标结点（值为 5）距离为 2 的结点，\n值分别为 7，4，以及 1\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"height: 240px; width: 280px;\">\n\n注意，输入的 &quot;root&quot; 和 &quot;target&quot; 实际上是树上的结点。\n上面的输入仅仅是对这些对象进行了序列化描述。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定的树是非空的，且最多有&nbsp;<code>K</code>&nbsp;个结点。</li>\n\t<li>树上的每个结点都具有唯一的值&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;。</li>\n\t<li>目标结点&nbsp;<code>target</code>&nbsp;是树上的结点。</li>\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\n</ol>\n"
}
