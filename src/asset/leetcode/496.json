{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} findNums\n * @param {number[]} nums\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> nextGreaterElement = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">findNums, nums</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;findNums.length;i++){\n        <span class=\"hljs-comment\">// let greater,cur</span>\n        <span class=\"hljs-comment\">// for(let j=0;j&lt;nums.length;j++){</span>\n        <span class=\"hljs-comment\">//     // console.log(nums[j])</span>\n        <span class=\"hljs-comment\">//     if(greater===-1 &amp;&amp; nums[j]&gt;cur){</span>\n        <span class=\"hljs-comment\">//         greater=nums[j]</span>\n        <span class=\"hljs-comment\">//         break;</span>\n        <span class=\"hljs-comment\">//     }</span>\n        <span class=\"hljs-comment\">//     if(nums[j]===findNums[i]){</span>\n        <span class=\"hljs-comment\">//         cur=findNums[i]</span>\n        <span class=\"hljs-comment\">//         greater=-1;</span>\n        <span class=\"hljs-comment\">//     }</span>\n        <span class=\"hljs-comment\">// }</span>\n        <span class=\"hljs-comment\">// res.push(greater)</span>\n        <span class=\"hljs-keyword\">let</span> greater=<span class=\"hljs-number\">-1</span>\n        <span class=\"hljs-keyword\">let</span> findIdx=nums.indexOf(findNums[i])\n        <span class=\"hljs-keyword\">let</span> newNums=nums.slice(findIdx+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;newNums.length;j++){\n            <span class=\"hljs-comment\">// console.log(newNums[j])</span>\n            <span class=\"hljs-keyword\">if</span>(newNums[j]&gt;findNums[i]){\n                greater=newNums[j]\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        res.push(greater)\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "next-greater-element-i",
  "translatedContent": "<p>给定两个<strong>没有重复元素</strong>的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，其中<code>nums1</code>&nbsp;是&nbsp;<code>nums2</code>&nbsp;的子集。找到&nbsp;<code>nums1</code>&nbsp;中每个元素在&nbsp;<code>nums2</code>&nbsp;中的下一个比其大的值。</p>\n\n<p><code>nums1</code>&nbsp;中数字&nbsp;<strong>x</strong>&nbsp;的下一个更大元素是指&nbsp;<strong>x</strong>&nbsp;在&nbsp;<code>nums2</code>&nbsp;中对应位置的右边的第一个比&nbsp;<strong>x&nbsp;</strong>大的元素。如果不存在，对应位置输出-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].\n<strong>输出:</strong> [-1,3,-1]\n<strong>解释:</strong>\n    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。\n    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。\n    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].\n<strong>输出:</strong> [3,-1]\n<strong>解释:</strong>\n&nbsp;   对于num1中的数字2，第二个数组中的下一个较大数字是3。\n    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>nums1</code>和<code>nums2</code>中所有元素是唯一的。</li>\n\t<li><code>nums1</code>和<code>nums2</code>&nbsp;的数组大小都不超过1000。</li>\n</ol>\n"
}
