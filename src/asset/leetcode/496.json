{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> nextGreaterElement = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1, nums2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[],hash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums2.length;i++){\n    <span class=\"hljs-keyword\">while</span>(stack.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; nums2[i]&gt;stack[stack.length<span class=\"hljs-number\">-1</span>]){\n      hash[stack.pop()]=nums2[i]\n    }\n    stack.push(nums2[i])\n  }\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums1.length;i++){\n    <span class=\"hljs-keyword\">if</span>(hash[nums1[i]]==<span class=\"hljs-literal\">null</span>){\n      res.push(<span class=\"hljs-number\">-1</span>)\n    }<span class=\"hljs-keyword\">else</span>{\n      res.push(hash[nums1[i]])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "next-greater-element-i",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>可以使用暴力解决<code>O(N^2)</code>，更高效的是<code>O(N)</code>，使用<code>stack</code>。</p>\n<p>假设<code>num2=[1,6,4,5,3,8]</code>，我们通过<code>stack</code>不断压栈</p>\n<ol>\n<li><code>cur===1</code>，<code>stack=[1]</code>。</li>\n<li><code>cur===6</code>，<code>cur&gt;stack[stack.length-1]</code>，因此说明<code>1</code>的下一个最大值就是<code>6</code>，通过<code>hash</code>保存并且<code>stack.pop</code>。</li>\n<li><code>cur===4</code>，<code>stack=[6,4]</code>。</li>\n<li><code>cur===5</code>，<code>cur&gt;stack[stack.length-1]</code>，说明<code>4</code>的下一个最大值是<code>5</code>。</li>\n<li><code>cur===3</code>，<code>stack=[6,5,3]</code>。</li>\n<li><code>cur===8</code>，<code>5</code>和<code>3</code>的下一个最大值是<code>8</code>。</li>\n</ol>\n<p>接着遍历<code>nums1</code>，只需要检查<code>hash</code>中的下一个最大值即可，不存在则为<code>-1</code>。</p>\n",
  "content": "<p>给定两个<strong>没有重复元素</strong>的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，其中<code>nums1</code>&nbsp;是&nbsp;<code>nums2</code>&nbsp;的子集。找到&nbsp;<code>nums1</code>&nbsp;中每个元素在&nbsp;<code>nums2</code>&nbsp;中的下一个比其大的值。</p>\n\n<p><code>nums1</code>&nbsp;中数字&nbsp;<strong>x</strong>&nbsp;的下一个更大元素是指&nbsp;<strong>x</strong>&nbsp;在&nbsp;<code>nums2</code>&nbsp;中对应位置的右边的第一个比&nbsp;<strong>x&nbsp;</strong>大的元素。如果不存在，对应位置输出-1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].\n<strong>输出:</strong> [-1,3,-1]\n<strong>解释:</strong>\n    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。\n    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。\n    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].\n<strong>输出:</strong> [3,-1]\n<strong>解释:</strong>\n&nbsp;   对于num1中的数字2，第二个数组中的下一个较大数字是3。\n    对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>nums1</code>和<code>nums2</code>中所有元素是唯一的。</li>\n\t<li><code>nums1</code>和<code>nums2</code>&nbsp;的数组大小都不超过1000。</li>\n</ol>\n"
}
