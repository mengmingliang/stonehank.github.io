{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} logs\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> reorderLogFiles = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">logs</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> letter=[],num=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;logs.length;i++){\n    <span class=\"hljs-keyword\">let</span> arr=logs[i].split(<span class=\"hljs-string\">' '</span>)\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(arr[<span class=\"hljs-number\">1</span>])){\n      num.push(logs[i])\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> rest=arr.slice(<span class=\"hljs-number\">1</span>).join(<span class=\"hljs-string\">' '</span>)\n      letter.push([logs[i],rest])\n      <span class=\"hljs-keyword\">let</span> id=letter.length<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">while</span>(id&gt;<span class=\"hljs-number\">0</span> &amp;&amp; letter[id][<span class=\"hljs-number\">1</span>]&lt;letter[id<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]){\n        <span class=\"hljs-keyword\">let</span> t=letter[id]\n        letter[id]=letter[id<span class=\"hljs-number\">-1</span>]\n        letter[id<span class=\"hljs-number\">-1</span>]=t\n        id--\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;letter.length;i++){\n    res.push(letter[i][<span class=\"hljs-number\">0</span>])\n  }\n  res=res.concat(num)\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "reorder-log-files",
  "hasThinking": false,
  "content": "<p>你有一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串。</p>\n\n<p>对于每条日志，其第一个字为字母数字<em>标识符</em>。然后，要么：</p>\n\n<ul>\n\t<li>标识符后面的每个字将仅由小写字母组成，或；</li>\n\t<li>标识符后面的每个字将仅由数字组成。</li>\n</ul>\n\n<p>我们将这两种日志分别称为字母日志和数字日志。保证每个日志在其标识符后面至少有一个字。</p>\n\n<p>将日志重新排序，使得所有字母日志都排在数字日志之前。字母日志按内容字母顺序排序，忽略标识符；在内容相同时，按标识符排序。数字日志应该按原来的顺序排列。</p>\n\n<p>返回日志的最终顺序。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 ：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>输出：</strong>[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code>&nbsp;保证有一个标识符，并且标识符后面有一个字。</li>\n</ol>\n"
}
