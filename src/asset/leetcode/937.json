{
  "code": [
    "/**\n * @param {string[]} logs\n * @return {string[]}\n */\nvar reorderLogFiles = function(logs) {\n    let res=[],digs=[]\n    for(let i=0;i<logs.length;i++){\n      let cur=logs[i].split(' ')\n      if(/\\d+/.test(cur[1]))digs.push(cur)\n      else {\n        if(!res[0])res.unshift(cur)\n        else{\n          res.unshift(cur)\n          let i=0,j=1\n          while(res[j] && compare(cur,res[j])===1){\n            // console.log(cur,res[j])\n            swap(res,i,j)\n            i=j\n            j=j+1\n          }\n          \n        }\n      }\n    }\n\n  function swap(arr,i,j){\n    let t=arr[i]\n    arr[i]=arr[j]\n    arr[j]=t\n  }\n  function compare(arr1,arr2){\n    for(let i=1;i<arr1.length;i++){\n      if(!arr2[i])return 1\n      if(arr1[i]>arr2[i])return 1\n      else if(arr1[i] < arr2[i])return -1\n    }\n    return -1\n  }\n  for(let i=0;i<res.length;i++){\n    res[i]=res[i].join(' ')\n  }\n  for(let i=0;i<digs.length;i++){\n    digs[i]=digs[i].join(' ')\n  }\n  return res.concat(digs)\n};"
  ],
  "titleSlug": "reorder-log-files",
  "content": "<p>You have an array of <code>logs</code>.&nbsp; Each log is a space delimited string of words.</p>\r\n\r\n<p>For each log, the first word in each log is an alphanumeric <em>identifier</em>.&nbsp; Then, either:</p>\r\n\r\n<ul>\r\n\t<li>Each word after the identifier will consist only of lowercase letters, or;</li>\r\n\t<li>Each word after the identifier will consist only of digits.</li>\r\n</ul>\r\n\r\n<p>We will call these two varieties of logs <em>letter-logs</em> and <em>digit-logs</em>.&nbsp; It is guaranteed that each log has at least one word after its identifier.</p>\r\n\r\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.&nbsp; The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.&nbsp; The digit-logs should be put in their original order.</p>\r\n\r\n<p>Return the final order of the logs.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\r\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\r\n\t<li><code>logs[i]</code> is guaranteed to have an identifier, and a word after the identifier.</li>\r\n</ol>\r\n</div>",
  "translatedContent": "<p>你有一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串。</p>\n\n<p>对于每条日志，其第一个字为字母数字<em>标识符</em>。然后，要么：</p>\n\n<ul>\n\t<li>标识符后面的每个字将仅由小写字母组成，或；</li>\n\t<li>标识符后面的每个字将仅由数字组成。</li>\n</ul>\n\n<p>我们将这两种日志分别称为字母日志和数字日志。保证每个日志在其标识符后面至少有一个字。</p>\n\n<p>将日志重新排序，使得所有字母日志都排在数字日志之前。字母日志按字母顺序排序，忽略标识符，标识符仅用于表示关系。数字日志应该按原来的顺序排列。</p>\n\n<p>返回日志的最终顺序。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 ：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>输出：</strong>[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code>&nbsp;保证有一个标识符，并且标识符后面有一个字。</li>\n</ol>\n"
}
