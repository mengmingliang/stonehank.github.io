{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span> (<span class=\"hljs-params\">index, results, hash, quiet</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (results[index] === <span class=\"hljs-literal\">undefined</span>) {\n        results[index] = index;\n        <span class=\"hljs-keyword\">if</span> (hash[index]) {\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; hash[index].length; ++i) {\n                <span class=\"hljs-keyword\">let</span> rindex = dfs(hash[index][i], results, hash, quiet);\n                <span class=\"hljs-keyword\">if</span> (quiet[rindex] &lt; quiet[results[index]]) {\n                    results[index] = rindex;\n                }   \n            }    \n        }\n        \n    }\n    <span class=\"hljs-keyword\">return</span> results[index];\n}\n\n\n<span class=\"hljs-keyword\">var</span> loudAndRich = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">richer, quiet</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> N = quiet.length;\n    \n    <span class=\"hljs-keyword\">const</span> hash = {};\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; richer.length; ++i) {\n        <span class=\"hljs-keyword\">const</span> min = richer[i][<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">if</span> (!hash[min]) {\n            hash[min] = []\n        }\n        hash[min].push(richer[i][<span class=\"hljs-number\">0</span>]);\n    }\n    <span class=\"hljs-keyword\">let</span> results = [];\n    \n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; ++i) {\n        dfs(i, results, hash, quiet);\n    }\n    <span class=\"hljs-keyword\">return</span> results;\n}\n</code></pre>\n"
  ],
  "titleSlug": "loud-and-rich",
  "translatedContent": "<p>在一组 N 个人（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）中，每个人都有不同数目的钱，以及不同程度的安静（quietness）。</p>\n\n<p>为了方便起见，我们将编号为&nbsp;<code>x</code>&nbsp;的人简称为 &quot;person&nbsp;<code>x</code>&nbsp;&quot;。</p>\n\n<p>如果能够肯定 person&nbsp;<code>x</code>&nbsp;比 person&nbsp;<code>y</code>&nbsp;更有钱的话，我们会说&nbsp;<code>richer[i] = [x, y]</code>&nbsp;。注意&nbsp;<code>richer</code>&nbsp;可能只是有效观察的一个子集。</p>\n\n<p>另外，如果 person&nbsp;<code>x</code>&nbsp;的安静程度为&nbsp;<code>q</code>&nbsp;，我们会说&nbsp;<code>quiet[x] = q</code>&nbsp;。</p>\n\n<p>现在，返回答案&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[x] = y</code>&nbsp;的前提是，在所有拥有的钱不少于&nbsp;person&nbsp;<code>x</code>&nbsp;的人中，person&nbsp;<code>y</code>&nbsp;是最安静的人（也就是安静值&nbsp;<code>quiet[y]</code>&nbsp;最小的人）。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>输出：</strong>[5,5,2,5,4,5,6,7]\n<strong>解释： </strong>\nanswer[0] = 5，\nperson 5 比 person 3 有更多的钱，person 3 比 person 1 有更多的钱，person 1 比 person 0 有更多的钱。\n唯一较为安静（有较低的安静值 quiet[x]）的人是 person 7，\n但是目前还不清楚他是否比 person 0 更有钱。\n\nanswer[7] = 7，\n在所有拥有的钱肯定不少于 person 7 的人中(这可能包括 person 3，4，5，6 以及 7)，\n最安静(有较低安静值 quiet[x])的人是 person 7。\n\n其他的答案也可以用类似的推理来解释。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>，所有&nbsp;<code>quiet[i]</code>&nbsp;都不相同。</li>\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\n\t<li><code>richer[i]</code>&nbsp;都是不同的。</li>\n\t<li>对&nbsp;<code>richer</code>&nbsp;的观察在逻辑上是一致的。</li>\n</ol>\n"
}
