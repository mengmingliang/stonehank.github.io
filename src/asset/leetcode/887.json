{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} K\n * @param {number} N\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> superEggDrop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">K, N</span>) </span>{\n<span class=\"hljs-comment\">//   let dp=[]</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;K;i++){</span>\n<span class=\"hljs-comment\">//     dp[i]=[]</span>\n<span class=\"hljs-comment\">//     for(let j=0;j&lt;N+1;j++){</span>\n<span class=\"hljs-comment\">//       if(i===0)dp[i][j]=j</span>\n<span class=\"hljs-comment\">//       else if(j===0)dp[i][j]=0</span>\n<span class=\"hljs-comment\">//       else dp[i][j]=Infinity</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   for(let i=1;i&lt;dp.length;i++){</span>\n<span class=\"hljs-comment\">//     let last=1</span>\n<span class=\"hljs-comment\">//     for(let j=1;j&lt;dp[i].length;j++){</span>\n<span class=\"hljs-comment\">//       let min=Infinity</span>\n<span class=\"hljs-comment\">//       for(let k=last;k&lt;last+2;k++){</span>\n<span class=\"hljs-comment\">//         let cur=Math.max(dp[i-1][k-1]+1,dp[i][j-k]+1)</span>\n<span class=\"hljs-comment\">//         if(cur&lt;min){min=cur; last=k}</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       dp[i][j]=min</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   return dp[K-1][N]</span>\n  \n  \n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;K+<span class=\"hljs-number\">1</span>;j++){\n      dp[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }  \n  <span class=\"hljs-keyword\">let</span> m = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (dp[m][K] &lt; N) {\n      ++m;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">1</span>; k &lt;= K; ++k)\n          dp[m][k] = dp[m - <span class=\"hljs-number\">1</span>][k - <span class=\"hljs-number\">1</span>] + dp[m - <span class=\"hljs-number\">1</span>][k] + <span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-comment\">// console.log(dp)</span>\n  <span class=\"hljs-keyword\">return</span> m;\n};\n</code></pre>\n"
  ],
  "titleSlug": "super-egg-drop",
  "content": "<p>你将获得&nbsp;<code>K</code>&nbsp;个鸡蛋，并可以使用一栋从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>&nbsp;&nbsp;共有 <code>N</code>&nbsp;层楼的建筑。</p>\n\n<p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p>\n\n<p>你知道存在楼层&nbsp;<code>F</code> ，满足&nbsp;<code>0 &lt;= F &lt;= N</code> 任何从高于 <code>F</code>&nbsp;的楼层落下的鸡蛋都会碎，从&nbsp;<code>F</code>&nbsp;楼层或比它低的楼层落下的鸡蛋都不会破。</p>\n\n<p>每次<em>移动</em>，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层&nbsp;<code>X</code>&nbsp;扔下（满足&nbsp;<code>1 &lt;= X &lt;= N</code>）。</p>\n\n<p>你的目标是<strong>确切地</strong>知道 <code>F</code> 的值是多少。</p>\n\n<p>无论 <code>F</code> 的初始值如何，你确定 <code>F</code> 的值的最小移动次数是多少？</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>K = 1, N = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>\n鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。\n否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。\n如果它没碎，那么我们肯定知道 F = 2 。\n因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>K = 2, N = 6\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>K = 3, N = 14\n<strong>输出：</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n</ol>\n"
}
