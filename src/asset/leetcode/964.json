{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> leastOpsExpressTarget = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x, target</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> mem={}\n  <span class=\"hljs-keyword\">return</span> calc(target)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calc</span>(<span class=\"hljs-params\">target</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(x===<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> target<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">if</span>(target===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span>(target===x)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(mem[target]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> mem[target]\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">1</span>, step=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(sum&lt;target){\n      step++\n      sum*=x\n    }\n    <span class=\"hljs-keyword\">if</span>(sum===target)<span class=\"hljs-keyword\">return</span> step<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-literal\">Infinity</span>,\n        right=calc(target-sum/x)+step-(sum===x?<span class=\"hljs-number\">-1</span>:<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span>(sum-target&lt;target) left=calc(sum-target)+step\n    <span class=\"hljs-keyword\">let</span> ans=<span class=\"hljs-built_in\">Math</span>.min(left,right)\n    mem[target]=ans\n    <span class=\"hljs-keyword\">return</span> ans\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "least-operators-to-express-number",
  "content": "<p>给定一个正整数 <code>x</code>，我们将会写出一个形如&nbsp;<code>x (op1) x (op2) x (op3) x ...</code>&nbsp;的表达式，其中每个运算符&nbsp;<code>op1</code>，<code>op2</code>，&hellip; 可以是加、减、乘、除（<code>+</code>，<code>-</code>，<code>*</code>，或是&nbsp;<code>/</code>）之一。例如，对于&nbsp;<code>x = 3</code>，我们可以写出表达式&nbsp;<code>3 * 3 / 3 + 3 - 3</code>，该式的值为 3 。</p>\n\n<p>在写这样的表达式时，我们需要遵守下面的惯例：</p>\n\n<ol>\n\t<li>除运算符（<code>/</code>）返回有理数。</li>\n\t<li>任何地方都没有括号。</li>\n\t<li>我们使用通常的操作顺序：乘法和除法发生在加法和减法之前。</li>\n\t<li>不允许使用一元否定运算符（<code>-</code>）。例如，&ldquo;<code>x - x</code>&rdquo; 是一个有效的表达式，因为它只使用减法，但是 &ldquo;<code>-x + x</code>&rdquo; 不是，因为它使用了否定运算符。&nbsp;</li>\n</ol>\n\n<p>我们希望编写一个能使表达式等于给定的目标值 <code>target</code> 且运算符最少的表达式。返回所用运算符的最少数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>x = 3, target = 19\n<strong>输出：</strong>5\n<strong>解释：</strong>3 * 3 + 3 * 3 + 3 / 3 。表达式包含 5 个运算符。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>x = 5, target = 501\n<strong>输出：</strong>8\n<strong>解释：</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 。表达式包含 8 个运算符。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>x = 100, target = 100000000\n<strong>输出：</strong>3\n<strong>解释：</strong>100 * 100 * 100 * 100 。表达式包含 3 个运算符。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\n</ul>\n\n<p>&nbsp;</p>\n"
}
