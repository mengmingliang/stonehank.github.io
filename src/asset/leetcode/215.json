{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findKthLargest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> _qs(nums,<span class=\"hljs-number\">0</span>,nums.length<span class=\"hljs-number\">-1</span>,k)\n \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_qs</span>(<span class=\"hljs-params\">arr,lo,hi,target</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=lo,j=hi,pivot=arr[hi]\n    <span class=\"hljs-keyword\">while</span>(i&lt;j){\n      <span class=\"hljs-keyword\">if</span>(arr[i]&lt;pivot)i++\n      <span class=\"hljs-keyword\">else</span> swap(arr,i,--j)\n    }\n    swap(arr,i,hi)\n    <span class=\"hljs-comment\">// 数一下当前比 i 位置大的数量</span>\n    <span class=\"hljs-keyword\">let</span> curCount=hi-i+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\">// 当前数量和目标一致，返回</span>\n    <span class=\"hljs-keyword\">if</span>(curCount===target)<span class=\"hljs-keyword\">return</span> pivot\n    <span class=\"hljs-comment\">// 当前数量更多，说明这个值偏小，需要在右边找</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(curCount&gt;target)<span class=\"hljs-keyword\">return</span> _qs(arr,i+<span class=\"hljs-number\">1</span>,hi,target)\n    <span class=\"hljs-comment\">// 当前数量更少，说明这个值偏大，需要在左边找，同时要减去已经找到的数量</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> _qs(arr,lo,i<span class=\"hljs-number\">-1</span>,target-curCount)\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> t=arr[i]\n    arr[i]=arr[j]\n    arr[j]=t\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "kth-largest-element-in-an-array",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ul>\n<li><code>sort</code>排序。</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findKthLargest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  <span class=\"hljs-comment\">// O(nlgn)</span>\n  nums.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>b-a)\n  <span class=\"hljs-keyword\">return</span> nums[k<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n<ul>\n<li><code>二分法</code>筛选。</li>\n</ul>\n<p>每次选一个数，查看这个数能排第几位，如果更大则减小，更小则增大。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findKthLargest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  <span class=\"hljs-comment\">// O(nlgn)</span>\n  k=nums.length-k+<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-literal\">Infinity</span>,hi=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n    <span class=\"hljs-keyword\">if</span>(nums[i]&lt;lo)lo=nums[i]\n    <span class=\"hljs-keyword\">if</span>(nums[i]&gt;hi)hi=nums[i]\n  }      \n  <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">if</span>(nums[i]&lt;=mid)count++\n    }\n    <span class=\"hljs-keyword\">if</span>(count&gt;=k)hi=mid\n    <span class=\"hljs-keyword\">else</span> lo=mid+<span class=\"hljs-number\">1</span>\n    }\n  <span class=\"hljs-keyword\">return</span> lo\n};\n</code></pre>\n<ul>\n<li>使用快速选择。</li>\n</ul>\n<ol>\n<li>快速排序我们都很清楚，每一次选中一个<code>pivot</code>，将小于它的放左边，大于它的放右边，执行<code>lgN</code>次。</li>\n<li>快速选择同理，唯一的区别是当每次左右排序后，检查我们要找的值是在左边还是在右边，然后继续执行<code>左</code>或者<code>右</code>，另一边丢弃。</li>\n</ol>\n<hr>\n",
  "content": "<p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,2,1,5,6,4] 和</code> k = 2\n<strong>输出:</strong> 5\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,2,3,1,2,4,5,5,6] 和</code> k = 4\n<strong>输出:</strong> 4</pre>\n\n<p><strong>说明: </strong></p>\n\n<p>你可以假设 k 总是有效的，且 1 &le; k &le; 数组的长度。</p>\n"
}
