{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} points\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minAreaFreeRect = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">points</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> p <span class=\"hljs-keyword\">of</span> points) {\n    set.add(p[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\" \"</span> + p[<span class=\"hljs-number\">1</span>]);\n  }\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;points.length;i++) {\n    <span class=\"hljs-keyword\">let</span> p1=points[i]\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;points.length;j++){\n        <span class=\"hljs-keyword\">let</span> p2=points[j]\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k=j+<span class=\"hljs-number\">1</span>;k&lt;points.length;k++) {\n            <span class=\"hljs-keyword\">let</span> p3=points[k]\n            <span class=\"hljs-keyword\">let</span> p1_3=dist(p1,p3),\n                p2_3=dist(p2,p3),\n                p1_2=dist(p1,p2)\n            <span class=\"hljs-comment\">// 斜边和两边勾股定理不成立，跳过</span>\n            <span class=\"hljs-keyword\">if</span> (p1_3 + p2_3 != p1_2) <span class=\"hljs-keyword\">continue</span>;\n            <span class=\"hljs-keyword\">let</span> x = p1[<span class=\"hljs-number\">0</span>] + p2[<span class=\"hljs-number\">0</span>] - p3[<span class=\"hljs-number\">0</span>];\n            <span class=\"hljs-keyword\">let</span> y = p1[<span class=\"hljs-number\">1</span>] + p2[<span class=\"hljs-number\">1</span>] - p3[<span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-comment\">// 斜边对应两点之和 与 另一条斜边对应两点之和不同，跳过</span>\n            <span class=\"hljs-keyword\">if</span> (!set.has(x + <span class=\"hljs-string\">\" \"</span> + y))<span class=\"hljs-keyword\">continue</span>;\n            <span class=\"hljs-keyword\">let</span> area = <span class=\"hljs-built_in\">Math</span>.sqrt(p1_3 * p2_3)\n            <span class=\"hljs-keyword\">if</span>(area===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n            result = <span class=\"hljs-built_in\">Math</span>.min(result, area);\n          }\n      }\n  }\n  <span class=\"hljs-keyword\">return</span> result===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-number\">0</span>:result\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dist</span>(<span class=\"hljs-params\">p1, p2</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> xD=p1[<span class=\"hljs-number\">0</span>] - p2[<span class=\"hljs-number\">0</span>],\n        yD=p1[<span class=\"hljs-number\">1</span>] - p2[<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">return</span> xD*xD + yD*yD\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-area-rectangle-ii",
  "content": "<p>给定在 xy 平面上的一组点，确定由这些点组成的任何矩形的最小面积，其中矩形的边<strong>不一定平行于</strong> x 轴和 y 轴。</p>\n\n<p>如果没有任何矩形，就返回 0。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/22/1a.png\" style=\"height: 151px; width: 150px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[2,1],[1,0],[0,1]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,2],[2,1],[1,0],[0,1] 处，面积为 2。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/2.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>输入：</strong>[[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>输出：</strong>1.00000\n<strong>解释：</strong>最小面积的矩形出现在 [1,0],[1,1],[2,1],[2,0] 处，面积为 1。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/3.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>输入：</strong>[[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>输出：</strong>0\n<strong>解释：</strong>没法从这些点中组成任何矩形。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/21/4c.png\" style=\"height: 155px; width: 160px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>最小面积的矩形出现在 [2,1],[2,3],[3,3],[3,1] 处，面积为 2。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>所有的点都是不同的。</li>\n\t<li>与真实值误差不超过 <code>10^-5</code>&nbsp;的答案将视为正确结果。</li>\n</ol>\n"
}
