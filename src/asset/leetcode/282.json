{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} num\n * @param {number} target\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> addOperators = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(num===<span class=\"hljs-string\">''</span>)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> result=[]\n  backtrack(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">''</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> result\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">idx,express,last,sum</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(idx===num.length){\n      <span class=\"hljs-keyword\">if</span>(sum===target)result.push(express)\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=idx;i&lt;num.length;i++){\n      <span class=\"hljs-comment\">// 发现前导0，直接break</span>\n      <span class=\"hljs-keyword\">if</span>(i&gt;idx &amp;&amp; num[idx]===<span class=\"hljs-string\">\"0\"</span>)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-comment\">// 通过i的不断递增，s也逐渐变为多位数字</span>\n      <span class=\"hljs-keyword\">let</span> s=num.slice(idx,i+<span class=\"hljs-number\">1</span>),n=+s\n      <span class=\"hljs-keyword\">if</span>(idx===<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-comment\">// 第一个数字的前面不需要添加符号</span>\n        backtrack(i+<span class=\"hljs-number\">1</span>,s,n,n)\n      }<span class=\"hljs-keyword\">else</span>{\n        backtrack(i+<span class=\"hljs-number\">1</span>,express+<span class=\"hljs-string\">'+'</span>+s,n,sum+n)\n        backtrack(i+<span class=\"hljs-number\">1</span>,express+<span class=\"hljs-string\">'-'</span>+s,-n,sum-n)\n        backtrack(i+<span class=\"hljs-number\">1</span>,express+<span class=\"hljs-string\">'*'</span>+s,last*n,sum-last+last*n)           \n      }\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "expression-add-operators",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>回溯</code>，回溯函数定义几个参数，</p>\n<p><code>idx</code>：当前的索引</p>\n<p><code>express</code>：当前表达式</p>\n<p><code>last</code>：最后一个数字(方便乘法处理)</p>\n<p><code>sum</code>：当前的和</p>\n<p>由于数字之间不仅可以通过运算符联系在一起，还可以直接字符串相加，例如<code>1</code>和<code>5</code>，既可以<code>1+5</code>，也可以<code>15</code>。</p>\n<p>因此每次执行需要从<code>idx</code>遍历，并且截取从<code>idx</code>到<code>i</code>的数字作为当前候选数字，随着<code>i</code>的不断增加，当前候选数字也逐渐变得更多位。</p>\n<p>同时，如果发现存在前导<code>0</code>，直接跳出循环。</p>\n<p>但是第一位前面不能有符号(题目说明不允许一元运算符)，因此对于第一位，也就是<code>idx===0</code>，我们只是将当前候选数字递归给后面处理。</p>\n<p>除了第一位，都需要对前面增加<code>+</code>，<code>-</code>，<code>*</code>3种符号分别进行递归处理。</p>\n<h2>最后如果<code>idx</code>到达<code>num</code>的最后并且<code>sum===target</code>，说明这个表达式符合要求，添加到结果。</h2>\n",
  "content": "<p>给定一个仅包含数字&nbsp;<code>0-9</code>&nbsp;的字符串和一个目标值，在数字之间添加<strong>二元</strong>运算符（不是一元）<code>+</code>、<code>-</code>&nbsp;或&nbsp;<code>*</code>&nbsp;，返回所有能够得到目标值的表达式。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\n<strong>输出: </strong>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\n<strong>输出: </strong>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\n<strong>输出: </strong>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\n<strong>输出: </strong>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\n<strong>输出: </strong>[]\n</pre>\n"
}
