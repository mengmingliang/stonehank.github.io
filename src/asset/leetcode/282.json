{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> helper = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">num, target, str, startIndex, lastFactor, sum, result</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (startIndex === num.length &amp;&amp; sum === target) {\n    result.push(str)\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = startIndex; i &lt; num.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (i &gt; startIndex &amp;&amp; num[startIndex] === <span class=\"hljs-string\">'0'</span>) {\n      <span class=\"hljs-keyword\">continue</span>\n    }\n\n    <span class=\"hljs-keyword\">let</span> currStr = num.slice(startIndex, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">let</span> currNum = <span class=\"hljs-built_in\">Number</span>(currStr)\n\n    <span class=\"hljs-keyword\">if</span> (startIndex === <span class=\"hljs-number\">0</span>) {\n      helper(num, target, currStr, i + <span class=\"hljs-number\">1</span>, currNum, currNum, result)\n    } <span class=\"hljs-keyword\">else</span> {\n      helper(num, target, str + <span class=\"hljs-string\">'*'</span> + currStr, i + <span class=\"hljs-number\">1</span>, lastFactor * currNum, sum - lastFactor + lastFactor * currNum, result)\n      helper(num, target, str + <span class=\"hljs-string\">'+'</span> + currStr, i + <span class=\"hljs-number\">1</span>, currNum, sum + currNum, result)\n      helper(num, target, str + <span class=\"hljs-string\">'-'</span> + currStr, i + <span class=\"hljs-number\">1</span>, -currNum, sum - currNum, result)\n    }\n  }\n}\n<span class=\"hljs-keyword\">var</span> addOperators = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">num, target</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> result = []\n  helper(num, target, <span class=\"hljs-string\">''</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, result)\n  <span class=\"hljs-keyword\">return</span> result\n}\n</code></pre>\n"
  ],
  "titleSlug": "expression-add-operators",
  "content": "<p>给定一个仅包含数字&nbsp;<code>0-9</code>&nbsp;的字符串和一个目标值，在数字之间添加<strong>二元</strong>运算符（不是一元）<code>+</code>、<code>-</code>&nbsp;或&nbsp;<code>*</code>&nbsp;，返回所有能够得到目标值的表达式。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\n<strong>输出: </strong>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\n<strong>输出: </strong>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\n<strong>输出: </strong>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\n<strong>输出: </strong>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\n<strong>输出: </strong>[]\n</pre>\n"
}
