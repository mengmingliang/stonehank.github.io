{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestConsecutive = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={},max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=nums[i]\n    <span class=\"hljs-keyword\">if</span>(hash[cur]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> left=hash[cur<span class=\"hljs-number\">-1</span>]?hash[cur<span class=\"hljs-number\">-1</span>]:<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> right=hash[cur+<span class=\"hljs-number\">1</span>]?hash[cur+<span class=\"hljs-number\">1</span>]:<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> sum=left+right+<span class=\"hljs-number\">1</span>\n    hash[cur]=sum\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,sum)\n    hash[cur-left]=sum\n    hash[cur+right]=sum\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-consecutive-sequence",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>使用<code>hash</code>来保存每一个数字的连续长度，对于一个未访问过的数字<code>n</code>，它的连续长度就是<code>它左侧数字(n-1)的长度 + 它右侧数字(n+1)的长度 + 1</code>。</p>\n<p>并且保存当前长度，最后要更新它左侧和右侧的最新连续长度。</p>\n",
  "content": "<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p>\n\n<p>要求算法的时间复杂度为&nbsp;<em>O(n)</em>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;[100, 4, 200, 1, 3, 2]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最长连续序列是 <code>[1, 2, 3, 4]。它的长度为 4。</code></pre>\n"
}
