{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} triangle\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minimumTotal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">triangle</span>) </span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;triangle.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;triangle[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-literal\">Infinity</span>,right=<span class=\"hljs-literal\">Infinity</span>\n      <span class=\"hljs-keyword\">if</span>(j&gt;<span class=\"hljs-number\">0</span>)left=triangle[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n      <span class=\"hljs-keyword\">if</span>(j&lt;triangle[i<span class=\"hljs-number\">-1</span>].length)right=triangle[i<span class=\"hljs-number\">-1</span>][j]\n      triangle[i][j]+=<span class=\"hljs-built_in\">Math</span>.min(left,right)\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;triangle[triangle.length<span class=\"hljs-number\">-1</span>].length;i++){\n    min=<span class=\"hljs-built_in\">Math</span>.min(min,triangle[triangle.length<span class=\"hljs-number\">-1</span>][i])\n  }\n  <span class=\"hljs-keyword\">return</span> min\n};\n</code></pre>\n"
  ],
  "titleSlug": "triangle",
  "translatedContent": "<p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>\n\n<p>例如，给定三角形：</p>\n\n<pre>[\n     [<strong>2</strong>],\n    [<strong>3</strong>,4],\n   [6,<strong>5</strong>,7],\n  [4,<strong>1</strong>,8,3]\n]\n</pre>\n\n<p>自顶向下的最小路径和为&nbsp;<code>11</code>（即，<strong>2&nbsp;</strong>+&nbsp;<strong>3</strong>&nbsp;+&nbsp;<strong>5&nbsp;</strong>+&nbsp;<strong>1</strong>&nbsp;= 11）。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>如果你可以只使用 <em>O</em>(<em>n</em>)&nbsp;的额外空间（<em>n</em> 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p>\n"
}
