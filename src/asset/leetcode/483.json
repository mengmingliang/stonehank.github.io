{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} n\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> smallestGoodBase = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBaseStr</span>(<span class=\"hljs-params\">n,base</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> m=+n, x=+base, baseStr=<span class=\"hljs-string\">''</span>\n      <span class=\"hljs-keyword\">while</span>(m&gt;<span class=\"hljs-number\">0</span>){\n         baseStr=m%x+baseStr\n         m=<span class=\"hljs-built_in\">Math</span>.floor(m/x)\n      }\n      <span class=\"hljs-keyword\">return</span> baseStr      \n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getOriFrombase</span>(<span class=\"hljs-params\">base,l</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=l<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n        res+=<span class=\"hljs-built_in\">Math</span>.pow(base,i)\n      }\n      <span class=\"hljs-keyword\">return</span> res\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isValid</span>(<span class=\"hljs-params\">baseStr</span>)</span>{\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> baseStr){\n        <span class=\"hljs-keyword\">if</span>(n!==<span class=\"hljs-string\">\"1\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createValidStr</span>(<span class=\"hljs-params\">len</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'1'</span>.repeat(len)\n    }\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">2</span>;i&lt;<span class=\"hljs-number\">10</span>;i++){\n      <span class=\"hljs-keyword\">let</span> baseStr=getBaseStr(n,i),\n          isGood=isValid(baseStr)\n      <span class=\"hljs-keyword\">if</span>(isGood)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>+i\n    }\n    <span class=\"hljs-keyword\">let</span> nn=+n,\n        len=n.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=len;i&gt;=<span class=\"hljs-number\">2</span>;i--){\n      <span class=\"hljs-keyword\">let</span> curStr=createValidStr(i)\n      <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">11</span>,hi=nn<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n        <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">let</span> s=getOriFrombase(mid,i)\n        <span class=\"hljs-keyword\">if</span>(s&lt;nn)lo=mid+<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span> hi=mid\n      }\n      <span class=\"hljs-keyword\">let</span> finalS=getBaseStr(n,lo)\n      <span class=\"hljs-keyword\">if</span>(isValid(finalS))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>+lo\n    }\n};\n</code></pre>\n"
  ],
  "titleSlug": "smallest-good-base",
  "content": "<p>对于给定的整数 n, 如果n的k（k&gt;=2）进制数的所有数位全为1，则称&nbsp;k（k&gt;=2）是 n 的一个<em><strong>好进制</strong></em>。</p>\n\n<p>以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;13&quot;\n<strong>输出：</strong>&quot;3&quot;\n<strong>解释：</strong>13 的 3 进制是 111。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;4681&quot;\n<strong>输出：</strong>&quot;8&quot;\n<strong>解释：</strong>4681 的 8 进制是 11111。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>&quot;1000000000000000000&quot;\n<strong>输出：</strong>&quot;999999999999999999&quot;\n<strong>解释：</strong>1000000000000000000 的 999999999999999999 进制是 11。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>n的取值范围是&nbsp;[3, 10^18]。</li>\n\t<li>输入总是有效且没有前导 0。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
