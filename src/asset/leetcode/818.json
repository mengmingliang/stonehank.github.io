{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> racecar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> mem=[]\n  <span class=\"hljs-keyword\">return</span> getStep(target)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStep</span>(<span class=\"hljs-params\">target</span>)</span>{\n    <span class=\"hljs-comment\">// console.log(target)</span>\n    <span class=\"hljs-keyword\">if</span>(target===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(target===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span>(target===<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">if</span>(mem[target]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> mem[target]\n    <span class=\"hljs-keyword\">let</span> [oTar,oSpeed,oStep]=plus(target)\n    <span class=\"hljs-keyword\">let</span> nTar=oTar-oSpeed,nSpeed=oSpeed/<span class=\"hljs-number\">2</span>,nStep=oStep<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-comment\">// console.log(oTar,oSpeed,oStep)</span>\n    <span class=\"hljs-keyword\">if</span>(oTar===target)<span class=\"hljs-keyword\">return</span> oStep\n    <span class=\"hljs-keyword\">let</span> res=oStep+getStep(oTar-target)+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nStep;i++){\n      res=<span class=\"hljs-built_in\">Math</span>.min(res,nStep+getStep(target-nTar+<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,i)<span class=\"hljs-number\">-1</span>)+i+<span class=\"hljs-number\">2</span>)\n    }\n    mem[target]=res\n    <span class=\"hljs-keyword\">return</span> res\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plus</span>(<span class=\"hljs-params\">n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> speed=<span class=\"hljs-number\">1</span>,step=<span class=\"hljs-number\">0</span>,pos=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(pos&lt;n){\n    step++\n    pos+=speed\n    speed=speed*<span class=\"hljs-number\">2</span>\n    } \n    <span class=\"hljs-keyword\">return</span> [pos,speed/<span class=\"hljs-number\">2</span>,step]\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "race-car",
  "content": "<p>你的赛车起始停留在位置 0，速度为 +1，正行驶在一个无限长的数轴上。（车也可以向负数方向行驶。）</p>\n\n<p>你的车会根据一系列由 A（加速）和 R（倒车）组成的指令进行自动驾驶&nbsp;。</p>\n\n<p>当车得到指令 &quot;A&quot; 时, 将会做出以下操作：&nbsp;<code>position += speed, speed *= 2</code>。</p>\n\n<p>当车得到指令 &quot;R&quot; 时, 将会做出以下操作：如果当前速度是正数，则将车速调整为&nbsp;<code>speed = -1</code>&nbsp;；否则将车速调整为&nbsp;<code>speed = 1</code>。&nbsp; (当前所处位置不变。)</p>\n\n<p>例如，当得到一系列指令 &quot;AAR&quot; 后, 你的车将会走过位置 0-&gt;1-&gt;3-&gt;3，并且速度变化为&nbsp;1-&gt;2-&gt;4-&gt;-1。</p>\n\n<p>现在给定一个目标位置，请给出能够到达目标位置的最短指令列表的<strong>长度</strong>。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong> \ntarget = 3\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n最短指令列表为 &quot;AA&quot;\n位置变化为 0-&gt;1-&gt;3\n</pre>\n\n<pre><strong>示例 2:</strong>\n<strong>输入:</strong> \ntarget = 6\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n最短指令列表为 &quot;AAARA&quot;\n位置变化为 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target（目标位置） &lt;= 10000</code>。</li>\n</ul>\n"
}
