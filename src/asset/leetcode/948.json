{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} tokens\n * @param {number} P\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> bagOfTokensScore = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tokens, P</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  tokens.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=tokens.length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPoints</span>(<span class=\"hljs-params\">cur,lo,hi</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=lo;i&lt;=hi;i++){\n      cur-=tokens[i]\n      <span class=\"hljs-keyword\">if</span>(cur&lt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> count\n      count++\n    }\n    <span class=\"hljs-keyword\">return</span> count\n  }\n  <span class=\"hljs-keyword\">while</span>(lo&lt;=hi){\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,getPoints(P,lo,hi))\n    <span class=\"hljs-keyword\">if</span>(P&lt;tokens[lo])<span class=\"hljs-keyword\">break</span>\n    P-=tokens[lo++]\n    P+=tokens[hi--]    \n  }\n  \n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "bag-of-tokens",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>获取最大<code>power</code>的办法就是，使用最小的<code>token</code>换取分数，再用最大的<code>token</code>获取<code>power</code>，也就是对<code>tokens</code>排序，然后减去头一个，增加最后一个。</p>\n<p>那么就不断进行获取最大的<code>power</code>，每次获取<code>power</code>后检查当前能获取的分数并且筛选出最大的分数。</p>\n",
  "content": "<p>你的初始能量为&nbsp;<code>P</code>，初始分数为&nbsp;<code>0</code>，只有一包令牌。</p>\n\n<p>令牌的值为&nbsp;<code>token[i]</code>，每个令牌最多只能使用一次，可能的两种使用方法如下：</p>\n\n<ul>\n\t<li>如果你至少有&nbsp;<code>token[i]</code>&nbsp;点能量，可以将令牌置为正面朝上，失去&nbsp;<code>token[i]</code>&nbsp;点能量，并得到&nbsp;<code>1</code>&nbsp;分。</li>\n\t<li>如果我们至少有&nbsp;<code>1</code>&nbsp;分，可以将令牌置为反面朝上，获得&nbsp;<code>token[i]</code>&nbsp;点能量，并失去&nbsp;<code>1</code>&nbsp;分。</li>\n</ul>\n\n<p>在使用任意数量的令牌后，返回我们可以得到的最大分数。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100], P = 50\n<strong>输出：</strong>0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100,200], P = 150\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>tokens = [100,200,300,400], P = 200\n<strong>输出：</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>tokens.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= tokens[i] &lt; 10000</code></li>\n\t<li><code>0 &lt;= P &lt; 10000</code></li>\n</ol>\n"
}
