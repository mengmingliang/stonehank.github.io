{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} stones\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> lastStoneWeight = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stones</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> pq=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">n</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(pq.length===<span class=\"hljs-number\">0</span> || n&gt;=pq[pq.length<span class=\"hljs-number\">-1</span>]){\n      pq.push(n)\n    }<span class=\"hljs-keyword\">else</span>{\n      pq.splice(bsEnd(pq,n),<span class=\"hljs-number\">0</span>,n)\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delMax</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> pq.pop()\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> stones){\n    insert(n)\n  }\n  <span class=\"hljs-keyword\">while</span>(pq.length&gt;<span class=\"hljs-number\">1</span>){\n    <span class=\"hljs-keyword\">let</span> f=delMax(),\n        s=delMax()\n    <span class=\"hljs-keyword\">let</span> more=<span class=\"hljs-built_in\">Math</span>.max(f,s),\n        less=<span class=\"hljs-built_in\">Math</span>.min(f,s)\n    <span class=\"hljs-keyword\">if</span>(more===less)<span class=\"hljs-keyword\">continue</span>\n    more-=less\n    insert(more)\n  }\n  <span class=\"hljs-keyword\">if</span>(pq.length===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> pq[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "last-stone-weight",
  "hasThinking": false,
  "content": "<p>有一堆石头，每块石头的重量都是正整数。</p>\n\n<p>每一回合，从中选出两块<strong>最重的</strong>石头，然后将它们一起粉碎。假设石头的重量分别为&nbsp;<code>x</code> 和&nbsp;<code>y</code>，且&nbsp;<code>x &lt;= y</code>。那么粉碎的可能结果如下：</p>\n\n<ul>\n\t<li>如果&nbsp;<code>x == y</code>，那么两块石头都会被完全粉碎；</li>\n\t<li>如果&nbsp;<code>x != y</code>，那么重量为&nbsp;<code>x</code>&nbsp;的石头将会完全粉碎，而重量为&nbsp;<code>y</code>&nbsp;的石头新重量为&nbsp;<code>y-x</code>。</li>\n</ul>\n\n<p>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stones.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 1000</code></li>\n</ol>\n"
}
