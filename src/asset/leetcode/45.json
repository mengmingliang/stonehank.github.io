{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> jump = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(nums.length&lt;=<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> maxRange=nums[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> rangeEnd=nums[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length<span class=\"hljs-number\">-1</span>;i++){\n    maxRange=<span class=\"hljs-built_in\">Math</span>.max(maxRange,nums[i]+i)\n    <span class=\"hljs-keyword\">if</span>(i===rangeEnd){\n      rangeEnd=maxRange\n      step++\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> step\n};\n</code></pre>\n"
  ],
  "titleSlug": "jump-game-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>贪心算法，定义一个变量<code>maxRange</code>表示每一个位置能跳到的最大位置，定义变量<code>rangeEnd</code>表示当前能跳到最大的位置，遍历<code>nums</code>不断更新<code>maxRange</code>，\n当<code>i===rangeEnd</code>，更新<code>rangeEnd</code>为最新的<code>maxRange</code>，表示当前这一段能跳的最远距离。</p>\n",
  "content": "<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,1,1,4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 跳到最后一个位置的最小跳跃数是 <code>2</code>。\n&nbsp;    从下标为 0 跳到下标为 1 的位置，跳&nbsp;<code>1</code>&nbsp;步，然后跳&nbsp;<code>3</code>&nbsp;步到达数组的最后一个位置。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>假设你总是可以到达数组的最后一个位置。</p>\n"
}
