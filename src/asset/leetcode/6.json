{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> convert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, numRows</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> col=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span>(numRows===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> s\n  col+=<span class=\"hljs-built_in\">Math</span>.floor(s.length/(numRows+numRows<span class=\"hljs-number\">-2</span>))*(numRows<span class=\"hljs-number\">-2</span>+<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">let</span> m=s.length % (numRows+numRows<span class=\"hljs-number\">-2</span>)\n  <span class=\"hljs-keyword\">if</span>(m&gt;numRows) col+=<span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(m&gt;<span class=\"hljs-number\">0</span>) col+=<span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-keyword\">let</span> aux=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;numRows;i++){\n    aux[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;col;j++) aux[i][j]=<span class=\"hljs-literal\">null</span>\n  }\n  <span class=\"hljs-keyword\">let</span> r=<span class=\"hljs-number\">0</span>,c=<span class=\"hljs-number\">0</span>,idx=<span class=\"hljs-number\">0</span>,ori=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">while</span>(idx&lt;s.length){\n    <span class=\"hljs-keyword\">if</span>(ori===<span class=\"hljs-number\">1</span>){\n      aux[r++][c]=s[idx]\n      <span class=\"hljs-keyword\">if</span>(r===aux.length){ r-=<span class=\"hljs-number\">2</span>; c++; ori=<span class=\"hljs-number\">0</span>}\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(ori===<span class=\"hljs-number\">0</span>){\n      aux[r--][c++]=s[idx]\n      <span class=\"hljs-keyword\">if</span>(r===<span class=\"hljs-number\">-1</span>){ r=<span class=\"hljs-number\">1</span>; c--; ori=<span class=\"hljs-number\">1</span>}      \n    }\n    idx++\n  }\n  <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;aux.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;aux[i].length;j++){\n      <span class=\"hljs-keyword\">if</span>(aux[i][j]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">continue</span>\n      result+=aux[i][j]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "zigzag-conversion",
  "hasThinking": false,
  "content": "<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行&nbsp;Z 字形排列。</p>\n\n<p>比如输入字符串为 <code>&quot;LEETCODEISHIRING&quot;</code>&nbsp;行数为 3 时，排列如下：</p>\n\n<pre>L   C   I   R\nE T O E S I I G\nE   D   H   N\n</pre>\n\n<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。</p>\n\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n\n<pre>string convert(string s, int numRows);</pre>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows = 3\n<strong>输出:</strong> &quot;LCIRETOESIIGEDHN&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows =&nbsp;4\n<strong>输出:</strong>&nbsp;&quot;LDREOEIIECIHNTSG&quot;\n<strong>解释:</strong>\n\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G</pre>\n"
}
