{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string} t\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> minWindow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, t</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">128</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> tLen=t.length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> w <span class=\"hljs-keyword\">of</span> t){\n    <span class=\"hljs-keyword\">let</span> code=w.charCodeAt(<span class=\"hljs-number\">0</span>)\n    count[code]++\n  }\n  <span class=\"hljs-comment\">// console.log(count)</span>\n  <span class=\"hljs-keyword\">let</span> preID=<span class=\"hljs-number\">0</span>,start=<span class=\"hljs-number\">0</span>,end=<span class=\"hljs-literal\">Infinity</span>,curLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n    <span class=\"hljs-keyword\">if</span>(count[s.charCodeAt(i)]--&gt;<span class=\"hljs-number\">0</span>){\n      tLen--\n    }\n    <span class=\"hljs-keyword\">while</span>(tLen===<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">if</span>(i-preID&lt;end-start){\n        end=i+<span class=\"hljs-number\">1</span>\n        start=preID\n      }\n      <span class=\"hljs-keyword\">if</span>(count[s.charCodeAt(preID++)]++==<span class=\"hljs-number\">0</span>) tLen++\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> end===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-string\">''</span>:s.substring(start,end)\n};\n\n\n\n\n</code></pre>\n"
  ],
  "titleSlug": "minimum-window-substring",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>首先对<code>t</code>的字母建立<code>count</code>，以出现频率作为它的值，由于题目没有明确说明大小写，因此设定<code>128</code>位。</p>\n<p>变量<code>tLen</code>表示<code>t</code>的长度；</p>\n<p>变量<code>preID</code>表示当前一个滑动区间的最左侧的索引；</p>\n<p>变量<code>start</code>和<code>end</code>表示最小区间的左索引和右索引。</p>\n<p>遍历<code>s</code>，</p>\n<p>如果<code>count[s.charCodeAt(i)]--&gt;0</code>，说明<code>s[i]</code>属于<code>t</code>，需要<code>tLen--</code>；</p>\n<p>如果<code>tLen===0</code>，说明<code>t</code>中的值已经全部在区间<code>[preID,i]</code>出现了，比较区间<code>[preID,i]</code>和<code>[start,end]</code>，如果更小，更新<code>[start,end]</code>；</p>\n<p>检查<code>count[s.charCodeAt(preID++)]++==0</code>，如果条件成立，说明<code>preID</code>索引刚好调整到跳过<code>1</code>个存在<code>t</code>中的字母，并且这个字母当前已经不存在与<code>[preID,i]</code>区间内。</p>\n<p>遍历完毕后，返回区间<code>[start,end]</code>，如果不存在，则返回<code>''</code>。</p>\n",
  "content": "<p>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: S</strong> = &quot;ADOBECODEBANC&quot;, <strong>T</strong> = &quot;ABC&quot;\n<strong>输出:</strong> &quot;BANC&quot;</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>如果 S 中不存这样的子串，则返回空字符串 <code>&quot;&quot;</code>。</li>\n\t<li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n"
}
