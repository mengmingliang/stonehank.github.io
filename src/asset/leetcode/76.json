{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> minWindow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, t</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={},targetLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;t.length;i++){\n    <span class=\"hljs-keyword\">if</span>(!hash[t[i]]){\n      hash[t[i]]=<span class=\"hljs-number\">1</span>\n      targetLen++\n    }\n    <span class=\"hljs-keyword\">else</span> hash[t[i]]++\n  }\n  <span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-literal\">null</span>,complete=<span class=\"hljs-number\">0</span>,minLen=<span class=\"hljs-literal\">Infinity</span>,begin=<span class=\"hljs-number\">0</span>,end=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">if</span>(complete===targetLen){\n      <span class=\"hljs-keyword\">let</span> check=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">while</span>(check){\n        check=<span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">if</span>(hash[s[left]]&lt;<span class=\"hljs-number\">0</span>){\n          check=<span class=\"hljs-literal\">true</span>\n          hash[s[left++]]++\n        }\n        <span class=\"hljs-keyword\">if</span>(left&lt;s.length &amp;&amp; hash[s[left]]==<span class=\"hljs-literal\">null</span>){\n          check=<span class=\"hljs-literal\">true</span>\n          left++\n        }\n      }\n      <span class=\"hljs-keyword\">if</span>(i-left&lt;minLen){\n        begin=left\n        end=i\n        minLen=i-left\n      }\n      hash[s[left++]]++\n      complete--\n    }\n    <span class=\"hljs-keyword\">if</span>(i===s.length)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">let</span> letter=s[i]\n    <span class=\"hljs-keyword\">if</span>(hash[letter]!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">if</span>(left==<span class=\"hljs-literal\">null</span>)left=i\n      hash[letter]--\n      <span class=\"hljs-keyword\">if</span>(hash[letter]===<span class=\"hljs-number\">0</span>)complete++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">continue</span>\n  }\n  <span class=\"hljs-keyword\">return</span> left!=<span class=\"hljs-literal\">null</span> ? s.substring(begin,end): <span class=\"hljs-string\">\"\"</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-window-substring",
  "hasThinking": false,
  "content": "<p>给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: S</strong> = &quot;ADOBECODEBANC&quot;, <strong>T</strong> = &quot;ABC&quot;\n<strong>输出:</strong> &quot;BANC&quot;</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>如果 S 中不存这样的子串，则返回空字符串 <code>&quot;&quot;</code>。</li>\n\t<li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li>\n</ul>\n"
}
