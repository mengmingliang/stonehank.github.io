{
  "code": [
    "/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar gameOfLife = function(board) {\n    let affect={}\n    let pos=[[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1]]\n    for(let i=0;i<board.length;i++){\n      for(let j=0;j<board[i].length;j++){\n        let nebo=check(board,i,j),\n            cur=board[i][j]\n        if(affect[i+'-'+j]){\n          nebo[1]+=affect[i+'-'+j]\n          delete(affect[i+'-'+j])\n        }\n        let res=judge(cur,nebo)\n        if(res!==cur){\n          if(res===1)influence(i,j,true)\n          else influence(i,j,false)\n        }\n        board[i][j]=res\n      }\n      // console.log(Object.keys(affect).length)\n    }\n    function check(board,x,y,affect){\n      let data={0:0,1:0}\n      for(let i=0;i<pos.length;i++){\n        let newX=x+pos[i][0],newY=y+pos[i][1]\n        if(newX>=0 && newX<board.length && newY>=0 && newY<board[0].length){\n          data[board[newX][newY]]++\n        }\n      }\n      return data\n    }\n    function judge(cur,nebo){\n      let n1=nebo[1]\n      if(cur===1){\n        if(n1>=2 && n1<=3) return 1\n        else return 0\n      }else{\n        if(n1===3)return 1\n        else return 0\n      }\n    }\n    function influence(x,y,asd){\n      for(let i=0;i<pos.length;i++){\n        let newX=x+pos[i][0],newY=y+pos[i][1]\n        if(((newY>y && newX>=x) || (newY<=y && newX>x))&& newX<board.length &&  newY<board[0].length){\n          if(asd){\n            if(!affect[newX+'-'+newY])affect[newX+'-'+newY]=-1\n            else affect[newX+'-'+newY]--\n          }else{\n            if(!affect[newX+'-'+newY])affect[newX+'-'+newY]=1\n            else affect[newX+'-'+newY]++      \n          }\n          if(!affect[newX+'-'+newY])delete(affect[newX+'-'+newY])\n        }\n      }\n    }\n};"
  ],
  "titleSlug": "game-of-life",
  "content": "<p>According to the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia&#39;s article</a>: &quot;The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>\r\n\r\n<p>Given a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\r\n\r\n<ol>\r\n\t<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\r\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\r\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n</ol>\r\n\r\n<p>Write a function to compute the next state (after one update) of the board given its current state.&nbsp;<span>The next state is created by applying the above rules simultaneously to every cell in the current state, where&nbsp;births and deaths occur simultaneously.</span></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[\r\n&nbsp; [0,1,0],\r\n&nbsp; [0,0,1],\r\n&nbsp; [1,1,1],\r\n&nbsp; [0,0,0]\r\n]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-1\">[\r\n&nbsp; [0,0,0],\r\n&nbsp; [1,0,1],\r\n&nbsp; [0,1,1],\r\n&nbsp; [0,1,0]\r\n]</span>\r\n</pre>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<ol>\r\n\t<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>\r\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>\r\n</ol>\r\n",
  "translatedContent": "<p>根据<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">百度百科</a>，生命游戏，简称为生命，是英国数学家约翰&middot;何顿&middot;康威在1970年发明的细胞自动机。</p>\n\n<p>给定一个包含 m &times; n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 <em>live</em>（1）即为活细胞， 或 <em>dead</em>（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p>\n\n<ol>\n\t<li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li>\n\t<li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li>\n\t<li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li>\n\t<li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li>\n</ol>\n\n<p>根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>输出: \n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li>\n\t<li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li>\n</ul>\n"
}
