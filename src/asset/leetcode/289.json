{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> gameOfLife = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> affect={}\n    <span class=\"hljs-keyword\">let</span> pos=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>]]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board.length;i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;board[i].length;j++){\n        <span class=\"hljs-keyword\">let</span> nebo=check(board,i,j),\n            cur=board[i][j]\n        <span class=\"hljs-keyword\">if</span>(affect[i+<span class=\"hljs-string\">'-'</span>+j]){\n          nebo[<span class=\"hljs-number\">1</span>]+=affect[i+<span class=\"hljs-string\">'-'</span>+j]\n          <span class=\"hljs-keyword\">delete</span>(affect[i+<span class=\"hljs-string\">'-'</span>+j])\n        }\n        <span class=\"hljs-keyword\">let</span> res=judge(cur,nebo)\n        <span class=\"hljs-keyword\">if</span>(res!==cur){\n          <span class=\"hljs-keyword\">if</span>(res===<span class=\"hljs-number\">1</span>)influence(i,j,<span class=\"hljs-literal\">true</span>)\n          <span class=\"hljs-keyword\">else</span> influence(i,j,<span class=\"hljs-literal\">false</span>)\n        }\n        board[i][j]=res\n      }\n      <span class=\"hljs-comment\">// console.log(Object.keys(affect).length)</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">board,x,y,affect</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> data={<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">0</span>}\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pos.length;i++){\n        <span class=\"hljs-keyword\">let</span> newX=x+pos[i][<span class=\"hljs-number\">0</span>],newY=y+pos[i][<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">if</span>(newX&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; newX&lt;board.length &amp;&amp; newY&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; newY&lt;board[<span class=\"hljs-number\">0</span>].length){\n          data[board[newX][newY]]++\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> data\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">judge</span>(<span class=\"hljs-params\">cur,nebo</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> n1=nebo[<span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">if</span>(n1&gt;=<span class=\"hljs-number\">2</span> &amp;&amp; n1&lt;=<span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(n1===<span class=\"hljs-number\">3</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n      }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">influence</span>(<span class=\"hljs-params\">x,y,asd</span>)</span>{\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pos.length;i++){\n        <span class=\"hljs-keyword\">let</span> newX=x+pos[i][<span class=\"hljs-number\">0</span>],newY=y+pos[i][<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">if</span>(((newY&gt;y &amp;&amp; newX&gt;=x) || (newY&lt;=y &amp;&amp; newX&gt;x))&amp;&amp; newX&lt;board.length &amp;&amp;  newY&lt;board[<span class=\"hljs-number\">0</span>].length){\n          <span class=\"hljs-keyword\">if</span>(asd){\n            <span class=\"hljs-keyword\">if</span>(!affect[newX+<span class=\"hljs-string\">'-'</span>+newY])affect[newX+<span class=\"hljs-string\">'-'</span>+newY]=<span class=\"hljs-number\">-1</span>\n            <span class=\"hljs-keyword\">else</span> affect[newX+<span class=\"hljs-string\">'-'</span>+newY]--\n          }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(!affect[newX+<span class=\"hljs-string\">'-'</span>+newY])affect[newX+<span class=\"hljs-string\">'-'</span>+newY]=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span> affect[newX+<span class=\"hljs-string\">'-'</span>+newY]++      \n          }\n          <span class=\"hljs-keyword\">if</span>(!affect[newX+<span class=\"hljs-string\">'-'</span>+newY])<span class=\"hljs-keyword\">delete</span>(affect[newX+<span class=\"hljs-string\">'-'</span>+newY])\n        }\n      }\n    }\n};\n</code></pre>\n"
  ],
  "titleSlug": "game-of-life",
  "translatedContent": "<p>根据<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">百度百科</a>，生命游戏，简称为生命，是英国数学家约翰&middot;何顿&middot;康威在1970年发明的细胞自动机。</p>\n\n<p>给定一个包含 m &times; n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 <em>live</em>（1）即为活细胞， 或 <em>dead</em>（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p>\n\n<ol>\n\t<li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li>\n\t<li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li>\n\t<li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li>\n\t<li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li>\n</ol>\n\n<p>根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>输出: \n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li>\n\t<li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li>\n</ul>\n"
}
