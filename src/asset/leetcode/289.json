{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> gameOfLife = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n  <span class=\"hljs-comment\">// 发生变化0,1 -&gt;  4,5</span>\n  <span class=\"hljs-keyword\">let</span> m=board.length,n=board[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">let</span> cur=board[i][j]\n      <span class=\"hljs-keyword\">let</span> live=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">-1</span>;k&lt;=<span class=\"hljs-number\">1</span>;k++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> l=<span class=\"hljs-number\">-1</span>;l&lt;=<span class=\"hljs-number\">1</span>;l++){\n          <span class=\"hljs-keyword\">if</span>(k===<span class=\"hljs-number\">0</span> &amp;&amp; l===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> nx=i+k,ny=j+l\n          <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || ny&lt;<span class=\"hljs-number\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> adj=board[nx][ny]\n          <span class=\"hljs-keyword\">if</span>(isLive(adj))live++\n        }\n      }\n      <span class=\"hljs-keyword\">if</span>(isLive(cur)){\n        <span class=\"hljs-keyword\">if</span>(live&lt;<span class=\"hljs-number\">2</span> || live&gt;<span class=\"hljs-number\">3</span>)board[i][j]=<span class=\"hljs-number\">5</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(live===<span class=\"hljs-number\">3</span>)board[i][j]=<span class=\"hljs-number\">4</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">if</span>(board[i][j]===<span class=\"hljs-number\">4</span>)board[i][j]=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(board[i][j]===<span class=\"hljs-number\">5</span>)board[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isLive</span>(<span class=\"hljs-params\">num</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(num===<span class=\"hljs-number\">1</span> || num===<span class=\"hljs-number\">5</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "game-of-life",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>由于是原地修改，我们将本轮变化的<code>0</code>修改成<code>4</code>，变化的<code>1</code>修改成<code>5</code>，至于原因，因为每一轮我们对每一个<code>0</code>和<code>1</code>都要查看，\n如果修改后还是<code>0</code>和<code>1</code>，将会需要更加复杂的分辨，才能不重复修改。</p>\n<p>每一轮修改完毕后，对所有的<code>4</code>和<code>5</code>调回<code>0</code>和<code>1</code>。</p>\n<p>思路了解后，剩下的就是简单的查询每一个格的周围<code>8</code>个方向的数据，在判断当前格子是<code>live</code>还是<code>dead</code>。</p>\n",
  "content": "<p>根据<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">百度百科</a>，生命游戏，简称为生命，是英国数学家约翰&middot;何顿&middot;康威在1970年发明的细胞自动机。</p>\n\n<p>给定一个包含 m &times; n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 <em>live</em>（1）即为活细胞， 或 <em>dead</em>（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p>\n\n<ol>\n\t<li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li>\n\t<li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li>\n\t<li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li>\n\t<li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li>\n</ol>\n\n<p>根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>输出: \n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li>\n\t<li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li>\n</ul>\n"
}
