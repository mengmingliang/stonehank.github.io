{
  "code": [
    "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindrome = function(s) {\n    let c={},remain=0,max=0\n    for(let i=0;i<s.length;i++){\n        if(!c[s[i]]){\n            c[s[i]]=1\n            remain++\n        }else{\n            max+=2\n            remain--\n            c[s[i]]=0\n        }\n    }\n    return max+(remain>0?1:0)\n};\n"
  ],
  "titleSlug": "longest-palindrome",
  "content": "<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>\r\n\r\n<p>This is case sensitive, for example <code>\"Aa\"</code> is not considered a palindrome here.</p>\r\n\r\n<p><b>Note:</b><br />\r\nAssume the length of given string will not exceed 1,010.\r\n</p>\r\n\r\n<p><b>Example: </b>\r\n<pre>\r\nInput:\r\n\"abccccdd\"\r\n\r\nOutput:\r\n7\r\n\r\nExplanation:\r\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>\n\n<p>在构造过程中，请注意区分大小写。比如&nbsp;<code>&quot;Aa&quot;</code>&nbsp;不能当做一个回文字符串。</p>\n\n<p><strong>注意:</strong><br />\n假设字符串的长度不会超过 1010。</p>\n\n<p><strong>示例 1: </strong></p>\n\n<pre>\n输入:\n&quot;abccccdd&quot;\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。\n</pre>\n"
}
