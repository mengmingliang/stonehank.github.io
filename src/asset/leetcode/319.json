{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> bulbSwitch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.sqrt(n))\n};\n</code></pre>\n"
  ],
  "titleSlug": "bulb-switcher",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>需要求满足<code>i*i&lt;=n</code>的个数。</p>\n<p>因为当一个数内部被按了双数次，相当于还是开，而被按了单数次，就是关。</p>\n<p>例如<code>6</code>，当<code>i==2</code>的时候，它被按1次，当<code>i==3</code>，它被按1次，当<code>i==6</code>，它被按1次，总共3次，最后就是关。</p>\n<p>只有<code>i^2</code>这种数 ，它才会被按双数次。</p>\n<ul>\n<li>\n<p>例如 <code>20</code>，它能被它本身整除，按的次数<code>+1</code>；</p>\n<p>接着它能被<code>2</code>整除，那么同样它也能被<code>10</code>整除，按的次数<code>+2</code>；</p>\n<p>接着它能被<code>4</code>整除，那么同样它也能被<code>5</code>整除，按的次数<code>+2</code>；</p>\n<p>因此最后是单数。</p>\n</li>\n<li>\n<p>例如<code>25</code>，它能被它本身整除，按的次数<code>+1</code>；</p>\n<p>接着能被<code>5</code>整除，因为两个<code>5</code>重复，因此按的次数<code>+1</code>；</p>\n<p>最终还是双数。</p>\n</li>\n</ul>\n",
  "content": "<p>初始时有&nbsp;<em>n&nbsp;</em>个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第&nbsp;<em>i</em> 轮，每&nbsp;<em>i&nbsp;</em>个灯泡切换一次开关。 对于第&nbsp;<em>n&nbsp;</em>轮，你只切换最后一个灯泡的开关。 找出&nbsp;<em>n&nbsp;</em>轮后有多少个亮着的灯泡。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong>3\n<strong>输出:</strong> 1 \n<strong>解释:</strong> \n初始时, 灯泡状态 <strong>[关闭, 关闭, 关闭]</strong>.\n第一轮后, 灯泡状态 <strong>[开启, 开启, 开启]</strong>.\n第二轮后, 灯泡状态 <strong>[开启, 关闭, 开启]</strong>.\n第三轮后, 灯泡状态 <strong>[开启, 关闭, 关闭]</strong>. \n\n你应该返回 1，因为只有一个灯泡还亮着。\n</pre>\n"
}
