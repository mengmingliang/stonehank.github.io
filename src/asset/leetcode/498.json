{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findDiagonalOrder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(matrix.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> []\n    <span class=\"hljs-keyword\">let</span> colL=matrix.length, rowL=matrix[<span class=\"hljs-number\">0</span>].length, max=colL*rowL\n    <span class=\"hljs-keyword\">let</span> result=[]\n    toRightTop(result,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toRightTop</span>(<span class=\"hljs-params\">result,i,j</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(result.length&gt;=max)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-number\">0</span> || j&gt;=rowL){\n            <span class=\"hljs-keyword\">if</span>(j&gt;=rowL){ j=rowL<span class=\"hljs-number\">-1</span>; i+=<span class=\"hljs-number\">2</span>}\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-number\">0</span>) i=<span class=\"hljs-number\">0</span>\n            toLeftDown(result,i,j)        \n        }<span class=\"hljs-keyword\">else</span>{\n            result.push(matrix[i][j])\n            toRightTop(result,i<span class=\"hljs-number\">-1</span>,j+<span class=\"hljs-number\">1</span>)      \n        }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toLeftDown</span>(<span class=\"hljs-params\">result,i,j</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(result.length===max)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(i&gt;=colL || j&lt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">if</span>(i&gt;=colL){ i=colL<span class=\"hljs-number\">-1</span>; j+=<span class=\"hljs-number\">2</span>}\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j&lt;<span class=\"hljs-number\">0</span>) j=<span class=\"hljs-number\">0</span>\n            toRightTop(result,i,j)\n        }<span class=\"hljs-keyword\">else</span>{\n            result.push(matrix[i][j])\n            toLeftDown(result,i+<span class=\"hljs-number\">1</span>,j<span class=\"hljs-number\">-1</span>)            \n        }\n    }\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "diagonal-traverse",
  "content": "<p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>输出:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>解释:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定矩阵中的元素总数不会超过 100000 。</li>\n</ol>\n"
}
