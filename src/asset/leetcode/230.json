{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> kthSmallest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, k</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> num=k,res,flag=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dsf</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!flag)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span> node\n        <span class=\"hljs-keyword\">if</span>(node.left)dsf(node.left)\n        <span class=\"hljs-keyword\">if</span>(--num===<span class=\"hljs-number\">0</span>){\n            flag=<span class=\"hljs-literal\">false</span>\n            <span class=\"hljs-keyword\">return</span> res=node.val\n        }\n        <span class=\"hljs-keyword\">if</span>(node.right)dsf(node.right)\n    }\n    dsf(root)\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "kth-smallest-element-in-a-bst",
  "content": "<p>给定一个二叉搜索树，编写一个函数&nbsp;<code>kthSmallest</code>&nbsp;来查找其中第&nbsp;<strong>k&nbsp;</strong>个最小的元素。</p>\n\n<p><strong>说明：</strong><br>\n你可以假设 k 总是有效的，1 &le; k &le; 二叉搜索树元素个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>输出:</strong> 3</pre>\n\n<p><strong>进阶：</strong><br>\n如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化&nbsp;<code>kthSmallest</code>&nbsp;函数？</p>\n"
}
