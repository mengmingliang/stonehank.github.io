{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} G\n * @param {number} P\n * @param {number[]} group\n * @param {number[]} profit\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> profitableSchemes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">G, P, group, profit</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>,MOD=<span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=P;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;=G;j++){\n      dp[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;group.length;i++){\n    <span class=\"hljs-keyword\">let</span> curp=profit[i],curg=group[i]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=P;j&gt;=<span class=\"hljs-number\">0</span>;j--){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=G-curg;k&gt;=<span class=\"hljs-number\">0</span>;k--){\n        <span class=\"hljs-keyword\">let</span> maxP=<span class=\"hljs-built_in\">Math</span>.min(j+curp,P)\n        dp[maxP][k+curg]=(dp[maxP][k+curg]+dp[j][k]) % MOD\n      }\n    }\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> dp[P])res=(res+n) % MOD\n  <span class=\"hljs-comment\">// console.log(dp)</span>\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "profitable-schemes",
  "hasThinking": false,
  "content": "<p>帮派里有 G 名成员，他们可能犯下各种各样的罪行。</p>\n\n<p>第&nbsp;<code>i</code>&nbsp;种犯罪会产生&nbsp;<code>profit[i]</code>&nbsp;的利润，它要求&nbsp;<code>group[i]</code>&nbsp;名成员共同参与。</p>\n\n<p>让我们把这些犯罪的任何子集称为盈利计划，该计划至少产生&nbsp;<code>P</code> 的利润。</p>\n\n<p>有多少种方案可以选择？因为答案很大，所以<strong>返回它模&nbsp;</strong><code>10^9 + 7</code><strong>&nbsp;的值</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre><strong>输入：</strong>G = 5, P = 3, group = [2,2], profit = [2,3]\n<strong>输出：</strong>2\n<strong>解释： </strong>\n至少产生 3 的利润，该帮派可以犯下罪 0 和罪 1 ，或仅犯下罪 1 。\n总的来说，有两种方案。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入：</strong>G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\n<strong>输出：</strong>7\n<strong>解释：</strong>\n至少产生 5 的利润，只要他们犯其中一种罪就行，所以该帮派可以犯下任何罪行 。\n有 7 种可能的计划：(0)，(1)，(2)，(0,1)，(0,2)，(1,2)，以及 (0,1,2) 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
