{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a point.\n * function Point(x, y) {\n *     this.x = x;\n *     this.y = y;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Point[]} points\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxPoints = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">points</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;points.length;i++){\n    <span class=\"hljs-comment\">// 确定第一个点</span>\n    <span class=\"hljs-keyword\">let</span> first=points[i]\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\">// if(maxLen===0)maxLen=1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;points.length;j++){\n      <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">continue</span>\n      count++\n      <span class=\"hljs-comment\">// 确定第二个点，如果第二个点和第一个点相同，则继续选择下一个第二个点</span>\n      <span class=\"hljs-keyword\">let</span> sec=points[j]\n      <span class=\"hljs-keyword\">let</span> dx=sec.x-first.x,dy=sec.y-first.y\n      <span class=\"hljs-keyword\">if</span>(dx===<span class=\"hljs-number\">0</span> &amp;&amp; dy===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=j+<span class=\"hljs-number\">1</span>;k&lt;points.length;k++){\n        <span class=\"hljs-comment\">// 通过前面2个点的间隔，筛选后面的点</span>\n        <span class=\"hljs-keyword\">if</span>(k===i)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">let</span> o=points[k]\n        <span class=\"hljs-keyword\">let</span> deltX=o.x-first.x,\n            deltY=o.y-first.y\n        <span class=\"hljs-keyword\">if</span>(dx===<span class=\"hljs-number\">0</span> &amp;&amp; deltX===<span class=\"hljs-number\">0</span>)count++\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(dy===<span class=\"hljs-number\">0</span> &amp;&amp; deltY===<span class=\"hljs-number\">0</span>)count++\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(deltX/deltY===dx/dy)count++\n      }\n      maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,count)\n      count=<span class=\"hljs-number\">1</span>\n    }\n    maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,count)\n  }\n  <span class=\"hljs-keyword\">return</span> maxLen\n};\n</code></pre>\n"
  ],
  "titleSlug": "max-points-on-a-line",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>原理：两点确定一条直线。</p>\n<ol>\n<li>\n<p>确定第一个点。</p>\n</li>\n<li>\n<p>确定第二个点，如果第二个点和第一个点相同，则继续选择下一个第二个点。</p>\n<p>注意：</p>\n<ul>\n<li>相同的时候，<code>count++</code>也要执行。</li>\n</ul>\n</li>\n<li>\n<p>根据前面亮点的<code>dx=p2.x-p1.x</code>和<code>dy=p2.y-p1.y</code>，确定后续的其他点。</p>\n<p>注意：</p>\n<ul>\n<li>当存在<code>dx===0</code>或者<code>dy===0</code>，直接判断<code>p3.x-p1.x</code>或者<code>p3.y-p1.y</code>是否为<code>0</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n",
  "content": "<p>给定一个二维平面，平面上有&nbsp;<em>n&nbsp;</em>个点，求最多有多少个点在同一条直线上。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [[1,1],[2,2],[3,3]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n^\n|\n| &nbsp; &nbsp; &nbsp; &nbsp;o\n| &nbsp; &nbsp; o\n| &nbsp;o &nbsp;\n+-------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3  4\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n^\n|\n|  o\n| &nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;      o\n| &nbsp;&nbsp;&nbsp;&nbsp;   o\n| &nbsp;o &nbsp;      o\n+-------------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6</pre>\n"
}
