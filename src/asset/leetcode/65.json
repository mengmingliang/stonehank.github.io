{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> needNum=<span class=\"hljs-literal\">false</span>,nothing=<span class=\"hljs-literal\">true</span>,noAnything=<span class=\"hljs-literal\">false</span>,noState=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> hasNum=<span class=\"hljs-literal\">false</span>,hasPoint=<span class=\"hljs-literal\">false</span>,hasState=<span class=\"hljs-literal\">false</span>,hasE=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n    <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\" \"</span>){\n      <span class=\"hljs-keyword\">if</span>(nothing)<span class=\"hljs-keyword\">continue</span>\n      noAnything=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">continue</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(noAnything){\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"+\"</span> || s[i]===<span class=\"hljs-string\">\"-\"</span>){\n      <span class=\"hljs-keyword\">if</span>(noState)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasNum &amp;&amp; !hasE) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasPoint &amp;&amp; (!hasNum || !hasE))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasState &amp;&amp; (!hasNum || !hasE))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasE &amp;&amp; !hasNum)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      hasState=<span class=\"hljs-literal\">true</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i])){\n      <span class=\"hljs-keyword\">if</span>(needNum)needNum=<span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasE)noState=<span class=\"hljs-literal\">true</span>\n      hasNum=<span class=\"hljs-literal\">true</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"e\"</span>){\n      <span class=\"hljs-keyword\">if</span>(!hasNum)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasE)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      hasE=<span class=\"hljs-literal\">true</span>\n      needNum=<span class=\"hljs-literal\">true</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\".\"</span>){\n      <span class=\"hljs-keyword\">if</span>(hasPoint)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(hasE)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      hasPoint=<span class=\"hljs-literal\">true</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    nothing=<span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> !needNum &amp;&amp; !nothing &amp;&amp; hasNum\n};\n</code></pre>\n"
  ],
  "titleSlug": "valid-number",
  "content": "<p>验证给定的字符串是否为数字。</p>\n\n<p>例如:<br>\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br>\n<code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br>\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br>\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br>\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code></p>\n\n<p><strong>说明:</strong>&nbsp;我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。</p>\n\n<p><strong>更新于 2015-02-10:</strong><br>\n<code>C++</code>函数的形式已经更新了。如果你仍然看见你的函数接收&nbsp;<code>const char *</code> 类型的参数，请点击重载按钮重置你的代码。</p>\n"
}
