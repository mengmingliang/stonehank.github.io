{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} blocked\n * @param {number[]} source\n * @param {number[]} target\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isEscapePossible = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">blocked, source, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(blocked.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> len=blocked.length\n  <span class=\"hljs-keyword\">let</span> moved=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">let</span> blockedHash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [x,y] <span class=\"hljs-keyword\">of</span> blocked){\n    blockedHash[x+<span class=\"hljs-string\">' '</span>+y]=<span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">let</span> r1=connect(source,target),\n      r2=connect(target,source)\n  <span class=\"hljs-keyword\">return</span> r1 &amp;&amp; r2\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">connect</span>(<span class=\"hljs-params\">point,tar</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> arr=[point],limit=<span class=\"hljs-built_in\">Math</span>.floor(len*len / <span class=\"hljs-built_in\">Math</span>.PI)\n    <span class=\"hljs-keyword\">let</span> hash={}\n    hash[point[<span class=\"hljs-number\">0</span>]+<span class=\"hljs-string\">' '</span>+point[<span class=\"hljs-number\">1</span>]]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">let</span> len=arr.length\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n        <span class=\"hljs-keyword\">let</span> [x,y]=arr.shift()\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moved){\n          <span class=\"hljs-keyword\">let</span> nx=x+dx,ny=y+dy\n          <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || ny&lt;<span class=\"hljs-number\">0</span> || nx&gt;=<span class=\"hljs-number\">1e6</span> || ny&gt;=<span class=\"hljs-number\">1e6</span>)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">if</span>(blockedHash[nx+<span class=\"hljs-string\">' '</span>+ny])<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">if</span>(hash[nx+<span class=\"hljs-string\">' '</span>+ny])<span class=\"hljs-keyword\">continue</span>\n          hash[nx+<span class=\"hljs-string\">' '</span>+ny]=<span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-keyword\">if</span>(nx===tar[<span class=\"hljs-number\">0</span>] &amp;&amp; ny===tar[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-keyword\">if</span>(limit--===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n          arr.push([nx,ny])\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "escape-a-large-maze",
  "hasThinking": false,
  "content": "<p>在一个 10^6 x 10^6 的网格中，每个网格块的坐标为&nbsp;<code>(x, y)</code>，其中&nbsp;<code>0 &lt;= x, y &lt; 10^6</code>。</p>\n\n<p>我们从源方格&nbsp;<code>source</code>&nbsp;开始出发，意图赶往目标方格&nbsp;<code>target</code>。每次移动，我们都可以走到网格中在四个方向上相邻的方格，只要该方格不在给出的封锁列表&nbsp;<code>blocked</code>&nbsp;上。</p>\n\n<p>只有在可以通过一系列的移动到达目标方格时才返回&nbsp;<code>true</code>。否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n从源方格无法到达目标方格，因为我们无法在网格中移动。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>blocked = [], source = [0,0], target = [999999,999999]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n因为没有方格被封锁，所以一定可以到达目标方格。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= blocked.length &lt;= 200</code></li>\n\t<li><code>blocked[i].length == 2</code></li>\n\t<li><code>0 &lt;= blocked[i][j] &lt; 10^6</code></li>\n\t<li><code>source.length == target.length == 2</code></li>\n\t<li><code>0 &lt;= source[i][j], target[i][j] &lt; 10^6</code></li>\n\t<li><code>source != target</code></li>\n</ol>\n"
}
