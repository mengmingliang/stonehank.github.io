{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numSubmatrixSumTarget = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> m=matrix.length,n=matrix[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-number\">0</span>;left&lt;n;left++){\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-built_in\">Array</span>(m).fill(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> right=left;right&lt;n;right++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> r=<span class=\"hljs-number\">0</span>;r&lt;m;r++){\n        sum[r]+=matrix[r][right]\n      }\n      <span class=\"hljs-keyword\">let</span> countHash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n      countHash.set(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">let</span> csum=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> sum){\n        csum+=s\n        <span class=\"hljs-keyword\">let</span> t=csum-target\n        <span class=\"hljs-keyword\">if</span>(countHash.has(t))res+=countHash.get(t)\n        <span class=\"hljs-comment\">// res+=countHash[t]||0</span>\n        <span class=\"hljs-keyword\">if</span>(countHash.has(csum))countHash.set(csum,countHash.get(csum)+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">else</span> countHash.set(csum,<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-comment\">// if(countHash[csum]==null)countHash[csum]=1</span>\n        <span class=\"hljs-comment\">// else countHash[csum]++</span>\n      }   \n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-submatrices-that-sum-to-target",
  "hasThinking": false,
  "content": "<p>给出矩阵&nbsp;<code>matrix</code>&nbsp;和目标值&nbsp;<code>target</code>，返回元素总和等于目标值的非空子矩阵的数量。</p>\n\n<p>子矩阵&nbsp;<code>x1, y1, x2, y2</code>&nbsp;是满足 <code>x1 &lt;= x &lt;= x2</code>&nbsp;且&nbsp;<code>y1 &lt;= y &lt;= y2</code>&nbsp;的所有单元&nbsp;<code>matrix[x][y]</code>&nbsp;的集合。</p>\n\n<p>如果&nbsp;<code>(x1, y1, x2, y2)</code> 和&nbsp;<code>(x1&#39;, y1&#39;, x2&#39;, y2&#39;)</code>&nbsp;两个子矩阵中部分坐标不同（如：<code>x1 != x1&#39;</code>），那么这两个子矩阵也不同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\n<strong>输出：</strong>4\n<strong>解释：</strong>四个只含 0 的 1x1 子矩阵。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[1,-1],[-1,1]], target = 0\n<strong>输出：</strong>5\n<strong>解释：</strong>两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><strong>提示：</strong></strong></p>\n\n<ol>\n\t<li><code>1 &lt;= matrix.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= matrix[0].length &lt;= 300</code></li>\n\t<li><code>-1000 &lt;= matrix[i] &lt;= 1000</code></li>\n\t<li><code>-10^8 &lt;= target &lt;= 10^8</code></li>\n</ol>\n"
}
