{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} nums\n * @param {number} r\n * @param {number} c\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> matrixReshape = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, r, c</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> m=nums.length,n=nums[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">if</span>(m*n!==r*c)<span class=\"hljs-keyword\">return</span> nums\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-built_in\">Array</span>(r).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(c).fill(<span class=\"hljs-number\">0</span>))\n  <span class=\"hljs-keyword\">let</span> save=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      save.push(nums[i][j])\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> idx=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;r;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;c;j++){\n      res[i][j]=save[idx++]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "reshape-the-matrix",
  "hasThinking": false,
  "content": "<p>在MATLAB中，有一个非常有用的函数 <code>reshape</code>，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</p>\n\n<p>给出一个由二维数组表示的矩阵，以及两个正整数<code>r</code>和<code>c</code>，分别表示想要的重构的矩阵的行数和列数。</p>\n\n<p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong>行遍历顺序</strong>填充。</p>\n\n<p>如果具有给定参数的<code>reshape</code>操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n<strong>输出:</strong> \n[[1,2,3,4]]\n<strong>解释:</strong>\n行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n<strong>输出:</strong> \n[[1,2],\n [3,4]]\n<strong>解释:</strong>\n没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>给定矩阵的宽和高范围在 [1, 100]。</li>\n\t<li>给定的 r 和 c 都是正数。</li>\n</ol>\n"
}
