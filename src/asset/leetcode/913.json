{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} graph\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> catMouseGame = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">graph</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> size = graph.length;\n  <span class=\"hljs-keyword\">let</span> dp = <span class=\"hljs-built_in\">Array</span>(size).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(size).fill(<span class=\"hljs-number\">-1</span>))\n  <span class=\"hljs-comment\">// for (let i = 0; i &lt; size; i++) dp[i]=-1</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; ++i) {\n      dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">// mouse reached home, m win</span>\n      dp[i][i] = <span class=\"hljs-number\">2</span>;   <span class=\"hljs-comment\">// cat met mouse, cat win</span>\n  }\n  \n  <span class=\"hljs-keyword\">return</span> helper(graph, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, dp);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">helper</span>(<span class=\"hljs-params\">graph,  mouse,  cat,  dp</span>) </span>{\n\n    <span class=\"hljs-keyword\">if</span> (dp[mouse][cat] != <span class=\"hljs-number\">-1</span>)\n        <span class=\"hljs-keyword\">return</span> dp[mouse][cat];  <span class=\"hljs-comment\">// use cached value</span>\n\n    dp[mouse][cat] = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// if there is a cycle, draw</span>\n    <span class=\"hljs-keyword\">let</span> mouseDefault = <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">//  default cat win, try to update this number to 1 or 0</span>\n    <span class=\"hljs-keyword\">let</span> mouseGoList = graph[mouse], catGoList = graph[cat];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> mouseGo <span class=\"hljs-keyword\">of</span> mouseGoList) {\n        <span class=\"hljs-keyword\">if</span> (mouseGo == cat)\n            <span class=\"hljs-keyword\">continue</span>;   <span class=\"hljs-comment\">// I'm a mouse, why go for a cat?</span>\n\n        <span class=\"hljs-keyword\">let</span> catDefault = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">//  default mouse win, try to update this number to 2 or 0</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> catGo <span class=\"hljs-keyword\">of</span> catGoList) {\n            <span class=\"hljs-keyword\">if</span> (catGo == <span class=\"hljs-number\">0</span>)\n                <span class=\"hljs-keyword\">continue</span>;  <span class=\"hljs-comment\">// cannot go to hole</span>\n            <span class=\"hljs-keyword\">let</span> next = helper(graph, mouseGo, catGo, dp);\n            <span class=\"hljs-keyword\">if</span> (next == <span class=\"hljs-number\">2</span>) {   <span class=\"hljs-comment\">// if cat win in this path, no need to continue</span>\n                catDefault = <span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (next == <span class=\"hljs-number\">0</span>) {   <span class=\"hljs-comment\">// at least it's a draw</span>\n                catDefault = <span class=\"hljs-number\">0</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (catDefault == <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// if mouse can win in this path, no need to continue</span>\n            mouseDefault = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (catDefault == <span class=\"hljs-number\">0</span>) {  <span class=\"hljs-comment\">// at least it's a draw</span>\n            mouseDefault = <span class=\"hljs-number\">0</span>;\n        }\n    }\n    dp[mouse][cat] = mouseDefault;\n    <span class=\"hljs-keyword\">return</span> dp[mouse][cat];\n  }  \n};\n</code></pre>\n"
  ],
  "titleSlug": "cat-and-mouse",
  "content": "<p>两个玩家分别扮演猫（Cat）和老鼠（Mouse）在<strong>无向</strong>图上进行游戏，他们轮流行动。</p>\n\n<p>该图按下述规则给出：<code>graph[a]</code>&nbsp;是所有结点 <code>b</code> 的列表，使得 <code>ab</code> 是图的一条边。</p>\n\n<p>老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0 处有一个洞。</p>\n\n<p>在每个玩家的回合中，他们<strong>必须</strong>沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点 <code>1</code>，那么它只能移动到&nbsp;<code>graph[1]</code>&nbsp;中的（任何）结点去。</p>\n\n<p>此外，猫无法移动到洞（结点 0）里。</p>\n\n<p>然后，游戏在出现以下三种情形之一时结束：</p>\n\n<ul>\n\t<li>如果猫和老鼠占据相同的结点，猫获胜。</li>\n\t<li>如果老鼠躲入洞里，老鼠获胜。</li>\n\t<li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li>\n</ul>\n\n<p>给定&nbsp;<code>graph</code>，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回&nbsp;<code>1</code>；如果猫获胜，则返回 <code>2</code>；如果平局，则返回 <code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n4---3---1\n|&nbsp; &nbsp;|\n2---5\n&nbsp;\\&nbsp;/\n&nbsp; 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= graph.length &lt;= 200</code></li>\n\t<li>保证 <code>graph[1]</code>&nbsp;非空。</li>\n\t<li>保证&nbsp;<code>graph[2]</code>&nbsp;包含非零元素。</li>\n</ol>\n"
}
