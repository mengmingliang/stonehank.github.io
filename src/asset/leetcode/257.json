{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {string[]}\n */\nvar binaryTreePaths = function(root) {\n    if(!root)return []\n    let str=root.val+''\n    let result=[]\n    pre(str,root)\n    function pre(str,node){\n        if(node.left)pre(str+'->'+node.left.val,node.left)\n        if(node.right)pre(str+'->'+node.right.val,node.right)\n        if(!node.left && !node.right)result.push(str)\n    }\n    return result\n};"
  ],
  "titleSlug": "binary-tree-paths",
  "content": "<p>Given a binary tree, return all root-to-leaf paths.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\r\n\r\n<strong>Explanation:</strong> All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3\r\n</pre>",
  "translatedContent": "<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n\n   1\n /   \\\n2     3\n \\\n  5\n\n<strong>输出:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\n\n<strong>解释:</strong> 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</pre>\n"
}
