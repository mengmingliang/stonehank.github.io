{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestPathAllKeys = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> r=grid.length,c=grid[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>]]\n  <span class=\"hljs-keyword\">let</span> keys=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">6</span>).fill(<span class=\"hljs-literal\">false</span>),startPoint=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;r;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;c;j++){\n      <span class=\"hljs-keyword\">let</span> code=grid[i].charCodeAt(j)<span class=\"hljs-number\">-97</span>\n      <span class=\"hljs-keyword\">if</span>(code&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; code&lt;=<span class=\"hljs-number\">5</span>)keys[code]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">if</span>(grid[i][j]===<span class=\"hljs-string\">\"@\"</span>){\n        startPoint=[i,j]\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> keysLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> keys)<span class=\"hljs-keyword\">if</span>(n)keysLen++\n  <span class=\"hljs-keyword\">let</span> visited={}\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> curkeys=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">6</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> arr=[[startPoint[<span class=\"hljs-number\">0</span>],startPoint[<span class=\"hljs-number\">1</span>],curkeys,<span class=\"hljs-number\">0</span>]]\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> [x,y,curkeys,curkeylen]=arr.shift()\n      <span class=\"hljs-keyword\">if</span>(curkeylen===keysLen)<span class=\"hljs-keyword\">return</span> step\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n        <span class=\"hljs-keyword\">let</span> newx=x+dx,newy=y+dy   \n        <span class=\"hljs-keyword\">if</span>(newx&lt;<span class=\"hljs-number\">0</span> || newy&lt;<span class=\"hljs-number\">0</span> || newx&gt;=r || newy&gt;=c)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">let</span> curstr=grid[newx][newy]\n        <span class=\"hljs-keyword\">if</span>(curstr===<span class=\"hljs-string\">\"#\"</span>)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">let</span> code=grid[newx].charCodeAt(newy)\n        <span class=\"hljs-keyword\">let</span> strkeys=curkeys.toString()\n        <span class=\"hljs-keyword\">if</span>(visited[newx+<span class=\"hljs-string\">' '</span>+strkeys+<span class=\"hljs-string\">' '</span>+newy])<span class=\"hljs-keyword\">continue</span>\n        visited[newx+<span class=\"hljs-string\">' '</span>+strkeys+<span class=\"hljs-string\">' '</span>+newy]=<span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">if</span>(code&gt;=<span class=\"hljs-number\">65</span> &amp;&amp; code&lt;=<span class=\"hljs-number\">72</span> &amp;&amp; !curkeys[code+<span class=\"hljs-number\">32</span><span class=\"hljs-number\">-97</span>])<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span>(code&gt;=<span class=\"hljs-number\">97</span> &amp;&amp; code&lt;=<span class=\"hljs-number\">102</span> &amp;&amp; !curkeys[code<span class=\"hljs-number\">-97</span>]){\n          <span class=\"hljs-keyword\">let</span> newcurkeys=curkeys.slice()\n          newcurkeys[code<span class=\"hljs-number\">-97</span>]=<span class=\"hljs-literal\">true</span>\n          arr.push([newx,newy,newcurkeys,curkeylen+<span class=\"hljs-number\">1</span>])\n        }<span class=\"hljs-keyword\">else</span> arr.push([newx,newy,curkeys,curkeylen])\n      }\n    }\n    step++\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-path-to-get-all-keys",
  "content": "<p>给定一个二维网格&nbsp;<code>grid</code>。&nbsp;<code>&quot;.&quot;</code>&nbsp;代表一个空房间，&nbsp;<code>&quot;#&quot;</code>&nbsp;代表一堵墙，&nbsp;<code>&quot;@&quot;</code>&nbsp;是起点，（<code>&quot;a&quot;</code>,&nbsp;<code>&quot;b&quot;</code>, ...）代表钥匙，（<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...）代表锁。</p>\n\n<p>我们从起点开始出发，一次移动是指向四个基本方向之一行走一个单位空间。我们不能在网格外面行走，也无法穿过一堵墙。如果途经一个钥匙，我们就把它捡起来。除非我们手里有对应的钥匙，否则无法通过锁。</p>\n\n<p>假设 K 为钥匙/锁的个数，且满足&nbsp;<code>1 &lt;= K &lt;= 6</code>，字母表中的前 K 个字母在网格中都有自己对应的一个小写和一个大写字母。换言之，每个锁有唯一对应的钥匙，每个钥匙也有唯一对应的锁。另外，代表钥匙和锁的字母互为大小写并按字母顺序排列。</p>\n\n<p>返回获取所有钥匙所需要的移动的最少次数。如果无法获取所有钥匙，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>输出：</strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;只含有&nbsp;<code>&#39;.&#39;</code>,&nbsp;<code>&#39;#&#39;</code>,&nbsp;<code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code>&nbsp;以及&nbsp;<code>&#39;A&#39;-&#39;F&#39;</code></li>\n\t<li>钥匙的数目范围是&nbsp;<code>[1, 6]</code>，每个钥匙都对应一个不同的字母，正好打开一个对应的锁。</li>\n</ol>\n"
}
