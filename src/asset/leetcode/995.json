{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minKBitFlips = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, K</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> q = []\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n    <span class=\"hljs-keyword\">if</span>(q.length % <span class=\"hljs-number\">2</span>!==<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">if</span>(A[i]===<span class=\"hljs-number\">1</span>){\n        res+=<span class=\"hljs-number\">1</span>\n        q.push(i+K<span class=\"hljs-number\">-1</span>)\n      }\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(A[i]===<span class=\"hljs-number\">0</span>){\n        res+=<span class=\"hljs-number\">1</span>\n        q.push(i+K<span class=\"hljs-number\">-1</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// console.log(q)</span>\n    <span class=\"hljs-keyword\">if</span>(q.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; q[<span class=\"hljs-number\">0</span>]===i){\n      q.shift()\n    }\n    <span class=\"hljs-keyword\">if</span>(q.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; q[q.length<span class=\"hljs-number\">-1</span>]&gt;=A.length)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
  "content": "<p>在仅包含 <code>0</code> 和 <code>1</code> 的数组 <code>A</code> 中，一次 <em><code>K</code> 位翻转</em>包括选择一个长度为 <code>K</code> 的（连续）子数组，同时将子数组中的每个 <code>0</code> 更改为 <code>1</code>，而每个 <code>1</code> 更改为 <code>0</code>。</p>\n\n<p>返回所需的 <code>K</code> 位翻转的次数，以便数组没有值为 <code>0</code> 的元素。如果不可能，返回 <code>-1</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>A = [0,1,0], K = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>先翻转 A[0]，然后翻转 A[2]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>A = [1,1,0], K = 2\n<strong>输出：</strong>-1\n<strong>解释：</strong>无论我们怎样翻转大小为 2 的子数组，我们都不能使数组变为 [1,1,1]。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>A = [0,0,0,1,0,1,1,0], K = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>\n翻转 A[0],A[1],A[2]:&nbsp;A变成 [1,1,1,1,0,1,1,0]\n翻转 A[4],A[5],A[6]:&nbsp;A变成 [1,1,1,1,1,0,0,0]\n翻转 A[5],A[6],A[7]:&nbsp;A变成 [1,1,1,1,1,1,1,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\n</ol>\n"
}
