{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> totalNQueens = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dia1=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">2</span>*n).fill(<span class=\"hljs-literal\">false</span>),\n      dia2=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">2</span>*n).fill(<span class=\"hljs-literal\">false</span>),\n      col=<span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  backtrack(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> res\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">setCount,rowId</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(setCount===n) res++\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">let</span> lt2rd=j-rowId+n,rt2ld=j+rowId\n      <span class=\"hljs-comment\">// 检查竖线，两斜线是否冲突</span>\n      <span class=\"hljs-keyword\">if</span>(col[j] || dia1[lt2rd] || dia2[rt2ld])<span class=\"hljs-keyword\">continue</span>\n      col[j]=<span class=\"hljs-literal\">true</span>\n      dia1[lt2rd]=<span class=\"hljs-literal\">true</span>\n      dia2[rt2ld]=<span class=\"hljs-literal\">true</span>\n      backtrack(setCount+<span class=\"hljs-number\">1</span>,rowId+<span class=\"hljs-number\">1</span>)\n      dia2[rt2ld]=<span class=\"hljs-literal\">false</span>\n      dia1[lt2rd]=<span class=\"hljs-literal\">false</span>\n      col[j]=<span class=\"hljs-literal\">false</span>\n    }\n  }    \n};\n</code></pre>\n"
  ],
  "titleSlug": "n-queens-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>基本与<code>NO.51</code>一致，甚至还更简单，不需要提供<code>board</code>去记录每个<code>Q</code>的位置，</p>\n<p>定义3个<code>hash</code>，用来保存已经放置的<code>Q</code>能攻击到的范围，分别是<code>col</code>，<code>dia1</code>，<code>dia2</code>(竖线和2对角线)</p>\n<p>由于每一行最多只可能存在一个<code>Q</code>，那么如果第<code>i</code>行放置了，那么就继续第<code>i+1</code>行，检查是否有位置能放置。</p>\n<p>检查的过程有一个高效的方法，<code>col</code>很简单，关键在两条斜线，可以思考这两条斜线的延长线最终到达第一行的位置。</p>\n<p>左下到右上斜线<code>[i,j]</code>延长线最终能到达第一行的位置就是<code>[0,j+i]</code>，因此只需要保存<code>j+i</code>；</p>\n<p>左上到右下的斜线<code>[i,j]</code>延长线最终能到达第一行的位置就是<code>[0,j-i]</code>，因此只需要保存<code>j-i</code>。</p>\n",
  "content": "<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n<strong>解释:</strong> 4 皇后问题存在如下两个不同的解法。\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// 解法 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// 解法 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n"
}
