{
  "code": [
    "/**\n * @param {number} n\n * @return {number}\n */\nvar totalNQueens = function(n) {\n    let valid=[],flag=false,count=0,len=n\n    for(let i=0;i<n;i++){\n        valid[i]=[]\n        for(let j=0;j<n;j++){\n            valid[i][j]=0\n        }\n    }\n    \n    function setValid(i,j,reset){\n        for(let k=i;k<len;k++){\n            reset?valid[k][j]--:valid[k][j]++\n        }\n        for(let k=i,l=j;(k>=0 && k<len) && (l>=0 && l<len);k++,l++){\n            reset?valid[k][l]--:valid[k][l]++\n        }\n        for(let k=i,l=j;(k>=0 && k<len) && (l>=0 && l<len);k++,l--){\n            reset?valid[k][l]--:valid[k][l]++\n        }               \n    }\n\n    function dsf(row,col){\n        if(row<0 || row>=len)return\n        let i=row\n            for(let j=col;j<len;j++){          \n                if(valid[i][j]!==0){\n                    continue\n                }else{    \n                    if(i===len-1)return count++\n                    setValid(i,j)\n                    dsf(i+1,0)\n                    setValid(i,j,true)\n                }\n            }\n    }\n    dsf(0,0)\n    return count\n\n};"
  ],
  "titleSlug": "n-queens-ii",
  "content": "<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>&times;<em>n</em> chessboard such that no two queens attack each other.</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\" style=\"width: 258px; height: 276px;\" /></p>\r\n\r\n<p>Given an integer&nbsp;<em>n</em>, return the number of&nbsp;distinct solutions to the&nbsp;<em>n</em>-queens puzzle.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown below.\r\n[\r\n&nbsp;[&quot;.Q..&quot;, &nbsp;// Solution 1\r\n&nbsp; &quot;...Q&quot;,\r\n&nbsp; &quot;Q...&quot;,\r\n&nbsp; &quot;..Q.&quot;],\r\n\r\n&nbsp;[&quot;..Q.&quot;, &nbsp;// Solution 2\r\n&nbsp; &quot;Q...&quot;,\r\n&nbsp; &quot;...Q&quot;,\r\n&nbsp; &quot;.Q..&quot;]\r\n]\r\n</pre>\r\n",
  "translatedContent": "<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n<strong>解释:</strong> 4 皇后问题存在如下两个不同的解法。\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// 解法 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// 解法 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n"
}
