{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> totalNQueens = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> valid=[],flag=<span class=\"hljs-literal\">false</span>,count=<span class=\"hljs-number\">0</span>,len=n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n        valid[i]=[]\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n            valid[i][j]=<span class=\"hljs-number\">0</span>\n        }\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setValid</span>(<span class=\"hljs-params\">i,j,reset</span>)</span>{\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=i;k&lt;len;k++){\n            reset?valid[k][j]--:valid[k][j]++\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=i,l=j;(k&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; k&lt;len) &amp;&amp; (l&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; l&lt;len);k++,l++){\n            reset?valid[k][l]--:valid[k][l]++\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=i,l=j;(k&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; k&lt;len) &amp;&amp; (l&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; l&lt;len);k++,l--){\n            reset?valid[k][l]--:valid[k][l]++\n        }               \n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dsf</span>(<span class=\"hljs-params\">row,col</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(row&lt;<span class=\"hljs-number\">0</span> || row&gt;=len)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">let</span> i=row\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=col;j&lt;len;j++){          \n                <span class=\"hljs-keyword\">if</span>(valid[i][j]!==<span class=\"hljs-number\">0</span>){\n                    <span class=\"hljs-keyword\">continue</span>\n                }<span class=\"hljs-keyword\">else</span>{    \n                    <span class=\"hljs-keyword\">if</span>(i===len<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> count++\n                    setValid(i,j)\n                    dsf(i+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>)\n                    setValid(i,j,<span class=\"hljs-literal\">true</span>)\n                }\n            }\n    }\n    dsf(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> count\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "n-queens-ii",
  "translatedContent": "<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回 <em>n</em> 皇后不同的解决方案的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> 2\n<strong>解释:</strong> 4 皇后问题存在如下两个不同的解法。\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// 解法 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// 解法 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n"
}
