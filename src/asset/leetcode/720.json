{
  "code": [
    "/**\n * @param {string[]} words\n * @return {string}\n */\nvar longestWord = function(words) {\n    let mem={}\n    for(let i=0;i<words.length;i++){\n        mem[words[i]]=words[i]\n    }\n    let max=0,maxWord=''\n    for(let i=0;i<words.length;i++){\n        let cur=words[i]\n        if(cur.length>max || (cur.length===max && cur<maxWord)){\n            let j=0\n            while(j<cur.length){\n                if(mem[cur.substr(0,j+1)])j++\n                else break\n            }\n            if(j===cur.length){maxWord=cur;max=cur.length}\n        }\n    }\n    return maxWord\n};"
  ],
  "titleSlug": "longest-word-in-dictionary",
  "content": "<p>Given a list of strings <code>words</code> representing an English Dictionary, find the longest word in <code>words</code> that can be built one character at a time by other words in <code>words</code>.  If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p>  If there is no answer, return the empty string.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\r\n<b>Output:</b> \"world\"\r\n<b>Explanation:</b> \r\nThe word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\r\n<b>Output:</b> \"apple\"\r\n<b>Explanation:</b> \r\nBoth \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>All the strings in the input will only contain lowercase letters.</li>\r\n<li>The length of <code>words</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>words[i]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>",
  "translatedContent": "<p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p>\n\n<p>若无答案，则返回空字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nwords = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]\n<strong>输出:</strong> &quot;world&quot;\n<strong>解释:</strong> \n单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;添加一个字母组成。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nwords = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]\n<strong>输出:</strong> &quot;apple&quot;\n<strong>解释:</strong> \n&quot;apply&quot;和&quot;apple&quot;都能由词典中的单词组成。但是&quot;apple&quot;得字典序小于&quot;apply&quot;。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有输入的字符串都只包含小写字母。</li>\n\t<li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li>\n\t<li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li>\n</ul>\n"
}
