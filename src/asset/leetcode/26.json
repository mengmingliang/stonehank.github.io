{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeDuplicates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span> || nums[i]-nums[k<span class=\"hljs-number\">-1</span>]&gt;<span class=\"hljs-number\">0</span>){\n        nums[k++]=nums[i]\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> k\n};\n</code></pre>\n"
  ],
  "titleSlug": "remove-duplicates-from-sorted-array",
  "hasThinking": false,
  "content": "<p>给定一个排序数组，你需要在<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n\n<p>不要使用额外的数组空间，你必须在<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>给定数组 <em>nums</em> = <strong>[1,1,2]</strong>, \n\n函数应该返回新的长度 <strong>2</strong>, 并且原数组 <em>nums </em>的前两个元素被修改为 <strong><code>1</code></strong>, <strong><code>2</code></strong>。 \n\n你不需要考虑数组中超出新长度后面的元素。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>给定<em> nums </em>= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\n\n函数应该返回新的长度 <strong>5</strong>, 并且原数组 <em>nums </em>的前五个元素被修改为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong>。\n\n你不需要考虑数组中超出新长度后面的元素。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>为什么返回数值是整数，但输出的答案是数组呢?</p>\n\n<p>请注意，输入数组是以<strong>&ldquo;引用&rdquo;</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>\n\n<p>你可以想象内部操作如下:</p>\n\n<pre>// <strong>nums</strong> 是以&ldquo;引用&rdquo;方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n"
}
