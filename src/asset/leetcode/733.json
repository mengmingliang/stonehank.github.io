{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> floodFill = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">image, sr, sc, newColor</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check4dire</span>(<span class=\"hljs-params\">image,sr,sc,oldC,newC</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(image[sr][sc]===oldC)image[sr][sc]=newC\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">let</span> rLen=image.length,cLen=image[<span class=\"hljs-number\">0</span>].length\n        <span class=\"hljs-keyword\">if</span>(sr&lt;rLen<span class=\"hljs-number\">-1</span>)check4dire(image,sr+<span class=\"hljs-number\">1</span>,sc,oldC,newC)\n        <span class=\"hljs-keyword\">if</span>(sr&gt;<span class=\"hljs-number\">0</span>)check4dire(image,sr<span class=\"hljs-number\">-1</span>,sc,oldC,newC)\n        <span class=\"hljs-keyword\">if</span>(sc&lt;cLen<span class=\"hljs-number\">-1</span>)check4dire(image,sr,sc+<span class=\"hljs-number\">1</span>,oldC,newC)\n        <span class=\"hljs-keyword\">if</span>(sc&gt;<span class=\"hljs-number\">0</span>)check4dire(image,sr,sc<span class=\"hljs-number\">-1</span>,oldC,newC)\n    }\n    <span class=\"hljs-keyword\">if</span>(image[sr][sc]!==newColor)check4dire(image,sr,sc,image[sr][sc],newColor)\n    <span class=\"hljs-keyword\">return</span> image\n};\n</code></pre>\n"
  ],
  "titleSlug": "flood-fill",
  "content": "<p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p>\n\n<p>给你一个坐标&nbsp;<code>(sr, sc)</code>&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;<code>newColor</code>，让你重新上色这幅图像。</p>\n\n<p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，&hellip;&hellip;，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p>\n\n<p>最后返回经过上色渲染后的图像。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>输出:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>解析:</strong> \n在图像的正中间，(坐标(sr,sc)=(1,1)),\n在路径上所有符合条件的像素点的颜色都被更改成2。\n注意，右下角的像素没有更改为2，\n因为它不是在上下左右四个方向上与初始点相连的像素点。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度在范围&nbsp;<code>[1, 50]</code> 内。</li>\n\t<li>给出的初始点将满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>。</li>\n\t<li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code>内。</li>\n</ul>\n"
}
