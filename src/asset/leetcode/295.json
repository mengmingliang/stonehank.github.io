{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MedianFinder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.list=[]\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} num\n * @return {void}\n */</span>\nMedianFinder.prototype.addNum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list.length===<span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">this</span>.list[<span class=\"hljs-keyword\">this</span>.list.length<span class=\"hljs-number\">-1</span>]&lt;num){\n    <span class=\"hljs-keyword\">this</span>.list.push(num)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">let</span> idx=bsEnd(<span class=\"hljs-keyword\">this</span>.list,num)\n    <span class=\"hljs-keyword\">this</span>.list.splice(idx,<span class=\"hljs-number\">0</span>,num)\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nMedianFinder.prototype.findMedian = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> mod=<span class=\"hljs-keyword\">this</span>.list.length % <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-keyword\">this</span>.list.length/<span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">if</span>(mod===<span class=\"hljs-number\">1</span>){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.list[mid]\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">this</span>.list[mid]+<span class=\"hljs-keyword\">this</span>.list[mid<span class=\"hljs-number\">-1</span>])/<span class=\"hljs-number\">2</span>\n  }\n};\n\n<span class=\"hljs-comment\">/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = Object.create(MedianFinder).createNew()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "find-median-from-data-stream",
  "content": "<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>\n\n<p>例如，</p>\n\n<p>[2,3,4]&nbsp;的中位数是 3</p>\n\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\n\n<p>设计一个支持以下两种操作的数据结构：</p>\n\n<ul>\n\t<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\n\t<li>double findMedian() - 返回目前所有元素的中位数。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ol>\n\t<li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n\t<li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\n</ol>\n"
}
