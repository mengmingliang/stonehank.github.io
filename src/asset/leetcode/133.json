{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // Definition for a Node.\n * function Node(val,neighbors) {\n *    this.val = val;\n *    this.neighbors = neighbors;\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Node} node\n * @return {Node}\n */</span>\n<span class=\"hljs-keyword\">var</span> cloneGraph = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> val=node.val,adj=node.neighbors\n    <span class=\"hljs-keyword\">if</span>(hash[val])<span class=\"hljs-keyword\">return</span> hash[val]\n    <span class=\"hljs-keyword\">let</span> copy=<span class=\"hljs-keyword\">new</span> Node(val,[])\n    hash[val]=copy\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;adj.length;i++){\n      copy.neighbors[i]=clone(adj[i])\n    }\n    <span class=\"hljs-keyword\">return</span> copy\n  }\n  <span class=\"hljs-keyword\">return</span> clone(node)\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "clone-graph",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这是一个带有环的图，因此<code>hash</code>必须在执行遍历<code>neighbors</code>之前保存当前的<code>copy Node</code>，这样后面如果遇到循环引用，也能引用到<code>hash</code>里的<code>copy Node</code>。</p>\n<p>遍历<code>neighbors</code>并且填充<code>copy Node.neighbors</code>。</p>\n",
  "content": "<p>给定无向<a href=\"https://baike.baidu.com/item/连通图/6460995?fr=aladdin\" target=\"_blank\"><strong>连通</strong></a>图中一个节点的引用，返回该图的<a href=\"https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin\" target=\"_blank\"><strong>深拷贝</strong></a>（克隆）。图中的每个节点都包含它的值 <code>val</code>（<code>Int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p>\n\n<p><strong>示例：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/113_sample.png\" style=\"height: 149px; width: 200px;\"></p>\n\n<pre><strong>输入：\n</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}\n\n<strong>解释：</strong>\n节点 1 的值是 1，它有两个邻居：节点 2 和 4 。\n节点 2 的值是 2，它有两个邻居：节点 1 和 3 。\n节点 3 的值是 3，它有两个邻居：节点 2 和 4 。\n节点 4 的值是 4，它有两个邻居：节点 1 和 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>节点数介于 1 到 100 之间。</li>\n\t<li>无向图是一个<a href=\"https://baike.baidu.com/item/简单图/1680528?fr=aladdin\" target=\"_blank\">简单图</a>，这意味着图中没有重复的边，也没有自环。</li>\n\t<li>由于图是无向的，如果节点 <em>p</em> 是节点 <em>q</em> 的邻居，那么节点 <em>q</em> 也必须是节点 <em>p</em>&nbsp;的邻居。</li>\n\t<li>必须将<strong>给定节点的拷贝</strong>作为对克隆图的引用返回。</li>\n</ol>\n"
}
