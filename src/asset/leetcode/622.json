{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here. Set the size of the queue to be k.\n * @param {number} k\n */</span>\n<span class=\"hljs-keyword\">var</span> MyCircularQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> first=<span class=\"hljs-number\">-1</span>,last=<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">let</span> list=[]\n  <span class=\"hljs-keyword\">let</span> len=k\n  <span class=\"hljs-comment\">/**\n * Insert an element into the circular queue. Return true if the operation is successful. \n * @param {number} value\n * @return {boolean}\n */</span>\n  <span class=\"hljs-keyword\">this</span>.enQueue=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> newLast=(last+<span class=\"hljs-number\">1</span>)%k\n    <span class=\"hljs-keyword\">if</span>(newLast===first)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(first===<span class=\"hljs-number\">-1</span>)first=<span class=\"hljs-number\">0</span>\n    list[newLast]=value\n    last=newLast\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-comment\">/**\n * Delete an element from the circular queue. Return true if the operation is successful.\n * @return {boolean}\n */</span>\n  <span class=\"hljs-keyword\">this</span>.deQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(list[first]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    list[first]=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span>(list[first+<span class=\"hljs-number\">1</span>]!=<span class=\"hljs-literal\">null</span>)first++\n    <span class=\"hljs-keyword\">else</span>{\n      first=<span class=\"hljs-number\">-1</span>\n      last=<span class=\"hljs-number\">-1</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  };\n  <span class=\"hljs-keyword\">this</span>.Front=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> list[first]==<span class=\"hljs-literal\">null</span>?<span class=\"hljs-number\">-1</span>:list[first]\n  }\n  <span class=\"hljs-keyword\">this</span>.Rear=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> list[last]==<span class=\"hljs-literal\">null</span>?<span class=\"hljs-number\">-1</span>:list[last]\n  }\n  <span class=\"hljs-keyword\">this</span>.isEmpty=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> list[first]==<span class=\"hljs-literal\">null</span>\n  }\n  <span class=\"hljs-keyword\">this</span>.isFull=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> (last+<span class=\"hljs-number\">1</span>)%k===first\n  }\n};\n\n\n\n\n<span class=\"hljs-comment\">/**\n * Get the front item from the queue.\n * @return {number}\n */</span>\n\n\n<span class=\"hljs-comment\">/**\n * Get the last item from the queue.\n * @return {number}\n */</span>\n\n\n<span class=\"hljs-comment\">/**\n * Checks whether the circular queue is empty or not.\n * @return {boolean}\n */</span>\n\n\n<span class=\"hljs-comment\">/**\n * Checks whether the circular queue is full or not.\n * @return {boolean}\n */</span>\n\n\n<span class=\"hljs-comment\">/** \n * Your MyCircularQueue object will be instantiated and called as such:\n * var obj = Object.create(MyCircularQueue).createNew(k)\n * var param_1 = obj.enQueue(value)\n * var param_2 = obj.deQueue()\n * var param_3 = obj.Front()\n * var param_4 = obj.Rear()\n * var param_5 = obj.isEmpty()\n * var param_6 = obj.isFull()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "design-circular-queue",
  "translatedContent": "<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为&ldquo;环形缓冲器&rdquo;。<br />\n循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。<br />\n你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li>MyCircularQueue(k): 构造器，设置队列长度为 k 。</li>\n\t<li>Front: 从队首获取元素。如果队列为空，返回 -1 。</li>\n\t<li>Rear: 获取队尾元素。如果队列为空，返回 -1 。</li>\n\t<li>enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</li>\n\t<li>deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</li>\n\t<li>isEmpty(): 检查循环队列是否为空。</li>\n\t<li>isFull(): 检查循环队列是否已满。</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>\nMyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为3\n\ncircularQueue.enQueue(1); &nbsp;// 返回true\n\ncircularQueue.enQueue(2); &nbsp;// 返回true\n\ncircularQueue.enQueue(3); &nbsp;// 返回true\n\ncircularQueue.enQueue(4); &nbsp;// 返回false,队列已满\n\ncircularQueue.Rear(); &nbsp;// 返回3\n\ncircularQueue.isFull(); &nbsp;// 返回true\n\ncircularQueue.deQueue(); &nbsp;// 返回true\n\ncircularQueue.enQueue(4); &nbsp;// 返回true\n\ncircularQueue.Rear(); &nbsp;// 返回4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有的值都在 1 至 1000 的范围内；</li>\n\t<li>操作数将在 1 至 1000 的范围内；</li>\n\t<li>请不要使用内置的队列库。</li>\n</ul>\n"
}
