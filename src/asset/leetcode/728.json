{
  "code": [
    "/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */\nvar selfDividingNumbers = function(left, right) {\n    let res=[],isDi=true\n    for(let i=left ;i<=right;i++){\n        isDi=true;\n        let den=String(i)\n        for(let j=0;j<den.length;j++){\n            if(i % den[j] !==0){\n                isDi=false;\n            }\n        }\n        if(isDi)\n        res.push(i)\n    }\n    return res\n};"
  ],
  "titleSlug": "self-dividing-numbers",
  "content": "<p>\r\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\r\n</p><p>\r\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\r\n</p><p>\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n</p><p>\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nleft = 1, right = 22\r\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The boundaries of each input argument are <code>1 <= left <= right <= 10000</code>.</li>\r\n</p>",
  "translatedContent": "<p><em>自除数&nbsp;</em>是指可以被它包含的每一位数除尽的数。</p>\n\n<p>例如，128 是一个自除数，因为&nbsp;<code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</p>\n\n<p>还有，自除数不允许包含 0 。</p>\n\n<p>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> \n上边界left = 1, 下边界right = 22\n<strong>输出：</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>每个输入参数的边界满足&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>。</li>\n</ul>\n"
}
