{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} left\n * @param {number} right\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> selfDividingNumbers = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res=[],isDi=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=left ;i&lt;=right;i++){\n        isDi=<span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">let</span> den=<span class=\"hljs-built_in\">String</span>(i)\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;den.length;j++){\n            <span class=\"hljs-keyword\">if</span>(i % den[j] !==<span class=\"hljs-number\">0</span>){\n                isDi=<span class=\"hljs-literal\">false</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(isDi)\n        res.push(i)\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "self-dividing-numbers",
  "content": "<p><em>自除数&nbsp;</em>是指可以被它包含的每一位数除尽的数。</p>\n\n<p>例如，128 是一个自除数，因为&nbsp;<code>128 % 1 == 0</code>，<code>128 % 2 == 0</code>，<code>128 % 8 == 0</code>。</p>\n\n<p>还有，自除数不允许包含 0 。</p>\n\n<p>给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> \n上边界left = 1, 下边界right = 22\n<strong>输出：</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>每个输入参数的边界满足&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>。</li>\n</ul>\n"
}
