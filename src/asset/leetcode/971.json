{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number[]} voyage\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> flipMatchVoyage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, voyage</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[],idx=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">root</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(root.val !== voyage[idx])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    idx++\n    <span class=\"hljs-keyword\">if</span>(!dfs(root.left) || !dfs(root.right)){\n      res.push(root.val)\n      <span class=\"hljs-keyword\">return</span> dfs(root.right) &amp;&amp; dfs(root.left)\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> r=dfs(root)\n  <span class=\"hljs-comment\">// if(idx!==voyage.length)return [-1]</span>\n  <span class=\"hljs-keyword\">if</span>(!r)<span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">-1</span>]\n  <span class=\"hljs-keyword\">return</span> res\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
  "content": "<p>给定一个有 <code>N</code> 个节点的二叉树，每个节点都有一个不同于其他节点且处于 <code>{1, ..., N}</code> 中的值。</p>\n\n<p>通过交换节点的左子节点和右子节点，可以翻转该二叉树中的节点。</p>\n\n<p>考虑从根节点开始的先序遍历报告的 <code>N</code> 值序列。将这一 <code>N</code> 值序列称为树的行程。</p>\n\n<p>（回想一下，节点的先序遍历意味着我们报告当前节点的值，然后先序遍历左子节点，再先序遍历右子节点。）</p>\n\n<p>我们的目标是翻转<strong>最少的</strong>树中节点，以便树的行程与给定的行程&nbsp;<code>voyage</code>&nbsp;相匹配。&nbsp;</p>\n\n<p>如果可以，则返回翻转的所有节点的值的列表。你可以按任何顺序返回答案。</p>\n\n<p>如果不能，则返回列表 <code>[-1]</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-01.png\" style=\"height: 120px; width: 88px;\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2], voyage = [2,1]\n<strong>输出：</strong>[-1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,3,2]\n<strong>输出：</strong>[1]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>输入：</strong>root = [1,2,3], voyage = [1,2,3]\n<strong>输出：</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\n</ol>\n"
}
