{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} s\n * @param {TreeNode} t\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isSubtree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, t</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> node=s,match=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span>(node.val===t.val){\n      <span class=\"hljs-comment\">// console.log(node)</span>\n        <span class=\"hljs-keyword\">let</span> s1=[node],s2=[t]\n        <span class=\"hljs-keyword\">while</span>(s1.length===s2.length &amp;&amp; s1.length&gt;<span class=\"hljs-number\">0</span>){\n          <span class=\"hljs-keyword\">if</span>(s1[<span class=\"hljs-number\">0</span>].val!==s2[<span class=\"hljs-number\">0</span>].val)<span class=\"hljs-keyword\">break</span>\n          <span class=\"hljs-keyword\">let</span> a=s1.shift(),b=s2.shift()\n          <span class=\"hljs-keyword\">if</span>(a.left)s1.push(a.left)\n          <span class=\"hljs-keyword\">if</span>(a.right)s1.push(a.right)\n          <span class=\"hljs-keyword\">if</span>(b.left)s2.push(b.left)\n          <span class=\"hljs-keyword\">if</span>(b.right)s2.push(b.right)\n        }\n        <span class=\"hljs-keyword\">if</span>(s1.length===<span class=\"hljs-number\">0</span> &amp;&amp; s2.length===<span class=\"hljs-number\">0</span>)match=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-comment\">// console.log(match)</span>\n    <span class=\"hljs-keyword\">if</span>(match)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(node.left)dfs(node.left)\n    <span class=\"hljs-keyword\">if</span>(node.right)dfs(node.right)\n  }\n  dfs(node)\n  <span class=\"hljs-keyword\">return</span> match\n};\n</code></pre>\n"
  ],
  "titleSlug": "subtree-of-another-tree",
  "content": "<p>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验&nbsp;<strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。</p>\n\n<p><strong>示例 1:</strong><br />\n给定的树 s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\n\n<p>给定的树 t：</p>\n\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\n\n<p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。</p>\n\n<p><strong>示例 2:</strong><br />\n给定的树 s：</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\n\n<p>给定的树 t：</p>\n\n<pre>\n   4\n  / \\\n 1   2\n</pre>\n\n<p>返回 <strong>false</strong>。</p>\n"
}
