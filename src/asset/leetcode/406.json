{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} people\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> reconstructQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">people</span>) </span>{\n\n    <span class=\"hljs-keyword\">let</span> res=[];\n    <span class=\"hljs-keyword\">let</span> sorted=people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>{\n        <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">0</span>]&lt;b[<span class=\"hljs-number\">0</span>]){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">0</span>]&gt;b[<span class=\"hljs-number\">0</span>]){\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>]-b[<span class=\"hljs-number\">1</span>]\n        }\n    })\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;sorted.length;i++){\n        res.splice(sorted[i][<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">0</span>,sorted[i])\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "queue-reconstruction-by-height",
  "content": "<p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对<code>(h, k)</code>表示，其中<code>h</code>是这个人的身高，<code>k</code>是排在这个人前面且身高大于或等于<code>h</code>的人数。 编写一个算法来重建这个队列。</p>\n\n<p><strong>注意：</strong><br />\n总人数少于1100人。</p>\n\n<p><strong>示例</strong></p>\n\n<pre>\n输入:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n输出:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n"
}
