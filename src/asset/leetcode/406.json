{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} people\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> reconstructQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">people</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[];\n  people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]===b[<span class=\"hljs-number\">0</span>] ? a[<span class=\"hljs-number\">1</span>]-b[<span class=\"hljs-number\">1</span>] : b[<span class=\"hljs-number\">0</span>]-a[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;people.length;i++){\n    res.splice(people[i][<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">0</span>,people[i])\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n\n</code></pre>\n"
  ],
  "titleSlug": "queue-reconstruction-by-height",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>一个笨办法就是，先对<code>people</code>排序，按先索引<code>0</code>升序，如果相等则索引<code>1</code>升序的排序。</p>\n<p>每次遍历<code>people</code>，现将当前<code>people[i]</code>插入到<code>res</code>最后面，然后搜索前面有多少比它高的值<code>larger</code>，如果<code>larger&gt;people[i][1]</code>，\n说明不符合要求，前面高的人多了，通过不断和前一个<code>swap</code>，直到<code>larger===people[i][1]</code>。</p>\n<p>这里的可以将搜索优化，建立一个升序数组，使用二分搜索。</p>\n<p>另外一个非常精妙的解决办法，同样先对<code>people</code>排序，按索引<code>0</code>降序，如果相等则索引<code>1</code>升序的排序。</p>\n<p>按照身高降序，保证了不可能将高的插入到矮的前面的位置，而只可能将矮的插入到高的前面的位置，这么就不会影响已经排好序的高的位置。</p>\n<h2>排序好后，对每一个<code>people[i]</code>，使用<code>splice</code>插入它对应的<code>people[i][1]</code>的位置。</h2>\n",
  "content": "<p>假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对<code>(h, k)</code>表示，其中<code>h</code>是这个人的身高，<code>k</code>是排在这个人前面且身高大于或等于<code>h</code>的人数。 编写一个算法来重建这个队列。</p>\n\n<p><strong>注意：</strong><br />\n总人数少于1100人。</p>\n\n<p><strong>示例</strong></p>\n\n<pre>\n输入:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n输出:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n"
}
