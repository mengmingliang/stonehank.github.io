{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maximumMinimumPath = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> m=A.length,n=A[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">let</span> aux=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      aux.push([A[i][j],[i,j]])\n    }\n  }\n  aux.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>b[<span class=\"hljs-number\">0</span>]-a[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">let</span> visited=<span class=\"hljs-built_in\">Array</span>(m).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">false</span>))\n  <span class=\"hljs-keyword\">let</span> uf=<span class=\"hljs-built_in\">Array</span>(m*n).fill().map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>i)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">i</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(i!==uf[i]){\n      uf[i]=find(uf[i])\n    }\n    <span class=\"hljs-keyword\">return</span> uf[i]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">union</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n      j=find(b)\n    <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">return</span>\n    uf[i]=j\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isConnect</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n      j=find(b)\n    <span class=\"hljs-keyword\">return</span> i===j\n  }\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;aux.length;i++){\n    <span class=\"hljs-keyword\">let</span> [max,[x,y]]=aux[i]\n    <span class=\"hljs-keyword\">let</span> id=x*n+y\n    <span class=\"hljs-keyword\">if</span>(x&gt;<span class=\"hljs-number\">0</span> &amp;&amp; visited[x<span class=\"hljs-number\">-1</span>][y])union((x<span class=\"hljs-number\">-1</span>)*n+y,id)\n    <span class=\"hljs-keyword\">if</span>(y&gt;<span class=\"hljs-number\">0</span> &amp;&amp; visited[x][y<span class=\"hljs-number\">-1</span>])union(x*n+(y<span class=\"hljs-number\">-1</span>),id)\n    <span class=\"hljs-keyword\">if</span>(x&lt;m<span class=\"hljs-number\">-1</span> &amp;&amp; visited[x+<span class=\"hljs-number\">1</span>][y])union((x+<span class=\"hljs-number\">1</span>)*n+y,id)\n    <span class=\"hljs-keyword\">if</span>(y&lt;n<span class=\"hljs-number\">-1</span> &amp;&amp; visited[x][y+<span class=\"hljs-number\">1</span>])union(x*n+y+<span class=\"hljs-number\">1</span>,id)\n    visited[x][y]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(isConnect(<span class=\"hljs-number\">0</span>,m*n<span class=\"hljs-number\">-1</span>))<span class=\"hljs-keyword\">return</span> max\n  }\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "path-with-maximum-minimum-value",
  "hasThinking": false,
  "content": "<p>给你一个 R 行 C 列的整数矩阵&nbsp;<code>A</code>。矩阵上的路径从&nbsp;<code>[0,0]</code>&nbsp;开始，在&nbsp;<code>[R-1,C-1]</code>&nbsp;结束。</p>\n\n<p>路径沿四个基本方向（上、下、左、右）展开，从一个已访问单元格移动到任一相邻的未访问单元格。</p>\n\n<p>路径的得分是该路径上的 <strong>最小</strong> 值。例如，路径 8 &rarr;&nbsp; 4 &rarr;&nbsp; 5 &rarr;&nbsp; 9 的值为 4 。</p>\n\n<p>找出所有路径中得分 <strong>最高</strong> 的那条路径，返回其&nbsp;<strong>得分</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/27/1313_ex1.jpeg\" style=\"height: 59px; width: 70px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[5,4,5],[1,2,6],[7,4,6]]\n<strong>输出：</strong>4\n<strong>解释： </strong>\n得分最高的路径用黄色突出显示。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/27/1313_ex2.jpeg\" style=\"height: 39px; width: 134px;\"></strong></p>\n\n<pre><strong>输入：</strong>[[2,2,1,2,2,2],[1,2,2,2,1,2]]\n<strong>输出：</strong>2</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/27/1313_ex3.jpeg\"></strong></p>\n\n<pre><strong>输入：</strong>[[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]\n<strong>输出：</strong>3</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= R, C&nbsp;&lt;= 100</code></li>\n\t<li><code>0 &lt;= A[i][j] &lt;= 10^9</code></li>\n</ol>\n"
}
