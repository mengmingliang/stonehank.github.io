{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> generateParenthesis = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> s=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">let</span> l=<span class=\"hljs-string\">\"(\"</span>,r=<span class=\"hljs-string\">\")\"</span>\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">s,n,lN,rN</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(lN&gt;n || lN&lt;rN)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(lN===n &amp;&amp; rN===n)res.push(s)\n    dfs(s+l,n,lN+<span class=\"hljs-number\">1</span>,rN)\n    dfs(s+r,n,lN,rN+<span class=\"hljs-number\">1</span>)\n  }\n  dfs(s,n,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "generate-parentheses",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>每一个位置都有2个选择，放置<code>(</code>或者<code>)</code>。</p>\n<p>如果<code>(</code>的数量超过了<code>n</code>说明一定不成立；</p>\n<p>如果<code>)</code>的数量超过了<code>(</code>的数量，也一定不成立；</p>\n<p>如果两个的数量都为<code>n</code>，那么就是一个有效的完整组合。</p>\n",
  "content": "<p>给出&nbsp;<em>n</em>&nbsp;代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且<strong>有效的</strong>括号组合。</p>\n\n<p>例如，给出&nbsp;<em>n </em>=<em> </em>3，生成结果为：</p>\n\n<pre>[\n  &quot;((()))&quot;,\n  &quot;(()())&quot;,\n  &quot;(())()&quot;,\n  &quot;()(())&quot;,\n  &quot;()()()&quot;\n]\n</pre>\n"
}
