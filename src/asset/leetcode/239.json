{
  "code": [
    "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n    let aux=[],result=[]\n    let start=0,end=0\n    for(end=0;end<nums.length;end++){\n        let cur=nums[end]\n        if(aux.length>0 && end-k===aux[0]){\n            aux.shift()\n        }\n        while(aux.length>0 && nums[aux[aux.length-1]]<=nums[end]){\n            aux.pop()\n        }\n\n        aux.push(end)\n        if(end+1-start===k){\n            result.push(nums[aux[0]])\n            start++\n        }\n    }\n    return result\n};\n\n"
  ],
  "titleSlug": "sliding-window-maximum",
  "content": "<p>Given an array <em>nums</em>, there is a sliding window of size <em>k</em> which is moving from the very left of the array to the very right. You can only see the <em>k</em> numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <em>k</em> = 3\r\n<strong>Output: </strong><code>[3,3,5,5,6,7] \r\n<strong>Explanation: \r\n</strong></code>\r\nWindow position                Max\r\n---------------               -----\r\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\r\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\r\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\r\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\r\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\r\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\r\n</pre>\r\n\r\n<p><strong>Note: </strong><br />\r\nYou may assume <em>k</em> is always valid, 1 &le; k &le; input array&#39;s size for non-empty array.</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nCould you solve it in linear time?</p>\r\n",
  "translatedContent": "<p>给定一个数组 <em>nums</em>，有一个大小为&nbsp;<em>k&nbsp;</em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 <em>k</em> 内的数字。滑动窗口每次只向右移动一位。</p>\n\n<p>返回滑动窗口最大值。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3\n<strong>输出: </strong><code>[3,3,5,5,6,7] \n<strong>解释: \n</strong></code>\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设 <em>k </em>总是有效的，1 &le; k &le;&nbsp;输入数组的大小，且输入数组不为空。</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能在线性时间复杂度内解决此题吗？</p>\n"
}
