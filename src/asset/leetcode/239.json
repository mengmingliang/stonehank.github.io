{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxSlidingWindow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> aux=[],result=[]\n  <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=nums[i]\n    <span class=\"hljs-keyword\">if</span>(aux.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; i-k===aux[<span class=\"hljs-number\">0</span>]){\n      aux.shift()\n    }\n    <span class=\"hljs-keyword\">while</span>(aux.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; nums[aux[aux.length<span class=\"hljs-number\">-1</span>]]&lt;=nums[i]){\n      aux.pop()\n    }\n\n    aux.push(i)\n    <span class=\"hljs-keyword\">if</span>(i+<span class=\"hljs-number\">1</span>-start===k){\n      result.push(nums[aux[<span class=\"hljs-number\">0</span>]])\n      start++\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n\n\n</code></pre>\n"
  ],
  "titleSlug": "sliding-window-maximum",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>最直观的思路是不断求解当前窗口的最大值，时间复杂度是<code>O(N*k)</code>。</p>\n<p><code>O(N)</code>的方法：</p>\n<p>定义一个单调递减的序列<code>stack</code>，内部保存递减序列的索引，</p>\n<p>如果当前<code>nums[i]&gt;=nums[stack[stack.length-1]]</code>，说明当前<code>nums[i]</code>更大，需要往前移动，因此<code>stack.pop()</code>；</p>\n<p>单调递减的特性保证<code>stack[0]</code>是当前滑动范围的最大值，但是题目有<code>k</code>的限制，因此如果发现当前序列的跨度<code>i-stack[0]===k</code>了，\n那么序列第一个范围最大值就无效了，需要<code>stack.shift()</code>。</p>\n<p>每次遍历的时候，检查当前是否一个完整的窗口，如果是，将<code>nums[stack[0]]</code>这个当前范围最大值添加到结果。</p>\n",
  "content": "<p>给定一个数组 <em>nums</em>，有一个大小为&nbsp;<em>k&nbsp;</em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 <em>k</em> 内的数字。滑动窗口每次只向右移动一位。</p>\n\n<p>返回滑动窗口最大值。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3\n<strong>输出: </strong><code>[3,3,5,5,6,7] \n<strong>解释: \n</strong></code>\n  滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre>\n\n<p><strong>注意：</strong></p>\n\n<p>你可以假设 <em>k </em>总是有效的，1 &le; k &le;&nbsp;输入数组的大小，且输入数组不为空。</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能在线性时间复杂度内解决此题吗？</p>\n"
}
