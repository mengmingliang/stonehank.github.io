{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> divide = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">dividend, divisor</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> negative=(dividend ^ divisor)&lt;<span class=\"hljs-number\">0</span>,\n      limit=<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)\n  dividend=<span class=\"hljs-built_in\">Math</span>.abs(dividend)\n  divisor=<span class=\"hljs-built_in\">Math</span>.abs(divisor)\n  <span class=\"hljs-keyword\">if</span>(dividend&lt;divisor)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  \n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>,idx=<span class=\"hljs-number\">32</span>\n  <span class=\"hljs-keyword\">while</span>(idx&gt;=<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-comment\">// JS避免位溢出</span>\n    <span class=\"hljs-keyword\">let</span> absBit=<span class=\"hljs-built_in\">Math</span>.abs((dividend &gt;&gt; idx))\n    <span class=\"hljs-keyword\">if</span>(absBit &gt;= divisor){\n      res+=(<span class=\"hljs-number\">1</span> &lt;&lt; idx)\n      dividend-=(divisor &lt;&lt; idx)\n    }\n    idx--\n  }\n  <span class=\"hljs-keyword\">if</span>(negative){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(-res,-limit)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.min(res,limit<span class=\"hljs-number\">-1</span>)\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "divide-two-integers",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ul>\n<li>\n<p>使用减法，最直观的就是每次从被除数<code>dividend</code>中减去除数<code>divisor</code>，直到<code>dividend&lt;divisor</code>，但是效率太低，因为数值是<code>32</code>位的数值，很容易<code>TLE</code>。</p>\n</li>\n<li>\n<p>使用叠加减法，和上面的思路差不多，但并不是每一次都只减去<code>divisor</code>，设定变量<code>m</code>，<code>n</code>分别为<code>dividend</code>还剩下的值，和当前被减的值。</p>\n<p>每一次都减去<code>divisor*i</code>，直到<code>m&lt;0</code>，重置<code>n</code>，继续重复。</p>\n</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> divide = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">dividend, divisor</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> negative=(dividend ^ divisor)&lt;<span class=\"hljs-number\">0</span>,\n      limit=<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)\n  \n  <span class=\"hljs-keyword\">if</span>(dividend&lt;divisor)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  \n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>,count=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> n=<span class=\"hljs-number\">0</span>, m=dividend\n  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>){\n    n+=divisor\n    <span class=\"hljs-keyword\">if</span>(m-n&gt;<span class=\"hljs-number\">0</span>){\n      count+=<span class=\"hljs-number\">1</span>\n      m=m-n\n      res+=count\n    }<span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 已经减到0了</span>\n      <span class=\"hljs-keyword\">if</span>(n===divisor){\n        <span class=\"hljs-keyword\">if</span>(m-n===<span class=\"hljs-number\">0</span>)res++\n        <span class=\"hljs-keyword\">break</span>\n      }\n      <span class=\"hljs-comment\">// 重置</span>\n      count=<span class=\"hljs-number\">0</span>\n      n=<span class=\"hljs-number\">0</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(negative){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(-res,-limit)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.min(res,limit<span class=\"hljs-number\">-1</span>)\n  }\n};\n</code></pre>\n<ul>\n<li>\n<p>使用位操作，位操作中<code>&gt;&gt;</code>相当于<code>/2</code>，<code>&lt;&lt;</code>相当于<code>*2</code>，因此对于<code>dividend</code>，找出一个<code>idx</code>，使得<code>dividend&gt;&gt;idx</code>后，刚好还比<code>divisor</code>大。</p>\n<p>这说明<code>idx</code>对应的除数是有效的，这个除数就是<code>1&lt;&lt;idx</code>，再将<code>dividend</code>减去当前除数<code>divisor * ((1 &lt;&lt; idx))</code>，也就是<code>(divisor &lt;&lt; idx)</code>。</p>\n<p>另外，由于<code>js</code>存在位溢出问题，因此在执行位运算时，计算绝对值<code>let absBit=Math.abs((dividend &gt;&gt; idx))</code>。</p>\n</li>\n</ul>\n",
  "content": "<p>给定两个整数，被除数&nbsp;<code>dividend</code>&nbsp;和除数&nbsp;<code>divisor</code>。将两数相除，要求不使用乘法、除法和 mod 运算符。</p>\n\n<p>返回被除数&nbsp;<code>dividend</code>&nbsp;除以除数&nbsp;<code>divisor</code>&nbsp;得到的商。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 10, divisor = 3\n<strong>输出:</strong> 3</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> dividend = 7, divisor = -3\n<strong>输出:</strong> -2</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>被除数和除数均为 32 位有符号整数。</li>\n\t<li>除数不为&nbsp;0。</li>\n\t<li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]。本题中，如果除法结果溢出，则返回 2<sup>31&nbsp;</sup>&minus; 1。</li>\n</ul>\n"
}
