{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maximumGap = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(nums.length&lt;<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> max=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++)\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,nums[i])\n  <span class=\"hljs-keyword\">let</span> digits=(<span class=\"hljs-string\">''</span>+max).length\n  <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> base=<span class=\"hljs-number\">10</span>\n  <span class=\"hljs-keyword\">let</span> bucket=[]\n  <span class=\"hljs-keyword\">while</span>(digits--&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">let</span> cur=nums[i]\n      <span class=\"hljs-keyword\">let</span> m=<span class=\"hljs-built_in\">Math</span>.floor(cur / start) % base\n      <span class=\"hljs-keyword\">if</span>(!bucket[m])bucket[m]=[cur]\n      <span class=\"hljs-keyword\">else</span> bucket[m].push(cur)\n    }\n    nums=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;bucket.length;i++){\n      <span class=\"hljs-keyword\">if</span>(bucket[i])nums=nums.concat(bucket[i])\n    }\n    bucket=[]\n    start*=<span class=\"hljs-number\">10</span>\n  }\n  <span class=\"hljs-keyword\">let</span> gap=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;nums.length;i++){\n    gap=<span class=\"hljs-built_in\">Math</span>.max(gap,nums[i]-nums[i<span class=\"hljs-number\">-1</span>])\n  }\n  <span class=\"hljs-keyword\">return</span> gap\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-gap",
  "hasThinking": false,
  "content": "<p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p>\n\n<p>如果数组元素个数小于 2，则返回 0。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,6,9,1]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 排序后的数组是 [1,3,6,9]<strong><em>, </em></strong>其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [10]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 数组元素个数小于 2，因此返回 0。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li>\n\t<li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li>\n</ul>\n"
}
