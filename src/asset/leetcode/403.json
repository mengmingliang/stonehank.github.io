{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} stones\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> canCross = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stones</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;stones.length;i++)hash[stones[i]]=i\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(stones.length).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span>[])\n  <span class=\"hljs-keyword\">let</span> moves=[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]\n  dp[<span class=\"hljs-number\">0</span>].push(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;stones.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;dp[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> curStep=dp[i][j]\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> m <span class=\"hljs-keyword\">of</span> moves){\n        <span class=\"hljs-keyword\">if</span>(curStep+m&lt;=<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">let</span> nxtStep=curStep+m\n        <span class=\"hljs-keyword\">let</span> nxtPos=stones[i]+nxtStep\n        <span class=\"hljs-keyword\">if</span>(hash[nxtPos]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">let</span> nxtId=hash[nxtPos]\n        <span class=\"hljs-keyword\">if</span>(dp[nxtId].includes(nxtStep))<span class=\"hljs-keyword\">continue</span>\n        dp[nxtId].push(nxtStep)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[dp.length<span class=\"hljs-number\">-1</span>].length&gt;<span class=\"hljs-number\">0</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "frog-jump",
  "hasThinking": false,
  "content": "<p>一只青蛙想要过河。 假定河流被等分为&nbsp;x<em>&nbsp;</em>个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。</p>\n\n<p>给定石子的位置列表（用单元格序号升序表示），&nbsp;<strong>请判定青蛙能否成功过河</strong>（即能否在最后一步跳至最后一个石子上）。&nbsp;开始时，&nbsp;青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。</p>\n\n<p>如果青蛙上一步跳跃了&nbsp;<em>k&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<em>k - 1</em>、<em>k&nbsp;</em>或&nbsp;<em>k + 1</em>个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p>\n\n<p><strong>请注意：</strong></p>\n\n<ul>\n\t<li>石子的数量 &ge; 2 且&nbsp;&lt; 1100；</li>\n\t<li>每一个石子的位置序号都是一个非负整数，且其 &lt; 2<sup>31</sup>；</li>\n\t<li>第一个石子的位置永远是0。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>[0,1,3,5,6,8,12,17]</strong>\n\n总共有8个石子。\n第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,\n第三个石子在序号为3的单元格的位置， 以此定义整个数组...\n最后一个石子处于序号为17的单元格的位置。\n\n返回 <strong>true</strong>。即青蛙可以成功过河，按照如下方案跳跃： \n跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 \n跳2个单位到第4块石子, 然后跳3个单位到第6块石子, \n跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>[0,1,2,3,4,8,9,11]</strong>\n\n返回 <strong>false。</strong>青蛙没有办法过河。 \n这是因为第5和第6个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。\n</pre>\n"
}
