{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> swimInWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-comment\">// [x,y,curL]</span>\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">let</span> arr=[[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]]\n  <span class=\"hljs-keyword\">let</span> row=grid.length,col=grid[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> visited=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;row;i++)visited[i]=[]\n  <span class=\"hljs-keyword\">let</span> initStep=grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> step=initStep\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> [x,y]=arr.shift()\n      visited[x][y]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">let</span> tarLvl=grid[x][y]\n      <span class=\"hljs-keyword\">if</span>(step&lt;tarLvl){\n        arr.push([x,y])\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(x===row<span class=\"hljs-number\">-1</span> &amp;&amp; y===col<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> step\n        <span class=\"hljs-keyword\">let</span> temp=[[x,y]]\n        <span class=\"hljs-keyword\">while</span>(temp.length&gt;<span class=\"hljs-number\">0</span>){\n          <span class=\"hljs-keyword\">let</span> len=temp.length\n          <span class=\"hljs-comment\">// console.log(temp)</span>\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;len;j++){\n            <span class=\"hljs-keyword\">let</span> [tempX,tempY]=temp.shift()\n            <span class=\"hljs-comment\">// visited[tempX][tempY]=true</span>\n            <span class=\"hljs-keyword\">if</span>(tempX===row<span class=\"hljs-number\">-1</span> &amp;&amp; tempY===col<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> step\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n              <span class=\"hljs-keyword\">let</span> newX=tempX+dx,newY=tempY+dy\n              <span class=\"hljs-keyword\">if</span>(newX&lt;<span class=\"hljs-number\">0</span> || newY&lt;<span class=\"hljs-number\">0</span> || newX&gt;=row || newY&gt;=col)<span class=\"hljs-keyword\">continue</span>\n              <span class=\"hljs-keyword\">if</span>(visited[newX][newY])<span class=\"hljs-keyword\">continue</span>\n              visited[newX][newY]=<span class=\"hljs-literal\">true</span>\n              <span class=\"hljs-keyword\">if</span>(step&gt;=grid[newX][newY])temp.push([newX,newY])\n              <span class=\"hljs-keyword\">else</span> arr.push([newX,newY])\n            } \n          }\n        }\n      }\n    }\n    step++\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "swim-in-rising-water",
  "content": "<p>在一个 N x N 的坐标方格&nbsp;<code>grid</code> 中，每一个方格的值 <code>grid[i][j]</code> 表示在位置 <code>(i,j)</code> 的平台高度。</p>\n\n<p>现在开始下雨了。当时间为&nbsp;<code>t</code>&nbsp;时，此时雨水导致水池中任意位置的水位为&nbsp;<code>t</code>&nbsp;。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。</p>\n\n<p>你从坐标方格的左上平台 (0，0) 出发。最少耗时多久你才能到达坐标方格的右下平台&nbsp;<code>(N-1, N-1)</code>？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[0,2],[1,3]]\n<strong>输出:</strong> 3\n<strong>解释:</strong>\n时间为0时，你位于坐标方格的位置为 <code>(0, 0)。</code>\n此时你不能游向任意方向，因为四个相邻方向平台的高度都大于当前时间为 0 时的水位。\n\n等时间到达 3 时，你才可以游向平台 (1, 1). 因为此时的水位是 3，坐标方格中的平台没有比水位 3 更高的，所以你可以游向坐标方格中的任意位置\n</pre>\n\n<p><strong>示例2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>输入:</strong> 16\n<strong>解释:</strong>\n<strong> 0  1  2  3  4</strong>\n24 23 22 21  <strong>5</strong>\n<strong>12 13 14 15 16</strong>\n<strong>11</strong> 17 18 19 20\n<strong>10  9  8  7  6</strong>\n\n最终的路线用加粗进行了标记。\n我们必须等到时间为 16，此时才能保证平台 (0, 0) 和 (4, 4) 是连通的\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\n\t<li>grid[i][j] 位于区间 [0, ..., N*N - 1] 内。</li>\n</ol>\n"
}
