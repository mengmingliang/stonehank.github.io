{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestStrChain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(words.length).fill(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">let</span> maxLen=<span class=\"hljs-number\">0</span>\n  words.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>{\n    <span class=\"hljs-keyword\">if</span>(a.length===b.length){\n      <span class=\"hljs-keyword\">if</span>(a&lt;b)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> a.length-b.length\n    }\n  })\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;dp.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=i<span class=\"hljs-number\">-1</span>;j&gt;=<span class=\"hljs-number\">0</span>;j--){\n      <span class=\"hljs-keyword\">if</span>(isPre(words[i],words[j])){\n        dp[i]=<span class=\"hljs-built_in\">Math</span>.max(dp[i],dp[j]+<span class=\"hljs-number\">1</span>)\n      }\n    }\n    maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,dp[i])\n  }\n  <span class=\"hljs-comment\">// console.log(words,dp)</span>\n  <span class=\"hljs-keyword\">return</span> maxLen\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPre</span>(<span class=\"hljs-params\">cur,pre</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(cur.length-pre.length!==<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>,diff=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pre.length;i++){\n      <span class=\"hljs-keyword\">if</span>(cur[j]!==pre[i]){\n        j++\n        i--\n        diff++\n        <span class=\"hljs-keyword\">if</span>(diff&gt;<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">continue</span>\n      }\n      j++\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-string-chain",
  "hasThinking": false,
  "content": "<p>给出一个单词列表，其中每个单词都由小写英文字母组成。</p>\n\n<p>如果我们可以在&nbsp;<code>word1</code>&nbsp;的任何地方添加一个字母使其变成&nbsp;<code>word2</code>，那么我们认为&nbsp;<code>word1</code>&nbsp;是&nbsp;<code>word2</code>&nbsp;的前身。例如，<code>&quot;abc&quot;</code>&nbsp;是&nbsp;<code>&quot;abac&quot;</code>&nbsp;的前身。</p>\n\n<p><strong>词链</strong>是单词&nbsp;<code>[word_1, word_2, ..., word_k]</code>&nbsp;组成的序列，<code>k &gt;= 1</code>，其中&nbsp;<code>word_1</code>&nbsp;是&nbsp;<code>word_2</code>&nbsp;的前身，<code>word_2</code>&nbsp;是&nbsp;<code>word_3</code>&nbsp;的前身，依此类推。</p>\n\n<p>从给定单词列表 <code>words</code> 中选择单词组成词链，返回词链的最长可能长度。<br>\n&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;a&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bca&quot;,&quot;bda&quot;,&quot;bdca&quot;]\n<strong>输出：</strong>4\n<strong>解释：</strong>最长单词链之一为 &quot;a&quot;,&quot;ba&quot;,&quot;bda&quot;,&quot;bdca&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 16</code></li>\n\t<li><code>words[i]</code>&nbsp;仅由小写英文字母组成。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
