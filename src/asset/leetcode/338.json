{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} num\n * @return {number[]}\n */</span>\n<span class=\"hljs-comment\">// 1位数 0,1</span>\n<span class=\"hljs-comment\">// 2位数 0,1,(0+1,1+1)</span>\n<span class=\"hljs-comment\">// 3位数 0,1,1,2,(0+1,1+1,1+1,2+1)</span>\n<span class=\"hljs-keyword\">var</span> countBits = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n\n    <span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">let</span> bitCount=<span class=\"hljs-number\">1</span>;\n\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;=num;i++){\n\n        <span class=\"hljs-keyword\">if</span>(i&gt;=bitCount*<span class=\"hljs-number\">2</span>){\n            bitCount*=<span class=\"hljs-number\">2</span>;\n\n        }\n        arr[i]=arr[i-bitCount]+<span class=\"hljs-number\">1</span>\n\n\n    }\n\n    <span class=\"hljs-keyword\">return</span> arr\n};\n</code></pre>\n"
  ],
  "titleSlug": "counting-bits",
  "translatedContent": "<p>给定一个非负整数&nbsp;<strong>num</strong>。对于&nbsp;<strong>0 &le; i &le; num </strong>范围中的每个数字&nbsp;<strong>i&nbsp;</strong>，计算其二进制数中的 1 的数目并将它们作为数组返回。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>2\n<strong>输出: </strong>[0,1,1]</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>5\n<strong>输出: </strong><code>[0,1,1,2,1,2]</code></pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>给出时间复杂度为<strong>O(n*sizeof(integer))</strong>的解答非常容易。但你可以在线性时间<strong>O(n)</strong>内用一趟扫描做到吗？</li>\n\t<li>要求算法的空间复杂度为<strong>O(n)</strong>。</li>\n\t<li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的&nbsp;<strong>__builtin_popcount</strong>）来执行此操作。</li>\n</ul>\n"
}
