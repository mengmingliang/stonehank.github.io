{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> lowestCommonAncestor = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, p, q</span>) </span>{\n<span class=\"hljs-comment\">//   if(!root)return null</span>\n<span class=\"hljs-comment\">//   if(root===p)return root</span>\n<span class=\"hljs-comment\">//   if(root===q)return root</span>\n<span class=\"hljs-comment\">//   let leftNode=lowestCommonAncestor(root.left,p,q)</span>\n<span class=\"hljs-comment\">//   let rightNode=lowestCommonAncestor(root.right,p,q)</span>\n  \n<span class=\"hljs-comment\">//   if(!leftNode &amp;&amp; !rightNode)return null</span>\n<span class=\"hljs-comment\">//   else if(leftNode &amp;&amp; rightNode)return root</span>\n<span class=\"hljs-comment\">//   else if(!leftNode) return rightNode</span>\n<span class=\"hljs-comment\">//   else return leftNode</span>\n  \n  \n  <span class=\"hljs-keyword\">let</span> union=[]\n  <span class=\"hljs-keyword\">let</span> node=root\n  <span class=\"hljs-keyword\">let</span> vis1=<span class=\"hljs-literal\">false</span>,vis2=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> first=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> ca=<span class=\"hljs-literal\">null</span>\n  dfs(node,<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node,parent</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(ca)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> v=node.val\n    union[v]=node\n    <span class=\"hljs-keyword\">if</span>(v===p.val)vis1=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(v===q.val)vis2=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(first==<span class=\"hljs-literal\">null</span> &amp;&amp; (vis1 || vis2)) first=vis1?p:q\n    <span class=\"hljs-keyword\">if</span>(vis1 &amp;&amp; vis2){\n      ca=union[first.val]\n      <span class=\"hljs-comment\">// while(ca.val!==union[ca.val].val){</span>\n      <span class=\"hljs-comment\">//   ca=union[ca.val]</span>\n      <span class=\"hljs-comment\">// }</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(node.left)dfs(node.left,node)\n      <span class=\"hljs-keyword\">if</span>(node.right)dfs(node.right,node)\n    }\n    union[v]=parent ? parent : node\n  }\n  <span class=\"hljs-keyword\">return</span> ca\n};\n</code></pre>\n"
  ],
  "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
  "translatedContent": "<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">百度百科</a>中最近公共祖先的定义为：&ldquo;对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。&rdquo;</p>\n\n<p>例如，给定如下二叉树:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>输出:</strong> 3\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>1 </code>的最近公共祖先是节点 <code>3。</code>\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>输出:</strong> 5\n<strong>解释: </strong>节点 <code>5 </code>和节点 <code>4 </code>的最近公共祖先是节点 <code>5。</code>因为根据定义最近公共祖先节点可以为节点本身。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>所有节点的值都是唯一的。</li>\n\t<li>p、q 为不同节点且均存在于给定的二叉树中。</li>\n</ul>\n"
}
