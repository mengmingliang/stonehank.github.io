{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} p\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findSubstringInWraproundString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">p</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> maxLen = <span class=\"hljs-number\">0</span>; \n  <span class=\"hljs-keyword\">let</span> aCode=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> s=<span class=\"hljs-string\">'zabcdefghijklmnopqrstuvwxyz'</span>\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;p.length;i++){\n    <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">0</span> &amp;&amp; s.includes(p[i<span class=\"hljs-number\">-1</span>]+p[i])){\n      maxLen++\n    }<span class=\"hljs-keyword\">else</span>{\n      maxLen=<span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-keyword\">let</span> idx=p.charCodeAt(i)-aCode\n    count[idx]=<span class=\"hljs-built_in\">Math</span>.max(count[idx],maxLen)\n  }\n  \n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;count.length;i++){\n    sum+=count[i]\n  }\n\n  <span class=\"hljs-keyword\">return</span> sum;\n};\n</code></pre>\n"
  ],
  "titleSlug": "unique-substrings-in-wraparound-string",
  "content": "<p>把字符串 <code>s</code> 看作是&ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;的无限环绕字符串，所以&nbsp;<code>s</code> 看起来是这样的：&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;.&nbsp;</p>\n\n<p>现在我们有了另一个字符串 <code>p</code> 。你需要的是找出 <code>s</code> 中有多少个唯一的 <code>p</code> 的非空子串，尤其是当你的输入是字符串 <code>p</code> ，你需要输出字符串&nbsp;<code>s</code> 中 <code>p</code> 的不同的非空子串的数目。&nbsp;</p>\n\n<p><strong>注意:</strong> <code>p</code>&nbsp;仅由小写的英文字母组成，p 的大小可能超过 10000。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;a&quot;\n<strong>输出:</strong> 1\n<strong>解释:</strong> 字符串 S 中只有一个&quot;a&quot;子字符。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;cac&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 字符串 S 中的字符串&ldquo;cac&rdquo;只有两个子串&ldquo;a&rdquo;、&ldquo;c&rdquo;。.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;zab&quot;\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在字符串 S 中有六个子串&ldquo;z&rdquo;、&ldquo;a&rdquo;、&ldquo;b&rdquo;、&ldquo;za&rdquo;、&ldquo;ab&rdquo;、&ldquo;zab&rdquo;。.\n</pre>\n\n<p>&nbsp;</p>\n"
}
