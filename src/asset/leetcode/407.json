{
  "code": [
    "/**\n * @param {number[][]} heightMap\n * @return {number}\n */\nvar trapRainWater = function(heightMap) {\n\n  function PriorityQueueMin(){\n    let heap=[null]\n    function swim(idx){\n      if(idx<2)return\n      let k=Math.floor(idx/2)\n      if(heap[idx][2]-heap[k][2]<0){\n        swap(heap,idx,k)\n        idx=k\n        swim(idx)\n      }\n    }\n    function sink(idx){\n      let k=Math.floor(idx*2)\n      if(k>=heap.length)return\n      if(k<heap.length && heap[k+1] && heap[k][2]-heap[k+1][2]>0) k++\n      if(heap[idx][2]-heap[k][2]>0){\n        swap(heap,idx,k)\n        idx=k\n        sink(idx)\n      }\n    }\n    function swap(arr,i,j){\n      let temp=arr[i]\n      arr[i]=arr[j]\n      arr[j]=temp\n    }\n    this.insert=function (v) {\n      heap.push(v)\n      swim(heap.length-1)\n    }\n    this.delMin=function () {\n      swap(heap,1,heap.length-1)\n      let min=heap.pop()\n      sink(1)\n      return min\n    }\n    this.isEmpty=function () {\n      return heap.length===1\n    }\n  }\n\n  let pq=new PriorityQueueMin()\n  let visited=[]\n  for(let i=0;i<heightMap.length;i++){\n    visited[i]=[]\n    for(let j=0;j<heightMap[0].length;j++){\n      if((i>0 && i<heightMap.length-1) && (j>0 && j<heightMap[0].length-1))continue\n      pq.insert([i,j,heightMap[i][j]])\n      visited[i][j]=true\n    }\n  }\n\n  let max=-Infinity,count=0\n  while(!pq.isEmpty()){\n    let cur=pq.delMin()\n    if(cur[2]>max)max=cur[2]\n    check(cur[0],cur[1])\n  }\n  function check(row,col){\n    let step=[[-1,0],[1,0],[0,-1],[0,1]]\n    for(let i=0;i<step.length;i++){\n      let newR=row+step[i][0],newC=col+step[i][1]\n      if((newR<0 || newR>=heightMap.length) || (newC<0 || newC>=heightMap[0].length))continue\n      if(visited[newR][newC])continue\n      visited[newR][newC]=true\n      let newVal=heightMap[newR][newC]\n      if(newVal<max){\n        count+=max-newVal\n        check(newR,newC)\n      }else{\n        pq.insert([newR,newC,newVal])\n      }\n    }\n  }\n\n  return count\n};"
  ],
  "titleSlug": "trapping-rain-water-ii",
  "content": "<p>Given an <code>m x n</code> matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>Both <i>m</i> and <i>n</i> are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nGiven the following 3x6 height map:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\nReturn 4.\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\" /></p>\r\n\r\n<p>The above image represents the elevation map <code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> before the rain.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\" /></p>\r\n\r\n<p>After the rain, water is trapped between the blocks. The total volume of water trapped is 4.</p>\r\n",
  "translatedContent": "<p>给定一个 <code>m x n</code>&nbsp;的矩阵，其中的值均为正整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<p><em>m&nbsp;</em>和 <em>n&nbsp;</em>都是小于110的整数。每一个单位的高度都大于0 且小于 20000。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre>给出如下 3x6 的高度图:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\n返回 4。\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>如上图所示，这是下雨前的高度图<code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> 的状态。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>下雨后，雨水将会被存储在这些方块中。总的接雨水量是4。</p>"
}
