{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} heightMap\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> trapRainWater = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">heightMap</span>) </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PriorityQueueMin</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">let</span> heap=[<span class=\"hljs-literal\">null</span>]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swim</span>(<span class=\"hljs-params\">idx</span>)</span>{\n      <span class=\"hljs-keyword\">if</span>(idx&lt;<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span>\n      <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-built_in\">Math</span>.floor(idx/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(heap[idx][<span class=\"hljs-number\">2</span>]-heap[k][<span class=\"hljs-number\">2</span>]&lt;<span class=\"hljs-number\">0</span>){\n        swap(heap,idx,k)\n        idx=k\n        swim(idx)\n      }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sink</span>(<span class=\"hljs-params\">idx</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-built_in\">Math</span>.floor(idx*<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(k&gt;=heap.length)<span class=\"hljs-keyword\">return</span>\n      <span class=\"hljs-keyword\">if</span>(k&lt;heap.length &amp;&amp; heap[k+<span class=\"hljs-number\">1</span>] &amp;&amp; heap[k][<span class=\"hljs-number\">2</span>]-heap[k+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]&gt;<span class=\"hljs-number\">0</span>) k++\n      <span class=\"hljs-keyword\">if</span>(heap[idx][<span class=\"hljs-number\">2</span>]-heap[k][<span class=\"hljs-number\">2</span>]&gt;<span class=\"hljs-number\">0</span>){\n        swap(heap,idx,k)\n        idx=k\n        sink(idx)\n      }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> temp=arr[i]\n      arr[i]=arr[j]\n      arr[j]=temp\n    }\n    <span class=\"hljs-keyword\">this</span>.insert=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) </span>{\n      heap.push(v)\n      swim(heap.length<span class=\"hljs-number\">-1</span>)\n    }\n    <span class=\"hljs-keyword\">this</span>.delMin=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      swap(heap,<span class=\"hljs-number\">1</span>,heap.length<span class=\"hljs-number\">-1</span>)\n      <span class=\"hljs-keyword\">let</span> min=heap.pop()\n      sink(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">return</span> min\n    }\n    <span class=\"hljs-keyword\">this</span>.isEmpty=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">return</span> heap.length===<span class=\"hljs-number\">1</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">let</span> pq=<span class=\"hljs-keyword\">new</span> PriorityQueueMin()\n  <span class=\"hljs-keyword\">let</span> visited=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;heightMap.length;i++){\n    visited[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;heightMap[<span class=\"hljs-number\">0</span>].length;j++){\n      <span class=\"hljs-keyword\">if</span>((i&gt;<span class=\"hljs-number\">0</span> &amp;&amp; i&lt;heightMap.length<span class=\"hljs-number\">-1</span>) &amp;&amp; (j&gt;<span class=\"hljs-number\">0</span> &amp;&amp; j&lt;heightMap[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>))<span class=\"hljs-keyword\">continue</span>\n      pq.insert([i,j,heightMap[i][j]])\n      visited[i][j]=<span class=\"hljs-literal\">true</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">let</span> max=-<span class=\"hljs-literal\">Infinity</span>,count=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(!pq.isEmpty()){\n    <span class=\"hljs-keyword\">let</span> cur=pq.delMin()\n    <span class=\"hljs-keyword\">if</span>(cur[<span class=\"hljs-number\">2</span>]&gt;max)max=cur[<span class=\"hljs-number\">2</span>]\n    check(cur[<span class=\"hljs-number\">0</span>],cur[<span class=\"hljs-number\">1</span>])\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">row,col</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> step=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;step.length;i++){\n      <span class=\"hljs-keyword\">let</span> newR=row+step[i][<span class=\"hljs-number\">0</span>],newC=col+step[i][<span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">if</span>((newR&lt;<span class=\"hljs-number\">0</span> || newR&gt;=heightMap.length) || (newC&lt;<span class=\"hljs-number\">0</span> || newC&gt;=heightMap[<span class=\"hljs-number\">0</span>].length))<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(visited[newR][newC])<span class=\"hljs-keyword\">continue</span>\n      visited[newR][newC]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">let</span> newVal=heightMap[newR][newC]\n      <span class=\"hljs-keyword\">if</span>(newVal&lt;max){\n        count+=max-newVal\n        check(newR,newC)\n      }<span class=\"hljs-keyword\">else</span>{\n        pq.insert([newR,newC,newVal])\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> count\n};\n</code></pre>\n"
  ],
  "titleSlug": "trapping-rain-water-ii",
  "translatedContent": "<p>给定一个 <code>m x n</code>&nbsp;的矩阵，其中的值均为正整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<p><em>m&nbsp;</em>和 <em>n&nbsp;</em>都是小于110的整数。每一个单位的高度都大于0 且小于 20000。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<pre>给出如下 3x6 的高度图:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\n返回 4。\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>如上图所示，这是下雨前的高度图<code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> 的状态。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>下雨后，雨水将会被存储在这些方块中。总的接雨水量是4。</p>"
}
