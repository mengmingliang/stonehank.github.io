{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minDeletionSize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> next=A.slice()\n  <span class=\"hljs-keyword\">while</span>(next.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> m=next.length,n=next[<span class=\"hljs-number\">0</span>].length\n    <span class=\"hljs-keyword\">if</span>(n===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">let</span> aux=[],delCol=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;m;i++){\n      <span class=\"hljs-keyword\">if</span>(delCol!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">if</span>(next[i]&lt;next[i<span class=\"hljs-number\">-1</span>]){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n          <span class=\"hljs-keyword\">if</span>(next[i][j]&lt;next[i<span class=\"hljs-number\">-1</span>][j]){\n            delCol=j\n            res++\n            <span class=\"hljs-keyword\">break</span>\n          }\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">if</span>(delCol!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;next.length;i++){\n        aux.push(next[i].substring(<span class=\"hljs-number\">0</span>,delCol)+next[i].substring(delCol+<span class=\"hljs-number\">1</span>))\n      }\n    }\n    next=aux\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "delete-columns-to-make-sorted-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>定义一个<code>next</code>为存放待检查的字符串，遍历<code>next</code>行，如果发现<code>next[i]&lt;next[i-1]</code>，说明在<code>i</code>和<code>i-1</code>行中肯定有一列不符合规则，\n找出那一列<code>delCol</code>，然后将每一行的<code>delCol</code>都删除后的字符串重新添加到新的<code>next</code>，继续重新遍历行。</p>\n<p>直到<code>next</code>为空。</p>\n",
  "content": "<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组&nbsp;<code>A</code>，其中每个字符串长度相等。</p>\n\n<p>选取一个删除索引序列，对于&nbsp;<code>A</code>&nbsp;中的每个字符串，删除对应每个索引处的字符。</p>\n\n<p>比如，有&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>，删除索引序列&nbsp;<code>{0, 2, 3}</code>，删除后&nbsp;<code>A</code>&nbsp;为<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>。</p>\n\n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，最终得到的数组的元素是按 <strong>字典序</strong>（<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>）排列的，然后请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]\n<strong>输出：</strong>1\n<strong>解释： </strong>\n删除第一列后，A = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]。\n现在 A 中元素是按字典排列的 (即，A[0] &lt;= A[1] &lt;= A[2])。\n我们至少需要进行 1 次删除，因为最初 A 不是按字典序排列的，所以答案是 1。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]\n<strong>输出：</strong>0\n<strong>解释：</strong>\nA 的列已经是按字典序排列了，所以我们不需要删除任何东西。\n注意 A 的行不需要按字典序排列。\n也就是说，A[0][0] &lt;= A[0][1] &lt;= ... 不一定成立。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n我们必须删掉每一列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n"
}
