{
  "code": [
    "/**\n * @param {number} n\n * @return {number[]}\n */\nvar lexicalOrder = function(n) {\n    let result=[]\n    for(let i=1;i<10;i++){\n        dfs(result,i)\n    }\n    function dfs(result,cur){\n        if(cur>n)return \n        result.push(cur)\n        for(let i=0;i<10;i++){\n            if((10*cur+i)>n)return\n            dfs(result,10*cur+i)\n        }        \n    }\n    return result\n};"
  ],
  "titleSlug": "lexicographical-numbers",
  "content": "<p>\r\nGiven an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.\r\n</p>\r\n\r\n<p>\r\nFor example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].\r\n</p>\r\n\r\n<p>\r\nPlease optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.\r\n</p>",
  "translatedContent": "<p>给定一个整数&nbsp;<em>n</em>, 返回从&nbsp;<em>1&nbsp;</em>到&nbsp;<em>n&nbsp;</em>的字典顺序。</p>\n\n<p>例如，</p>\n\n<p>给定 <em>n</em> =1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p>\n\n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据&nbsp;<em>n&nbsp;</em>小于等于&nbsp;5,000,000。</p>\n"
}
