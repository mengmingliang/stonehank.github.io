{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> magicalString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> count2=<span class=\"hljs-number\">0</span>,nxt=<span class=\"hljs-string\">'1'</span>\n  <span class=\"hljs-keyword\">let</span> S=<span class=\"hljs-string\">'1221121221221121122'</span>,\n     freqS=<span class=\"hljs-string\">'122112122122'</span>\n  <span class=\"hljs-keyword\">while</span>(S.length&lt;n){\n   <span class=\"hljs-keyword\">let</span> nxtFreq=S.substring(freqS.length)\n   freqS+=nxtFreq\n   <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n   <span class=\"hljs-keyword\">while</span>(i&lt;nxtFreq.length &amp;&amp; S.length&lt;n){\n     S+=nxt.repeat(nxtFreq[i++])\n     nxt=nxt===<span class=\"hljs-string\">\"1\"</span>?<span class=\"hljs-string\">\"2\"</span>:<span class=\"hljs-string\">\"1\"</span>\n   }\n  }\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">if</span>(S[i]===<span class=\"hljs-string\">'1'</span>)res++\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "magical-string",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>由于<code>N</code>最大为<code>100000</code>，完全可以模拟整个字符串，相当于是暴力解吧。</p>\n<p>题目已经给出了一部分神奇数字<code>S=1221121221221121122</code>，它的频率是<code>freqS=122112122122</code>，下一个数字<code>nxt=1</code>，那么接下来该怎么计算？</p>\n<p>接下来需要找出<code>freqS</code>还可以延长的部分，也就是当前<code>S</code>与<code>freqS</code>相差的那一部分，即<code>1121122</code>，作为接下来的频率，继续延长<code>S</code>，直到<code>S.length&gt;=n</code>。</p>\n",
  "content": "<p>神奇的字符串&nbsp;<strong>S&nbsp;</strong>只包含 &#39;1&#39; 和 &#39;2&#39;，并遵守以下规则：</p>\n\n<p>字符串 <strong>S</strong> 是神奇的，因为串联字符 &#39;1&#39; 和 &#39;2&#39; 的连续出现次数会生成字符串 <strong>S</strong> 本身。</p>\n\n<p>字符串&nbsp;<strong>S&nbsp;</strong>的前几个元素如下：<strong>S </strong>= &ldquo;1221121221221121122 ......&rdquo;</p>\n\n<p>如果我们将&nbsp;<strong>S</strong> 中连续的 1 和 2 进行分组，它将变成：</p>\n\n<p>1 22 11 2 1 22 1 22 11 2 11 22 ......</p>\n\n<p>并且每个组中 &#39;1&#39; 或 &#39;2&#39; 的出现次数分别是：</p>\n\n<p>1 2 2 1 1 2 1 2 2 1 2 2 ......</p>\n\n<p>你可以看到上面的出现次数就是 <strong>S</strong> 本身。</p>\n\n<p>给定一个整数 N 作为输入，返回神奇字符串 <strong>S&nbsp;</strong>中前 N 个数字中的 &#39;1&#39; 的数目。</p>\n\n<p><strong>注意：</strong>N 不会超过 100,000。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>6\n<strong>输出：</strong>3\n<strong>解释：</strong>神奇字符串 S 的前 6 个元素是 &ldquo;12211&rdquo;，它包含三个 1，因此返回 3。\n</pre>\n\n<p>&nbsp;</p>\n"
}
