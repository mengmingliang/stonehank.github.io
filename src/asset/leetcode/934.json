{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestBridge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">aux</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> bsf=[],moves=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]],path=<span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">let</span> startI=<span class=\"hljs-literal\">null</span>,startJ=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;aux.length;i++){\n    <span class=\"hljs-keyword\">if</span>(startI!=<span class=\"hljs-literal\">null</span>&amp;&amp;startJ!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;aux[<span class=\"hljs-number\">0</span>].length;j++){\n      <span class=\"hljs-keyword\">if</span>(aux[i][j]===<span class=\"hljs-number\">1</span>){\n        startI=i\n        startJ=j\n        <span class=\"hljs-keyword\">break</span>\n      }\n    }\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dsf</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n    bsf.push([i,j])\n    arr[i][j]=<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;moves.length;k++){\n      <span class=\"hljs-keyword\">let</span> cI=i+moves[k][<span class=\"hljs-number\">0</span>],cJ=j+moves[k][<span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">if</span>(cI&lt;<span class=\"hljs-number\">0</span> || cI&gt;=arr.length || cJ&lt;<span class=\"hljs-number\">0</span> || cJ&gt;=arr.length)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(arr[cI][cJ]!==<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">continue</span>\n      dsf(arr,cI,cJ)\n    }\n  }\n  dsf(aux,startI,startJ)\n\n  <span class=\"hljs-keyword\">while</span>(bsf.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=bsf.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> cur=bsf.shift()\n      <span class=\"hljs-keyword\">let</span> x=cur[<span class=\"hljs-number\">0</span>],y=cur[<span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;moves.length;j++){\n        <span class=\"hljs-keyword\">let</span> nX=x+moves[j][<span class=\"hljs-number\">0</span>],nY=y+moves[j][<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">if</span>(nX&lt;<span class=\"hljs-number\">0</span> || nX&gt;aux.length<span class=\"hljs-number\">-1</span> || nY&lt;<span class=\"hljs-number\">0</span> || nY&gt;aux.length<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span>(aux[nX][nY]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> path\n        <span class=\"hljs-keyword\">if</span>(!aux[nX][nY]){\n          aux[nX][nY]=<span class=\"hljs-number\">-1</span>\n          bsf.push([nX,nY])\n        }\n\n      }\n    }\n    path++\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-bridge",
  "translatedContent": "<p>在给定的二维二进制数组&nbsp;<code>A</code>&nbsp;中，存在两座岛。（岛是由四面相连的 <code>1</code> 形成的一个最大组。）</p>\n\n<p>现在，我们可以将&nbsp;<code>0</code>&nbsp;变为&nbsp;<code>1</code>，以使两座岛连接起来，变成一座岛。</p>\n\n<p>返回必须翻转的&nbsp;<code>0</code> 的最小数目。（可以保证答案至少是 1。）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1],[1,0]]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1,0],[0,0,0],[0,0,1]]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>输出：</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length =&nbsp;A[0].length &lt;= 100</code></li>\n\t<li><code>A[i][j] == 0</code> 或&nbsp;<code>A[i][j] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
