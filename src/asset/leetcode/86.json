{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @param {number} x\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> partition = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head, x</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-number\">0</span>),less=node,\n      node2=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-number\">0</span>),greater=node2\n  <span class=\"hljs-comment\">// node.next=less</span>\n  <span class=\"hljs-keyword\">while</span>(head){\n    <span class=\"hljs-keyword\">let</span> curVal=head.val\n    <span class=\"hljs-keyword\">if</span>(curVal&lt;x){\n      less.next=head\n      less=less.next\n    }<span class=\"hljs-keyword\">else</span>{\n      greater.next=head\n      greater=greater.next\n    }\n    head=head.next\n  }\n  less.next=node2.next\n  greater.next=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">return</span> node.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "partition-list",
  "content": "<p>给定一个链表和一个特定值<em> x</em>，对链表进行分隔，使得所有小于 <em>x</em> 的节点都在大于或等于 <em>x</em> 的节点之前。</p>\n\n<p>你应当保留两个分区中每个节点的初始相对位置。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\n<strong>输出:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\n</pre>\n"
}
