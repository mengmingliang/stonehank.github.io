{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isRectangleOverlap = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rec1, rec2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> x1 = rec1[<span class=\"hljs-number\">0</span>], y1 = rec1[<span class=\"hljs-number\">1</span>], x2 = rec1[<span class=\"hljs-number\">2</span>], y2 = rec1[<span class=\"hljs-number\">3</span>];\n  <span class=\"hljs-keyword\">let</span> x3 = rec2[<span class=\"hljs-number\">0</span>], y3 = rec2[<span class=\"hljs-number\">1</span>], x4 = rec2[<span class=\"hljs-number\">2</span>], y4 = rec2[<span class=\"hljs-number\">3</span>];\n\t<span class=\"hljs-keyword\">return</span> (x1 &lt; x4 &amp;&amp; x3 &lt; x2 &amp;&amp; y1 &lt; y4 &amp;&amp; y3 &lt; y2);\n};\n</code></pre>\n"
  ],
  "titleSlug": "rectangle-overlap",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>先算出这两个矩形有可能存在的交叉点，然后再判断这个交叉点是否有效的交叉点。</p>\n",
  "content": "<p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p>\n\n<p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p>\n\n<p>给出两个矩形，判断它们是否重叠并返回结果。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li>两个矩形 <code>rec1</code> 和 <code>rec2</code> 都以含有四个整数的列表的形式给出。</li>\n\t<li>矩形中的所有坐标都处于 <code>-10^9</code> 和 <code>10^9</code> 之间。</li>\n</ol>\n"
}
