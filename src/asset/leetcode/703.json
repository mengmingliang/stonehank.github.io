{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} k\n * @param {number[]} nums\n */</span>\n<span class=\"hljs-keyword\">var</span> KthLargest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">k, nums</span>) </span>{\n  \n  <span class=\"hljs-comment\">// 使用 minHeap</span>\n  \n  nums.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-keyword\">this</span>.nums=nums\n  <span class=\"hljs-keyword\">this</span>.k=k\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} val\n * @return {number}\n */</span>\nKthLargest.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=<span class=\"hljs-keyword\">this</span>.nums.length\n\t<span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n\t  <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n\t  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.nums[mid]&lt;val)lo=mid+<span class=\"hljs-number\">1</span>\n\t  <span class=\"hljs-keyword\">else</span> hi=mid\n  }\n  <span class=\"hljs-keyword\">this</span>.nums.splice(hi,<span class=\"hljs-number\">0</span>,val)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.nums[<span class=\"hljs-keyword\">this</span>.nums.length-<span class=\"hljs-keyword\">this</span>.k]\n};\n\n<span class=\"hljs-comment\">/** \n * Your KthLargest object will be instantiated and called as such:\n * var obj = Object.create(KthLargest).createNew(k, nums)\n * var param_1 = obj.add(val)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "kth-largest-element-in-a-stream",
  "translatedContent": "<p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p>\n\n<p>你的&nbsp;<code>KthLargest</code>&nbsp;类需要一个同时接收整数&nbsp;<code>k</code> 和整数数组<code>nums</code>&nbsp;的构造器，它包含数据流中的初始元素。每次调用&nbsp;<code>KthLargest.add</code>，返回当前数据流中第K大的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nint k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\nkthLargest.add(10);&nbsp; // returns 5\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\n</pre>\n\n<p><strong>说明: </strong><br />\n你可以假设&nbsp;<code>nums</code>&nbsp;的长度&ge;&nbsp;<code>k-1</code>&nbsp;且<code>k</code> &ge;&nbsp;1。</p>\n"
}
