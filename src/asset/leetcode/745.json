{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n */</span>\n<span class=\"hljs-keyword\">var</span> WordFilter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> preTire={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">let</span> pt=preTire\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;words[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> l=words[i][j]\n      <span class=\"hljs-keyword\">if</span>(pt[l]==<span class=\"hljs-literal\">null</span>)pt[l]={}\n      <span class=\"hljs-keyword\">if</span>(j===words[i].length<span class=\"hljs-number\">-1</span>){\n        pt[l]._weight=i\n        pt[l]._word=words[i]\n      }\n      pt=pt[l]\n    } \n  }\n  <span class=\"hljs-keyword\">this</span>.preTire=preTire\n  <span class=\"hljs-keyword\">this</span>.dfs=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tire,suffix</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> maxId=<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">if</span>(tire._weight!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">if</span>(tire._word.endsWith(suffix)){\n        maxId=<span class=\"hljs-built_in\">Math</span>.max(maxId,tire._weight)\n      }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> tire){\n      <span class=\"hljs-keyword\">if</span>(k===<span class=\"hljs-string\">\"_weight\"</span> || k===<span class=\"hljs-string\">\"_word\"</span>)<span class=\"hljs-keyword\">continue</span>\n      maxId=<span class=\"hljs-built_in\">Math</span>.max(maxId,<span class=\"hljs-keyword\">this</span>.dfs(tire[k],suffix))\n    }\n    <span class=\"hljs-keyword\">return</span> maxId\n  }\n};\n\n<span class=\"hljs-comment\">/** \n * @param {string} prefix \n * @param {string} suffix\n * @return {number}\n */</span>\nWordFilter.prototype.f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prefix, suffix</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> preArr=[],sufArr=[]\n  <span class=\"hljs-keyword\">let</span> pt=<span class=\"hljs-keyword\">this</span>.preTire,maxId=<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">if</span>(prefix===<span class=\"hljs-string\">''</span>){\n    maxId=<span class=\"hljs-keyword\">this</span>.dfs(pt,suffix)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prefix.length;i++){\n      <span class=\"hljs-keyword\">let</span> l=prefix[i]\n      <span class=\"hljs-keyword\">if</span>(pt[l]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n      pt=pt[l]\n      <span class=\"hljs-keyword\">if</span>(i===prefix.length<span class=\"hljs-number\">-1</span>){\n        maxId=<span class=\"hljs-keyword\">this</span>.dfs(pt,suffix)\n      }\n    }    \n  }\n  <span class=\"hljs-keyword\">return</span> maxId\n};\n\n<span class=\"hljs-comment\">/** \n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "prefix-and-suffix-search",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2>顺序构建<code>tire</code>，每次<code>f</code>的时候，检查前缀，如果前缀有效，对剩下的每个单词使用<code>endsWith</code>检查后缀，并且记录有效后缀的最大<code>id</code>。</h2>\n",
  "content": "<p>给定多个&nbsp;<code>words</code>，<code>words[i]</code>&nbsp;的权重为&nbsp;<code>i</code>&nbsp;。</p>\n\n<p>设计一个类&nbsp;<code>WordFilter</code>&nbsp;实现函数<code>WordFilter.f(String prefix, String suffix)</code>。这个函数将返回具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的词的最大权重。如果没有这样的词，返回 -1。</p>\n\n<p><strong>例子:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nWordFilter([&quot;apple&quot;])\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // 返回 0\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // 返回 -1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>words</code>的长度在<code>[1, 15000]</code>之间。</li>\n\t<li>对于每个测试用例，最多会有<code>words.length</code>次对<code>WordFilter.f</code>的调用。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 10]</code>之间。</li>\n\t<li><code>prefix, suffix</code>的长度在<code>[0, 10]</code>之前。</li>\n\t<li><code>words[i]</code>和<code>prefix, suffix</code>只包含小写字母。</li>\n</ol>\n"
}
