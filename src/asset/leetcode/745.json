{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n */</span>\n<span class=\"hljs-keyword\">var</span> WordFilter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">TireTree</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.idx=id\n    <span class=\"hljs-keyword\">this</span>.idHash=[]\n    <span class=\"hljs-comment\">// this.val=val</span>\n    <span class=\"hljs-keyword\">this</span>.child=[]\n  }\n  <span class=\"hljs-keyword\">let</span> preTree=<span class=\"hljs-keyword\">new</span> TireTree(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">let</span> sufTree=<span class=\"hljs-keyword\">new</span> TireTree(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">let</span> preNode,sufNode\n  <span class=\"hljs-keyword\">this</span>.aCode=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    preNode=preTree\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;words[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> code=words[i].charCodeAt(j)-<span class=\"hljs-keyword\">this</span>.aCode\n      <span class=\"hljs-keyword\">if</span>(!preNode.child[code]){\n        preNode.child[code]=<span class=\"hljs-keyword\">new</span> TireTree(i,words[i][j])\n        preNode.child[code].idHash[i]=<span class=\"hljs-literal\">true</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        preNode.child[code].idx=i\n        preNode.child[code].idHash[i]=<span class=\"hljs-literal\">true</span>\n      }\n      preNode=preNode.child[code]\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    sufNode=sufTree\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=words[i].length<span class=\"hljs-number\">-1</span>;j&gt;=<span class=\"hljs-number\">0</span>;j--){\n      <span class=\"hljs-keyword\">let</span> code=words[i].charCodeAt(j)-<span class=\"hljs-keyword\">this</span>.aCode\n      <span class=\"hljs-keyword\">if</span>(!sufNode.child[code]){\n        sufNode.child[code]=<span class=\"hljs-keyword\">new</span> TireTree(i,words[i][j])\n        sufNode.child[code].idHash[i]=<span class=\"hljs-literal\">true</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        sufNode.child[code].idx=i\n        sufNode.child[code].idHash[i]=<span class=\"hljs-literal\">true</span>\n      }\n      sufNode=sufNode.child[code]\n    }\n  }\n  <span class=\"hljs-keyword\">this</span>.preTree=preTree\n  <span class=\"hljs-keyword\">this</span>.sufTree=sufTree\n  <span class=\"hljs-keyword\">this</span>.words=words\n\n};\n\n<span class=\"hljs-comment\">/** \n * @param {string} prefix \n * @param {string} suffix\n * @return {number}\n */</span>\nWordFilter.prototype.f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prefix, suffix</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> preNode=<span class=\"hljs-keyword\">this</span>.preTree,sufNode=<span class=\"hljs-keyword\">this</span>.sufTree\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prefix.length;i++){\n    <span class=\"hljs-keyword\">let</span> code=prefix.charCodeAt(i)-<span class=\"hljs-keyword\">this</span>.aCode    \n    <span class=\"hljs-keyword\">let</span> childN=preNode.child[code]\n    <span class=\"hljs-keyword\">if</span>(!childN)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    preNode=childN\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=suffix.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-keyword\">let</span> code=suffix.charCodeAt(i)-<span class=\"hljs-keyword\">this</span>.aCode    \n    <span class=\"hljs-keyword\">let</span> childN=sufNode.child[code]\n    <span class=\"hljs-keyword\">if</span>(!childN)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    sufNode=childN\n  }\n  <span class=\"hljs-keyword\">if</span>(preNode.idx==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> sufNode.idx\n  <span class=\"hljs-keyword\">if</span>(sufNode.idx==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> preNode.idx\n  <span class=\"hljs-keyword\">if</span>(preNode.idx===sufNode.idx)<span class=\"hljs-keyword\">return</span> sufNode.idx\n  <span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=preNode.idHash.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n      <span class=\"hljs-keyword\">if</span>(preNode.idHash[i]!=<span class=\"hljs-literal\">null</span>){\n        <span class=\"hljs-keyword\">if</span>(sufNode.idHash[i])<span class=\"hljs-keyword\">return</span> i  \n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\n};\n\n<span class=\"hljs-comment\">/** \n * Your WordFilter object will be instantiated and called as such:\n * var obj = Object.create(WordFilter).createNew(words)\n * var param_1 = obj.f(prefix,suffix)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "prefix-and-suffix-search",
  "content": "<p>给定多个&nbsp;<code>words</code>，<code>words[i]</code>&nbsp;的权重为&nbsp;<code>i</code>&nbsp;。</p>\n\n<p>设计一个类&nbsp;<code>WordFilter</code>&nbsp;实现函数<code>WordFilter.f(String prefix, String suffix)</code>。这个函数将返回具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的词的最大权重。如果没有这样的词，返回 -1。</p>\n\n<p><strong>例子:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nWordFilter([&quot;apple&quot;])\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // 返回 0\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // 返回 -1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>words</code>的长度在<code>[1, 15000]</code>之间。</li>\n\t<li>对于每个测试用例，最多会有<code>words.length</code>次对<code>WordFilter.f</code>的调用。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 10]</code>之间。</li>\n\t<li><code>prefix, suffix</code>的长度在<code>[0, 10]</code>之前。</li>\n\t<li><code>words[i]</code>和<code>prefix, suffix</code>只包含小写字母。</li>\n</ol>\n"
}
