{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> sortList = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> divid(head)\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divid</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!node || !node.next)<span class=\"hljs-keyword\">return</span> node\n    <span class=\"hljs-keyword\">let</span> fast=node,slow=node,prev\n    <span class=\"hljs-keyword\">while</span>(fast &amp;&amp; fast.next){\n      prev=slow\n      slow=slow.next\n      fast=fast.next.next\n    }\n    prev.next=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">return</span> merge(divid(node),divid(slow))\n  }\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">l1,l2</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!l1)<span class=\"hljs-keyword\">return</span> l2\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!l2)<span class=\"hljs-keyword\">return</span> l1\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(l1.val&lt;l2.val){\n      l1.next=merge(l1.next,l2)\n      <span class=\"hljs-keyword\">return</span> l1\n    }<span class=\"hljs-keyword\">else</span>{\n      l2.next=merge(l1,l2.next)\n      <span class=\"hljs-keyword\">return</span> l2\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "sort-list",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这里使用了<code>归并排序</code>，分为分割和合并两个部分。</p>\n",
  "content": "<p>在&nbsp;<em>O</em>(<em>n</em>&nbsp;log&nbsp;<em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</pre>\n"
}
