{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} A\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> commonChars = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> letters=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">26</span>;i++){\n    letters[i]=<span class=\"hljs-literal\">Infinity</span>\n  }\n  \n  <span class=\"hljs-keyword\">let</span> acode=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n    <span class=\"hljs-keyword\">let</span> newLetters=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;A[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> code=A[i].charCodeAt(j)-acode\n      <span class=\"hljs-keyword\">if</span>(newLetters[code]==<span class=\"hljs-literal\">null</span>)newLetters[code]=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> newLetters[code]++\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">26</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(letters[j] &amp;&amp; newLetters[j]){\n        letters[j]=<span class=\"hljs-built_in\">Math</span>.min(letters[j],newLetters[j])\n      }<span class=\"hljs-keyword\">else</span>{\n        letters[j]=<span class=\"hljs-literal\">null</span>\n      }\n    }\n    <span class=\"hljs-comment\">// console.log(letters)</span>\n  }\n  \n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;letters.length;i++){\n    <span class=\"hljs-keyword\">if</span>(letters[i]){\n      <span class=\"hljs-keyword\">while</span>(letters[i]&gt;<span class=\"hljs-number\">0</span>){\n        result.push(<span class=\"hljs-built_in\">String</span>.fromCharCode(i+acode))\n        letters[i]--\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-common-characters",
  "content": "<p>给定仅有小写字母组成的字符串数组 <code>A</code>，返回列表中的每个字符串中都显示的全部字符（<strong>包括重复字符</strong>）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。</p>\n\n<p>你可以按任意顺序返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]\n<strong>输出：</strong>[&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;cool&quot;,&quot;lock&quot;,&quot;cook&quot;]\n<strong>输出：</strong>[&quot;c&quot;,&quot;o&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n\t<li><code>A[i][j]</code> 是小写字母</li>\n</ol>\n"
}
