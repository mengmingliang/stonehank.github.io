{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar widthOfBinaryTree = function(root) {\n  // if(!root)return 0\n  // let node=root\n  // let queue=[node]\n  // let temp=[]\n  // let max=0\n  // while(queue.length>0){\n  //   let len=queue.length;\n  //   temp=[];\n  //   max=Math.max(queue.length,max)\n  //   for(let i=0;i<len;i++){\n  //     let cur=queue.shift();\n  //     if(!cur){\n  //       temp.push(null)\n  //       temp.push(null)\n  //       continue\n  //     }\n  //     if(cur.left)temp.push(cur.left);\n  //     else {if(temp.length>0)temp.push(null);}\n  //     if(cur.right)temp.push(cur.right);\n  //     else {if(temp.length>0)temp.push(null);}\n  //   }\n  //   let start=-1,end=-1;\n  //   for(let j=0;j<temp.length;j++){\n  //     if(temp[j]!=null){\n  //       start=j;\n  //       break;\n  //     }\n  //   }\n  //   for(let j=start;j<temp.length;j++){\n  //     if(temp[j]!=null)end=j;\n  //   }\n  //   if(start<0)return max\n  //   for(let j=start;j<=end;j++){\n  //     queue.push(temp[j])\n  //   }\n  // }\n  \n  if(!root)return 0\n  let row=0,height=0\n  let heightMap={}\n  // 计算左半边的宽度,保存每一层高度最左的index和最右的index\n  function dfs(node,row,height){\n    if(!node)return\n    if(heightMap[height]!=null){\n      if(row<heightMap[height][0])heightMap[height][0]=row\n      else if(row>heightMap[height][1])heightMap[height][1]=row\n    }else heightMap[height]=[row,row]\n    if(node.left)dfs(node.left,row*2,height+1)\n    if(node.right)dfs(node.right,row*2+1,height+1)\n  }\n  \n  dfs(root,0,0)\n\n  let hi=0,max=0\n\n  while(heightMap[hi]){\n    let minL=Infinity,gapL=-Infinity\n    if(heightMap[hi]!=null){\n      // height超过一定值，会出现NaN\n      if(heightMap[hi][1]===Infinity && heightMap[hi][0]===Infinity)gapL=1\n      else gapL=heightMap[hi][1]-heightMap[hi][0]+1\n    }\n    max=Math.max(max,gapL)\n\n    hi++\n  }\n  \n  return max\n};"
  ],
  "titleSlug": "maximum-width-of-binary-tree",
  "content": "<p>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a <b>full binary tree</b>, but some nodes are null. </p>\r\n\r\n<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the <code>null</code> nodes between the end-nodes are also counted into the length calculation.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n\r\n           1\r\n         /   \\\r\n        3     2\r\n       / \\     \\  \r\n      5   3     9 \r\n\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> The maximum width existing in the third level with the length 4 (5,3,null,9).\r\n</pre>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         /  \r\n        3    \r\n       / \\       \r\n      5   3     \r\n\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The maximum width existing in the third level with the length 2 (5,3).\r\n</pre>\r\n\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         / \\\r\n        3   2 \r\n       /        \r\n      5      \r\n\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The maximum width existing in the second level with the length 2 (3,2).\r\n</pre>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         / \\\r\n        3   2\r\n       /     \\  \r\n      5       9 \r\n     /         \\\r\n    6           7\r\n<b>Output:</b> 8\r\n<b>Explanation:</b>The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\r\n\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b>\r\nAnswer will in the range of 32-bit signed integer.\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树（full binary tree）</strong>结构相同，但一些节点为空。</p>\n\n<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的<code>null</code>节点也计入长度）之间的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 2 (5,3)。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 2 层，宽度为 2 (3,2)。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>输出:</strong> 8\n<strong>解释:</strong> 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。\n</pre>\n\n<p><strong>注意:</strong> 答案在32位有符号整数的表示范围内。</p>\n"
}
