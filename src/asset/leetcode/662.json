{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> widthOfBinaryTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-comment\">// if(!root)return 0</span>\n  <span class=\"hljs-comment\">// let node=root</span>\n  <span class=\"hljs-comment\">// let queue=[node]</span>\n  <span class=\"hljs-comment\">// let temp=[]</span>\n  <span class=\"hljs-comment\">// let max=0</span>\n  <span class=\"hljs-comment\">// while(queue.length&gt;0){</span>\n  <span class=\"hljs-comment\">//   let len=queue.length;</span>\n  <span class=\"hljs-comment\">//   temp=[];</span>\n  <span class=\"hljs-comment\">//   max=Math.max(queue.length,max)</span>\n  <span class=\"hljs-comment\">//   for(let i=0;i&lt;len;i++){</span>\n  <span class=\"hljs-comment\">//     let cur=queue.shift();</span>\n  <span class=\"hljs-comment\">//     if(!cur){</span>\n  <span class=\"hljs-comment\">//       temp.push(null)</span>\n  <span class=\"hljs-comment\">//       temp.push(null)</span>\n  <span class=\"hljs-comment\">//       continue</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//     if(cur.left)temp.push(cur.left);</span>\n  <span class=\"hljs-comment\">//     else {if(temp.length&gt;0)temp.push(null);}</span>\n  <span class=\"hljs-comment\">//     if(cur.right)temp.push(cur.right);</span>\n  <span class=\"hljs-comment\">//     else {if(temp.length&gt;0)temp.push(null);}</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   let start=-1,end=-1;</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;temp.length;j++){</span>\n  <span class=\"hljs-comment\">//     if(temp[j]!=null){</span>\n  <span class=\"hljs-comment\">//       start=j;</span>\n  <span class=\"hljs-comment\">//       break;</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   for(let j=start;j&lt;temp.length;j++){</span>\n  <span class=\"hljs-comment\">//     if(temp[j]!=null)end=j;</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   if(start&lt;0)return max</span>\n  <span class=\"hljs-comment\">//   for(let j=start;j&lt;=end;j++){</span>\n  <span class=\"hljs-comment\">//     queue.push(temp[j])</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  \n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> row=<span class=\"hljs-number\">0</span>,height=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> heightMap={}\n  <span class=\"hljs-comment\">// 计算左半边的宽度,保存每一层高度最左的index和最右的index</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node,row,height</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(heightMap[height]!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">if</span>(row&lt;heightMap[height][<span class=\"hljs-number\">0</span>])heightMap[height][<span class=\"hljs-number\">0</span>]=row\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(row&gt;heightMap[height][<span class=\"hljs-number\">1</span>])heightMap[height][<span class=\"hljs-number\">1</span>]=row\n    }<span class=\"hljs-keyword\">else</span> heightMap[height]=[row,row]\n    <span class=\"hljs-keyword\">if</span>(node.left)dfs(node.left,row*<span class=\"hljs-number\">2</span>,height+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span>(node.right)dfs(node.right,row*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>,height+<span class=\"hljs-number\">1</span>)\n  }\n  \n  dfs(root,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-keyword\">let</span> hi=<span class=\"hljs-number\">0</span>,max=<span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">while</span>(heightMap[hi]){\n    <span class=\"hljs-keyword\">let</span> minL=<span class=\"hljs-literal\">Infinity</span>,gapL=-<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">if</span>(heightMap[hi]!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-comment\">// height超过一定值，会出现NaN</span>\n      <span class=\"hljs-keyword\">if</span>(heightMap[hi][<span class=\"hljs-number\">1</span>]===<span class=\"hljs-literal\">Infinity</span> &amp;&amp; heightMap[hi][<span class=\"hljs-number\">0</span>]===<span class=\"hljs-literal\">Infinity</span>)gapL=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> gapL=heightMap[hi][<span class=\"hljs-number\">1</span>]-heightMap[hi][<span class=\"hljs-number\">0</span>]+<span class=\"hljs-number\">1</span>\n    }\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,gapL)\n\n    hi++\n  }\n  \n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-width-of-binary-tree",
  "translatedContent": "<p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与<strong>满二叉树（full binary tree）</strong>结构相同，但一些节点为空。</p>\n\n<p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的<code>null</code>节点也计入长度）之间的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 3 层，宽度为 2 (5,3)。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最大值出现在树的第 2 层，宽度为 2 (3,2)。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>输出:</strong> 8\n<strong>解释:</strong> 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。\n</pre>\n\n<p><strong>注意:</strong> 答案在32位有符号整数的表示范围内。</p>\n"
}
