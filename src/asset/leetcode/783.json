{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDiffInBST = function(root) {\n    let last\n    let min=Number.MAX_SAFE_INTEGER\n    function inorder(node){\n        if(!node)return\n        if(node.left)inorder(node.left)\n        if(last===undefined)last=node.val\n        else{\n            let cur=node.val-last\n            if(cur<min)min=cur\n            last=node.val\n        }\n        if(node.right)inorder(node.right)\n    }\n    inorder(root)\n    return min\n    \n};"
  ],
  "titleSlug": "minimum-distance-between-bst-nodes",
  "content": "<p>Given a Binary Search Tree (BST) with the root node <code>root</code>, return&nbsp;the minimum difference between the values of any two different nodes in the tree.</p>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [4,2,6,1,3,null,null]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nNote that root is a TreeNode object, not an array.\r\n\r\nThe given tree [4,2,6,1,3,null,null] is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    \r\n    1   3  \r\n\r\nwhile the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The size of the BST will be between 2 and&nbsp;<code>100</code>.</li>\r\n\t<li>The BST is always valid, each node&#39;s value is an integer, and each node&#39;s value is different.</li>\r\n</ol>\r\n",
  "translatedContent": "<p>给定一个二叉搜索树的根结点&nbsp;<code>root</code>, 返回树中任意两节点的差的最小值。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> root = [4,2,6,1,3,null,null]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n注意，root是树结点对象(TreeNode object)，而不是数组。\n\n给定的树 [4,2,6,1,3,null,null] 可表示为下图:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>二叉树的大小范围在 <code>2</code> 到&nbsp;<code>100</code>。</li>\n\t<li>二叉树总是有效的，每个节点的值都是整数，且不重复。</li>\n</ol>\n"
}
