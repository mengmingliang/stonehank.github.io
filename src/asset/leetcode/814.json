{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar pruneTree = function(root) {\n    function ir(node){\n        if(!node)return null\n        node.left=ir(node.left)\n        node.right=ir(node.right)\n        if(!node.val && !node.left && !node.right){\n            return null\n        }\n        return node\n    }\n    root=ir(root)\n    return root\n};"
  ],
  "titleSlug": "binary-tree-pruning",
  "content": "<p>We are given the head node <code>root</code>&nbsp;of a binary tree, where additionally every node&#39;s value is either a 0 or a 1.</p>\r\n\r\n<p>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.</p>\r\n\r\n<p>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [1,null,0,0,1]\r\n<strong>Output: </strong>[1,null,0,null,1]\r\n \r\n<strong>Explanation:</strong> \r\nOnly the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.\r\nThe diagram on the right represents the answer.\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [1,0,1,0,0,0,1]\r\n<strong>Output: </strong>[1,null,1,null,1]\r\n\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> [1,1,0,1,1,0,1,0]\r\n<strong>Output: </strong>[1,1,0,1,1,null,1]\r\n\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li>The binary tree&nbsp;will&nbsp;have&nbsp;at&nbsp;most <code>100 nodes</code>.</li>\r\n\t<li>The value of each node will only be <code>0</code> or <code>1</code>.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给定二叉树根结点&nbsp;<code>root</code>&nbsp;，此外树的每个结点的值要么是 0，要么是 1。</p>\n\n<p>返回移除了所有不包含 1 的子树的原二叉树。</p>\n\n<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)</p>\n\n<pre>\n<strong>示例1:</strong>\n<strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1]\n \n<strong>解释:</strong> \n只有红色节点满足条件&ldquo;所有不包含 1 的子树&rdquo;。\n右图为返回的答案。\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>示例2:</strong>\n<strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>示例3:</strong>\n<strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li>给定的二叉树最多有&nbsp;<code>100</code>&nbsp;个节点。</li>\n\t<li>每个节点的值只会为&nbsp;<code>0</code> 或&nbsp;<code>1</code>&nbsp;。</li>\n</ul>\n"
}
