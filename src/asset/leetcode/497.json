{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} rects\n */</span>\n<span class=\"hljs-keyword\">var</span> Solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rects</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> list=[],sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;rects.length;i++){\n    <span class=\"hljs-keyword\">let</span> w=rects[i][<span class=\"hljs-number\">2</span>]-rects[i][<span class=\"hljs-number\">0</span>],\n        h=rects[i][<span class=\"hljs-number\">3</span>]-rects[i][<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">let</span> area\n    <span class=\"hljs-keyword\">if</span>(w===<span class=\"hljs-number\">0</span> &amp;&amp; h===<span class=\"hljs-number\">0</span>)area=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(w===<span class=\"hljs-number\">0</span>)area=h\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(h===<span class=\"hljs-number\">0</span>)area=w\n    <span class=\"hljs-keyword\">else</span> area=(w+<span class=\"hljs-number\">1</span>)*(h+<span class=\"hljs-number\">1</span>)\n    list[i]=area\n    sum+=area\n  }\n      <span class=\"hljs-comment\">// console.log(list)</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;list.length;i++){\n    <span class=\"hljs-keyword\">let</span> prev=i===<span class=\"hljs-number\">0</span>?<span class=\"hljs-number\">0</span>:list[i<span class=\"hljs-number\">-1</span>]\n    list[i]=prev+list[i]/sum\n  }\n  <span class=\"hljs-keyword\">this</span>.pick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">let</span> rd=<span class=\"hljs-built_in\">Math</span>.random()\n    <span class=\"hljs-keyword\">let</span> select\n    <span class=\"hljs-keyword\">let</span> rdX,rdY\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=list.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n      <span class=\"hljs-keyword\">if</span>(i&gt;=<span class=\"hljs-number\">1</span> &amp;&amp; rd&lt;=list[i<span class=\"hljs-number\">-1</span>])<span class=\"hljs-keyword\">continue</span>\n      rdX=rects[i][<span class=\"hljs-number\">0</span>]+<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*(rects[i][<span class=\"hljs-number\">2</span>]-rects[i][<span class=\"hljs-number\">0</span>]+<span class=\"hljs-number\">1</span>))\n      rdY=rects[i][<span class=\"hljs-number\">1</span>]+<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*(rects[i][<span class=\"hljs-number\">3</span>]-rects[i][<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>))\n      <span class=\"hljs-keyword\">break</span>\n    }\n    <span class=\"hljs-keyword\">return</span> [rdX,rdY]\n  }\n};\n\n\n\n<span class=\"hljs-comment\">/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(rects)\n * var param_1 = obj.pick()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "random-point-in-non-overlapping-rectangles",
  "hasThinking": false,
  "content": "<p>给定一个非重叠轴对齐矩形的列表 <code>rects</code>，写一个函数 <code>pick</code> 随机均匀地选取矩形覆盖的空间中的整数点。</p>\n\n<p>提示：</p>\n\n<ol>\n\t<li><strong>整数点</strong>是具有整数坐标的点。</li>\n\t<li>矩形周边上的点包含在矩形覆盖的空间中。</li>\n\t<li>第 <code>i</code> 个矩形 <code>rects [i] = [x1，y1，x2，y2]</code>，其中&nbsp;<code>[x1，y1]</code> 是左下角的整数坐标，<code>[x2，y2]</code> 是右上角的整数坐标。</li>\n\t<li>每个矩形的长度和宽度不超过 2000。</li>\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\n\t<li><code>pick</code> 以整数坐标数组&nbsp;<code>[p_x, p_y]</code>&nbsp;的形式返回一个点。</li>\n\t<li><code>pick</code> 最多被调用10000次。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[1,1,5,5]]],[],[],[]]\n<strong>输出: \n</strong>[null,[4,1],[4,1],[3,3]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\n<strong>输出: \n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>输入语法的说明：</strong></p>\n\n<p>输入是两个列表：调用的子例程及其参数。<code>Solution</code> 的构造函数有一个参数，即矩形数组 <code>rects</code>。<code>pick</code> 没有参数。参数总是用列表包装的，即使没有也是如此。</p>\n\n<p>&nbsp;</p>\n"
}
