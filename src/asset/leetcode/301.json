{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeInvalidParentheses = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n<span class=\"hljs-comment\">//   let counter=0,problemLeft=[],problemRight=[]</span>\n<span class=\"hljs-comment\">//   // 分割左右</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;s.length;i++){</span>\n<span class=\"hljs-comment\">//     if(s[i]===\"(\") { problemLeft.push(i); counter++}</span>\n<span class=\"hljs-comment\">//     if(s[i]===\")\"){ problemLeft.pop(); counter--}</span>\n<span class=\"hljs-comment\">//     if(counter&lt;0){ problemRight.push(i); counter=0}</span>\n<span class=\"hljs-comment\">//   }</span>\n  \n<span class=\"hljs-comment\">//   let marked={},resultL=[],resultR=[]</span>\n<span class=\"hljs-comment\">//   let pRLen=problemRight.length,pLLen=problemLeft.length</span>\n<span class=\"hljs-comment\">//   // 获取剩余值</span>\n<span class=\"hljs-comment\">//   let res=\"\"</span>\n<span class=\"hljs-comment\">//   if(pLLen===0) res=s.substring(problemRight[pRLen-1]+1)</span>\n<span class=\"hljs-comment\">//   if(pRLen===0) res=s.substring(0,problemLeft[0])</span>\n<span class=\"hljs-comment\">//   if(pRLen&gt;0 &amp;&amp; pRLen&gt;0) res=s.substring(problemRight[pRLen-1]+1,problemLeft[0])</span>\n  \n<span class=\"hljs-comment\">//   // 重设左的字符串，并且backtrack</span>\n<span class=\"hljs-comment\">//   if(pLLen&gt;0){</span>\n<span class=\"hljs-comment\">//     let problemLS=s.substring(problemLeft[0])</span>\n<span class=\"hljs-comment\">//     let newProblemLeft=problemLeft.map(n=&gt;n-problemLeft[0])</span>\n<span class=\"hljs-comment\">//     backtrack(problemLS,resultL,[],newProblemLeft,0,0,false)</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   // backtrack右侧</span>\n<span class=\"hljs-comment\">//   if(pRLen&gt;0){</span>\n<span class=\"hljs-comment\">//     let problemRS=s.substring(0,problemRight[pRLen-1]+1)</span>\n<span class=\"hljs-comment\">//     backtrack(problemRS,resultR,[],problemRight,0,0,true)</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   function backtrack(allStr,result,temp,problemIdx,start,loopStart,isRight){</span>\n<span class=\"hljs-comment\">//     if(start===problemIdx.length){</span>\n<span class=\"hljs-comment\">//       let str='',idx=0</span>\n<span class=\"hljs-comment\">//       for(let i=0;i&lt;allStr.length;i++){</span>\n<span class=\"hljs-comment\">//         if(i===temp[idx]){idx++;continue}</span>\n<span class=\"hljs-comment\">//         str+=allStr[i]</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       if(!marked[str]){</span>\n<span class=\"hljs-comment\">//         marked[str]=true</span>\n<span class=\"hljs-comment\">//         result.push(str)</span>\n<span class=\"hljs-comment\">//         return</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     for(let i=loopStart;i&lt;allStr.length;i++){</span>\n<span class=\"hljs-comment\">//       if(isRight &amp;&amp; i&lt;=problemIdx[start] &amp;&amp; allStr[i]===\")\"){</span>\n<span class=\"hljs-comment\">//         temp.push(i)</span>\n<span class=\"hljs-comment\">//         backtrack(allStr,result,temp,problemIdx,start+1,i+1,isRight)</span>\n<span class=\"hljs-comment\">//         temp.pop()</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       if(!isRight &amp;&amp; i&gt;=problemIdx[start] &amp;&amp; allStr[i]===\"(\"){</span>\n<span class=\"hljs-comment\">//         temp.push(i)</span>\n<span class=\"hljs-comment\">//         backtrack(allStr,result,temp,problemIdx,start+1,i+1,isRight)</span>\n<span class=\"hljs-comment\">//         temp.pop()</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n\n<span class=\"hljs-comment\">//   function isEmpty(arr){</span>\n<span class=\"hljs-comment\">//     if(arr.length===0 || (arr.length===1 &amp;&amp; arr[0]===\"\"))return true</span>\n<span class=\"hljs-comment\">//     return false</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   // 左右为空，直接返回剩余值</span>\n<span class=\"hljs-comment\">//   if(isEmpty(resultR) &amp;&amp; isEmpty(resultL))return [res]</span>\n<span class=\"hljs-comment\">//   // 左或右为空，返回结果+剩余值</span>\n<span class=\"hljs-comment\">//   if(isEmpty(resultR))return resultL.map(n=&gt;res+n)</span>\n<span class=\"hljs-comment\">//   if(isEmpty(resultL))return resultR.map(n=&gt;n+res)</span>\n  \n<span class=\"hljs-comment\">//   let finalRes=[]</span>\n<span class=\"hljs-comment\">//   // 左右均不空，组合</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;resultR.length;i++){</span>\n<span class=\"hljs-comment\">//     for(let j=0;j&lt;resultL.length;j++){</span>\n<span class=\"hljs-comment\">//       let str=resultR[i]+res+resultL[j]</span>\n<span class=\"hljs-comment\">//       finalRes.push(str)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   return finalRes</span>\n  \n  \n  \n  <span class=\"hljs-keyword\">let</span> ans = [];\n  remove(s, ans, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, [<span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">')'</span>]);\n  <span class=\"hljs-keyword\">return</span> ans;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"> s,  ans, last_i,  last_j,  par</span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> stack = <span class=\"hljs-number\">0</span>, i = last_i; i &lt; s.length; ++i) {\n        <span class=\"hljs-keyword\">if</span> (s.charAt(i) == par[<span class=\"hljs-number\">0</span>]) stack++;\n        <span class=\"hljs-keyword\">if</span> (s.charAt(i) == par[<span class=\"hljs-number\">1</span>]) stack--;\n        <span class=\"hljs-keyword\">if</span> (stack &gt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">continue</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = last_j; j &lt;= i; ++j)\n            <span class=\"hljs-keyword\">if</span> (s[j] == par[<span class=\"hljs-number\">1</span>] &amp;&amp; (j == last_j || s[j<span class=\"hljs-number\">-1</span>] != par[<span class=\"hljs-number\">1</span>]))\n                remove(s.substring(<span class=\"hljs-number\">0</span>, j) + s.substring(j + <span class=\"hljs-number\">1</span>, s.length), ans, i, j, par);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> reversed = s.split(<span class=\"hljs-string\">''</span>).reverse().join(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-keyword\">if</span> (par[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'('</span>) <span class=\"hljs-comment\">// finished left to right</span>\n        remove(reversed, ans, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, [<span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>]);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">// finished right to left</span>\n        ans.push(reversed);\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "remove-invalid-parentheses",
  "content": "<p>删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。</p>\n\n<p><strong>说明:</strong> 输入可能包含了除&nbsp;<code>(</code>&nbsp;和&nbsp;<code>)</code>&nbsp;以外的字符。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;()())()&quot;\n<strong>输出:</strong> [&quot;()()()&quot;, &quot;(())()&quot;]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(a)())()&quot;\n<strong>输出:</strong> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> &quot;)(&quot;\n<strong>输出: </strong>[&quot;&quot;]</pre>\n"
}
