{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n * @param {ListNode} head\n */</span>\n<span class=\"hljs-keyword\">var</span> Solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.head=head\n};\n\n<span class=\"hljs-comment\">/**\n * Returns a random node's value.\n * @return {number}\n */</span>\nSolution.prototype.getRandom = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> ran,ranNum,finded=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> list=<span class=\"hljs-keyword\">this</span>.head,countSum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getR</span>(<span class=\"hljs-params\">list,count</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!list){\n      ran=<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*countSum)\n      <span class=\"hljs-keyword\">return</span>\n    }\n    countSum++\n    getR(list.next,count+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span>(list &amp;&amp; ran===count &amp;&amp; !finded){\n      ranNum=list.val\n      finded=<span class=\"hljs-literal\">true</span>\n    }\n  }\n  getR(list,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> ranNum\n};\n\n<span class=\"hljs-comment\">/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(head)\n * var param_1 = obj.getRandom()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "linked-list-random-node",
  "content": "<p>给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点<strong>被选的概率一样</strong>。</p>\n\n<p><strong>进阶:</strong><br />\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n</pre>\n"
}
