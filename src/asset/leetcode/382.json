{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n * @param {ListNode} head\n */\nvar Solution = function(head) {\n    this.head=head\n};\n\n/**\n * Returns a random node's value.\n * @return {number}\n */\nSolution.prototype.getRandom = function() {\n  let ran,ranNum,finded=false\n  let list=this.head,countSum=0\n  function getR(list,count){\n    if(!list){\n      ran=Math.floor(Math.random()*countSum)\n      return\n    }\n    countSum++\n    getR(list.next,count+1)\n    if(list && ran===count && !finded){\n      ranNum=list.val\n      finded=true\n    }\n  }\n  getR(list,0)\n  return ranNum\n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(head)\n * var param_1 = obj.getRandom()\n */"
  ],
  "titleSlug": "linked-list-random-node",
  "content": "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点<strong>被选的概率一样</strong>。</p>\n\n<p><strong>进阶:</strong><br />\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 初始化一个单链表 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\nsolution.getRandom();\n</pre>\n"
}
