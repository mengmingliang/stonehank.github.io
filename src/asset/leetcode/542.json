{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> updateMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;matrix.length;i++){</span>\n<span class=\"hljs-comment\">//     for(let j=0;j&lt;matrix[i].length;j++){</span>\n<span class=\"hljs-comment\">//       if(matrix[i][j]===0)continue</span>\n<span class=\"hljs-comment\">//       matrix[i][j]=bfs([i,j])</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n  \n<span class=\"hljs-comment\">//   function bfs(point){</span>\n<span class=\"hljs-comment\">//     let arr=[point]</span>\n<span class=\"hljs-comment\">//     let step=0</span>\n<span class=\"hljs-comment\">//     while(arr.length&gt;0){</span>\n<span class=\"hljs-comment\">//       step++</span>\n<span class=\"hljs-comment\">//       let len=arr.length</span>\n<span class=\"hljs-comment\">//       for(let i=0;i&lt;len;i++){</span>\n<span class=\"hljs-comment\">//         let curP=arr.shift()</span>\n<span class=\"hljs-comment\">//         let row=curP[0],</span>\n<span class=\"hljs-comment\">//             col=curP[1]</span>\n<span class=\"hljs-comment\">//         let u,d,l,r</span>\n<span class=\"hljs-comment\">//         if(row&gt;0)u=matrix[row-1][col]</span>\n<span class=\"hljs-comment\">//         if(row&lt;matrix.length-1)d=matrix[row+1][col]</span>\n<span class=\"hljs-comment\">//         if(col&gt;0)l=matrix[row][col-1]</span>\n<span class=\"hljs-comment\">//         if(col&lt;matrix[row].length-1)r=matrix[row][col+1]</span>\n<span class=\"hljs-comment\">//         if(u===0 || d===0 || l===0 || r===0)return step</span>\n<span class=\"hljs-comment\">//         else{</span>\n<span class=\"hljs-comment\">//           if(u)arr.push([row-1,col])</span>\n<span class=\"hljs-comment\">//           if(d)arr.push([row+1,col])</span>\n<span class=\"hljs-comment\">//           if(l)arr.push([row,col-1])</span>\n<span class=\"hljs-comment\">//           if(r)arr.push([row,col+1])</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   return matrix</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;matrix.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;matrix[i].length;j++){\n      <span class=\"hljs-keyword\">if</span>(matrix[i][j]===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n      matrix[i][j]=checkLT(i,j)+<span class=\"hljs-number\">1</span>\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkLT</span>(<span class=\"hljs-params\">i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">0</span>)min=<span class=\"hljs-built_in\">Math</span>.min(min,matrix[i<span class=\"hljs-number\">-1</span>][j])\n    <span class=\"hljs-keyword\">if</span>(j&gt;<span class=\"hljs-number\">0</span>)min=<span class=\"hljs-built_in\">Math</span>.min(min,matrix[i][j<span class=\"hljs-number\">-1</span>])\n    <span class=\"hljs-keyword\">return</span> min\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=matrix.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=matrix[i].length<span class=\"hljs-number\">-1</span>;j&gt;=<span class=\"hljs-number\">0</span>;j--){\n     <span class=\"hljs-keyword\">if</span>(matrix[i][j]===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n      matrix[i][j]=<span class=\"hljs-built_in\">Math</span>.min(matrix[i][j],checkRD(i,j)+<span class=\"hljs-number\">1</span>)\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkRD</span>(<span class=\"hljs-params\">i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">if</span>(i&lt;matrix.length<span class=\"hljs-number\">-1</span>)min=<span class=\"hljs-built_in\">Math</span>.min(min,matrix[i+<span class=\"hljs-number\">1</span>][j])\n    <span class=\"hljs-keyword\">if</span>(j&lt;matrix[i].length<span class=\"hljs-number\">-1</span>)min=<span class=\"hljs-built_in\">Math</span>.min(min,matrix[i][j+<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> min    \n  }\n  <span class=\"hljs-keyword\">return</span> matrix\n};\n</code></pre>\n"
  ],
  "titleSlug": "01-matrix",
  "content": "<p>给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。</p>\n\n<p>两个相邻元素间的距离为 1 。</p>\n\n<p><strong>示例 1: </strong><br />\n输入:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p>输出:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p><strong>示例 2: </strong><br />\n输入:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 1 1\n</pre>\n\n<p>输出:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 2 1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定矩阵的元素个数不超过 10000。</li>\n\t<li>给定矩阵中至少有一个元素是 0。</li>\n\t<li>矩阵中的元素只在四个方向上相邻: 上、下、左、右。</li>\n</ol>\n"
}
