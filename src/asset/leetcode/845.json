{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestMountain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(A.length&lt;<span class=\"hljs-number\">3</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> valid=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> down=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> up=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;A.length;i++){\n    \n    <span class=\"hljs-keyword\">if</span>((down&gt;<span class=\"hljs-number\">0</span> &amp;&amp; A[i]&gt;A[i<span class=\"hljs-number\">-1</span>]) || A[i]===A[i<span class=\"hljs-number\">-1</span>]){\n      up=<span class=\"hljs-number\">0</span>\n      down=<span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(up&gt;<span class=\"hljs-number\">0</span> &amp;&amp; A[i]&lt;A[i<span class=\"hljs-number\">-1</span>]){\n      down++\n    }\n    <span class=\"hljs-keyword\">if</span>(A[i]&gt;A[i<span class=\"hljs-number\">-1</span>]){\n      up++\n    }\n    \n    <span class=\"hljs-keyword\">if</span>(up&gt;<span class=\"hljs-number\">0</span> &amp;&amp; down&gt;<span class=\"hljs-number\">0</span>)max=<span class=\"hljs-built_in\">Math</span>.max(up+down,max)\n\n  }\n  <span class=\"hljs-keyword\">return</span> max===<span class=\"hljs-number\">0</span>?<span class=\"hljs-number\">0</span>:max+<span class=\"hljs-number\">1</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-mountain-in-array",
  "content": "<p>我们把数组 A 中符合下列属性的任意连续子数组 B 称为 &ldquo;<em>山脉&rdquo;</em>：</p>\n\n<ul>\n\t<li><code>B.length &gt;= 3</code></li>\n\t<li>存在 <code>0 &lt; i&nbsp;&lt; B.length - 1</code> 使得 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>\n</ul>\n\n<p>（注意：B 可以是 A 的任意子数组，包括整个数组 A。）</p>\n\n<p>给出一个整数数组 <code>A</code>，返回最长 <em>&ldquo;山脉&rdquo;</em>&nbsp;的长度。</p>\n\n<p>如果不含有 &ldquo;<em>山脉&rdquo;&nbsp;</em>则返回 <code>0</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,4,7,3,2,5]\n<strong>输出：</strong>5\n<strong>解释：</strong>最长的 &ldquo;山脉&rdquo; 是 [1,4,7,3,2]，长度为 5。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[2,2,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>不含 &ldquo;山脉&rdquo;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n"
}
