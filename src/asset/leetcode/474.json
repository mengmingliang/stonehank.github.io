{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMaxForm = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strs, m, n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(strs.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(m+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>))\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;strs.length;k++){\n    <span class=\"hljs-keyword\">let</span> zero_c=<span class=\"hljs-number\">0</span>,one_c=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> l <span class=\"hljs-keyword\">of</span> strs[k]){\n      <span class=\"hljs-keyword\">if</span>(l===<span class=\"hljs-string\">\"0\"</span>)zero_c++\n      <span class=\"hljs-keyword\">else</span> one_c++\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=m;i&gt;=zero_c;i--){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=n;j&gt;=one_c;j--){\n        dp[i][j]=<span class=\"hljs-built_in\">Math</span>.max(dp[i][j],dp[i-zero_c][j-one_c]+<span class=\"hljs-number\">1</span>)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[m][n]\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "ones-and-zeroes",
  "hasThinking": false,
  "content": "<p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>\n\n<p>现在，假设你分别支配着 <strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>。另外，还有一个仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;字符串的数组。</p>\n\n<p>你的任务是使用给定的&nbsp;<strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>&nbsp;，找到能拼出存在于数组中的字符串的最大数量。每个&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;至多被使用<strong>一次</strong>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;的数量都不会超过&nbsp;<code>100</code>。</li>\n\t<li>给定字符串数组的长度不会超过&nbsp;<code>600</code>。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;}, m = 5, n = 3\n<strong>输出:</strong> 4\n\n<strong>解释:</strong> 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0&quot;, &quot;1&quot;}, m = 1, n = 1\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你可以拼出 &quot;10&quot;，但之后就没有剩余数字了。更好的选择是拼出 &quot;0&quot; 和 &quot;1&quot; 。\n</pre>\n"
}
