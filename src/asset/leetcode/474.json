{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMaxForm = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">strs, m, n</span>) </span>{\n<span class=\"hljs-comment\">//     let table=[]</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;strs.length;i++){</span>\n<span class=\"hljs-comment\">//         table[i]=[]</span>\n<span class=\"hljs-comment\">//         for(let j=0;j&lt;=m;j++){</span>\n<span class=\"hljs-comment\">//             table[i][j]=[]</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     let init=strs</span>\n<span class=\"hljs-comment\">//     function getMax(strs,hi,rm,rn){</span>\n<span class=\"hljs-comment\">//         if(rm&lt;0 || rn&lt;0)return -Infinity</span>\n<span class=\"hljs-comment\">//         if(hi&lt;0)return init.length-hi-1</span>\n<span class=\"hljs-comment\">//         if(table[hi][rm][rn])return table[hi][rm][rn]</span>\n\n<span class=\"hljs-comment\">//         let last=strs[hi]</span>\n<span class=\"hljs-comment\">//         let cm=0,cn=0</span>\n<span class=\"hljs-comment\">//         for(let i=0;i&lt;last.length;i++){</span>\n<span class=\"hljs-comment\">//             if(last[i]===\"0\")cm++</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//         cn=last.length-cm</span>\n<span class=\"hljs-comment\">//         let memRes= Math.max(getMax(strs,hi-1,rm-cm,rn-cn),getMax(strs,hi-1,rm,rn)-1)</span>\n<span class=\"hljs-comment\">//         table[hi][rm][rn]=memRes</span>\n<span class=\"hljs-comment\">//         return memRes</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     let res= getMax(strs,strs.length-1,m,n)</span>\n<span class=\"hljs-comment\">//     return res===-Infinity ? 0 : res</span>\n    \n        <span class=\"hljs-keyword\">let</span> zeroCount = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> str = strs[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;str.length;i++){\n        <span class=\"hljs-keyword\">if</span>(str[i] === <span class=\"hljs-string\">'0'</span>){\n            zeroCount++;\n        }\n    }\n    <span class=\"hljs-keyword\">let</span> oneCount = str.length-zeroCount;\n    \n    <span class=\"hljs-keyword\">const</span> matrix = [];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m+<span class=\"hljs-number\">1</span>;i++){\n        <span class=\"hljs-keyword\">let</span> arr = [];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n+<span class=\"hljs-number\">1</span>;j++){\n            <span class=\"hljs-keyword\">if</span>(i&gt;=zeroCount &amp;&amp; j&gt;=oneCount){\n                arr.push(<span class=\"hljs-number\">1</span>)\n            }<span class=\"hljs-keyword\">else</span>{\n                arr.push(<span class=\"hljs-number\">0</span>);\n            }\n        }\n        matrix.push(arr);\n    }\n    <span class=\"hljs-built_in\">console</span>.log(matrix)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;strs.length;i++){\n        <span class=\"hljs-keyword\">let</span> str = strs[i];\n        <span class=\"hljs-keyword\">let</span> zeroCount = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;str.length;j++){\n            str[j] === <span class=\"hljs-string\">'0'</span> &amp;&amp; zeroCount++;\n        }\n        <span class=\"hljs-keyword\">let</span> oneCount = str.length-zeroCount;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=m;j&gt;<span class=\"hljs-number\">-1</span>;j--){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=n;k&gt;<span class=\"hljs-number\">-1</span>;k--){\n                <span class=\"hljs-comment\">// console.log(j,zeroCount,k,oneCount)</span>\n                <span class=\"hljs-keyword\">if</span>(j&gt;=zeroCount &amp;&amp; k&gt;=oneCount){\n                    matrix[j][k] = <span class=\"hljs-built_in\">Math</span>.max(matrix[j-zeroCount][k-oneCount]+<span class=\"hljs-number\">1</span>,matrix[j][k]);\n                }\n            }\n        }\n        \n    }\n    <span class=\"hljs-keyword\">return</span> matrix[m][n];\n};\n</code></pre>\n"
  ],
  "titleSlug": "ones-and-zeroes",
  "content": "<p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>\n\n<p>现在，假设你分别支配着 <strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>。另外，还有一个仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;字符串的数组。</p>\n\n<p>你的任务是使用给定的&nbsp;<strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>&nbsp;，找到能拼出存在于数组中的字符串的最大数量。每个&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;至多被使用<strong>一次</strong>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;的数量都不会超过&nbsp;<code>100</code>。</li>\n\t<li>给定字符串数组的长度不会超过&nbsp;<code>600</code>。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;}, m = 5, n = 3\n<strong>输出:</strong> 4\n\n<strong>解释:</strong> 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0&quot;, &quot;1&quot;}, m = 1, n = 1\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你可以拼出 &quot;10&quot;，但之后就没有剩余数字了。更好的选择是拼出 &quot;0&quot; 和 &quot;1&quot; 。\n</pre>\n"
}
