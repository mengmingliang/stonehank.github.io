{
  "code": [
    "/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n//     let table=[]\n//     for(let i=0;i<strs.length;i++){\n//         table[i]=[]\n//         for(let j=0;j<=m;j++){\n//             table[i][j]=[]\n//         }\n//     }\n//     let init=strs\n//     function getMax(strs,hi,rm,rn){\n//         if(rm<0 || rn<0)return -Infinity\n//         if(hi<0)return init.length-hi-1\n//         if(table[hi][rm][rn])return table[hi][rm][rn]\n\n//         let last=strs[hi]\n//         let cm=0,cn=0\n//         for(let i=0;i<last.length;i++){\n//             if(last[i]===\"0\")cm++\n//         }\n//         cn=last.length-cm\n//         let memRes= Math.max(getMax(strs,hi-1,rm-cm,rn-cn),getMax(strs,hi-1,rm,rn)-1)\n//         table[hi][rm][rn]=memRes\n//         return memRes\n//     }\n//     let res= getMax(strs,strs.length-1,m,n)\n//     return res===-Infinity ? 0 : res\n    \n        let zeroCount = 0;\n    let str = strs[0];\n    for(let i=0;i<str.length;i++){\n        if(str[i] === '0'){\n            zeroCount++;\n        }\n    }\n    let oneCount = str.length-zeroCount;\n    \n    const matrix = [];\n    for(let i=0;i<m+1;i++){\n        let arr = [];\n        for(let j=0;j<n+1;j++){\n            if(i>=zeroCount && j>=oneCount){\n                arr.push(1)\n            }else{\n                arr.push(0);\n            }\n        }\n        matrix.push(arr);\n    }\n    console.log(matrix)\n    for(let i=1;i<strs.length;i++){\n        let str = strs[i];\n        let zeroCount = 0;\n        for(let j=0;j<str.length;j++){\n            str[j] === '0' && zeroCount++;\n        }\n        let oneCount = str.length-zeroCount;\n        for(let j=m;j>-1;j--){\n            for(let k=n;k>-1;k--){\n                // console.log(j,zeroCount,k,oneCount)\n                if(j>=zeroCount && k>=oneCount){\n                    matrix[j][k] = Math.max(matrix[j-zeroCount][k-oneCount]+1,matrix[j][k]);\n                }\n            }\n        }\n        \n    }\n    return matrix[m][n];\n};"
  ],
  "titleSlug": "ones-and-zeroes",
  "content": "<p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>\r\n<p>For now, suppose you are a dominator of <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code> respectively. On the other hand, there is an array with strings consisting of only <code>0s</code> and <code>1s</code>.</p>\r\n\r\n<p>\r\nNow your task is to find the maximum number of strings that you can form with given <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code>. Each <code>0</code> and <code>1</code> can be used at most <b>once</b>.\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given numbers of <code>0s</code> and <code>1s</code> will both not exceed <code>100</code></li>\r\n<li>The size of given string array won't exceed <code>600</code>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\r\n<b>Output:</b> 4\r\n\r\n<b>Explanation:</b> This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\r\n</pre>\r\n</p>",
  "translatedContent": "<p>在计算机界中，我们总是追求用有限的资源获取最大的收益。</p>\n\n<p>现在，假设你分别支配着 <strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>。另外，还有一个仅包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;字符串的数组。</p>\n\n<p>你的任务是使用给定的&nbsp;<strong>m</strong> 个&nbsp;<code>0</code>&nbsp;和 <strong>n</strong> 个&nbsp;<code>1</code>&nbsp;，找到能拼出存在于数组中的字符串的最大数量。每个&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;至多被使用<strong>一次</strong>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;的数量都不会超过&nbsp;<code>100</code>。</li>\n\t<li>给定字符串数组的长度不会超过&nbsp;<code>600</code>。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;}, m = 5, n = 3\n<strong>输出:</strong> 4\n\n<strong>解释:</strong> 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> Array = {&quot;10&quot;, &quot;0&quot;, &quot;1&quot;}, m = 1, n = 1\n<strong>输出:</strong> 2\n\n<strong>解释:</strong> 你可以拼出 &quot;10&quot;，但之后就没有剩余数字了。更好的选择是拼出 &quot;0&quot; 和 &quot;1&quot; 。\n</pre>\n"
}
