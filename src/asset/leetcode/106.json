{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number[]} inorder\n * @param {number[]} postorder\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> buildTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">inorder, postorder</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> postIdx=postorder.length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTree</span>(<span class=\"hljs-params\">lo,hi</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(lo&gt;hi)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">let</span> val=postorder[postIdx--]\n    <span class=\"hljs-keyword\">let</span> idx=inorder.indexOf(val)\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">new</span> TreeNode(val)\n    node.right=createTree(idx+<span class=\"hljs-number\">1</span>,hi)\n    node.left=createTree(lo,idx<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-keyword\">return</span> node\n  }\n  <span class=\"hljs-keyword\">return</span> createTree(<span class=\"hljs-number\">0</span>,inorder.length<span class=\"hljs-number\">-1</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>按照<code>postorder</code>的倒序从<code>inorder</code>内部查找，对于查找到的索引<code>idx</code>，将当前<code>inorder</code>的左<code>lo</code>和右<code>hi</code>边界继续分割为<code>[lo,idx-1]</code>和<code>[idx+1,hi]</code>，继续递归处理。</p>\n<p>和<code>NO.105</code>的区别在于<code>postorder</code>需要从右向左，并且先<code>right</code>子树再<code>left</code>子树。</p>\n",
  "content": "<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>\n\n<p><strong>注意:</strong><br>\n你可以假设树中没有重复的元素。</p>\n\n<p>例如，给出</p>\n\n<pre>中序遍历 inorder =&nbsp;[9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]</pre>\n\n<p>返回如下的二叉树：</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n"
}
