{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> partitionDisjoint = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=A.length\n  <span class=\"hljs-keyword\">let</span> right=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-literal\">null</span>),leftMax=-<span class=\"hljs-literal\">Infinity</span>\n  right[N<span class=\"hljs-number\">-1</span>]=A[N<span class=\"hljs-number\">-1</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=N<span class=\"hljs-number\">-2</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    right[i]=<span class=\"hljs-built_in\">Math</span>.min(right[i+<span class=\"hljs-number\">1</span>],A[i])\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N<span class=\"hljs-number\">-1</span>;i++){\n    leftMax=<span class=\"hljs-built_in\">Math</span>.max(leftMax,A[i])\n    <span class=\"hljs-keyword\">if</span>(leftMax&lt;=right[i+<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> i+<span class=\"hljs-number\">1</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "partition-array-into-disjoint-intervals",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这道题思路很简单，就是遍历的时候，左侧一直更新最大值，右侧一直更新最小值，如果<code>左侧最大值&lt;=右侧最小值</code>，那么立刻返回结果。</p>\n<p>注意的是，如果遍历的时候不断求解右侧最小值，那么时间复杂度是<code>O(N^2)</code>。</p>\n<h2>因此，我们预先从右向左遍历，保存每一个值的右侧最小值，最终时间复杂度是<code>O(N)</code>。</h2>\n",
  "content": "<p>给定一个数组&nbsp;<code>A</code>，将其划分为两个不相交（没有公共元素）的连续子数组&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>，&nbsp;使得：</p>\n\n<ul>\n\t<li><code>left</code>&nbsp;中的每个元素都小于或等于&nbsp;<code>right</code>&nbsp;中的每个元素。</li>\n\t<li><code>left</code> 和&nbsp;<code>right</code>&nbsp;都是非空的。</li>\n\t<li><code>left</code>&nbsp;要尽可能小。</li>\n</ul>\n\n<p>在完成这样的分组后返回&nbsp;<code>left</code>&nbsp;的<strong>长度</strong>。可以保证存在这样的划分方法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[5,0,3,8,6]\n<strong>输出：</strong>3\n<strong>解释：</strong>left = [5,0,3]，right = [8,6]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,1,0,6,12]\n<strong>输出：</strong>4\n<strong>解释：</strong>left = [1,1,1,0]，right = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>可以保证至少有一种方法能够按题目所描述的那样对 <code>A</code> 进行划分。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
