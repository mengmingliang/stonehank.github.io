{
  "code": [
    "/**\n * @param {number[]} A\n * @return {number}\n */\nvar partitionDisjoint = function(A) {\n  // sparse table\n  // let table=[]\n  // let len=A.length\n  // let r=len,c=Math.ceil(Math.log2(len))\n  // for(let i=0;i<r;i++){\n  //   table[i]=[]\n  //   for(let j=0;j<c;j++){\n  //     if(j===0)table[i][j]=i\n  //     else table[i][j]=null\n  //   }\n  // }\n  // for(let i=1;i<c;i++){\n  //   let range=Math.pow(2,i-1)\n  //   for(let j=0;j<r;j++){\n  //     if(j+range>=r)continue\n  //     let prev=table[j][i-1]\n  //     let next=table[j+range][i-1]\n  //     if(A[prev]<A[next]){\n  //       table[j][i]=prev\n  //     }else{\n  //       table[j][i]=next\n  //     }\n  //   }\n  // }\n  // function getMin(lo,hi){\n  //   let len=hi-lo+1\n  //   let m=Math.floor(Math.log2(len))\n  //   let rest=len-Math.pow(2,m)\n  //   return Math.min(A[table[lo][m]],A[table[lo+rest][m]])\n  // }\n  // let leftMax=-Infinity\n  // for(let i=1;i<A.length;i++){\n  //   if(A[i-1]>leftMax)leftMax=A[i-1]\n  //   let rightMin=getMin(i,A.length-1)\n  //   if(leftMax<=rightMin)return i\n  // }\n  \n  let stableMax=A[0],pos=0,unStableMax=-Infinity\n  for(let i=0;i<A.length;i++){\n    if(A[i]<stableMax){\n      pos=i\n      stableMax=Math.max(stableMax,unStableMax)\n    }else{\n      unStableMax=Math.max(unStableMax,A[i])\n    }\n  }\n  return pos+1\n  \n};"
  ],
  "titleSlug": "partition-array-into-disjoint-intervals",
  "content": "<p>Given an array <code>A</code>, partition it&nbsp;into two (contiguous) subarrays&nbsp;<code>left</code>&nbsp;and <code>right</code>&nbsp;so that:</p>\r\n\r\n<ul>\r\n\t<li>Every element in <code>left</code>&nbsp;is less than or equal to every element in <code>right</code>.</li>\r\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\r\n\t<li><code>left</code>&nbsp;has the smallest possible size.</li>\r\n</ul>\r\n\r\n<p>Return the <strong>length</strong> of <code>left</code> after such a partitioning.&nbsp; It is guaranteed that such a partitioning exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,0,3,8,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>left = [5,0,3], right = [8,6]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1,0,6,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>left = [1,1,1,0], right = [6,12]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li>It is guaranteed there is at least one way to partition <code>A</code> as described.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
  "translatedContent": "<p>给定一个数组&nbsp;<code>A</code>，将其划分为两个不相交（没有公共元素）的连续子数组&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>，&nbsp;使得：</p>\n\n<ul>\n\t<li><code>left</code>&nbsp;中的每个元素都小于或等于&nbsp;<code>right</code>&nbsp;中的每个元素。</li>\n\t<li><code>left</code> 和&nbsp;<code>right</code>&nbsp;都是非空的。</li>\n\t<li><code>left</code>&nbsp;要尽可能小。</li>\n</ul>\n\n<p>在完成这样的分组后返回&nbsp;<code>left</code>&nbsp;的<strong>长度</strong>。可以保证存在这样的划分方法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[5,0,3,8,6]\n<strong>输出：</strong>3\n<strong>解释：</strong>left = [5,0,3]，right = [8,6]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,1,1,0,6,12]\n<strong>输出：</strong>4\n<strong>解释：</strong>left = [1,1,1,0]，right = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>可以保证至少有一种方法能够按题目所描述的那样对 <code>A</code> 进行划分。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
