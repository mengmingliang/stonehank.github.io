{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxSubArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-comment\">// let max=nums[0],before=nums[0]</span>\n  <span class=\"hljs-comment\">// for(let i=1;i&lt;nums.length;i++){</span>\n  <span class=\"hljs-comment\">//   before=Math.max(before+nums[i],nums[i])</span>\n  <span class=\"hljs-comment\">//   max=Math.max(before,max)</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return max</span>\n  \n  <span class=\"hljs-keyword\">let</span> sum=nums[<span class=\"hljs-number\">0</span>],max=nums[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;nums.length;i++){\n    sum+=nums[i]\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,sum)\n    <span class=\"hljs-keyword\">if</span>(sum&lt;<span class=\"hljs-number\">0</span>)sum=<span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-subarray",
  "translatedContent": "<p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [-2,1,-3,4,-1,2,1,-5,4],\n<strong>输出:</strong> 6\n<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>\n"
}
