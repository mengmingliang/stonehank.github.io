{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxSubArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{ \n  <span class=\"hljs-comment\">// let sum=0,max=nums[0]</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;nums.length;i++){</span>\n  <span class=\"hljs-comment\">//   sum+=nums[i]</span>\n  <span class=\"hljs-comment\">//   max=Math.max(max,sum)</span>\n  <span class=\"hljs-comment\">//   if(sum&lt;0)sum=0</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return max</span>\n  <span class=\"hljs-keyword\">return</span> partition(<span class=\"hljs-number\">0</span>,nums.length<span class=\"hljs-number\">-1</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partition</span>(<span class=\"hljs-params\">lo,hi</span>)</span>{\n    <span class=\"hljs-comment\">// if(lo&gt;hi)return Infinity</span>\n    <span class=\"hljs-keyword\">if</span>(lo===hi)<span class=\"hljs-keyword\">return</span> nums[lo]\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> left=partition(lo,mid),\n        right=partition(mid+<span class=\"hljs-number\">1</span>,hi)\n    <span class=\"hljs-keyword\">let</span> leftMid=-<span class=\"hljs-literal\">Infinity</span>,\n        rightMid=-<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">let</span> temp=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=mid;i&gt;=lo;i--){\n      temp+=nums[i]\n      leftMid=<span class=\"hljs-built_in\">Math</span>.max(leftMid,temp)\n    }\n    temp=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=mid+<span class=\"hljs-number\">1</span>;i&lt;=hi;i++){\n      temp+=nums[i]\n      rightMid=<span class=\"hljs-built_in\">Math</span>.max(rightMid,temp)      \n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(left,right,leftMid+rightMid)\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-subarray",
  "hasThinking": false,
  "content": "<p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [-2,1,-3,4,-1,2,1,-5,4],\n<strong>输出:</strong> 6\n<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。\n</pre>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>\n"
}
