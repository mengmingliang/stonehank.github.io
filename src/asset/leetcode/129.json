{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n  let sums=0\n  let temp=[]  \n  function dfs(node){\n    if(!node)return\n    temp.push(node.val)\n    if(node.left)dfs(node.left)\n    if(node.right)dfs(node.right)\n    if(!node.left && !node.right){\n      sums+= +temp.join('')\n    }\n    temp.pop()\n  }\n  dfs(root)\n  return sums\n};"
  ],
  "titleSlug": "sum-root-to-leaf-numbers",
  "content": "<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\r\n\r\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\r\n\r\n<p>Find the total sum of all root-to-leaf numbers.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n    1\r\n   / \\\r\n  2   3\r\n<strong>Output:</strong> 25\r\n<strong>Explanation:</strong>\r\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.\r\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\r\nTherefore, sum = 12 + 13 = <code>25</code>.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,9,0,5,1]\r\n    4\r\n   / \\\r\n  9   0\r\n&nbsp;/ \\\r\n5   1\r\n<strong>Output:</strong> 1026\r\n<strong>Explanation:</strong>\r\nThe root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number 495.\r\nThe root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number 491.\r\nThe root-to-leaf path <code>4-&gt;0</code> represents the number 40.\r\nTherefore, sum = 495 + 491 + 40 = <code>1026</code>.</pre>\r\n",
  "translatedContent": "<p>给定一个二叉树，它的每个结点都存放一个&nbsp;<code>0-9</code>&nbsp;的数字，每条从根到叶子节点的路径都代表一个数字。</p>\n\n<p>例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 <code>123</code>。</p>\n\n<p>计算从根到叶子节点生成的所有数字之和。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n    1\n   / \\\n  2   3\n<strong>输出:</strong> 25\n<strong>解释:</strong>\n从根到叶子节点路径 <code>1-&gt;2</code> 代表数字 <code>12</code>.\n从根到叶子节点路径 <code>1-&gt;3</code> 代表数字 <code>13</code>.\n因此，数字总和 = 12 + 13 = <code>25</code>.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [4,9,0,5,1]\n    4\n   / \\\n  9   0\n&nbsp;/ \\\n5   1\n<strong>输出:</strong> 1026\n<strong>解释:</strong>\n从根到叶子节点路径 <code>4-&gt;9-&gt;5</code> 代表数字 495.\n从根到叶子节点路径 <code>4-&gt;9-&gt;1</code> 代表数字 491.\n从根到叶子节点路径 <code>4-&gt;0</code> 代表数字 40.\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>.</pre>\n"
}
