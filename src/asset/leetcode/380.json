{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> RandomizedSet = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.map = {};\n    <span class=\"hljs-keyword\">this</span>.set = [];\n};\n\n<span class=\"hljs-comment\">/**\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */</span>\nRandomizedSet.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.map[val] !== <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">this</span>.map[val] = <span class=\"hljs-keyword\">this</span>.set.length;\n    <span class=\"hljs-keyword\">this</span>.set.push(val);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n\n<span class=\"hljs-comment\">/**\n * Removes a value from the set. Returns true if the set contained the specified element. \n * @param {number} val\n * @return {boolean}\n */</span>\nRandomizedSet.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.map[val] === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">const</span> pos = <span class=\"hljs-keyword\">this</span>.map[val], last = <span class=\"hljs-keyword\">this</span>.set[<span class=\"hljs-keyword\">this</span>.set.length<span class=\"hljs-number\">-1</span>];\n    <span class=\"hljs-keyword\">this</span>.map[last] = pos;\n    <span class=\"hljs-keyword\">this</span>.set[pos] = last;\n    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>.map[val];\n    <span class=\"hljs-keyword\">this</span>.set.pop();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n\n<span class=\"hljs-comment\">/**\n * Get a random element from the set.\n * @return {number}\n */</span>\nRandomizedSet.prototype.getRandom = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.set[<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-keyword\">this</span>.set.length)];\n};\n\n<span class=\"hljs-comment\">/** \n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = Object.create(RandomizedSet).createNew()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "insert-delete-getrandom-o1",
  "content": "<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构。</p>\n\n<ol>\n\t<li><code>insert(val)</code>：当元素 val 不存在时，向集合中插入该项。</li>\n\t<li><code>remove(val)</code>：元素 val 存在时，从集合中移除该项。</li>\n\t<li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong>被返回。</li>\n</ol>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n</pre>\n"
}
