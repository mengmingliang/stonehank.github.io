{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} preorder\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isValidSerialization = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">preorder</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> po=preorder.split(<span class=\"hljs-string\">','</span>)\n    <span class=\"hljs-keyword\">let</span> visitedTime=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;po.length;i++){\n      <span class=\"hljs-keyword\">if</span>(i!==<span class=\"hljs-number\">0</span> &amp;&amp; visitedTime.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      \n      <span class=\"hljs-keyword\">if</span>(po[i]!==<span class=\"hljs-string\">'#'</span>) visitedTime.push(<span class=\"hljs-number\">0</span>)\n      <span class=\"hljs-keyword\">else</span> visitedTime[visitedTime.length<span class=\"hljs-number\">-1</span>]+=<span class=\"hljs-number\">1</span>\n      \n      <span class=\"hljs-keyword\">while</span>(visitedTime[visitedTime.length<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-number\">2</span>){\n        visitedTime.pop()\n        visitedTime[visitedTime.length<span class=\"hljs-number\">-1</span>]+=<span class=\"hljs-number\">1</span>\n      }\n      \n    }\n  <span class=\"hljs-keyword\">if</span>(visitedTime.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
  "content": "<p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>\n\n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre>\n\n<p>例如，上面的二叉树可以被序列化为字符串 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>，其中 <code>#</code> 代表一个空节点。</p>\n\n<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p>\n\n<p>每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>&#39;#&#39;</code> 。</p>\n\n<p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如&nbsp;<code>&quot;1,,3&quot;</code> 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\n<strong>输出: </strong><code>true</code></pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;1,#&quot;</code>\n<strong>输出: </strong><code>false</code>\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;9,#,#,1&quot;</code>\n<strong>输出: </strong><code>false</code></pre>\n"
}
