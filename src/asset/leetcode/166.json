{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} numerator\n * @param {number} denominator\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> fractionToDecimal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">numerator, denominator</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(numerator===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"0\"</span>\n  <span class=\"hljs-keyword\">let</span> neg=<span class=\"hljs-number\">0</span>,res=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-comment\">// 确定正负号</span>\n  <span class=\"hljs-keyword\">if</span>(numerator&lt;<span class=\"hljs-number\">0</span>){neg=neg^<span class=\"hljs-number\">1</span>; numerator=-numerator}\n  <span class=\"hljs-keyword\">if</span>(denominator&lt;<span class=\"hljs-number\">0</span>){neg=neg^<span class=\"hljs-number\">1</span>; denominator=-denominator}\n  <span class=\"hljs-keyword\">if</span>(neg===<span class=\"hljs-number\">1</span>)res=<span class=\"hljs-string\">'-'</span>+res\n  \n  <span class=\"hljs-comment\">// 确定整数部分</span>\n  <span class=\"hljs-keyword\">let</span> int=<span class=\"hljs-built_in\">Math</span>.floor(numerator/denominator)\n  <span class=\"hljs-keyword\">let</span> mod=numerator%denominator\n  res+=int\n  <span class=\"hljs-keyword\">if</span>(mod===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> res\n  res+=<span class=\"hljs-string\">\".\"</span>\n  \n  <span class=\"hljs-comment\">// 确定小数部分</span>\n  <span class=\"hljs-keyword\">let</span> modHash={}\n  modHash[mod]=res.length\n  <span class=\"hljs-keyword\">while</span>(mod!==<span class=\"hljs-number\">0</span>){\n    mod*=<span class=\"hljs-number\">10</span>\n    res+=<span class=\"hljs-built_in\">Math</span>.floor(mod/denominator)\n    mod %= denominator\n    <span class=\"hljs-keyword\">if</span>(modHash[mod]!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">let</span> idx=modHash[mod]\n      res=res.substring(<span class=\"hljs-number\">0</span>,idx)+<span class=\"hljs-string\">\"(\"</span>+res.substring(idx)+<span class=\"hljs-string\">\")\"</span>\n      <span class=\"hljs-keyword\">break</span>\n    }\n    modHash[mod]=res.length\n  }\n  <span class=\"hljs-keyword\">return</span> res\n\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "fraction-to-recurring-decimal",
  "content": "<p>给定两个整数，分别表示分数的分子&nbsp;numerator 和分母 denominator，以字符串形式返回小数。</p>\n\n<p>如果小数部分为循环小数，则将循环的部分括在括号内。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 1, denominator = 2\n<strong>输出:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 1\n<strong>输出:</strong> &quot;2&quot;</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> numerator = 2, denominator = 3\n<strong>输出: </strong>&quot;0.(6)&quot;\n</pre>\n"
}
