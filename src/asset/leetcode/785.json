{
  "code": [
    "/**\n * @param {number[][]} graph\n * @return {boolean}\n */\nvar isBipartite = function(graph) {\n  let color=[],marked=[]\n  let flag=true\n  function dfs(v){\n    if(!flag)return\n    marked[v]=true\n    let adj=graph[v]\n    for(let i=0;i<adj.length;i++){\n      if(marked[adj[i]]==null){\n        color[adj[i]]=!color[v]\n        dfs(adj[i])\n      }else if(!!color[adj[i]]===!!color[v])flag=false\n    }\n  }\n  for(let i=0;i<graph.length;i++){\n    if(marked[i]==null)dfs(i)\n  }\n  return flag\n};"
  ],
  "titleSlug": "is-graph-bipartite",
  "content": "<p>Given an undirected&nbsp;<code>graph</code>, return <code>true</code> if and only if it is bipartite.</p>\r\n\r\n<p>Recall that a graph is <em>bipartite</em> if we can split it&#39;s set of nodes into two independent&nbsp;subsets A and B such that every edge in the graph has one node in A and another node in B.</p>\r\n\r\n<p>The graph is given in the following form: <code>graph[i]</code> is a list of indexes <code>j</code> for which the edge between nodes <code>i</code> and <code>j</code> exists.&nbsp; Each node is an integer between <code>0</code> and <code>graph.length - 1</code>.&nbsp; There are no self edges or parallel edges: <code>graph[i]</code> does not contain <code>i</code>, and it doesn&#39;t contain any element twice.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [[1,3], [0,2], [1,3], [0,2]]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n0----1\r\n|    |\r\n|    |\r\n3----2\r\nWe can divide the vertices into two groups: {0, 2} and {1, 3}.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n0----1\r\n| \\  |\r\n|  \\ |\r\n3----2\r\nWe cannot find a way to divide the set of nodes into two independent subsets.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>graph</code> will have length in range <code>[1, 100]</code>.</li>\r\n\t<li><code>graph[i]</code> will contain integers in range <code>[0, graph.length - 1]</code>.</li>\r\n\t<li><code>graph[i]</code> will not contain <code>i</code> or duplicate values.</li>\r\n\t<li>The graph is undirected: if any element <code>j</code> is in <code>graph[i]</code>, then <code>i</code> will be in <code>graph[j]</code>.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给定一个无向图<code>graph</code>，当这个图为二分图时返回<code>true</code>。</p>\n\n<p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p>\n\n<p><code>graph</code>将会以邻接表方式给出，<code>graph[i]</code>表示图中与节点<code>i</code>相连的所有节点。每个节点都是一个在<code>0</code>到<code>graph.length-1</code>之间的整数。这图中没有自环和平行边：&nbsp;<code>graph[i]</code>&nbsp;中不存在<code>i</code>，并且<code>graph[i]</code>中没有重复的值。</p>\n\n<pre>\n<code>\n<strong>示例 1:</strong>\n输入<strong>:</strong> [[1,3], [0,2], [1,3], [0,2]]\n<strong>输出:</strong> true\n<strong>解释:</strong> \n无向图如下:\n0----1\n|    |\n|    |\n3----2\n我们可以将节点分成两组: {0, 2} 和 {1, 3}。\n</code></pre>\n\n<pre>\n<code>\n<strong>示例 2:</strong>\n<strong>输入:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\n<strong>输出:</strong> false\n<strong>解释:</strong> \n无向图如下:\n0----1\n| \\  |\n|  \\ |\n3----2\n我们不能将节点分割成两个独立的子集。\n</code></pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li>\n\t<li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li>\n\t<li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li>\n\t<li>图是无向的: 如果<code>j</code> 在 <code>graph[i]</code>里边, 那么 <code>i</code> 也会在 <code>graph[j]</code>里边。</li>\n</ul>\n"
}
