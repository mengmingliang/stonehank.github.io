{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} pairs\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findLongestChain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">pairs</span>) </span>{\n\n  pairs.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> (a[<span class=\"hljs-number\">0</span>] - b[<span class=\"hljs-number\">0</span>]));\n  <span class=\"hljs-comment\">// let dp =Array(pairs.length).fill(1);</span>\n  <span class=\"hljs-comment\">// for (let i = 0; i &lt; dp.length; i++) {</span>\n  <span class=\"hljs-comment\">//     for (let j = 0; j &lt; i; j++) {</span>\n  <span class=\"hljs-comment\">//         dp[i] = Math.max(dp[i], pairs[i][0] &gt; pairs[j][1]? dp[j] + 1 : dp[j]);</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return dp[pairs.length - 1];</span>\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> head=pairs[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; pairs.length; i++) {\n    <span class=\"hljs-keyword\">if</span>(pairs[i][<span class=\"hljs-number\">0</span>]&gt;head){\n      count++\n      head=pairs[i][<span class=\"hljs-number\">1</span>]\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pairs[i][<span class=\"hljs-number\">1</span>]&lt;head){\n       head=pairs[i][<span class=\"hljs-number\">1</span>]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> count\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-length-of-pair-chain",
  "hasThinking": false,
  "content": "<p>给出&nbsp;<code>n</code>&nbsp;个数对。&nbsp;在每一个数对中，第一个数字总是比第二个数字小。</p>\n\n<p>现在，我们定义一种跟随关系，当且仅当&nbsp;<code>b &lt; c</code>&nbsp;时，数对<code>(c, d)</code>&nbsp;才可以跟在&nbsp;<code>(a, b)</code>&nbsp;后面。我们用这种形式来构造一个数对链。</p>\n\n<p>给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [2,3], [3,4]]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最长的数对链是 [1,2] -&gt; [3,4]\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>给出数对的个数在&nbsp;[1, 1000] 范围内。</li>\n</ol>\n"
}
