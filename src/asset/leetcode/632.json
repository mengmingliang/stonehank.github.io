{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} nums\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> smallestRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> gapCol=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n    gapCol.push([nums[i][<span class=\"hljs-number\">0</span>],i,<span class=\"hljs-number\">0</span>])\n  }\n  gapCol.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">let</span> minGapCount=<span class=\"hljs-literal\">Infinity</span>,minGap=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>){\n    <span class=\"hljs-keyword\">let</span> curHead=gapCol[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>],curTail=gapCol[gapCol.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(curTail-curHead&lt;minGapCount){\n      minGapCount=curTail-curHead\n      minGap=[curHead,curTail]\n    }\n    <span class=\"hljs-keyword\">let</span> [delV,delRID,delCID]=gapCol.shift()\n    <span class=\"hljs-keyword\">if</span>(delCID+<span class=\"hljs-number\">1</span>&gt;=nums[delRID].length)<span class=\"hljs-keyword\">return</span> minGap\n    <span class=\"hljs-keyword\">let</span> nxtV=nums[delRID][delCID+<span class=\"hljs-number\">1</span>]\n    insert(nxtV,delRID,delCID+<span class=\"hljs-number\">1</span>)\n  }\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">n,r,c</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(gapCol.length===<span class=\"hljs-number\">0</span> || gapCol[gapCol.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]&lt;=n)gapCol.push([n,r,c])\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">let</span> idx=bsEnd(gapCol,n)\n      gapCol.splice(idx,<span class=\"hljs-number\">0</span>,[n,r,c])\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid][<span class=\"hljs-number\">0</span>]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }  \n};\n</code></pre>\n"
  ],
  "titleSlug": "smallest-range",
  "content": "<p>你有&nbsp;<code>k</code>&nbsp;个升序排列的整数数组。找到一个<strong>最小</strong>区间，使得&nbsp;<code>k</code>&nbsp;个列表中的每个列表至少有一个数包含在其中。</p>\n\n<p>我们定义如果&nbsp;<code>b-a &lt; d-c</code>&nbsp;或者在&nbsp;<code>b-a == d-c</code>&nbsp;时&nbsp;<code>a &lt; c</code>，则区间 [a,b] 比 [c,d] 小。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<strong>输出:</strong> [20,24]\n<strong>解释:</strong> \n列表 1：[4, 10, 15, 24, 26]，24 在区间 [20,24] 中。\n列表 2：[0, 9, 12, 20]，20 在区间 [20,24] 中。\n列表 3：[5, 18, 22, 30]，22 在区间 [20,24] 中。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的列表可能包含重复元素，所以在这里升序表示 &gt;= 。</li>\n\t<li>1 &lt;= <code>k</code> &lt;= 3500</li>\n\t<li>-10<sup>5</sup> &lt;= <code>元素的值</code>&nbsp;&lt;= 10<sup>5</sup></li>\n\t<li><strong>对于使用Java的用户，请注意传入类型已修改为List&lt;List&lt;Integer&gt;&gt;。重置代码模板后可以看到这项改动。</strong></li>\n</ol>\n"
}
