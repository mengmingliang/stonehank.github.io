{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-comment\">// var invertTree = function(root) {</span>\n<span class=\"hljs-comment\">//     function DFS(node){</span>\n<span class=\"hljs-comment\">//         if(!node) return node</span>\n<span class=\"hljs-comment\">//         if(node.left)node.left=DFS(node.left)</span>\n<span class=\"hljs-comment\">//         if(node.right)node.right=DFS(node.right)</span>\n<span class=\"hljs-comment\">//         node=swapNode(node)</span>\n<span class=\"hljs-comment\">//         return node</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     root=DFS(root)</span>\n<span class=\"hljs-comment\">//     return root</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-comment\">// function swapNode(node){</span>\n<span class=\"hljs-comment\">//     let temp</span>\n<span class=\"hljs-comment\">//     if(node.left===null &amp;&amp; node.right===null){</span>\n<span class=\"hljs-comment\">//     }else{</span>\n<span class=\"hljs-comment\">//         temp=node.right;</span>\n<span class=\"hljs-comment\">//         node.right=node.left;</span>\n<span class=\"hljs-comment\">//         node.left=temp;</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return node</span>\n<span class=\"hljs-comment\">// }</span>\n<span class=\"hljs-keyword\">var</span> invertTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(root===<span class=\"hljs-literal\">null</span>){<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>}\n    <span class=\"hljs-keyword\">let</span> arr=[root]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">BFS</span>(<span class=\"hljs-params\">arr</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> tempNode\n        <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">let</span> temp=[]\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n                tempNode=arr[i].left\n                arr[i].left=arr[i].right\n                arr[i].right=tempNode\n                <span class=\"hljs-keyword\">if</span>(arr[i].left)temp.push(arr[i].left)\n                <span class=\"hljs-keyword\">if</span>(arr[i].right)temp.push(arr[i].right)\n            }\n            arr=temp;\n        }\n    }\n    BFS(arr)\n    <span class=\"hljs-keyword\">return</span> root\n}\n</code></pre>\n"
  ],
  "titleSlug": "invert-binary-tree",
  "content": "<p>翻转一棵二叉树。</p>\n\n<p><strong>示例：</strong></p>\n\n<p>输入：</p>\n\n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n<p>输出：</p>\n\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n<p><strong>备注:</strong><br>\n这个问题是受到 <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell </a>的 <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">原问题</a> 启发的 ：</p>\n\n<blockquote>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</blockquote>\n"
}
