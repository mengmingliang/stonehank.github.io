{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[][]} equations\n * @param {number[]} values\n * @param {string[][]} queries\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> calcEquation = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">equations, values, queries</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> graph={},result=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;equations.length;i++){\n        <span class=\"hljs-keyword\">let</span> nume=equations[i][<span class=\"hljs-number\">0</span>],\n            denom=equations[i][<span class=\"hljs-number\">1</span>],\n            value=values[i]\n        <span class=\"hljs-keyword\">if</span>(!graph[nume])graph[nume]=[{<span class=\"hljs-attr\">v</span>:denom,<span class=\"hljs-attr\">p</span>:value}]\n        <span class=\"hljs-keyword\">else</span> graph[nume].push({<span class=\"hljs-attr\">v</span>:denom,<span class=\"hljs-attr\">p</span>:value})\n        <span class=\"hljs-keyword\">if</span>(!graph[denom])graph[denom]=[{<span class=\"hljs-attr\">v</span>:nume,<span class=\"hljs-attr\">p</span>:<span class=\"hljs-number\">1</span>/value}]\n        <span class=\"hljs-keyword\">else</span> graph[denom].push({<span class=\"hljs-attr\">v</span>:nume,<span class=\"hljs-attr\">p</span>:<span class=\"hljs-number\">1</span>/value})\n    }\n    <span class=\"hljs-comment\">// console.log(graph)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkGraph</span>(<span class=\"hljs-params\">init,nume,denom,multi</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(graph[nume]){\n            <span class=\"hljs-keyword\">let</span> sub=graph[nume]\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;sub.length;i++){\n                <span class=\"hljs-comment\">// console.log(sub[i].v,multi)</span>\n                <span class=\"hljs-keyword\">if</span>(sub[i].v===init)<span class=\"hljs-keyword\">continue</span>\n                <span class=\"hljs-keyword\">if</span>(sub[i].v===denom){\n                    <span class=\"hljs-keyword\">return</span> multi*sub[i].p\n                }\n                <span class=\"hljs-keyword\">let</span> tempResult=checkGraph(nume,sub[i].v,denom,multi*sub[i].p)\n                <span class=\"hljs-keyword\">if</span>(tempResult!==<span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> tempResult\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1.0</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;queries.length;i++){\n         <span class=\"hljs-keyword\">let</span> nume=queries[i][<span class=\"hljs-number\">0</span>],\n            denom=queries[i][<span class=\"hljs-number\">1</span>]\n         <span class=\"hljs-keyword\">if</span>(nume===denom &amp;&amp; graph[nume]){\n             result.push(<span class=\"hljs-number\">1.0</span>)\n             <span class=\"hljs-keyword\">continue</span>;\n         }\n         result.push(checkGraph(nume,nume,denom,<span class=\"hljs-number\">1.0</span>))\n    }\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "evaluate-division",
  "content": "<p>给出方程式&nbsp;<code>A / B = k</code>, 其中&nbsp;<code>A</code> 和&nbsp;<code>B</code> 均为代表字符串的变量，&nbsp;<code>k</code> 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回&nbsp;<code>-1.0</code>。</p>\n\n<p><strong>示例 :</strong><br />\n给定&nbsp;<code>a / b = 2.0, b / c = 3.0</code><br />\n问题: <code> a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?&nbsp;</code><br />\n返回&nbsp;<code>[6.0, 0.5, -1.0, 1.0, -1.0 ]</code></p>\n\n<p>输入为: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries</code>(方程式，方程式结果，问题方程式)，&nbsp;其中&nbsp;<code>equations.size() == values.size()</code>，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。&nbsp;返回<code>vector&lt;double&gt;</code>类型。</p>\n\n<p>基于上述例子，输入如下：</p>\n\n<pre>\nequations(方程式) = [ [&quot;a&quot;, &quot;b&quot;], [&quot;b&quot;, &quot;c&quot;] ],\nvalues(方程式结果) = [2.0, 3.0],\nqueries(问题方程式) = [ [&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;a&quot;], [&quot;x&quot;, &quot;x&quot;] ]. \n</pre>\n\n<p>输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。</p>\n"
}
