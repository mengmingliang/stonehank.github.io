{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> containVirus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> row=grid.length,col=grid[<span class=\"hljs-number\">0</span>].length  \n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">let</span> uniq=<span class=\"hljs-number\">1</span>,uniq2=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> infectArea=<span class=\"hljs-built_in\">Array</span>(row).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(col).fill(uniq2))\n  <span class=\"hljs-keyword\">let</span> visited=<span class=\"hljs-built_in\">Array</span>(row).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(col).fill(uniq))\n  \n  <span class=\"hljs-keyword\">let</span> needBuildWalls=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> needCheck=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">while</span>(needCheck){\n    uniq++\n    <span class=\"hljs-keyword\">let</span> wallStartPos=check()\n    <span class=\"hljs-keyword\">if</span>(!wallStartPos)<span class=\"hljs-keyword\">return</span> needBuildWalls\n    uniq++\n    buildWall(wallStartPos)\n    needCheck=update()    \n  }\n  <span class=\"hljs-keyword\">return</span> needBuildWalls\n\n  <span class=\"hljs-comment\">// 建立墙后更新病毒扩散</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">let</span> needCheck=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;row;i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;col;j++){\n        <span class=\"hljs-keyword\">if</span>(grid[i][j]===<span class=\"hljs-number\">1</span>){\n          <span class=\"hljs-keyword\">if</span>(visited[i][j]===uniq)<span class=\"hljs-keyword\">continue</span>\n          visited[i][j]=uniq\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n            <span class=\"hljs-keyword\">let</span> newx=i+dx,newy=j+dy\n            <span class=\"hljs-keyword\">if</span>(newx&lt;<span class=\"hljs-number\">0</span> || newy&lt;<span class=\"hljs-number\">0</span> || newx&gt;=row || newy&gt;=col)<span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span>(grid[newx][newy]===<span class=\"hljs-number\">0</span>){\n              grid[newx][newy]=<span class=\"hljs-number\">1</span>\n              needCheck=<span class=\"hljs-literal\">true</span>\n              visited[newx][newy]=uniq\n            }\n          }\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> needCheck\n  }\n  \n  <span class=\"hljs-comment\">// 检测筛选出最需要建墙的位置</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">let</span> maxInfect=<span class=\"hljs-number\">0</span>,needWalls=<span class=\"hljs-number\">0</span>,startPos=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;row;i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;col;j++){\n        uniq2++\n        <span class=\"hljs-keyword\">if</span>(grid[i][j]===<span class=\"hljs-number\">1</span>){\n          <span class=\"hljs-keyword\">if</span>(visited[i][j]===uniq)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> infect=<span class=\"hljs-number\">0</span>,walls=<span class=\"hljs-number\">0</span>\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkAround</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n            visited[x][y]=uniq\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n              <span class=\"hljs-keyword\">let</span> newx=x+dx,newy=y+dy\n              <span class=\"hljs-keyword\">if</span>(newx&lt;<span class=\"hljs-number\">0</span> || newy&lt;<span class=\"hljs-number\">0</span> || newx&gt;=row || newy&gt;=col)<span class=\"hljs-keyword\">continue</span>\n              <span class=\"hljs-keyword\">if</span>(grid[newx][newy]===<span class=\"hljs-number\">0</span>){\n                walls++\n                <span class=\"hljs-keyword\">if</span>(infectArea[newx][newy]!==uniq2){\n                  infect++\n                  infectArea[newx][newy]=uniq2\n                }\n              }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(grid[newx][newy]===<span class=\"hljs-number\">1</span>){\n                <span class=\"hljs-keyword\">if</span>(visited[newx][newy]==uniq)<span class=\"hljs-keyword\">continue</span>\n                checkAround([newx,newy])\n              }\n            }  \n          }\n          checkAround([i,j])\n          <span class=\"hljs-keyword\">if</span>(infect&gt;maxInfect){\n            maxInfect=infect\n            needWalls=walls\n            startPos=[i,j]\n          }\n        }\n      }\n    }\n    needBuildWalls+=needWalls\n    <span class=\"hljs-keyword\">return</span> startPos\n  }\n  <span class=\"hljs-comment\">// 建造墙，隔离病毒</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildWall</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    grid[x][y]=<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dx,dy] <span class=\"hljs-keyword\">of</span> moves){\n      <span class=\"hljs-keyword\">let</span> newx=x+dx,newy=y+dy\n      <span class=\"hljs-keyword\">if</span>(newx&lt;<span class=\"hljs-number\">0</span> || newy&lt;<span class=\"hljs-number\">0</span> || newx&gt;=row || newy&gt;=col)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(grid[newx][newy]===<span class=\"hljs-number\">1</span>){\n        buildWall([newx,newy])\n      }\n    }\n  }\n\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "contain-virus",
  "content": "<p>病毒扩散得很快，现在你的任务是尽可能地通过安装防火墙来隔离病毒。</p>\n\n<p>假设世界由二维矩阵组成，<code>0</code> 表示该区域未感染病毒，而 <code>1</code> 表示该区域已感染病毒。可以在任意 2 个四方向相邻单元之间的共享边界上安装一个防火墙（并且只有一个防火墙）。</p>\n\n<p>每天晚上，病毒会从被感染区域向相邻未感染区域扩散，除非被防火墙隔离。现由于资源有限，每天你只能安装一系列防火墙来隔离其中一个被病毒感染的区域（一个区域或连续的一片区域），且该感染区域对未感染区域的威胁最大且保证唯一。</p>\n\n<p>你需要努力使得最后有部分区域不被病毒感染，如果可以成功，那么返回需要使用的防火墙个数; 如果无法实现，则返回在世界被病毒全部感染时已安装的防火墙个数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\n<strong>输出:</strong> 10\n<strong>说明:</strong>\n一共有两块被病毒感染的区域: 从左往右第一块需要 5 个防火墙，同时若该区域不隔离，晚上将感染 5 个未感染区域（即被威胁的未感染区域个数为 5）;\n第二块需要 4 个防火墙，同理被威胁的未感染区域个数是 4。因此，第一天先隔离左边的感染区域，经过一晚后，病毒传播后世界如下:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\n第二题，只剩下一块未隔离的被感染的连续区域，此时需要安装 5 个防火墙，且安装完毕后病毒隔离任务完成。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong> 4\n<strong>说明:</strong> \n此时只需要安装 4 面防火墙，就有一小区域可以幸存，不被病毒感染。\n注意不需要在世界边界建立防火墙。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\n<strong>输出:</strong> 13\n<strong>说明:</strong> \n在隔离右边感染区域后，隔离左边病毒区域只需要 2 个防火墙了。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li><code>grid</code> 的行数和列数范围是 [1, 50]。</li>\n\t<li>&nbsp;<code>grid[i][j]</code>&nbsp;只包含&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</li>\n\t<li>题目保证每次选取感染区域进行隔离时，一定存在唯一一个对未感染区域的威胁最大的区域。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
