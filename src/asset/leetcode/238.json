{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> productExceptSelf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n<span class=\"hljs-comment\">//     let sum=1</span>\n<span class=\"hljs-comment\">//     let len=nums.length</span>\n<span class=\"hljs-comment\">//     let res=[]</span>\n<span class=\"hljs-comment\">//     function calc(start,end,sum){</span>\n<span class=\"hljs-comment\">//         if(end&gt;len){</span>\n            \n<span class=\"hljs-comment\">//             res.push(sum)</span>\n<span class=\"hljs-comment\">//             return</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//         for(let i=start;i&lt;end;i++){</span>\n<span class=\"hljs-comment\">//             calc(i+1,end+1,sum*nums[i])  </span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     calc(0,2,sum)</span>\n<span class=\"hljs-comment\">//     return res</span>\n    \n    \n    <span class=\"hljs-keyword\">let</span> currentSum=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">let</span> len=nums.length\n    <span class=\"hljs-keyword\">let</span> res=[]\n    \n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n        res[i]=currentSum\n        currentSum*=nums[i]\n    }\n    currentSum=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=len<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n        res[i]*=currentSum\n        currentSum*=nums[i]\n    }\n    \n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "product-of-array-except-self",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ol>\n<li>\n<p>题目要求不能使用除法，最直接的想法是对每一项，除了它本身，其他重新乘一遍，但时间复杂度达不到要求。</p>\n</li>\n<li>\n<p>仔细观察一下，除了本身的乘积，其实就是<code>左侧乘积</code>和<code>右侧乘积</code>的乘积。</p>\n</li>\n<li>\n<p>我们只需要分别求出左侧乘积和右侧乘积即可。</p>\n</li>\n</ol>\n<p>例如：</p>\n<p><code>index[3]</code>，它的左侧乘积是<code>product[0,1,2]</code>，右侧乘积是<code>produce[4,5...]</code></p>\n<p><code>index[4]</code>，它的左侧乘积是<code>product[0,1,2,3]</code>，右侧乘积是<code>product[5...]</code></p>\n<p>通过上例比较清楚的看到，<code>leftProduct[i]=leftProduct[i-1]*nums[i]</code>，</p>\n<p>右侧同理，逆序遍历即与左侧一模一样。</p>\n",
  "content": "<p>给定长度为&nbsp;<em>n</em>&nbsp;的整数数组&nbsp;<code>nums</code>，其中&nbsp;<em>n</em> &gt; 1，返回输出数组&nbsp;<code>output</code>&nbsp;，其中 <code>output[i]</code>&nbsp;等于&nbsp;<code>nums</code>&nbsp;中除&nbsp;<code>nums[i]</code>&nbsp;之外其余各元素的乘积。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,2,3,4]</code>\n<strong>输出:</strong> <code>[24,12,8,6]</code></pre>\n\n<p><strong>说明: </strong>请<strong>不要使用除法，</strong>且在&nbsp;O(<em>n</em>) 时间复杂度内完成此题。</p>\n\n<p><strong>进阶：</strong><br>\n你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组<strong>不被视为</strong>额外空间。）</p>\n"
}
