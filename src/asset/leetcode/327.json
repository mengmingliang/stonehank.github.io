{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> countRangeSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, lower, upper</span>) </span>{\n  \n  <span class=\"hljs-keyword\">let</span> n = nums.length;\n  <span class=\"hljs-keyword\">let</span> sums = <span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i){\n     sums[i + <span class=\"hljs-number\">1</span>] = sums[i] + nums[i]\n  }\n     \n  <span class=\"hljs-keyword\">return</span> divid(<span class=\"hljs-number\">0</span>, n)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">divid</span>(<span class=\"hljs-params\">start,end</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(end-start&lt;=<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((start+end)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> count=divid(start,mid)+divid(mid+<span class=\"hljs-number\">1</span>,end)\n    <span class=\"hljs-keyword\">let</span> rangeStart=mid+<span class=\"hljs-number\">1</span>,rangeEnd=mid+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;=mid;i++){\n      <span class=\"hljs-comment\">// 每一次遍历都找到能满足</span>\n      <span class=\"hljs-comment\">// 1. rangeStart是满足SUM(i,rangeStart)&gt;=lower的一个位置</span>\n      <span class=\"hljs-comment\">// 2. rangeEnd是满足SUM(i,rangeEnd)&gt;upper的第一个位置</span>\n      <span class=\"hljs-comment\">// 它们相减就是当前i为起点存在的区间个数</span>\n      <span class=\"hljs-keyword\">while</span>(rangeStart&lt;=end &amp;&amp; sums[rangeStart]-sums[i]&lt;lower)\n        rangeStart++\n      <span class=\"hljs-keyword\">while</span>(rangeEnd&lt;=end &amp;&amp; sums[rangeEnd]-sums[i]&lt;=upper)\n        rangeEnd++\n      count+=rangeEnd-rangeStart\n    }\n    merge(start,mid,end)\n    <span class=\"hljs-keyword\">return</span> count\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">start,mid,end</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> res=[]\n    <span class=\"hljs-keyword\">let</span> i=start,j=mid+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;mid+<span class=\"hljs-number\">1</span> || j&lt;end+<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">if</span>(i===mid+<span class=\"hljs-number\">1</span>){\n        res.push(sums[j++])\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j===end+<span class=\"hljs-number\">1</span>){\n        res.push(sums[i++])\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sums[i]&lt;sums[j]){\n        res.push(sums[i++])\n      }<span class=\"hljs-keyword\">else</span>{\n        res.push(sums[j++])\n      }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;=end;i++){\n      sums[i]=res[i-start]\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "count-of-range-sum",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这道题虽然不能直接排序处理，但是先求出前缀和数组<code>sums</code>，对于<code>sums</code>内部，只要满足<code>j&gt;i</code>，\n他们的区间和就是<code>sums[j]-sums[i]</code>，具体排序如何可以不用考虑，因此通过归并排序不断构建<code>左[start,mid]</code>和<code>右[mid+1,end]</code>的<strong>有序数组</strong>；</p>\n<p>对这两个有序数组，设定2个指针<code>rangeStart</code>，<code>rangeEnd</code>，其中<code>rangeStart</code>的范围在<code>[start,mid]</code>，也就是左半段；</p>\n<p><code>rangeEnd</code>的范围在<code>[mid+1,end]</code>，也就是右半段；</p>\n<p>因为右半段的所有索引都能大于左半段的所有索引，也就是说满足<code>rangeEnd&gt;rangeStart</code>，因此可以对它们排序，并且计算它们的区间和<code>sums[rangeEnd]-sums[rangeStart]</code>。</p>\n<p>之所以对左半段和右半段排序，因为排序后，我们可以在遍历左半段的时候，很方便地找出：</p>\n<ol>\n<li>\n<p><code>rangeStart</code>为满足<code>区间(i,rangeStart)&gt;=lower</code>的一个位置</p>\n</li>\n<li>\n<p><code>rangeEnd</code>是满足<code>区间(i,rangeEnd)&gt;upper</code>的第一个位置</p>\n</li>\n<li>\n<p>将它们的位置之差，也就是在内部的数字都能满足要求的数量，添加到<code>count</code>上。</p>\n</li>\n</ol>\n<h2>处理好当前满足要求区间数量后，需要对当前的左半段和右半段合并排序，这就是基础归并排序的<code>merge</code>方法。</h2>\n",
  "content": "<p>给定一个整数数组&nbsp;<code>nums</code>，返回区间和在&nbsp;<code>[lower, upper]</code>&nbsp;之间的个数，包含&nbsp;<code>lower</code>&nbsp;和&nbsp;<code>upper</code>。<br>\n区间和&nbsp;<code>S(i, j)</code>&nbsp;表示在&nbsp;<code>nums</code>&nbsp;中，位置从&nbsp;<code>i</code>&nbsp;到&nbsp;<code>j</code>&nbsp;的元素之和，包含&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;(<code>i</code> &le; <code>j</code>)。</p>\n\n<p><strong>说明:</strong><br>\n最直观的算法复杂度是&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) ，请在此基础上优化你的算法。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>输出: </strong>3 \n<strong>解释: </strong>3个区间分别是: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]，</code>它们表示的和分别为: <code>-2, -1, 2。</code>\n</pre>\n"
}
