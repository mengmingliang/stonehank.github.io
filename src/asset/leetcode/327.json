{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} lower\n * @param {number} upper\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> countRangeSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, lower, upper</span>) </span>{\n  <span class=\"hljs-comment\">// let res=0</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;nums.length;i++){</span>\n  <span class=\"hljs-comment\">//   let sum=0</span>\n  <span class=\"hljs-comment\">//   for(let j=i;j&lt;nums.length;j++){</span>\n  <span class=\"hljs-comment\">//     sum+=nums[j]</span>\n  <span class=\"hljs-comment\">//     if(sum&gt;=lower &amp;&amp; sum&lt;=upper)res++</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return res</span>\n<span class=\"hljs-comment\">// }</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">countWhileMergeSort</span>(<span class=\"hljs-params\">sums,  start,  end,  lower,  upper</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (end - start &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">let</span> mid = <span class=\"hljs-built_in\">Math</span>.floor((start + end) / <span class=\"hljs-number\">2</span>);\n      <span class=\"hljs-keyword\">let</span> count = countWhileMergeSort(sums, start, mid, lower, upper) \n                + countWhileMergeSort(sums, mid, end, lower, upper)\n      <span class=\"hljs-keyword\">let</span> j = mid, k = mid, t = mid\n      <span class=\"hljs-comment\">// let cache = Array(end - start).fill(0)</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start, r = <span class=\"hljs-number\">0</span>; i &lt; mid; ++i, ++r) {\n          <span class=\"hljs-keyword\">while</span> (k &lt; end &amp;&amp; sums[k] - sums[i] &lt; lower) k++\n          <span class=\"hljs-keyword\">while</span> (j &lt; end &amp;&amp; sums[j] - sums[i] &lt;= upper) j++\n          count += j - k;\n      }\n      <span class=\"hljs-keyword\">let</span> newArr=sums.slice(start,end)\n      newArr.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n      \n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;newArr.length;i++){\n        sums[i+start]=newArr[i]\n      }\n      <span class=\"hljs-keyword\">return</span> count;\n  }\n    <span class=\"hljs-keyword\">let</span> n = nums.length;\n    <span class=\"hljs-keyword\">let</span> sums = <span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i)\n        sums[i + <span class=\"hljs-number\">1</span>] = sums[i] + nums[i]\n    <span class=\"hljs-keyword\">return</span> countWhileMergeSort(sums, <span class=\"hljs-number\">0</span>, n + <span class=\"hljs-number\">1</span>, lower, upper)\n}\n\n\n\n</code></pre>\n"
  ],
  "titleSlug": "count-of-range-sum",
  "content": "<p>给定一个整数数组&nbsp;<code>nums</code>，返回区间和在&nbsp;<code>[lower, upper]</code>&nbsp;之间的个数，包含&nbsp;<code>lower</code>&nbsp;和&nbsp;<code>upper</code>。<br>\n区间和&nbsp;<code>S(i, j)</code>&nbsp;表示在&nbsp;<code>nums</code>&nbsp;中，位置从&nbsp;<code>i</code>&nbsp;到&nbsp;<code>j</code>&nbsp;的元素之和，包含&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;(<code>i</code> &le; <code>j</code>)。</p>\n\n<p><strong>说明:</strong><br>\n最直观的算法复杂度是&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) ，请在此基础上优化你的算法。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>输出: </strong>3 \n<strong>解释: </strong>3个区间分别是: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]，</code>它们表示的和分别为: <code>-2, -1, 2。</code>\n</pre>\n"
}
