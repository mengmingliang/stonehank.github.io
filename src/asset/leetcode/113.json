{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> pathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, sum</span>) </span>{\n  <span class=\"hljs-comment\">// bfs</span>\n<span class=\"hljs-comment\">//   let node=root</span>\n<span class=\"hljs-comment\">//   let arr=[node]</span>\n<span class=\"hljs-comment\">//   while(arr.length&gt;0){</span>\n<span class=\"hljs-comment\">//     let len=arr.length</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;len;i++){</span>\n<span class=\"hljs-comment\">//       let cur=arr.shift(),val=cur.val</span>\n<span class=\"hljs-comment\">//       if(cur.left){</span>\n<span class=\"hljs-comment\">//         cur.left.val+=val</span>\n<span class=\"hljs-comment\">//         arr.push(cur.left)</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       if(cur.right){</span>\n<span class=\"hljs-comment\">//         cur.right.val+=val</span>\n<span class=\"hljs-comment\">//         arr.push(cur.right)</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       if(!cur.left &amp;&amp; !cur.right){</span>\n        \n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// dfs</span>\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">let</span> temp=[root.val],curSum=root.val\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node,temp,curSum</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(node.left){\n      temp.push(node.left.val)\n      dfs(node.left,temp,curSum+node.left.val)\n      temp.pop()\n    }\n    <span class=\"hljs-keyword\">if</span>(node.right){\n      temp.push(node.right.val)\n      dfs(node.right,temp,curSum+node.right.val)\n      temp.pop()\n    }\n    <span class=\"hljs-keyword\">if</span>(!node.left &amp;&amp; !node.right){\n      <span class=\"hljs-keyword\">if</span>(curSum===sum)result.push(temp.slice())\n    }\n  }\n  dfs(root,temp,curSum)\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "path-sum-ii",
  "translatedContent": "<p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong><br>\n给定如下二叉树，以及目标和&nbsp;<code>sum = 22</code>，</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4</strong>   <strong>8</strong>\n           /   / \\\n          <strong>11</strong>  13  <strong>4</strong>\n         /  \\    / \\\n        7    <strong>2</strong>  <strong>5</strong>   1\n</pre>\n\n<p>返回:</p>\n\n<pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>\n"
}
