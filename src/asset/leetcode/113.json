{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> pathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, sum</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">root,sum,arr</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(sum===root.val &amp;&amp; !root.left &amp;&amp; !root.right){\n      arr.push(root.val)\n      res.push(arr.slice())\n      arr.pop()\n      <span class=\"hljs-keyword\">return</span>\n    } \n    arr.push(root.val)\n    dfs(root.left,sum-root.val,arr)\n    dfs(root.right,sum-root.val,arr)\n    arr.pop()\n  }\n  dfs(root,sum,[])\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "path-sum-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>必须同时满足<code>sum</code>和<code>leaf</code>节点，才能作为结果添加进<code>res</code>。</p>\n",
  "content": "<p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong><br>\n给定如下二叉树，以及目标和&nbsp;<code>sum = 22</code>，</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4</strong>   <strong>8</strong>\n           /   / \\\n          <strong>11</strong>  13  <strong>4</strong>\n         /  \\    / \\\n        7    <strong>2</strong>  <strong>5</strong>   1\n</pre>\n\n<p>返回:</p>\n\n<pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>\n"
}
