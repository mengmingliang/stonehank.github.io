{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} board\n * @param {string} hand\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMinStep = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board, hand</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> all=<span class=\"hljs-string\">'RYBGW'</span>\n  <span class=\"hljs-keyword\">let</span> handHash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">of</span> all)handHash[a]=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> hand)handHash[s]++\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">let</span> minStep=backtrack(<span class=\"hljs-number\">0</span>,board)\n  <span class=\"hljs-keyword\">if</span>(minStep===<span class=\"hljs-literal\">Infinity</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">return</span> minStep\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">start,str</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(str===<span class=\"hljs-string\">\"\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(hash[str]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> hash[str]\n    <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;=str.length;i++){\n      <span class=\"hljs-comment\">// 发现相同的颜色球，就跳过，直到发现不同色的</span>\n      <span class=\"hljs-keyword\">if</span>(i===str.length || (i&gt;start &amp;&amp; str[i]!==str[i<span class=\"hljs-number\">-1</span>])){\n        <span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">3</span>-(i-start),<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">if</span>(handHash[str[i<span class=\"hljs-number\">-1</span>]]&lt;c){\n          <span class=\"hljs-comment\">// 当前颜色不能消除，检查下一个连续颜色的消除</span>\n          start=i\n          <span class=\"hljs-keyword\">continue</span>\n        }\n        handHash[str[i<span class=\"hljs-number\">-1</span>]]-=c\n        step=<span class=\"hljs-built_in\">Math</span>.min(step,backtrack(<span class=\"hljs-number\">0</span>,str.substring(<span class=\"hljs-number\">0</span>,start)+str.substring(i))+c)\n        handHash[str[i<span class=\"hljs-number\">-1</span>]]+=c   \n        <span class=\"hljs-comment\">// 当前颜色消除已经处理完毕，检查下一个连续颜色的消除</span>\n\t\t    start=i     \n      }\n    }\n    hash[str]=step\n    <span class=\"hljs-keyword\">return</span> step\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "zuma-game",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>回溯，每次检查一种颜色，如果当前球<code>board[i]===board[i-1]</code>说明当前还是同一种颜色连续的，继续检查下一个球直到<code>board[i]!==board[i-1]</code>，\n设定当前这种颜色的连续范围为<code>[start,i)</code>，尝试消除这种颜色。</p>\n<p>当尝试消除这种颜色返回后或者无法消除这种颜色(手中的球不够)，更新<code>start=i</code>，继续递归，检查下一种颜色。</p>\n",
  "content": "<p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p>\n\n<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p>\n\n<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> &quot;WRRBBW&quot;, &quot;RB&quot; \n<strong>输出:</strong> -1 \n<strong>解释:</strong> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）\n\n<strong>输入:</strong> &quot;WWRRBBWW&quot;, &quot;WRBRW&quot; \n<strong>输出:</strong> 2 \n<strong>解释:</strong> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n\n<strong>输入:</strong>&quot;G&quot;, &quot;GGGGG&quot; \n<strong>输出:</strong> 2 \n<strong>解释:</strong> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n\n<strong>输入:</strong> &quot;RBYYBBRRB&quot;, &quot;YRBGB&quot; \n<strong>输出:</strong> 3 \n<strong>解释:</strong> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre>\n\n<p><strong>标注:</strong></p>\n\n<ol>\n\t<li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li>\n\t<li>桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 &quot;board&quot; 。</li>\n\t<li>你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 &quot;hand&quot;。</li>\n\t<li>输入的两个字符串均为非空字符串，且只包含字符 &#39;R&#39;,&#39;Y&#39;,&#39;B&#39;,&#39;G&#39;,&#39;W&#39;。</li>\n</ol>\n"
}
