{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxSubarraySumCircular = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>, \n      maxSum = -<span class=\"hljs-literal\">Infinity</span>, curMax = <span class=\"hljs-number\">0</span>, \n      minSum = <span class=\"hljs-literal\">Infinity</span>, curMin = <span class=\"hljs-number\">0</span>,\n      maxSingle=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a <span class=\"hljs-keyword\">of</span> A) {\n    total += a;\n    maxSingle=<span class=\"hljs-built_in\">Math</span>.max(maxSingle,a)\n    \n    <span class=\"hljs-keyword\">if</span>(curMax+a&gt;<span class=\"hljs-number\">0</span>){\n      curMax+=a\n      maxSum=<span class=\"hljs-built_in\">Math</span>.max(curMax,maxSum)\n    }<span class=\"hljs-keyword\">else</span> curMax=<span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span>(curMin+a&lt;<span class=\"hljs-number\">0</span>){\n      curMin+=a\n      minSum=<span class=\"hljs-built_in\">Math</span>.min(curMin,minSum)\n    }<span class=\"hljs-keyword\">else</span> curMin=<span class=\"hljs-number\">0</span>   \n  }\n  <span class=\"hljs-keyword\">return</span> maxSum &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-built_in\">Math</span>.max(maxSum, total - minSum) : maxSingle;\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-sum-circular-subarray",
  "content": "<p>给定一个由整数数组 <code>A</code>&nbsp;表示的<strong>环形数组 <code>C</code></strong>，求 <code><strong>C</strong></code>&nbsp;的非空子数组的最大可能和。</p>\n\n<p>在此处，<em>环形数组</em>意味着数组的末端将会与开头相连呈环状。（形式上，当<code>0 &lt;= i &lt; A.length</code>&nbsp;时&nbsp;<code>C[i] = A[i]</code>，而当&nbsp;<code>i &gt;= 0</code>&nbsp;时&nbsp;<code>C[i+A.length] = C[i]</code>）</p>\n\n<p>此外，子数组最多只能包含固定缓冲区 <code>A</code>&nbsp;中的每个元素一次。（形式上，对于子数组&nbsp;<code>C[i], C[i+1], ..., C[j]</code>，不存在&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;其中&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>）</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,-2,3,-2]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 得到最大和 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[5,-3,5]\n<strong>输出：</strong>10\n<strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[3,-1,2,-1]\n<strong>输出：</strong>4\n<strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[3,-2,2,-3]\n<strong>输出：</strong>3\n<strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[-2,-3,-1]\n<strong>输出：</strong>-1\n<strong>解释：</strong>从子数组 [-1] 得到最大和 -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n</ol>\n"
}
