{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    let allSum=nums.reduce((sum,cur)=>sum+cur,0)\n    if(allSum % 2!==0)return false\n    let sum=allSum/2\n    let aux=Array(sum+1).fill(0)\n    aux[0]=1\n    for(let n of nums){\n        for(let i=sum;i>=n;i--){\n            aux[i]+=aux[i-n]\n            if(aux[sum]>1)return true\n        }\n        \n    }\n    return false\n};"
  ],
  "titleSlug": "partition-equal-subset-sum",
  "content": "<p>Given a <b>non-empty</b> array containing <b>only positive integers</b>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>Each of the array element will not exceed 100.</li>\r\n<li>The array size will not exceed 200.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput: [1, 5, 11, 5]\r\n\r\nOutput: true\r\n\r\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput: [1, 2, 3, 5]\r\n\r\nOutput: false\r\n\r\nExplanation: The array cannot be partitioned into equal sum subsets.\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>每个数组中的元素不会超过 100</li>\n\t<li>数组的大小不会超过 200</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: [1, 5, 11, 5]\n\n输出: true\n\n解释: 数组可以分割成 [1, 5, 5] 和 [11].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>输入: [1, 2, 3, 5]\n\n输出: false\n\n解释: 数组不能分割成两个元素和相等的子集.\n</pre>\n\n<p>&nbsp;</p>\n"
}
