{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxPathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_maxPathSum</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> -<span class=\"hljs-literal\">Infinity</span>\n\n    <span class=\"hljs-keyword\">let</span> leftV=_maxPathSum(root.left),\n        rightV=_maxPathSum(root.right),\n        cV=root.val\n\n    <span class=\"hljs-comment\">// 与父节点连接中断的path的数值</span>\n    res=<span class=\"hljs-built_in\">Math</span>.max(res,leftV,rightV,cV+leftV+rightV)\n    <span class=\"hljs-comment\">// 与父节点连接继续的path的数值</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(cV+leftV,cV+rightV,cV)\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(_maxPathSum(root),res)\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-maximum-path-sum",
  "content": "<p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p>\n\n<p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3]\n\n       <strong>1</strong>\n      <strong>/ \\</strong>\n     <strong>2</strong>   <strong>3</strong>\n\n<strong>输出:</strong> 6\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [-10,9,20,null,null,15,7]\n\n&nbsp;  -10\n&nbsp; &nbsp;/ \\\n&nbsp; 9 &nbsp;<strong>20</strong>\n&nbsp; &nbsp; <strong>/ &nbsp;\\</strong>\n&nbsp; &nbsp;<strong>15 &nbsp; 7</strong>\n\n<strong>输出:</strong> 42</pre>\n"
}
