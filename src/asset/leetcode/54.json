{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> spiralOrder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(matrix.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>]],moveState=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> rS=<span class=\"hljs-number\">0</span>,rE=matrix.length<span class=\"hljs-number\">-1</span>,cS=<span class=\"hljs-number\">0</span>,cE=matrix[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">let</span> len=matrix.length*matrix[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> result=[matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]]\n  <span class=\"hljs-keyword\">let</span> curX=<span class=\"hljs-number\">0</span>,curY=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(result.length&lt;len){\n    <span class=\"hljs-keyword\">if</span>(moveState===<span class=\"hljs-number\">2</span> &amp;&amp; curY===cS){moveState++; rE--}\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(moveState===<span class=\"hljs-number\">0</span> &amp;&amp; curY===cE){moveState++; rS++}\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(moveState===<span class=\"hljs-number\">1</span> &amp;&amp; curX===rE){moveState++; cE--}\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(moveState===<span class=\"hljs-number\">3</span> &amp;&amp; curX===rS){moveState++; cS++}\n    <span class=\"hljs-keyword\">if</span>(moveState===<span class=\"hljs-number\">4</span>)moveState=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> [mX,mY]=moves[moveState]\n    <span class=\"hljs-keyword\">let</span> newX=curX+mX,newY=curY+mY\n    result.push(matrix[newX][newY])\n    curX=newX\n    curY=newY\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "spiral-matrix",
  "content": "<p>给定一个包含&nbsp;<em>m</em> x <em>n</em>&nbsp;个元素的矩阵（<em>m</em> 行, <em>n</em> 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n<strong>输出:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n<strong>输出:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n"
}
