{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> compareVersion = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">version1, version2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> arr1=version1.split(<span class=\"hljs-string\">'.'</span>),\n      arr2=version2.split(<span class=\"hljs-string\">'.'</span>)\n\n  <span class=\"hljs-keyword\">if</span>(arr1.length&lt;arr2.length){\n    <span class=\"hljs-keyword\">let</span> delt=arr2.length-arr1.length\n    <span class=\"hljs-keyword\">while</span>(delt--&gt;<span class=\"hljs-number\">0</span>) arr1.push(<span class=\"hljs-string\">'0'</span>)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">let</span> delt=arr1.length-arr2.length\n    <span class=\"hljs-keyword\">while</span>(delt--&gt;<span class=\"hljs-number\">0</span>) arr2.push(<span class=\"hljs-string\">'0'</span>)\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr1.length;i++){\n    <span class=\"hljs-keyword\">let</span> n1=+arr1[i],n2=+arr2[i]\n    <span class=\"hljs-keyword\">if</span>(n1&gt;n2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n1&lt;n2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "compare-version-numbers",
  "hasThinking": false,
  "content": "<p>比较两个版本号 <em>version1&nbsp;</em>和 <em>version2</em>。<br>\n如果&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;返回&nbsp;<code>1</code>，如果&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> 返回 <code>-1</code>， 除此之外返回 <code>0</code>。</p>\n\n<p>你可以假设版本字符串非空，并且只包含数字和&nbsp;<code>.</code> 字符。</p>\n\n<p>&nbsp;<code>.</code> 字符不代表小数点，而是用于分隔数字序列。</p>\n\n<p>例如，<code>2.5</code> 不是&ldquo;两个半&rdquo;，也不是&ldquo;差一半到三&rdquo;，而是第二版中的第五个小版本。</p>\n\n<p>你可以假设版本号的每一级的默认修订版号为 <code>0</code>。例如，版本号 <code>3.4</code> 的第一级（大版本）和第二级（小版本）修订号分别为 <code>3</code> 和 <code>4</code>。其第三级和第四级修订号均为 <code>0</code>。<br>\n&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = &quot;0.1&quot;, <code><em>version2</em></code> = &quot;1.1&quot;\n<strong>输出:</strong> -1</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong><code><em>version1</em></code> = &quot;1.0.1&quot;, <code><em>version2</em></code> = &quot;1&quot;\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> <code><em>version1</em></code> = &quot;7.5.2.4&quot;, <code><em>version2</em></code> = &quot;7.5.3&quot;\n<strong>输出:</strong> -1</pre>\n\n<p><strong>示例&nbsp;4：</strong></p>\n\n<pre><code><strong>输入：</strong><em>version1</em></code> = &quot;1.01&quot;, <code><em>version2</em></code> = &quot;1.001&quot;\n<strong>输出：</strong>0\n<strong>解释：</strong>忽略前导零，&ldquo;01&rdquo; 和 &ldquo;001&rdquo; 表示相同的数字 &ldquo;1&rdquo;。</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><code><strong>输入：</strong><em>version1</em></code> = &quot;1.0&quot;, <code><em>version2</em></code> = &quot;1.0.0&quot;\n<strong>输出：</strong>0\n<strong>解释：</strong><code><em>version1 </em></code>没有第三级修订号，这意味着它的第三级修订号默认为 &ldquo;0&rdquo;。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>版本字符串由以点&nbsp;（<code>.</code>）&nbsp;分隔的数字字符串组成。这个数字字符串<strong>可能</strong>有前导零。</li>\n\t<li>版本字符串不以点开始或结束，并且其中不会有两个连续的点。</li>\n</ol>\n"
}
