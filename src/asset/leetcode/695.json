{
  "code": [
    "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    let visited=[], max=0\n    let cL=grid.length, rL=grid[0].length\n    for(let i=0;i<cL;i++){\n        for(let j=0;j<rL;j++){\n            if(!visited[i])visited[i]=[]\n            visited[i][j]=false\n        }\n    }\n    for(let i=0;i<cL;i++){\n        for(let j=0;j<rL;j++){\n            let count=0\n            count=check(i,j,count)\n            if(count>max)max=count\n        }\n    }\n    function check(i,j,count){\n        if(i<0 || i>=cL || j<0 || j>=rL)return count\n        if(!visited[i][j] && grid[i][j]===1){\n            visited[i][j]=true\n            count++\n            count=check(i-1,j,count)\n            count=check(i,j+1,count)\n            count=check(i+1,j,count)\n            count=check(i,j-1,count)\n        }else{\n            visited[i][j]=true\n        }\n        return count\n    }\n    return max\n};"
  ],
  "titleSlug": "max-area-of-island",
  "content": "<p>Given a non-empty 2D array <code>grid</code> of 0&#39;s and 1&#39;s, an <b>island</b> is a group of <code>1</code>&#39;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\r\n\r\n<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,0,<b>1</b>,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,<b>1</b>,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,0,0,0,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\r\n</pre>\r\nGiven the above grid, return <code>6</code>. Note the answer is not 11, because the island must be connected 4-directionally.\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n[[0,0,0,0,0,0,0,0]]</pre>\r\nGiven the above grid, return <code>0</code>.\r\n\r\n<p><b>Note:</b> The length of each dimension in the given <code>grid</code> does not exceed 50.</p>\r\n",
  "translatedContent": "<p>给定一个包含了一些 0 和 1的非空二维数组&nbsp;<code>grid</code>&nbsp;, 一个&nbsp;<strong>岛屿</strong>&nbsp;是由四个方向 (水平或垂直) 的&nbsp;<code>1</code>&nbsp;(代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p>\n\n<p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,0,<strong>1</strong>,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,0,0,0,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n</pre>\n\n<p>对于上面这个给定矩阵应返回&nbsp;<code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的&lsquo;1&rsquo;。</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n[[0,0,0,0,0,0,0,0]]</pre>\n\n<p>对于上面这个给定的矩阵, 返回&nbsp;<code>0</code>。</p>\n\n<p><strong>注意:&nbsp;</strong>给定的矩阵<code>grid</code>&nbsp;的长度和宽度都不超过 50。</p>\n"
}
