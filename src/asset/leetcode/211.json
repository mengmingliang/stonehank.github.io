{
  "code": [
    "  function TreeNode(){\n    this.val=null\n    this.next=[]\n  }\n\nvar WordDictionary = function() {\n  this.rootNode=new TreeNode()\n    this.aCode=97\n};\n\n/**\n * Adds a word into the data structure.\n * @param {string} word\n * @return {void}\n */\nWordDictionary.prototype.addWord = function(word) {\n  let aCode=97\n  this.rootNode=addW(this.rootNode,word,0)\n  function addW(node,word,d){\n    if(!node)node=new TreeNode()\n    if(d===word.length){\n      node.val=1\n      return node\n    }\n    let cCode=word.charCodeAt(d)-aCode\n    node.next[cCode]=addW(node.next[cCode],word,d+1)\n    return node\n  }\n};\n\n/**\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n * @param {string} word\n * @return {boolean}\n */\nWordDictionary.prototype.search = function(word) {\n  let aCode=97\n  return get(this.rootNode,word,0)\n  function get(node,word,d){\n    if(node==null)return false\n    if(d===word.length)return (node.val!=null)\n    let c=word.charCodeAt(d)\n    let res\n    for(let i=0;i<node.next.length;i++){\n      if(c===46 || (c-aCode)===i)\n         res=get(node.next[i],word,d+1)\n      if(res)return true\n    }\n    return false\n  }\n};"
  ],
  "titleSlug": "add-and-search-word-data-structure-design",
  "content": "<p>Design a data structure that supports the following two operations:</p>\r\n\r\n<pre>\r\nvoid addWord(word)\r\nbool search(word)\r\n</pre>\r\n\r\n<p>search(word) can search a literal word or a regular expression string containing only letters <code>a-z</code> or <code>.</code>. A <code>.</code> means it can represent any one letter.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\naddWord(&quot;bad&quot;)\r\naddWord(&quot;dad&quot;)\r\naddWord(&quot;mad&quot;)\r\nsearch(&quot;pad&quot;) -&gt; false\r\nsearch(&quot;bad&quot;) -&gt; true\r\nsearch(&quot;.ad&quot;) -&gt; true\r\nsearch(&quot;b..&quot;) -&gt; true\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume that all words are consist of lowercase letters <code>a-z</code>.</p>\r\n",
  "translatedContent": "<p>设计一个支持以下两种操作的数据结构：</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;可以搜索文字或正则表达式字符串，字符串只包含字母&nbsp;<code>.</code>&nbsp;或&nbsp;<code>a-z</code>&nbsp;。&nbsp;<code>.</code> 可以表示任何一个字母。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code>&nbsp;组成的。</p>\n"
}
