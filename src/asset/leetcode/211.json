{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> WordDictionary = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.tire={}\n};\n\n<span class=\"hljs-comment\">/**\n * Adds a word into the data structure. \n * @param {string} word\n * @return {void}\n */</span>\nWordDictionary.prototype.addWord = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> t=<span class=\"hljs-keyword\">this</span>.tire\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;word.length;i++){\n    <span class=\"hljs-keyword\">let</span> l=word[i]\n    <span class=\"hljs-keyword\">if</span>(t[l]==<span class=\"hljs-literal\">null</span>)t[l]={}\n    <span class=\"hljs-keyword\">if</span>(i===word.length<span class=\"hljs-number\">-1</span>)t[l][<span class=\"hljs-string\">'exact'</span>]=<span class=\"hljs-literal\">true</span>\n    t=t[l]\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. \n * @param {string} word\n * @return {boolean}\n */</span>\nWordDictionary.prototype.search = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">tire,idx</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(idx===word.length){\n      <span class=\"hljs-keyword\">return</span> tire.exact\n    }\n    <span class=\"hljs-keyword\">let</span> l=word[idx]\n    <span class=\"hljs-keyword\">if</span>(l===<span class=\"hljs-string\">'.'</span>){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> tire){\n        <span class=\"hljs-keyword\">if</span>(dfs(tire[k],idx+<span class=\"hljs-number\">1</span>))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n      }\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(tire[l]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(dfs(tire[l],idx+<span class=\"hljs-number\">1</span>))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> dfs(<span class=\"hljs-keyword\">this</span>.tire,<span class=\"hljs-number\">0</span>)\n};\n\n<span class=\"hljs-comment\">/** \n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "add-and-search-word-data-structure-design",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>先构建<code>Tire</code>树，可以简单的用<code>{}</code>嵌套构成。</p>\n<p><code>addWord</code>中，将单词每个字母添加到<code>tire</code>中，最后一个字母添加结尾标志。</p>\n<p><code>search</code>中，对每一个字符搜索，如果存在则进入更深一层继续搜索，其中<code>.</code>可以代表任意值，需要遍历当前<code>tire</code>所有的字母都尝试一遍，直到找到对应单词。</p>\n",
  "content": "<p>设计一个支持以下两种操作的数据结构：</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;可以搜索文字或正则表达式字符串，字符串只包含字母&nbsp;<code>.</code>&nbsp;或&nbsp;<code>a-z</code>&nbsp;。&nbsp;<code>.</code> 可以表示任何一个字母。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code>&nbsp;组成的。</p>\n"
}
