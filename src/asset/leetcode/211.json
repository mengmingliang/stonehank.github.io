{
  "code": [
    "<pre class=\"hljs\"><code>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">TreeNode</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.val=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.next=[]\n  }\n\n<span class=\"hljs-keyword\">var</span> WordDictionary = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.rootNode=<span class=\"hljs-keyword\">new</span> TreeNode()\n    <span class=\"hljs-keyword\">this</span>.aCode=<span class=\"hljs-number\">97</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Adds a word into the data structure.\n * @param {string} word\n * @return {void}\n */</span>\nWordDictionary.prototype.addWord = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> aCode=<span class=\"hljs-number\">97</span>\n  <span class=\"hljs-keyword\">this</span>.rootNode=addW(<span class=\"hljs-keyword\">this</span>.rootNode,word,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addW</span>(<span class=\"hljs-params\">node,word,d</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!node)node=<span class=\"hljs-keyword\">new</span> TreeNode()\n    <span class=\"hljs-keyword\">if</span>(d===word.length){\n      node.val=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">return</span> node\n    }\n    <span class=\"hljs-keyword\">let</span> cCode=word.charCodeAt(d)-aCode\n    node.next[cCode]=addW(node.next[cCode],word,d+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> node\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n * @param {string} word\n * @return {boolean}\n */</span>\nWordDictionary.prototype.search = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> aCode=<span class=\"hljs-number\">97</span>\n  <span class=\"hljs-keyword\">return</span> get(<span class=\"hljs-keyword\">this</span>.rootNode,word,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">node,word,d</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(node==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(d===word.length)<span class=\"hljs-keyword\">return</span> (node.val!=<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">let</span> c=word.charCodeAt(d)\n    <span class=\"hljs-keyword\">let</span> res\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;node.next.length;i++){\n      <span class=\"hljs-keyword\">if</span>(c===<span class=\"hljs-number\">46</span> || (c-aCode)===i)\n         res=get(node.next[i],word,d+<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">if</span>(res)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "add-and-search-word-data-structure-design",
  "content": "<p>设计一个支持以下两种操作的数据结构：</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;可以搜索文字或正则表达式字符串，字符串只包含字母&nbsp;<code>.</code>&nbsp;或&nbsp;<code>a-z</code>&nbsp;。&nbsp;<code>.</code> 可以表示任何一个字母。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code>&nbsp;组成的。</p>\n"
}
