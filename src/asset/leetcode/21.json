{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> mergeTwoLists = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">l1, l2</span>) </span>{\n    <span class=\"hljs-comment\">// space O(n)</span>\n    <span class=\"hljs-keyword\">let</span> list=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">let</span> node=list\n    <span class=\"hljs-keyword\">while</span>(l1 || l2){\n        <span class=\"hljs-keyword\">if</span>(!l1){node.next=l2;<span class=\"hljs-keyword\">break</span>}\n        <span class=\"hljs-keyword\">if</span>(!l2){node.next=l1;<span class=\"hljs-keyword\">break</span>}            \n        <span class=\"hljs-keyword\">if</span>(l1.val&lt;l2.val){node.next=l1;l1=l1.next}\n        <span class=\"hljs-keyword\">else</span>{node.next=l2;l2=l2.next}\n        node=node.next\n    }\n    node=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">return</span> list.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "merge-two-sorted-lists",
  "translatedContent": "<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n<strong>输出：</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</pre>\n"
}
