{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findKthNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-number\">1</span>\n  k-=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">while</span>(k&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> step=calcStep(n,cur,cur+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span>(step&lt;=k){\n      k-=step\n      cur++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(step&gt;k){\n      k--\n      cur*=<span class=\"hljs-number\">10</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> cur\n  <span class=\"hljs-comment\">// 分别计算 1和2之间的数，2和3之间的数....10和11之间的数....100和101之间的数...</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calcStep</span>(<span class=\"hljs-params\">n,cur,next</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 当cur&lt;=n的时候，cur和next之间的数量总是10的指数</span>\n    <span class=\"hljs-keyword\">while</span>(cur&lt;=n){\n      count+=<span class=\"hljs-built_in\">Math</span>.min(n+<span class=\"hljs-number\">1</span>,next)-cur\n      cur*=<span class=\"hljs-number\">10</span>\n      next*=<span class=\"hljs-number\">10</span>\n    }\n    <span class=\"hljs-keyword\">return</span> count\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "k-th-smallest-in-lexicographical-order",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>每次计算一段的数量，从<code>1</code>开始，计算<code>1</code>到<code>2</code>之前的有效的数的数量，有效数指不大于<code>n</code>的数，例如如果<code>n</code>为<code>2100</code>，\n那么<code>1</code>到<code>2</code>的有效数就是<code>1111</code>个；如果<code>n</code>为<code>1457</code>，那么<code>1</code>到<code>2</code>的有效数就是<code>569</code>个。</p>\n<p>如果防线当前段的有效数个数<code>step</code>超过了<code>k</code>，说明结果就在这一段中，需要在当前段进一步检查，例如，原来是<code>7</code>到<code>8</code>，那么进一步则<code>70</code>到<code>71</code>；</p>\n<p>例如：<code>n=1457</code>，<code>k=1234</code></p>\n<p>第一段的检查如下：</p>\n<pre class=\"hljs\"><code>初始k:1234-1\n\n当前间隔step：   569,  111,  111,  111,  111,  111,  111\n剩余k：          664,  553,  442,  331,  220.  109,  -2(结果这就在7-8之间)\n               1 --- 2 --- 3 --- 4 --- 5 --- 6 --- 7 --- 8\n               10 -- 20 -- 30 -- 40 -- 50 -- 60 -- 70 -- 80\n               100 - 200 - 300 - 400 - 500 - 600 - 700 - 800\n               1000-1457   \n</code></pre>\n<p>上面当检查到剩余<code>k</code>不足时，说明结果就在<code>7</code>和<code>8</code>之间。</p>\n",
  "content": "<p>给定整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，找到&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;中字典序第&nbsp;<code>k</code>&nbsp;小的数字。</p>\n\n<p>注意：1 &le; k &le; n &le; 10<sup>9</sup>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\nn: 13   k: 2\n\n<strong>输出:</strong>\n10\n\n<strong>解释:</strong>\n字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。\n</pre>\n"
}
