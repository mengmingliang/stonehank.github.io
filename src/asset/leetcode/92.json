{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @param {number} m\n * @param {number} n\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> reverseBetween = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head, m, n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n  root.next=head\n  <span class=\"hljs-keyword\">let</span> prev=root\n  <span class=\"hljs-keyword\">let</span> startIdx=m\n  <span class=\"hljs-keyword\">while</span>(--m&gt;<span class=\"hljs-number\">0</span>)prev=prev.next\n  <span class=\"hljs-keyword\">let</span> cur=prev.next,\n      tail=cur.next\n  <span class=\"hljs-keyword\">while</span>(startIdx++&lt;n){\n    let next=tail.next\n    tail.next=prev.next\n    cur.next=next\n    prev.next=tail\n    tail=next\n  }\n  return root.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "reverse-linked-list-ii",
  "content": "<p>反转从位置 <em>m</em> 到 <em>n</em> 的链表。请使用一趟扫描完成反转。</p>\n\n<p><strong>说明:</strong><br>\n1 &le;&nbsp;<em>m</em>&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le; 链表长度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\n<strong>输出:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</pre>\n"
}
