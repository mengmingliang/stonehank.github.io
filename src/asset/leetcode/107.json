{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrderBottom = function(root) {\n    // let result=[]\n    // if(!root)return result\n    // let arr=[root]\n    // function bsf(arr){\n    //     let aux=[],helper=[]\n    //     while(arr.length>0){\n    //         for(let i=0;i<arr.length;i++){\n    //             helper.push(arr[i].val)\n    //             if(arr[i].left)aux.push(arr[i].left)\n    //             if(arr[i].right)aux.push(arr[i].right)\n    //         }\n    //         result.unshift(helper)\n    //         helper=[]\n    //         arr=aux\n    //         aux=[]\n    //     }\n    // }\n    // bsf(arr)\n    // return result\n    \n    /*另一种写法*/\n    let result=[]\n    function dsfWithLevel(node,level){\n        if(!node)return\n        if(!result[level])result[level]=[]\n        result[level].push(node.val)\n        if(node.left)dsfWithLevel(node.left,level+1)\n        if(node.right)dsfWithLevel(node.right,level+1)\n    }\n    dsfWithLevel(root,0)\n    return result.reverse()\n};"
  ],
  "titleSlug": "binary-tree-level-order-traversal-ii",
  "content": "<p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its bottom-up level order traversal as:<br />\r\n<pre>\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n\n<p>例如：<br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其自底向上的层次遍历为：</p>\n\n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n"
}
