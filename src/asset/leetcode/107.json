{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> levelOrderBottom = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-comment\">// let result=[]</span>\n    <span class=\"hljs-comment\">// if(!root)return result</span>\n    <span class=\"hljs-comment\">// let arr=[root]</span>\n    <span class=\"hljs-comment\">// function bsf(arr){</span>\n    <span class=\"hljs-comment\">//     let aux=[],helper=[]</span>\n    <span class=\"hljs-comment\">//     while(arr.length&gt;0){</span>\n    <span class=\"hljs-comment\">//         for(let i=0;i&lt;arr.length;i++){</span>\n    <span class=\"hljs-comment\">//             helper.push(arr[i].val)</span>\n    <span class=\"hljs-comment\">//             if(arr[i].left)aux.push(arr[i].left)</span>\n    <span class=\"hljs-comment\">//             if(arr[i].right)aux.push(arr[i].right)</span>\n    <span class=\"hljs-comment\">//         }</span>\n    <span class=\"hljs-comment\">//         result.unshift(helper)</span>\n    <span class=\"hljs-comment\">//         helper=[]</span>\n    <span class=\"hljs-comment\">//         arr=aux</span>\n    <span class=\"hljs-comment\">//         aux=[]</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// bsf(arr)</span>\n    <span class=\"hljs-comment\">// return result</span>\n    \n    <span class=\"hljs-comment\">/*另一种写法*/</span>\n    <span class=\"hljs-keyword\">let</span> result=[]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dsfWithLevel</span>(<span class=\"hljs-params\">node,level</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(!result[level])result[level]=[]\n        result[level].push(node.val)\n        <span class=\"hljs-keyword\">if</span>(node.left)dsfWithLevel(node.left,level+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">if</span>(node.right)dsfWithLevel(node.right,level+<span class=\"hljs-number\">1</span>)\n    }\n    dsfWithLevel(root,<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> result.reverse()\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-level-order-traversal-ii",
  "translatedContent": "<p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n\n<p>例如：<br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其自底向上的层次遍历为：</p>\n\n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n"
}
