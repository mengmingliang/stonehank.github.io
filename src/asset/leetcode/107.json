{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> levelOrderBottom = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{ \n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">root,level</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(level===res.length){\n      res.push([])\n    }\n    res[level].push(root.val)\n    <span class=\"hljs-keyword\">if</span>(root.left)dfs(root.left,level+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span>(root.right)dfs(root.right,level+<span class=\"hljs-number\">1</span>)\n  }\n  dfs(root,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> res.reverse()\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-level-order-traversal-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>除了最后结果倒序，与<code>NO.102</code>完全一致。</p>\n",
  "content": "<p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n\n<p>例如：<br>\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回其自底向上的层次遍历为：</p>\n\n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n"
}
