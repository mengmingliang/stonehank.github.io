{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> surfaceArea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;grid.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;grid[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> cur=grid[i][j]\n      <span class=\"hljs-keyword\">let</span> prevL=<span class=\"hljs-number\">0</span>,prevT=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">if</span>(j&gt;<span class=\"hljs-number\">0</span>)prevL=grid[i][j<span class=\"hljs-number\">-1</span>]\n      <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">0</span>)prevT=grid[i<span class=\"hljs-number\">-1</span>][j]\n      <span class=\"hljs-keyword\">let</span> overlap=<span class=\"hljs-built_in\">Math</span>.min(cur,prevL)*<span class=\"hljs-number\">2</span>+<span class=\"hljs-built_in\">Math</span>.min(cur,prevT)*<span class=\"hljs-number\">2</span>\n      <span class=\"hljs-keyword\">let</span> curNum=cur*<span class=\"hljs-number\">6</span>-(cur<span class=\"hljs-number\">-1</span>&gt;<span class=\"hljs-number\">0</span>?cur<span class=\"hljs-number\">-1</span>:<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>-overlap\n      sum+=curNum\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> sum\n};\n</code></pre>\n"
  ],
  "titleSlug": "surface-area-of-3d-shapes",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>常规办法就是对每一个位置的<code>上下左右</code>4个方向进行分析，分别求出当前位置的4个边还能剩多少未被覆盖的，再加上<code>顶上的面</code>和<code>底下的面</code>。</p>\n<p>比较更好的办法对每一个位置，只需要求<code>上左</code>2个方向即可，即使当前的位置可能多了或者少了，但整个连续体的结果是正确的。</p>\n<h2>你可以想象前面有一个楼梯，假设这个楼梯就是三维方格摆放图，你能看到暴露的面，就是<code>最高一层楼梯的高度*楼梯的宽度</code>。</h2>\n",
  "content": "<p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格上，我们放置一些&nbsp;<code>1 * 1 * 1&nbsp;</code>&nbsp;的立方体。</p>\n\n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示&nbsp;<code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p>\n\n<p>返回最终形体的表面积。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>10\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>34\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>16\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>32\n</pre>\n\n<p><strong>示例&nbsp;5：</strong></p>\n\n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n"
}
