{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[][]} board\n * @param {string} word\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> exist = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board, word</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(word===<span class=\"hljs-string\">\"\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(board.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> found=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAdj</span>(<span class=\"hljs-params\">board,x,y</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> adj=[]\n    <span class=\"hljs-keyword\">if</span>(x&gt;<span class=\"hljs-number\">0</span>)adj.push([x<span class=\"hljs-number\">-1</span>,y])\n    <span class=\"hljs-keyword\">if</span>(y&gt;<span class=\"hljs-number\">0</span>)adj.push([x,y<span class=\"hljs-number\">-1</span>])\n    <span class=\"hljs-keyword\">if</span>(x&lt;board.length<span class=\"hljs-number\">-1</span>)adj.push([x+<span class=\"hljs-number\">1</span>,y])\n    <span class=\"hljs-keyword\">if</span>(y&lt;board[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>)adj.push([x,y+<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> adj\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">board,x,y,word,idx</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(board[x][y]!==word[idx])<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(idx===word.length<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> found=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> adjs=getAdj(board,x,y)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [row,col] <span class=\"hljs-keyword\">of</span> adjs){\n      board[x][y]=<span class=\"hljs-string\">\".\"</span>\n      dfs(board,row,col,word,idx+<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">if</span>(found)<span class=\"hljs-keyword\">return</span>\n      board[x][y]=word[idx]\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> firstL=word[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;board[i].length;j++){\n      <span class=\"hljs-keyword\">if</span>(board[i][j]!==firstL)<span class=\"hljs-keyword\">continue</span>\n      dfs(board,i,j,word,<span class=\"hljs-number\">0</span>)\n      <span class=\"hljs-keyword\">if</span>(found)<span class=\"hljs-keyword\">return</span> found\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> found\n};\n</code></pre>\n"
  ],
  "titleSlug": "word-search",
  "hasThinking": false,
  "content": "<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中&ldquo;相邻&rdquo;单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>board =\n[\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\n]\n\n给定 word = &quot;<strong>ABCCED</strong>&quot;, 返回 <strong>true</strong>.\n给定 word = &quot;<strong>SEE</strong>&quot;, 返回 <strong>true</strong>.\n给定 word = &quot;<strong>ABCB</strong>&quot;, 返回 <strong>false</strong>.</pre>\n"
}
