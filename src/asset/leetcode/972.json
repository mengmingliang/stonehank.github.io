{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isRationalEqual = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, T</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> spIdx=S.indexOf(<span class=\"hljs-string\">\"(\"</span>),tpIdx=T.indexOf(<span class=\"hljs-string\">\"(\"</span>)\n  <span class=\"hljs-keyword\">let</span> spIdx2=S.indexOf(<span class=\"hljs-string\">\")\"</span>),tpIdx2=T.indexOf(<span class=\"hljs-string\">\")\"</span>)\n  <span class=\"hljs-keyword\">let</span> spointIdx=S.indexOf(<span class=\"hljs-string\">'.'</span>),tpointIdx=T.indexOf(<span class=\"hljs-string\">'.'</span>)\n  <span class=\"hljs-keyword\">let</span> intS=S,intT=T\n  <span class=\"hljs-keyword\">if</span>(spointIdx!==<span class=\"hljs-number\">-1</span>)intS=S.substring(<span class=\"hljs-number\">0</span>,spointIdx)||<span class=\"hljs-string\">'0'</span>\n  <span class=\"hljs-keyword\">if</span>(tpointIdx!==<span class=\"hljs-number\">-1</span>)intT=T.substring(<span class=\"hljs-number\">0</span>,tpointIdx)||<span class=\"hljs-string\">'0'</span>\n  <span class=\"hljs-keyword\">let</span> noRepS,noRepT\n  <span class=\"hljs-keyword\">if</span>(spIdx===<span class=\"hljs-number\">-1</span>){\n    <span class=\"hljs-keyword\">if</span>(spointIdx!==<span class=\"hljs-number\">-1</span>)noRepS=S.substring(spointIdx+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span> noRepS=<span class=\"hljs-string\">''</span>\n  }<span class=\"hljs-keyword\">else</span> noRepS=S.substring(spointIdx+<span class=\"hljs-number\">1</span>,spIdx)\n  \n  <span class=\"hljs-keyword\">if</span>(tpIdx===<span class=\"hljs-number\">-1</span>){\n    <span class=\"hljs-keyword\">if</span>(tpointIdx!==<span class=\"hljs-number\">-1</span>)noRepT=T.substring(tpointIdx+<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span> noRepT=<span class=\"hljs-string\">''</span>\n  }<span class=\"hljs-keyword\">else</span> noRepT=T.substring(tpointIdx+<span class=\"hljs-number\">1</span>,tpIdx)\n    \n  <span class=\"hljs-keyword\">let</span> repS=<span class=\"hljs-string\">''</span>,repT=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">if</span>(spIdx!==<span class=\"hljs-number\">-1</span>)repS=S.substring(spIdx+<span class=\"hljs-number\">1</span>,spIdx2)  \n  <span class=\"hljs-keyword\">if</span>(tpIdx!==<span class=\"hljs-number\">-1</span>)repT=T.substring(tpIdx+<span class=\"hljs-number\">1</span>,tpIdx2)\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plus</span>(<span class=\"hljs-params\">s</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> carry=<span class=\"hljs-number\">1</span>, res=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=s.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n      <span class=\"hljs-keyword\">let</span> cur=+s[i]+carry\n      <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-number\">10</span>){cur=<span class=\"hljs-number\">0</span>;carry=<span class=\"hljs-number\">1</span>}\n      <span class=\"hljs-keyword\">else</span> carry=<span class=\"hljs-number\">0</span>\n      res=cur+res\n    }\n    <span class=\"hljs-keyword\">if</span>(carry&gt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> carry+res\n    <span class=\"hljs-keyword\">return</span> res\n  }\n  \n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/^9+$/</span>.test(repS)){\n    <span class=\"hljs-keyword\">if</span>(noRepS)noRepS=plus(noRepS)\n    <span class=\"hljs-keyword\">else</span> intS=+intS+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/^10+/</span>.test(noRepS)){\n      intS=+intS+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">''</span>\n      noRepS=<span class=\"hljs-string\">''</span>\n    }\n    repS=<span class=\"hljs-string\">''</span>\n  }\n    \n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/^9+$/</span>.test(repT)){\n    <span class=\"hljs-keyword\">if</span>(noRepT)noRepT=plus(noRepT)\n    <span class=\"hljs-keyword\">else</span> intT=+intT+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/^10+/</span>.test(noRepT)){\n      intT=+intT+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">''</span>\n      noRepT=<span class=\"hljs-string\">''</span>\n    }\n    repT=<span class=\"hljs-string\">''</span>\n  }\n  <span class=\"hljs-keyword\">if</span>(repS===<span class=\"hljs-string\">\"0\"</span>)repS=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">if</span>(repT===<span class=\"hljs-string\">\"0\"</span>)repT=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">let</span> longS=intS+<span class=\"hljs-string\">'.'</span>+noRepS+(repS?repS.repeat(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">100</span>/repS.length)):<span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">let</span> longT=intT+<span class=\"hljs-string\">'.'</span>+noRepT+(repT?repT.repeat(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">100</span>/repT.length)):<span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>,n=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>((i&lt;longS.length || j&lt;longT.length) &amp;&amp; n&lt;<span class=\"hljs-number\">100</span>){\n    <span class=\"hljs-keyword\">if</span>(longS[i]==<span class=\"hljs-literal\">null</span> &amp;&amp; longT[j]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span>(longS[i]==<span class=\"hljs-literal\">null</span> &amp;&amp; longT[j]===<span class=\"hljs-string\">\"0\"</span> || \n       longS[i]===<span class=\"hljs-string\">\"0\"</span> &amp;&amp; longT[j]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">if</span>(longS[i]!==longT[j])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    n++;i++;j++\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "equal-rational-numbers",
  "content": "<p>给定两个字符串 <code>S</code> 和 <code>T</code>，每个字符串代表一个非负有理数，只有当它们表示相同的数字时才返回 <strong>true</strong>；否则，返回 <strong>false</strong>。字符串中可以使用括号来表示有理数的重复部分。</p>\n\n<p>通常，有理数最多可以用三个部分来表示：<em>整数部分</em>&nbsp;<code>&lt;IntegerPart&gt;</code>、<em>小数非重复部分</em>&nbsp;<code>&lt;NonRepeatingPart&gt;</code>&nbsp;和<em>小数重复部分</em>&nbsp;<code>&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>。数字可以用以下三种方法之一来表示：</p>\n\n<ul>\n\t<li><code>&lt;IntegerPart&gt;</code>（例：0，12，123）</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> （例：0.5，2.12，2.0001）</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>（例：0.1(6)，0.9(9)，0.00(1212)）</li>\n</ul>\n\n<p>十进制展开的重复部分通常在一对圆括号内表示。例如：</p>\n\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\n\n<p>0.1(6) 或&nbsp;0.1666(6) 或&nbsp;0.166(66) 都是&nbsp;1 / 6 的正确表示形式。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;0.(52)&quot;, T = &quot;0.5(25)&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>因为 &quot;0.(52)&quot; 代表 0.52525252...，而 &quot;0.5(25)&quot; 代表 0.52525252525.....，则这两个字符串表示相同的数字。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;0.1666(6)&quot;, T = &quot;0.166(66)&quot;\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;0.9(9)&quot;, T = &quot;1.&quot;\n<strong>输出：</strong>true\n<strong>解释：\n</strong>&quot;0.9(9)&quot; 代表 0.999999999... 永远重复，等于 1 。[<a href=\"https://baike.baidu.com/item/0.999…/5615429?fr=aladdin\" target=\"_blank\">有关说明，请参阅此链接</a>]\n&quot;1.&quot; 表示数字 1，其格式正确：(IntegerPart) = &quot;1&quot; 且 (NonRepeatingPart) = &quot;&quot; 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>每个部分仅由数字组成。</li>\n\t<li>整数部分&nbsp;<code>&lt;IntegerPart&gt;</code>&nbsp;不会以 2 个或更多的零开头。（对每个部分的数字没有其他限制）。</li>\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4 </code></li>\n</ol>\n"
}
