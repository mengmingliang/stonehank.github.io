{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} val\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> insertIntoBST = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, val</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TreeNode(val)\n  <span class=\"hljs-keyword\">if</span>(root.val&lt;=val)root.right=insertIntoBST(root.right,val) \n  <span class=\"hljs-keyword\">else</span> root.left=insertIntoBST(root.left,val)\n  <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "insert-into-a-binary-search-tree",
  "content": "<p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。</p>\n\n<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p>\n\n<p>例如,&nbsp;</p>\n\n<pre>\n给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和 插入的值: 5\n</pre>\n\n<p>你可以返回这个二叉搜索树:</p>\n\n<pre>\n         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 5\n</pre>\n\n<p>或者这个树也是有效的:</p>\n\n<pre>\n         5\n       /   \\\n      2     7\n     / \\   \n    1   3\n         \\\n          4\n</pre>\n"
}
