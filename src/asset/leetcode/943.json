{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} A\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestSuperstring = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=A.length\n  <span class=\"hljs-keyword\">let</span> insert=<span class=\"hljs-built_in\">Array</span>(N).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">0</span>))\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">continue</span>\n      insert[i][j]=calcRepeat(A[i],A[j])\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calcRepeat</span>(<span class=\"hljs-params\">s1,s2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-built_in\">Math</span>.min(s1.length,s2.length)\n    <span class=\"hljs-keyword\">let</span> candi=s2.substring(<span class=\"hljs-number\">0</span>,len)\n    <span class=\"hljs-keyword\">let</span> sID=s1.length-candi.length\n    <span class=\"hljs-keyword\">let</span> cID=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=sID;i&lt;s1.length;i++){\n      <span class=\"hljs-keyword\">if</span>(s1[i]===candi[cID]){\n        cID++\n      }<span class=\"hljs-keyword\">else</span>{\n        cID=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">if</span>(candi[cID]===s1[i])cID++\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> cID\n  }\n\n  <span class=\"hljs-keyword\">let</span> finalState=(<span class=\"hljs-number\">1</span>&lt;&lt;N) <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">1</span>&lt;&lt;N).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-literal\">null</span>))\n  <span class=\"hljs-keyword\">let</span> maxLen=<span class=\"hljs-number\">-1</span>,ans=<span class=\"hljs-string\">''</span>\n\n  <span class=\"hljs-keyword\">return</span> dfs(<span class=\"hljs-number\">0</span>,<span class=\"hljs-literal\">null</span>)[<span class=\"hljs-number\">1</span>]\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">state,lastI</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(state===finalState)<span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">''</span>]\n    <span class=\"hljs-keyword\">if</span>(dp[state][lastI]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> dp[state][lastI]\n    <span class=\"hljs-keyword\">let</span> curLen=<span class=\"hljs-number\">-1</span>,res=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n      <span class=\"hljs-keyword\">if</span>((state &amp; <span class=\"hljs-number\">1</span>&lt;&lt;i)!=<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">let</span> melt=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">if</span>(lastI!=<span class=\"hljs-literal\">null</span>)melt=insert[lastI][i]\n      <span class=\"hljs-keyword\">let</span> meltStr=A[i].substring(melt)\n      <span class=\"hljs-keyword\">let</span> [curlong,curres]=dfs(state | <span class=\"hljs-number\">1</span>&lt;&lt;i,i)\n      <span class=\"hljs-keyword\">if</span>(curlong+melt&gt;curLen){\n        curLen=curlong+melt\n        res=meltStr+curres\n      }\n    }\n    dp[state][lastI]=[curLen,res]\n    <span class=\"hljs-keyword\">return</span> [curLen,res]\n  }\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-the-shortest-superstring",
  "content": "<p>给定一个字符串数组 <code>A</code>，找到以&nbsp;<code>A</code>&nbsp;中每个字符串作为子字符串的最短字符串。</p>\n\n<p>我们可以假设 <code>A</code> 中没有字符串是 <code>A</code> 中另一个字符串的子字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>输出：</strong>&quot;alexlovesleetcode&quot;\n<strong>解释：</strong>&quot;alex&quot;，&quot;loves&quot;，&quot;leetcode&quot; 的所有排列都会被接受。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>输出：</strong>&quot;gctaagttcatgcatc&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
