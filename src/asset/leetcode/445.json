{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> addTwoNumbers = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">l1, l2</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLen</span>(<span class=\"hljs-params\">list</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> size=<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span>(list=list.next){\n            <span class=\"hljs-comment\">// list=list.next</span>\n            size++\n        }\n        <span class=\"hljs-keyword\">return</span> size\n    }  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillList</span>(<span class=\"hljs-params\">list,n</span>)</span>{\n        <span class=\"hljs-keyword\">while</span>(n&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-number\">0</span>)\n            newNode.next=list\n            list=newNode\n            n--\n        }\n        <span class=\"hljs-keyword\">return</span> list\n    }\n    <span class=\"hljs-keyword\">let</span> len1=getLen(l1)\n    <span class=\"hljs-keyword\">let</span> len2=getLen(l2)\n    <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">if</span>(len1&gt;len2){\n        l2=fillList(l2,len1-len2)\n        result=fillList(result,len1<span class=\"hljs-number\">-1</span>)\n    }\n    <span class=\"hljs-keyword\">else</span>{\n        l1=fillList(l1,len2-len1)\n        result=fillList(result,len2<span class=\"hljs-number\">-1</span>)\n    }\n    \n   <span class=\"hljs-keyword\">let</span> last=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">iterator</span>(<span class=\"hljs-params\">node1,node2,result</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node1 &amp;&amp; !node2)<span class=\"hljs-keyword\">return</span>\n        iterator(node1.next,node2.next,result.next)\n        <span class=\"hljs-keyword\">let</span> sum=node1.val+node2.val+last\n        <span class=\"hljs-keyword\">if</span>(sum&gt;=<span class=\"hljs-number\">10</span>){\n            last=<span class=\"hljs-built_in\">Math</span>.floor(sum/<span class=\"hljs-number\">10</span>)\n            sum=sum<span class=\"hljs-number\">-10</span>\n        }<span class=\"hljs-keyword\">else</span> last=<span class=\"hljs-number\">0</span>\n        result.val=sum\n    }\n    iterator(l1,l2,result)\n    <span class=\"hljs-keyword\">if</span>(last&gt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> ListNode(last)\n        newNode.next=result\n        result=newNode\n    }\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "add-two-numbers-ii",
  "content": "<p>给定两个<strong>非空</strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。</p>\n\n<p>&nbsp;</p>\n\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n"
}
