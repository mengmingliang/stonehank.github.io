{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> addTwoNumbers = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">l1, l2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack1=[],stack2=[]\n  <span class=\"hljs-keyword\">while</span>(l1){\n    stack1.push(l1.val)\n    l1=l1.next\n  }\n  <span class=\"hljs-keyword\">while</span>(l2){\n    stack2.push(l2.val)\n    l2=l2.next\n  }\n  <span class=\"hljs-keyword\">let</span> carry=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-literal\">null</span>\n  \n  <span class=\"hljs-keyword\">while</span>(stack1.length&gt;<span class=\"hljs-number\">0</span> || stack2.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(stack1.length===<span class=\"hljs-number\">0</span>)sum=stack2.pop()+carry\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(stack2.length===<span class=\"hljs-number\">0</span>)sum=stack1.pop()+carry\n    <span class=\"hljs-keyword\">else</span> sum=stack1.pop()+stack2.pop()+carry\n    carry=~~(sum/<span class=\"hljs-number\">10</span>)\n    sum %= <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">new</span> ListNode(sum)\n    node.next=root\n    root=node\n  }\n  <span class=\"hljs-keyword\">if</span>(carry&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">new</span> ListNode(carry)\n    node.next=root\n    root=node\n  }\n  <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "add-two-numbers-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ol>\n<li>\n<p>反转输入，然后正常处理<code>加法</code>，最后再反转输出，关于反转参考<code>NO.206</code>。</p>\n</li>\n<li>\n<p>使用<code>stack</code>，先将<code>l1</code>和<code>l2</code>的所有<code>val</code>放入两个<code>stack</code>，在不断出栈处理加法。</p>\n</li>\n</ol>\n",
  "content": "<p>给定两个<strong>非空</strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。</p>\n\n<p>&nbsp;</p>\n\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n"
}
