{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    function getLen(list){\n        let size=1\n        while(list=list.next){\n            // list=list.next\n            size++\n        }\n        return size\n    }  \n    function fillList(list,n){\n        while(n>0){\n            let newNode=new ListNode(0)\n            newNode.next=list\n            list=newNode\n            n--\n        }\n        return list\n    }\n    let len1=getLen(l1)\n    let len2=getLen(l2)\n    let result=new ListNode(null)\n    if(len1>len2){\n        l2=fillList(l2,len1-len2)\n        result=fillList(result,len1-1)\n    }\n    else{\n        l1=fillList(l1,len2-len1)\n        result=fillList(result,len2-1)\n    }\n    \n   let last=0\n    function iterator(node1,node2,result){\n        if(!node1 && !node2)return\n        iterator(node1.next,node2.next,result.next)\n        let sum=node1.val+node2.val+last\n        if(sum>=10){\n            last=Math.floor(sum/10)\n            sum=sum-10\n        }else last=0\n        result.val=sum\n    }\n    iterator(l1,l2,result)\n    if(last>0){\n        let newNode=new ListNode(last)\n        newNode.next=result\n        result=newNode\n    }\n    return result\n};"
  ],
  "titleSlug": "add-two-numbers-ii",
  "content": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if you cannot modify the input lists? In other words, reversing the lists is not allowed.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\r\n<b>Output:</b> 7 -> 8 -> 0 -> 7\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定两个<strong>非空</strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。</p>\n\n<p>&nbsp;</p>\n\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n\n<p><strong>进阶:</strong></p>\n\n<p>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n"
}
