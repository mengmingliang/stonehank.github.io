{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> binaryGap = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-literal\">null</span>,len=<span class=\"hljs-number\">0</span>,maxLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(N&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">if</span>(N%<span class=\"hljs-number\">2</span>===<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">if</span>(start!=<span class=\"hljs-literal\">null</span>){\n        maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,len-start)\n      }\n      start=len\n    }\n    len++\n    N=N&gt;&gt;<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> maxLen\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-gap",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>最简单的方法就是先转换成二进制，在对二进制字符串进行分析。</p>\n<p>另外一种，但可以通过<code>&gt;&gt;</code>去遍历一个数的<code>位</code>，检查当前<code>位</code>，如果为<code>1</code>，则记录上一次<code>1</code>与这一次的距离。</p>\n<p>例如： <code>N=105</code></p>\n<p>它的二进制是<code>1101001</code>，<code>105 % 2===1</code>说明最后一位就是<code>1</code>，记录位置<code>0</code>，</p>\n<p>接着<code>N=105&gt;&gt;1</code>，<code>N=52</code>，<code>52 % 2===0</code>，说明这一位是<code>0</code>，当前位置为<code>1</code>，</p>\n<p>接着<code>N=52&gt;&gt;1</code>，<code>N=26</code>，同样这一位是<code>0</code>，当前位置为<code>2</code>，</p>\n<p><code>26&gt;&gt;1 % 2===1</code>，这一位是<code>1</code>，当前位置是<code>3</code>，获取距离<code>3-0=3</code>，接着记录位置<code>3</code>，</p>\n<p>...</p>\n<p>最大距离就是<code>3</code>。</p>\n",
  "content": "<p>给定一个正整数&nbsp;<code>N</code>，找到并返回 <code>N</code>&nbsp;的二进制表示中两个连续的 1 之间的最长距离。&nbsp;</p>\n\n<p>如果没有两个连续的 1，返回 <code>0</code> 。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>22\n<strong>输出：</strong>2\n<strong>解释：</strong>\n22 的二进制是 0b10110 。\n在 22 的二进制表示中，有三个 1，组成两对连续的 1 。\n第一对连续的 1 中，两个 1 之间的距离为 2 。\n第二对连续的 1 中，两个 1 之间的距离为 1 。\n答案取两个距离之中最大的，也就是 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>5\n<strong>输出：</strong>2\n<strong>解释：</strong>\n5 的二进制是 0b101 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>6\n<strong>输出：</strong>1\n<strong>解释：</strong>\n6 的二进制是 0b110 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>8\n<strong>输出：</strong>0\n<strong>解释：</strong>\n8 的二进制是 0b1000 。\n在 8 的二进制表示中没有连续的 1，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ul>\n"
}
