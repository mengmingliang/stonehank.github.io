{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n  let res=new ListNode()\n  let carry=0\n  let node=res\n  while(l1 || l2 || carry>0){\n    let v1=l1?l1.val:0,\n      v2=l2?l2.val:0\n    let sum=v1+v2+carry\n    carry=Math.floor(sum/10)\n    sum=sum%10\n    node.next=new ListNode(sum)\n    if(l1)l1=l1.next\n    if(l2)l2=l2.next\n    node=node.next\n  }\n  return res.next\n};"
  ],
  "titleSlug": "add-two-numbers",
  "content": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n",
  "translatedContent": "<p>给出两个&nbsp;<strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照&nbsp;<strong>逆序</strong>&nbsp;的方式存储的，并且它们的每个节点只能存储&nbsp;<strong>一位</strong>&nbsp;数字。</p>\n\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出：</strong>7 -&gt; 0 -&gt; 8\n<strong>原因：</strong>342 + 465 = 807\n</pre>\n"
}
