{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> addTwoNumbers = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">l1, l2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">new</span> ListNode()\n  <span class=\"hljs-keyword\">let</span> carry=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> node=res\n  <span class=\"hljs-keyword\">while</span>(l1 || l2 || carry&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> v1=l1?l1.val:<span class=\"hljs-number\">0</span>,\n      v2=l2?l2.val:<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> sum=v1+v2+carry\n    carry=<span class=\"hljs-built_in\">Math</span>.floor(sum/<span class=\"hljs-number\">10</span>)\n    sum=sum%<span class=\"hljs-number\">10</span>\n    node.next=<span class=\"hljs-keyword\">new</span> ListNode(sum)\n    <span class=\"hljs-keyword\">if</span>(l1)l1=l1.next\n    <span class=\"hljs-keyword\">if</span>(l2)l2=l2.next\n    node=node.next\n  }\n  <span class=\"hljs-keyword\">return</span> res.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "add-two-numbers",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>和<code>NO.415</code>字符串的相加的原理一样。</p>\n<p>只不过数据结构换成链表，而且给的是反向链表，方便我们进行进位操作。</p>\n<p>对<code>l1</code>和<code>l2</code>只需要逐步遍历，如果一方不存在，则认为<code>val</code>为0。</p>\n<p>注意最后遍历完还要检查<code>carry</code>，如果<code>carry&gt;0</code>还在再次添加一个链表<code>new ListNode(carry)</code>。</p>\n",
  "content": "<p>给出两个&nbsp;<strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照&nbsp;<strong>逆序</strong>&nbsp;的方式存储的，并且它们的每个节点只能存储&nbsp;<strong>一位</strong>&nbsp;数字。</p>\n\n<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>\n\n<p>您可以假设除了数字 0 之外，这两个数都不会以 0&nbsp;开头。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>输出：</strong>7 -&gt; 0 -&gt; 8\n<strong>原因：</strong>342 + 465 = 807\n</pre>\n"
}
