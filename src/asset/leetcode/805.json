{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> splitArraySameAverage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(A.length&lt;=<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  A.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-comment\">// console.log(A)</span>\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> A){\n    sum+=n\n  }\n  <span class=\"hljs-keyword\">let</span> mem=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n\n  <span class=\"hljs-keyword\">let</span> avg=sum/A.length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> A){\n    <span class=\"hljs-keyword\">if</span>(n===avg)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">let</span> find=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calcAvg</span>(<span class=\"hljs-params\">startIdx,curSum,len</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(find)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(len===<span class=\"hljs-built_in\">Math</span>.ceil(A.length/<span class=\"hljs-number\">2</span>))<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(mem.has(startIdx+<span class=\"hljs-string\">'-'</span>+curSum+<span class=\"hljs-string\">'-'</span>+len))<span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">let</span> curAvg=curSum/len\n    <span class=\"hljs-keyword\">if</span>(curAvg===avg){\n      <span class=\"hljs-keyword\">let</span> restSum=sum-curSum\n      <span class=\"hljs-keyword\">let</span> restLen=A.length-len\n      <span class=\"hljs-keyword\">let</span> restAvg=restSum/restLen\n      <span class=\"hljs-keyword\">if</span>(restAvg===curAvg)<span class=\"hljs-keyword\">return</span> find=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(startIdx===<span class=\"hljs-built_in\">Math</span>.ceil(A.length/<span class=\"hljs-number\">2</span>))<span class=\"hljs-keyword\">return</span>\n    calcAvg(startIdx+<span class=\"hljs-number\">1</span>,curSum+A[startIdx],len+<span class=\"hljs-number\">1</span>)\n    mem.set(startIdx+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">'-'</span>+(curSum+A[startIdx])+<span class=\"hljs-string\">'-'</span>+(len+<span class=\"hljs-number\">1</span>),<span class=\"hljs-literal\">true</span>)\n    calcAvg(startIdx+<span class=\"hljs-number\">1</span>,curSum,len)\n    mem.set(startIdx+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">'-'</span>+curSum+<span class=\"hljs-string\">'-'</span>+(len),<span class=\"hljs-literal\">true</span>)\n  }\n  calcAvg(<span class=\"hljs-number\">1</span>,A[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">return</span> find\n};\n</code></pre>\n"
  ],
  "titleSlug": "split-array-with-same-average",
  "content": "<p>给定的整数数组 A ，我们要将 A数组 中的每个元素移动到 B数组 或者 C数组中。（B数组和C数组在开始的时候都为空）</p>\n\n<p>返回<code>true</code> ，当且仅当在我们的完成这样的移动后，可使得B数组的平均值和C数组的平均值相等，并且B数组和C数组都不为空。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \n[1,2,3,4,5,6,7,8]\n<strong>输出:</strong> true\n<strong>解释: </strong>我们可以将数组分割为 [1,4,5,8] 和 [2,3,6,7], 他们的平均值都是4.5。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>A</code> 数组的长度范围为 <code>[1, 30]</code>.</li>\n\t<li><code>A[i]</code> 的数据范围为 <code>[0, 10000]</code>.</li>\n</ul>\n"
}
