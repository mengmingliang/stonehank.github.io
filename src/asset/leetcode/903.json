{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numPermsDISequence = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-comment\">// let mem=new Map()</span>\n  <span class=\"hljs-comment\">// let MOD=1e9+7</span>\n  <span class=\"hljs-comment\">// function calc(S){</span>\n  <span class=\"hljs-comment\">//   if(S.length===1)return 1</span>\n  <span class=\"hljs-comment\">//   if(mem.has(S)) return mem.get(S)</span>\n  <span class=\"hljs-comment\">//   let hash={}</span>\n  <span class=\"hljs-comment\">//   let sum=0</span>\n  <span class=\"hljs-comment\">//   for(let i=0;i&lt;S.length;i++){</span>\n  <span class=\"hljs-comment\">//     let curS=S.substring(0,i)+S.substring(i+1)</span>\n  <span class=\"hljs-comment\">//     if(hash[curS])continue</span>\n  <span class=\"hljs-comment\">//     hash[curS]=true</span>\n  <span class=\"hljs-comment\">//     let res=calc(curS)</span>\n  <span class=\"hljs-comment\">//     mem.set(curS,res)</span>\n  <span class=\"hljs-comment\">//     sum=(sum+res)% MOD</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   mem.set(S,sum)</span>\n  <span class=\"hljs-comment\">//   return sum </span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return calc(S) % MOD</span>\n  \n  <span class=\"hljs-keyword\">let</span> n = S.length, mod = <span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>\n  <span class=\"hljs-keyword\">let</span> dp = []\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n+<span class=\"hljs-number\">1</span>;j++){\n      dp[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    <span class=\"hljs-keyword\">if</span> (S[i] == <span class=\"hljs-string\">'I'</span>){\n      <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n - i; j++){\n        cur = (cur + dp[i][j]) % mod;  \n        dp[i + <span class=\"hljs-number\">1</span>][j] = cur        \n      }\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = n - i - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span>; j--){\n        cur = (cur + dp[i][j + <span class=\"hljs-number\">1</span>]) % mod;\n        dp[i + <span class=\"hljs-number\">1</span>][j] = cur\n      }\n    }\n  <span class=\"hljs-keyword\">return</span> dp[n][<span class=\"hljs-number\">0</span>];\n};\n</code></pre>\n"
  ],
  "titleSlug": "valid-permutations-for-di-sequence",
  "hasThinking": false,
  "content": "<p>我们给出 <code>S</code>，一个源于&nbsp;<code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;的长度为 <code>n</code>&nbsp;的字符串 。（这些字母代表 &ldquo;减少&rdquo; 和 &ldquo;增加&rdquo;。）<br>\n<em>有效排列</em>&nbsp;是对整数 <code>{0, 1, ..., n}</code>&nbsp;的一个排列&nbsp;<code>P[0], P[1], ..., P[n]</code>，使得对所有的&nbsp;<code>i</code>：</p>\n\n<ul>\n\t<li>如果 <code>S[i] == &#39;D&#39;</code>，那么&nbsp;<code>P[i] &gt; P[i+1]</code>，以及；</li>\n\t<li>如果 <code>S[i] == &#39;I&#39;</code>，那么 <code>P[i] &lt; P[i+1]</code>。</li>\n</ul>\n\n<p>有多少个有效排列？因为答案可能很大，所以请<strong>返回你的答案模</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>&quot;DID&quot;\n<strong>输出：</strong>5\n<strong>解释：</strong>\n(0, 1, 2, 3) 的五个有效排列是：\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>S</code> 仅由集合 <code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;中的字符组成。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
