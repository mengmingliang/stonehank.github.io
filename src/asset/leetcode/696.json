{
  "code": [
    "/**\n * @param {string} s\n * @return {number}\n */\nvar countBinarySubstrings = function(s) {\n    \n    let cur=1,prev=0,res=0\n    for(let i=1;i<s.length;i++){\n        if(s[i]!==s[i-1]){\n            res+=Math.min(cur,prev)\n            prev=cur;\n            cur=1\n        }else{\n            cur++\n        }\n    }\n    return res+Math.min(cur,prev)\n    \n    \n    // let arr=[0,0],lastNum=s[0],gap=false\n    // let sum=0\n    // for(let i=0;i<s.length;i++){\n    //     if(s[i]!==lastNum){\n    //         arr[s[i]]++\n    //         gap=s[i]\n    //     }\n    //     if(s[i]===lastNum){\n    //         if(gap!==false){\n    //             i=i-1;\n    //             sum+=Math.min(arr[0],arr[1])\n    //             arr[lastNum]=0\n    //             lastNum=gap\n    //             continue;\n    //         }\n    //         arr[s[i]]++\n    //     }\n    // }\n    // return sum+Math.min(arr[1],arr[0])\n    \n    // let reg01=/(0)+(\\1)*(1)+(\\3)*/g\n    // let reg10=/(1)+(\\1)*(0)+(\\3)*/g\n    // let match1=s.match(reg01)||[]\n    // let match2=s.match(reg10)||[]\n    // let sum=0\n    // for(let i=0;i<match1.length;i++){\n    //     sum+= Math.min(match1[i].match(/0/g).length,match1[i].match(/1/g).length)\n    // }\n    // for(let i=0;i<match2.length;i++){\n    //     sum+= Math.min(match2[i].match(/0/g).length,match2[i].match(/1/g).length)\n    // }\n    // return sum\n    \n};"
  ],
  "titleSlug": "count-binary-substrings",
  "content": "<p>Give a string <code>s</code>, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. \r\n</p>\r\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"00110011\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\r\n<br>Notice that some of these substrings repeat and are counted the number of times they occur.\r\n<br>Also, \"00110011\" is not a valid substring because <b>all</b> the 0's (and 1's) are not grouped together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"10101\"\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>s.length</code> will be between 1 and 50,000.</li>\r\n<li><code>s</code> will only consist of \"0\" or \"1\" characters.</li>\r\n</p>",
  "translatedContent": "<p>给定一个字符串&nbsp;<code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。</p>\n\n<p>重复出现的子串要计算它们出现的次数。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;00110011&quot;\n<strong>输出:</strong> 6\n<strong>解释:</strong> 有6个子串具有相同数量的连续1和0：&ldquo;0011&rdquo;，&ldquo;01&rdquo;，&ldquo;1100&rdquo;，&ldquo;10&rdquo;，&ldquo;0011&rdquo; 和 &ldquo;01&rdquo;。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，&ldquo;00110011&rdquo;不是有效的子串，因为所有的0（和1）没有组合在一起。\n</pre>\n\n<p><strong>示例 2 :</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;10101&quot;\n<strong>输出:</strong> 4\n<strong>解释:</strong> 有4个子串：&ldquo;10&rdquo;，&ldquo;01&rdquo;，&ldquo;10&rdquo;，&ldquo;01&rdquo;，它们具有相同数量的连续1和0。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>s.length</code>&nbsp;在1到50,000之间。</li>\n\t<li><code>s</code>&nbsp;只包含&ldquo;0&rdquo;或&ldquo;1&rdquo;字符。</li>\n</ul>\n"
}
