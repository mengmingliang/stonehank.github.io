{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // Definition for a Node.\n * function Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Node} head\n * @return {Node}\n */</span>\n<span class=\"hljs-keyword\">var</span> flatten = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> _flatten(head)[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_flatten</span>(<span class=\"hljs-params\">head</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> root=head,tail=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">while</span>(root){\n      <span class=\"hljs-keyword\">let</span> nxt=root.next\n      <span class=\"hljs-keyword\">if</span>(root.child){\n        <span class=\"hljs-keyword\">let</span> [subHead,subTail]=_flatten(root.child)\n        root.child=<span class=\"hljs-literal\">null</span>\n        root.next=subHead\n        subHead.prev=root\n        subTail.next=nxt\n        <span class=\"hljs-keyword\">if</span>(nxt)nxt.prev=subTail\n        <span class=\"hljs-keyword\">else</span> tail=subTail\n      }\n      <span class=\"hljs-keyword\">if</span>(!nxt &amp;&amp; !tail)tail=root\n      root=nxt\n    }    \n    <span class=\"hljs-keyword\">return</span> [head,tail]\n  }\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "flatten-a-multilevel-doubly-linked-list",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>遍历<code>root</code>，发现存在<code>child</code>，则递归<code>child</code>，2个注意的地方：</p>\n<ol>\n<li>每次递归处理完<code>child</code>，需要将<code>root.child</code>设置为<code>null</code>。</li>\n<li>每次递归处理完<code>child</code>的返回值需要一个头，一个尾，分别**双向连接*处理<code>child</code>之前的<code>root</code>和<code>root.next</code>。</li>\n</ol>\n<hr>\n",
  "content": "<p>您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p>\n\n<p>扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\n<strong>输出:</strong>\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>以上示例的说明:</strong></p>\n\n<p>给出以下多级双向链表:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\" style=\"width: 640px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p>我们应该返回如下所示的扁平双向链表:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"width: 1100px;\"></pre>\n"
}
