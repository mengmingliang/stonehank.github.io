{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @param {number[][]} mines\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> orderOfLargestPlusSign = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N, mines</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      dp[i][j]=<span class=\"hljs-literal\">Infinity</span>\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> m <span class=\"hljs-keyword\">of</span> mines){\n    dp[m[<span class=\"hljs-number\">0</span>]][m[<span class=\"hljs-number\">1</span>]]=<span class=\"hljs-number\">0</span>\n  }\n  \n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n      <span class=\"hljs-keyword\">let</span> l=<span class=\"hljs-number\">0</span>,r=<span class=\"hljs-number\">0</span>,u=<span class=\"hljs-number\">0</span>,d=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>,k=N<span class=\"hljs-number\">-1</span>;j&lt;N;j++,k--){\n      \n      <span class=\"hljs-keyword\">if</span>(dp[i][j]===<span class=\"hljs-number\">0</span>)l=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">else</span> l++\n      dp[i][j]=<span class=\"hljs-built_in\">Math</span>.min(dp[i][j],l)\n      <span class=\"hljs-keyword\">if</span>(dp[i][k]===<span class=\"hljs-number\">0</span>)r=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">else</span> r++\n      dp[i][k]=<span class=\"hljs-built_in\">Math</span>.min(dp[i][k],r)\n      <span class=\"hljs-keyword\">if</span>(dp[j][i]===<span class=\"hljs-number\">0</span>)u=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">else</span> u++\n      dp[j][i]=<span class=\"hljs-built_in\">Math</span>.min(dp[j][i],u)\n      <span class=\"hljs-keyword\">if</span>(dp[k][i]===<span class=\"hljs-number\">0</span>)d=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">else</span> d++\n      dp[k][i]=<span class=\"hljs-built_in\">Math</span>.min(dp[k][i],d)\n      \n    }\n  }\n\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      max=<span class=\"hljs-built_in\">Math</span>.max(max,dp[i][j])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "largest-plus-sign",
  "content": "<p>在一个大小在 (0, 0) 到 (N-1, N-1) 的2D网格&nbsp;<code>grid</code>&nbsp;中，除了在&nbsp;<code>mines</code>&nbsp;中给出的单元为&nbsp;<code>0</code>，其他每个单元都是&nbsp;<code>1</code>。网格中包含&nbsp;<code>1</code>&nbsp;的最大的轴对齐加号标志是多少阶？返回加号标志的阶数。如果未找到加号标志，则返回 0。</p>\n\n<p>一个&nbsp;<strong>k</strong>&quot; 阶由&nbsp;<em><code>1</code></em>&nbsp;组成的&ldquo;轴对称&rdquo;加号标志具有中心网格&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;，以及4个从中心向上、向下、向左、向右延伸，长度为&nbsp;<code>k-1</code>，由&nbsp;<code>1</code>&nbsp;组成的臂。下面给出&nbsp;<strong>k</strong>&quot; 阶&ldquo;轴对称&rdquo;加号标志的示例。注意，只有加号标志的所有网格要求为 1，别的网格可能为 0 也可能为 1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>k 阶轴对称加号标志示例:</strong></p>\n\n<pre>\n阶 1:\n000\n0<strong>1</strong>0\n000\n\n阶 2:\n00000\n00<strong>1</strong>00\n0<strong>111</strong>0\n00<strong>1</strong>00\n00000\n\n阶 3:\n0000000\n000<strong>1</strong>000\n000<strong>1</strong>000\n0<strong>11111</strong>0\n000<strong>1</strong>000\n000<strong>1</strong>000\n0000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 5, mines = [[4, 2]]\n<strong>输出:</strong> 2\n<strong>解释:\n</strong>\n11111\n11111\n1<em><strong>1</strong></em>111\n<em><strong>111</strong></em>11\n1<em><strong>1</strong></em>011\n\n在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 2, mines = []\n<strong>输出:</strong> 1\n<strong>解释:\n\n11\n11\n</strong>\n没有 2 阶加号标志，有 1 阶加号标志。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入:</strong> N = 1, mines = [[0, 0]]\n<strong>输出:</strong> 0\n<strong>解释:\n\n0\n</strong>\n没有加号标志，返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>整数<code>N</code> 的范围：&nbsp;<code>[1, 500]</code>.</li>\n\t<li><code>mines</code> 的最大长度为&nbsp;<code>5000</code>.</li>\n\t<li><code>mines[i]</code> 是长度为2的由2个&nbsp;<code>[0, N-1]</code>&nbsp;中的数组成.</li>\n\t<li><em>(另外,使用 C, C++, 或者&nbsp;C# 编程将以稍小的时间限制进行​​判断.)</em></li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
