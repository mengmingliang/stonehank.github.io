{
  "code": [
    "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n     let valid=[],flag=false,count=0,len=n\n     let res=[],helper=[]\n    for(let i=0;i<n;i++){\n        valid[i]=[]\n        helper[i]=[]\n        for(let j=0;j<n;j++){\n            valid[i][j]=0\n            helper[i][j]=null\n        }\n    }\n    \n    function setValid(i,j,reset){\n        for(let k=i;k<len;k++){\n            reset?valid[k][j]--:valid[k][j]++\n        }\n        for(let k=i,l=j;(k>=0 && k<len) && (l>=0 && l<len);k++,l++){\n            reset?valid[k][l]--:valid[k][l]++\n        }\n        for(let k=i,l=j;(k>=0 && k<len) && (l>=0 && l<len);k++,l--){\n            reset?valid[k][l]--:valid[k][l]++\n        }               \n    }\n\n    function dsf(row,col){\n        if(row===len){\n            let temp=[]\n            for(let x=0;x<len;x++){\n                let str=''\n                for(let y=0;y<len;y++){\n                    if(helper[x][y]==='Q')str+='Q'\n                    else str+='.'\n                }\n                temp.push(str)\n            }\n            res.push(temp)\n            return\n        }\n        let i=row\n            for(let j=col;j<len;j++){                \n                if(valid[i][j]!==0){\n                    continue\n                }else{    \n                    helper[i][j]='Q'                 \n                    setValid(i,j)\n                    dsf(i+1,0)\n                    setValid(i,j,true)\n                    helper[i][j]=null\n                }\n            }\n    }\n    dsf(0,0)\n    return res\n};"
  ],
  "titleSlug": "n-queens",
  "content": "<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>&times;<em>n</em> chessboard such that no two queens attack each other.</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\" style=\"width: 258px; height: 276px;\" /></p>\r\n\r\n<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>\r\n\r\n<p>Each solution contains a distinct board configuration of the <em>n</em>-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> [\r\n [&quot;.Q..&quot;,  // Solution 1\r\n  &quot;...Q&quot;,\r\n  &quot;Q...&quot;,\r\n  &quot;..Q.&quot;],\r\n\r\n [&quot;..Q.&quot;,  // Solution 2\r\n  &quot;Q...&quot;,\r\n  &quot;...Q&quot;,\r\n  &quot;.Q..&quot;]\r\n]\r\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above.\r\n</pre>\r\n",
  "translatedContent": "<p><em>n&nbsp;</em>皇后问题研究的是如何将 <em>n</em>&nbsp;个皇后放置在 <em>n</em>&times;<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\"></p>\n\n<p><small>上图为 8 皇后问题的一种解法。</small></p>\n\n<p>给定一个整数 <em>n</em>，返回所有不同的&nbsp;<em>n&nbsp;</em>皇后问题的解决方案。</p>\n\n<p>每一种解法包含一个明确的&nbsp;<em>n</em> 皇后问题的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 4\n<strong>输出:</strong> [\n [&quot;.Q..&quot;,  // 解法 1\n  &quot;...Q&quot;,\n  &quot;Q...&quot;,\n  &quot;..Q.&quot;],\n\n [&quot;..Q.&quot;,  // 解法 2\n  &quot;Q...&quot;,\n  &quot;...Q&quot;,\n  &quot;.Q..&quot;]\n]\n<strong>解释:</strong> 4 皇后问题存在两个不同的解法。\n</pre>\n"
}
