{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minCameraCover = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> s=dfs(root)\n  <span class=\"hljs-keyword\">return</span> res+(s===<span class=\"hljs-number\">0</span>?<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-comment\">// leaf: 0</span>\n  <span class=\"hljs-comment\">// covered, has camera: 1</span>\n  <span class=\"hljs-comment\">// covered, no camera: 2</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> covered=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> need=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(!node.left &amp;&amp; !node.right){\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(node.left){\n      <span class=\"hljs-keyword\">let</span> state=dfs(node.left)\n      <span class=\"hljs-keyword\">if</span>(state===<span class=\"hljs-number\">0</span>){\n        covered=<span class=\"hljs-number\">1</span>\n        need=<span class=\"hljs-literal\">true</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(state===<span class=\"hljs-number\">1</span>)covered=<span class=\"hljs-number\">2</span>\n      <span class=\"hljs-comment\">// if(state===2)covered=0</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(node.right){\n      <span class=\"hljs-keyword\">let</span> state=dfs(node.right)\n      <span class=\"hljs-keyword\">if</span>(state===<span class=\"hljs-number\">0</span>){\n        covered=<span class=\"hljs-number\">1</span>\n        need=<span class=\"hljs-literal\">true</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(state===<span class=\"hljs-number\">1</span>)covered=<span class=\"hljs-number\">2</span>\n      <span class=\"hljs-comment\">// if(state===2 &amp;&amp; covered===0)covered=0</span>\n    }\n    <span class=\"hljs-keyword\">if</span>(need){\n      res++\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-keyword\">return</span> covered\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-cameras",
  "content": "<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\n\n<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p>\n\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" style=\"height: 163px; width: 138px;\"></p>\n\n<pre><strong>输入：</strong>[0,0,null,0,0]\n<strong>输出：</strong>1\n<strong>解释：</strong>如图所示，一台摄像头足以监控所有节点。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" style=\"height: 312px; width: 139px;\"></p>\n\n<pre><strong>输入：</strong>[0,0,null,0,null,0,null,null,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n</pre>\n\n<p><br>\n<strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树的节点数的范围是&nbsp;<code>[1, 1000]</code>。</li>\n\t<li>每个节点的值都是 0。</li>\n</ol>\n"
}
