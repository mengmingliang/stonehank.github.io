{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> countSmaller = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n<span class=\"hljs-keyword\">let</span> stack=[]\n    <span class=\"hljs-keyword\">let</span> pre=[]\n    <span class=\"hljs-keyword\">let</span> result=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=nums.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n      <span class=\"hljs-keyword\">while</span>(stack.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; stack[stack.length<span class=\"hljs-number\">-1</span>]&gt;=nums[i]){\n        <span class=\"hljs-keyword\">let</span> last=stack.pop()\n        insert(last)\n      }\n      stack.push(nums[i])\n      <span class=\"hljs-keyword\">let</span> idx=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">if</span>(pre.length&gt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">if</span>(nums[i]&gt;pre[pre.length<span class=\"hljs-number\">-1</span>])idx=pre.length\n        <span class=\"hljs-keyword\">else</span> idx=bsEnd(pre,nums[i])\n      }\n      result.unshift(stack.length<span class=\"hljs-number\">-1</span>+idx)\n    }\n    <span class=\"hljs-keyword\">return</span> result\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">n</span>)</span>{\n      <span class=\"hljs-keyword\">if</span>(pre.length===<span class=\"hljs-number\">0</span> || pre[pre.length<span class=\"hljs-number\">-1</span>]&lt;n)pre.push(n)\n      <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">let</span> idx=bsEnd(pre,n)\n        pre.splice(idx,<span class=\"hljs-number\">0</span>,n)\n      }\n    }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "count-of-smaller-numbers-after-self",
  "content": "<p>给定一个整数数组 <em>nums</em>，按要求返回一个新数组&nbsp;<em>counts</em>。数组 <em>counts</em> 有该性质： <code>counts[i]</code> 的值是&nbsp; <code>nums[i]</code> 右侧小于&nbsp;<code>nums[i]</code> 的元素的数量。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [5,2,6,1]\n<strong>输出:</strong> <code>[2,1,1,0] \n<strong>解释:</strong></code>\n5 的右侧有 <strong>2 </strong>个更小的元素 (2 和 1).\n2 的右侧仅有 <strong>1 </strong>个更小的元素 (1).\n6 的右侧有 <strong>1 </strong>个更小的元素 (1).\n1 的右侧有 <strong>0 </strong>个更小的元素.\n</pre>\n"
}
