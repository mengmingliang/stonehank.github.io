{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} commands\n * @param {number[][]} obstacles\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> robotSim = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">commands, obstacles</span>) </span>{\n  <span class=\"hljs-comment\">// 0:up,1:right,2:down,3:left</span>\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>]]  \n  <span class=\"hljs-keyword\">let</span> obsHash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> obs <span class=\"hljs-keyword\">of</span> obstacles) obsHash.set(obs[<span class=\"hljs-number\">0</span>]+<span class=\"hljs-string\">\"-\"</span>+obs[<span class=\"hljs-number\">1</span>],<span class=\"hljs-literal\">true</span>)\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> state=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> curPos=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> cur <span class=\"hljs-keyword\">of</span> commands){\n    <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-number\">-1</span>){\n      state=(state+<span class=\"hljs-number\">1</span>)%<span class=\"hljs-number\">4</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-number\">-2</span>){\n      state=(state+<span class=\"hljs-number\">3</span>)%<span class=\"hljs-number\">4</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;cur;j++){\n        <span class=\"hljs-keyword\">if</span>(!obsHash.has((curPos[<span class=\"hljs-number\">0</span>]+moves[state][<span class=\"hljs-number\">0</span>])+<span class=\"hljs-string\">'-'</span>+(curPos[<span class=\"hljs-number\">1</span>]+moves[state][<span class=\"hljs-number\">1</span>]))){\n          curPos[<span class=\"hljs-number\">0</span>]+=moves[state][<span class=\"hljs-number\">0</span>]\n          curPos[<span class=\"hljs-number\">1</span>]+=moves[state][<span class=\"hljs-number\">1</span>] \n        }\n      }\n    }\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,<span class=\"hljs-built_in\">Math</span>.pow(curPos[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">2</span>)+<span class=\"hljs-built_in\">Math</span>.pow(curPos[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">2</span>))\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "walking-robot-simulation",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>由于题目给出了<code>1 &lt;= x &lt;= 9</code>，因此我们可以使用模拟。</p>\n<p>首先用<code>map</code>保存所有<code>obstacles</code>，在构建出机器人行走的方向<code>moves</code>，每次遇到<code>-1</code>，则方向索引<code>state++</code>，遇到<code>-2</code>，则<code>state--</code>，\n行走步数则遍历并且模拟行走，并且检查是否存在障碍，遇到障碍直接停止。</p>\n<p>一个大坑：在行走的<strong>过程中</strong>不断找最大的平方和。</p>\n",
  "content": "<p>机器人在一个无限大小的网格上行走，从点&nbsp;(0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：</p>\n\n<ul>\n\t<li><code>-2</code>：向左转&nbsp;90 度</li>\n\t<li><code>-1</code>：向右转 90 度</li>\n\t<li><code>1 &lt;= x &lt;= 9</code>：向前移动&nbsp;<code>x</code>&nbsp;个单位长度</li>\n</ul>\n\n<p>在网格上有一些格子被视为障碍物。</p>\n\n<p>第 <code>i</code>&nbsp;个障碍物位于网格点 &nbsp;<code>(obstacles[i][0], obstacles[i][1])</code></p>\n\n<p>如果机器人试图走到障碍物上方，那么它将停留在障碍物的前一个网格方块上，但仍然可以继续该路线的其余部分。</p>\n\n<p>返回从原点到机器人的最大欧式距离的<strong>平方</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,3], obstacles = []\n<strong>输出: </strong>25\n<strong>解释:</strong> 机器人将会到达 (3, 4)\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>输出: </strong>65\n<strong>解释</strong>: 机器人在左转走到 (1, 8) 之前将被困在 (1, 4) 处\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\n\t<li>答案保证小于&nbsp;<code>2 ^ 31</code></li>\n</ol>\n"
}
