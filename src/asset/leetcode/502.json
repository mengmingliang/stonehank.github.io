{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} k\n * @param {number} W\n * @param {number[]} Profits\n * @param {number[]} Capital\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMaximizedCapital = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">k, W, Profits, Capital</span>) </span>{\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PriorityQueueMax</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">let</span> heap=[<span class=\"hljs-literal\">null</span>]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swim</span>(<span class=\"hljs-params\">idx</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(idx&lt;<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-built_in\">Math</span>.floor(idx/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(heap[idx]&gt;heap[k]){\n      swap(heap,idx,k)\n      idx=k\n      swim(idx)\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sink</span>(<span class=\"hljs-params\">idx</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-built_in\">Math</span>.floor(idx*<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(k&gt;=heap.length)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(k&lt;heap.length &amp;&amp; heap[k+<span class=\"hljs-number\">1</span>] &amp;&amp; heap[k]&lt;heap[k+<span class=\"hljs-number\">1</span>]){\n      k++;\n    }\n\n    <span class=\"hljs-keyword\">if</span>(heap[idx]&lt;heap[k]){\n      swap(heap,idx,k)\n      idx=k\n      sink(idx)\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> temp=arr[i]\n    arr[i]=arr[j]\n    arr[j]=temp\n  }\n  <span class=\"hljs-keyword\">this</span>.insert=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) </span>{\n    heap.push(v)\n    swim(heap.length<span class=\"hljs-number\">-1</span>)\n  }\n  <span class=\"hljs-keyword\">this</span>.delMax=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) </span>{\n    swap(heap,<span class=\"hljs-number\">1</span>,heap.length<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-keyword\">let</span> max=heap.pop()\n    sink(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> max\n  }\n  <span class=\"hljs-keyword\">this</span>.max=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> heap[<span class=\"hljs-number\">1</span>]\n  }\n\n <span class=\"hljs-keyword\">this</span>.isEmpty=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> heap.length===<span class=\"hljs-number\">1</span>\n  }\n}\n  <span class=\"hljs-keyword\">let</span> res=W\n  <span class=\"hljs-keyword\">let</span> pq=<span class=\"hljs-keyword\">new</span> PriorityQueueMax()\n\n  Capital=Capital.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>[i,n]).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">1</span>]-b[<span class=\"hljs-number\">1</span>])\n\n  <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">0</span>,end=W\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start; i&lt;Capital.length &amp;&amp; Capital[i][<span class=\"hljs-number\">1</span>]&lt;=end;i++){\n\n    <span class=\"hljs-keyword\">let</span> pr=Profits[Capital[i][<span class=\"hljs-number\">0</span>]]\n    pq.insert(pr)\n\n    <span class=\"hljs-keyword\">if</span>(Capital[i+<span class=\"hljs-number\">1</span>]==<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">while</span>(k--&gt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">if</span>(!pq.isEmpty()){\n          <span class=\"hljs-keyword\">let</span> max=pq.delMax()\n          res+=max          \n        }<span class=\"hljs-keyword\">else</span>{\n          <span class=\"hljs-keyword\">break</span>\n        }\n      }\n      <span class=\"hljs-keyword\">break</span>\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Capital[i+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]&gt;end){\n      <span class=\"hljs-keyword\">if</span>(k&lt;<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">let</span> max=pq.delMax()\n      res+=max\n      end=res\n      k--\n    }\n    \n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "ipo",
  "content": "<p>假设 LeetCode 即将开始其 IPO。为了以更高的价格将股票卖给风险投资公司，LeetCode希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成最多 <strong>k</strong> 个不同的项目。帮助 LeetCode 设计完成最多 <strong>k</strong> 个不同项目后得到最大总资本的方式。</p>\n\n<p>给定若干个项目。对于每个项目 <strong>i</strong>，它都有一个纯利润 <strong>P<sub>i</sub></strong>，并且需要最小的资本 <strong>C<sub>i</sub></strong> 来启动相应的项目。最初，你有 <strong>W</strong> 资本。当你完成一个项目时，你将获得纯利润，且利润将被添加到你的总资本中。</p>\n\n<p>总而言之，从给定项目中选择最多 <strong>k</strong> 个不同项目的列表，以最大化最终资本，并输出最终可获得的最多资本。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n\n<strong>输出:</strong> 4\n\n<strong>解释:\n</strong>由于你的初始资本为 0，你尽可以从 0 号项目开始。\n在完成后，你将获得 1 的利润，你的总资本将变为 1。\n此时你可以选择开始 1 号或 2 号项目。\n由于你最多可以选择两个项目，所以你需要完成 2 号项目以获得最大的资本。\n因此，输出最后最大化的资本，为 0 + 1 + 3 = 4。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>假设所有输入数字都是非负整数。</li>\n\t<li>表示利润和资本的数组的长度不超过 50000。</li>\n\t<li>答案保证在 32 位有符号整数范围内。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
