{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(matrix.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> maxR=matrix[<span class=\"hljs-number\">0</span>].length,\n      maxC=matrix.length\n  <span class=\"hljs-keyword\">let</span> curR=maxR<span class=\"hljs-number\">-1</span>,curC=<span class=\"hljs-number\">0</span>\n  \n  <span class=\"hljs-keyword\">while</span>(curR&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; curC&lt;maxC){\n    <span class=\"hljs-keyword\">let</span> cur=matrix[curC][curR]\n    <span class=\"hljs-keyword\">if</span>(cur&lt;target)curC++\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur&gt;target)curR--\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "search-a-2d-matrix-ii",
  "translatedContent": "<p>编写一个高效的算法来搜索&nbsp;<em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>\n\n<ul>\n\t<li>每行的元素从左到右升序排列。</li>\n\t<li>每列的元素从上到下升序排列。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<p>现有矩阵 matrix 如下：</p>\n\n<pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre>\n\n<p>给定 target&nbsp;=&nbsp;<code>5</code>，返回&nbsp;<code>true</code>。</p>\n\n<p>给定&nbsp;target&nbsp;=&nbsp;<code>20</code>，返回&nbsp;<code>false</code>。</p>\n"
}
