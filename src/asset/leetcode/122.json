{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} prices\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxProfit = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prices</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxP=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;prices.length;i++){\n    <span class=\"hljs-keyword\">if</span>(prices[i]-prices[i<span class=\"hljs-number\">-1</span>]&gt;<span class=\"hljs-number\">0</span>)maxP+=prices[i]-prices[i<span class=\"hljs-number\">-1</span>]\n  }\n  <span class=\"hljs-keyword\">return</span> maxP\n    <span class=\"hljs-comment\">// let maxProfit=0</span>\n    <span class=\"hljs-comment\">// for(let i=1;i&lt;prices.length;i++){</span>\n    <span class=\"hljs-comment\">//     let curProfit=prices[i]-prices[i-1]+maxProfit</span>\n    <span class=\"hljs-comment\">//     if(curProfit &gt; maxProfit)maxProfit = curProfit</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// return maxProfit</span>\n    \n    <span class=\"hljs-keyword\">let</span> prev_sell,prev_buy,prev_rest,\n    sell=<span class=\"hljs-number\">0</span>,buy=-prices[<span class=\"hljs-number\">0</span>],rest=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prices.length;i++){\n        prev_buy=buy;prev_rest=rest;prev_sell=sell\n        sell=prev_buy+prices[i]\n        buy=<span class=\"hljs-built_in\">Math</span>.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])\n        rest=<span class=\"hljs-built_in\">Math</span>.max(prev_rest,prev_sell)\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(sell,rest)\n};\n</code></pre>\n"
  ],
  "titleSlug": "best-time-to-buy-and-sell-stock-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>遍历时，只要当天和前一天存在收益，就可以添加到<code>maxP</code>。</p>\n",
  "content": "<p>给定一个数组，它的第&nbsp;<em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [7,1,5,3,6,4]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong> [7,6,4,3,1]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。</pre>\n"
}
