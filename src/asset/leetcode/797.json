{
  "code": [
    "/**\n * @param {number[][]} graph\n * @return {number[][]}\n */\nvar allPathsSourceTarget = function(graph) {\n  const start=0,\n        end=graph.length-1;\n  let result=[];\n  function backtrack(vertex,temp){\n    if(temp[temp.length-1]===end)result.push(temp.slice());\n    let adj=graph[vertex]\n    for(let i=0;i<adj.length;i++){\n      temp.push(adj[i])\n      backtrack(adj[i],temp)\n      temp.pop()\n    } \n  }\n  backtrack(start,[0])\n  return result\n};"
  ],
  "titleSlug": "all-paths-from-source-to-target",
  "content": "<p>Given a directed, acyclic graph of <code>N</code> nodes.&nbsp; Find all possible paths from node <code>0</code> to node <code>N-1</code>, and return them in any order.</p>\r\n\r\n<p>The graph is given as follows:&nbsp; the nodes are 0, 1, ..., graph.length - 1.&nbsp; graph[i] is a list of all nodes j for which the edge (i, j) exists.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> [[1,2], [3], [3], []] \r\n<strong>Output:</strong> [[0,1,3],[0,2,3]] \r\n<strong>Explanation:</strong> The graph looks like this:\r\n0---&gt;1\r\n|    |\r\nv    v\r\n2---&gt;3\r\nThere are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the graph will be in the range <code>[2, 15]</code>.</li>\r\n\t<li>You can print different paths in any order, but you should keep the order of nodes inside one path.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给一个有&nbsp;<code>n</code>&nbsp;个结点的有向无环图，找到所有从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的路径并输出（不要求按顺序）</p>\n\n<p>二维数组的第 i 个数组中的单元都表示有向图中 i 号结点所能到达的下一些结点（译者注：有向图是有方向的，即规定了a&rarr;b你就不能从b&rarr;a）空就是没有下一个结点了。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> [[1,2], [3], [3], []] \n<strong>输出:</strong> [[0,1,3],[0,2,3]] \n<strong>解释:</strong> 图是这样的:\n0---&gt;1\n|    |\nv    v\n2---&gt;3\n这有两条路: 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>结点的数字会在范围&nbsp;<code>[2, 15]</code>&nbsp;内。</li>\n\t<li>你可以把路径以任意顺序输出，但在路径内的结点的顺序必须保证。</li>\n</ul>\n"
}
