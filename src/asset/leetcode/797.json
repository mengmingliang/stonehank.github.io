{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} graph\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> allPathsSourceTarget = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">graph</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n=graph.length\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">v,stack</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(v===n<span class=\"hljs-number\">-1</span>){\n      <span class=\"hljs-keyword\">return</span> res.push(stack.slice())\n    }\n    <span class=\"hljs-keyword\">let</span> adj=graph[v]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;adj.length;i++){\n      stack.push(adj[i])\n      dfs(adj[i],stack)\n      stack.pop()\n    }\n  }\n  dfs(<span class=\"hljs-number\">0</span>,[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "all-paths-from-source-to-target",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2><code>dfs</code>遍历，使用一个数组<code>stack</code>保存当前<code>dfs</code>的路径。</h2>\n",
  "content": "<p>给一个有&nbsp;<code>n</code>&nbsp;个结点的有向无环图，找到所有从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的路径并输出（不要求按顺序）</p>\n\n<p>二维数组的第 i 个数组中的单元都表示有向图中 i 号结点所能到达的下一些结点（译者注：有向图是有方向的，即规定了a&rarr;b你就不能从b&rarr;a）空就是没有下一个结点了。</p>\n\n<pre><strong>示例:</strong>\n<strong>输入:</strong> [[1,2], [3], [3], []] \n<strong>输出:</strong> [[0,1,3],[0,2,3]] \n<strong>解释:</strong> 图是这样的:\n0---&gt;1\n|    |\nv    v\n2---&gt;3\n这有两条路: 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>结点的数量会在范围&nbsp;<code>[2, 15]</code>&nbsp;内。</li>\n\t<li>你可以把路径以任意顺序输出，但在路径内的结点的顺序必须保证。</li>\n</ul>\n"
}
