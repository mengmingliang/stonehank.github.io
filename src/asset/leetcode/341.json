{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @constructor\n * @param {NestedInteger[]} nestedList\n */</span>\n<span class=\"hljs-keyword\">var</span> NestedIterator = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nestedList</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillFlat</span>(<span class=\"hljs-params\">arr,result</span>)</span>{\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n            <span class=\"hljs-keyword\">let</span> cur=arr[i]\n            <span class=\"hljs-keyword\">if</span>(!cur.isInteger()){\n                fillFlat(cur.getList(),result)\n            }<span class=\"hljs-keyword\">else</span>\n\t\t\t\tresult.push(cur.getInteger())\n        }\n        <span class=\"hljs-keyword\">return</span> result\n    }\n    <span class=\"hljs-keyword\">this</span>.flatList=fillFlat(nestedList,[])\n\n    <span class=\"hljs-keyword\">this</span>.index=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// console.log(this.flatList)</span>\n};\n\n\n<span class=\"hljs-comment\">/**\n * @this NestedIterator\n * @returns {boolean}\n */</span>\nNestedIterator.prototype.hasNext = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.index &lt; <span class=\"hljs-keyword\">this</span>.flatList.length\n};\n\n<span class=\"hljs-comment\">/**\n * @this NestedIterator\n * @returns {integer}\n */</span>\nNestedIterator.prototype.next = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.flatList[<span class=\"hljs-keyword\">this</span>.index++]\n};\n\n<span class=\"hljs-comment\">/**\n * Your NestedIterator will be called like this:\n * var i = new NestedIterator(nestedList), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/</span>\n</code></pre>\n"
  ],
  "titleSlug": "flatten-nested-list-iterator",
  "content": "<p>给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。</p>\n\n<p>列表中的项或者为一个整数，或者是另一个列表。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[[1,1],2,[1,1]]\n<strong>输出: </strong>[1,1,2,1,1]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next </em>直到&nbsp;<em>hasNex</em>t 返回false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,1,2,1,1]</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[1,[4,[6]]]\n<strong>输出: </strong>[1,4,6]\n<strong>解释: </strong>通过重复调用&nbsp;<em>next&nbsp;</em>直到&nbsp;<em>hasNex</em>t 返回false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,4,6]</code>。\n</pre>\n"
}
