{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> deleteDuplicates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!head)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n  root.next=head\n  <span class=\"hljs-keyword\">let</span> startNode=root\n  <span class=\"hljs-keyword\">let</span> needDel=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> node=head.next,lastNode=head\n  <span class=\"hljs-keyword\">while</span>(lastNode){\n    <span class=\"hljs-keyword\">if</span>(node &amp;&amp; node.val===lastNode.val){\n      needDel=<span class=\"hljs-literal\">true</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(needDel){\n        startNode.next=node\n      }<span class=\"hljs-keyword\">else</span>{\n        startNode=lastNode\n      }\n      needDel=<span class=\"hljs-literal\">false</span>\n    }\n    lastNode=node\n    <span class=\"hljs-keyword\">if</span>(node)node=node.next\n  }\n  <span class=\"hljs-keyword\">return</span> root.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "remove-duplicates-from-sorted-list-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>单链表中要删除一段列表，需要找到被删除点的前一个节点。</p>\n<p>定义<code>startNode</code>为当前数字的起始点的前一个位置，初始为一个新的节点<code>root</code>，<code>root=new ListNode(null); root.next=head</code>。</p>\n<p>定义<code>lastNode</code>为当前节点的上一个节点。</p>\n<p>在不断<code>next</code>遍历过程中，如果当前<code>node.val===lastNode.val</code>，说明这个数字存在重复，设置<code>needDel=true</code>，继续<code>next</code>遍历；</p>\n<p>如果<code>node.val!==lastNode.val</code>，说明是一个新的数字，这时要检查上一个数字的<code>needDel</code>，如果需要删除，\n那么<code>startNode</code>直接<code>next</code>连接到到当前<code>node</code>。</p>\n<p>最终返回<code>root.next</code>。</p>\n",
  "content": "<p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中&nbsp;<em>没有重复出现&nbsp;</em>的数字。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n<strong>输出:</strong> 1-&gt;2-&gt;5\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\n<strong>输出:</strong> 2-&gt;3</pre>\n"
}
