{
  "code": [
    "<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">var</span> RangeModule = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.range = []\n};\n\nRangeModule.prototype.addRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-keyword\">this</span>.range.length\n  <span class=\"hljs-keyword\">let</span> newArr = []\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (;i&lt;len;i++) {\n    <span class=\"hljs-keyword\">let</span> itv=<span class=\"hljs-keyword\">this</span>.range[i]\n    <span class=\"hljs-keyword\">if</span> (itv[<span class=\"hljs-number\">0</span>]&gt;right) <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span> (itv[<span class=\"hljs-number\">1</span>]&lt;left) {\n      newArr.push(itv)\n    }<span class=\"hljs-keyword\">else</span>{\n      left=<span class=\"hljs-built_in\">Math</span>.min(itv[<span class=\"hljs-number\">0</span>], left)\n      right=<span class=\"hljs-built_in\">Math</span>.max(itv[<span class=\"hljs-number\">1</span>], right)\n    }\n  }\n  newArr.push([left,right])\n  <span class=\"hljs-keyword\">if</span> (i&lt;len)newArr.push(...this.range.slice(i))\n  <span class=\"hljs-keyword\">this</span>.range = newArr\n};\n\nRangeModule.prototype.queryRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> itv <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.range){\n    <span class=\"hljs-keyword\">if</span>(left&gt;=itv[<span class=\"hljs-number\">0</span>] &amp;&amp; right&lt;=itv[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n\nRangeModule.prototype.removeRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-keyword\">this</span>.range.length\n  <span class=\"hljs-keyword\">if</span>(len===<span class=\"hljs-number\">0</span> || left&gt;<span class=\"hljs-keyword\">this</span>.range[len<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>] || right&lt;<span class=\"hljs-keyword\">this</span>.range[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">let</span> newArr=[],temp=[]\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(;i&lt;len;i++){\n    <span class=\"hljs-keyword\">let</span> itv=<span class=\"hljs-keyword\">this</span>.range[i]\n    <span class=\"hljs-keyword\">if</span>(itv[<span class=\"hljs-number\">0</span>]&gt;right)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span>(itv[<span class=\"hljs-number\">1</span>]&lt;left){\n      newArr.push(itv)\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(left&gt;itv[<span class=\"hljs-number\">0</span>])temp.push([itv[<span class=\"hljs-number\">0</span>],left])\n      <span class=\"hljs-keyword\">if</span>(right&lt;itv[<span class=\"hljs-number\">1</span>])temp.push([right,itv[<span class=\"hljs-number\">1</span>]])\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">0</span>)newArr.push(...temp)\n  <span class=\"hljs-keyword\">if</span>(i&lt;len)newArr.push(...this.range.slice(i))\n  <span class=\"hljs-keyword\">this</span>.range=newArr\n};\n</code></pre>\n"
  ],
  "titleSlug": "range-module",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ul>\n<li>addRange</li>\n</ul>\n<p>在<code>addRange</code>，需要找到当前需要更新的区间；</p>\n<p>定义一个空数组<code>itv</code>，用于保存更新后的所有区间，</p>\n<p>如果<code>this.interval[i][1]&lt;left</code>，说明需要增加的区间在当前区间之后，直接将当前区间<code>push</code>到<code>itv</code>内；</p>\n<p>如果<code>this.interval[i][0]&gt;right</code>，说明需要增加的区间在当前区间之前，已经处理完更新了，后面的所有区间都直接<code>push</code>即可；</p>\n<p>其他情况，说明当前区间需要被<code>left</code>，<code>right</code>更新，求它们的并集即可：</p>\n<pre class=\"hljs\"><code>left=Math.min(left,cur[0])\nright=Math.max(right,cur[1])\n</code></pre>\n<ul>\n<li>removeRange</li>\n</ul>\n<p>在<code>removeRange</code>情况下，与<code>addRange</code>类似，但是需要另外一个数组<code>temp</code>专门保存更新的区间，因为需要删除的<code>[left,right]</code>范围可能很大，横跨好几个区间；</p>\n<p>如果<code>this.interval[i][1]&lt;left</code>，说明需要增加的区间在当前区间之后，直接将当前区间<code>push</code>到<code>itv</code>内；</p>\n<p>如果<code>this.interval[i][0]&gt;right</code>，说明需要增加的区间在当前区间之前，已经处理完更新了，后面的所有区间都直接<code>push</code>即可；</p>\n<p>其他情况，说明当前区间需要被<code>left</code>，<code>right</code>分割，求它们的非交集即可，</p>\n<pre class=\"hljs\"><code>if(cur[0]&lt;left)temp.push([cur[0],left])\nif(cur[1]&gt;right)temp.push([right,cur[1]])\n</code></pre>\n<ul>\n<li>queryRange</li>\n</ul>\n<p><code>queryRange</code>就是遍历当前区间，查看<code>left,right</code>是否小于任意一个区间，当然也可以使用二分法。</p>\n",
  "content": "<p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p>\n\n<ul>\n\t<li><code>addRange(int left, int right)</code> 添加半开区间&nbsp;<code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间&nbsp;<code>[left, right)</code>&nbsp;中尚未跟踪的任何数字到该区间中。</li>\n\t<li><code>queryRange(int left, int right)</code>&nbsp;只有在当前正在跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中的每一个实数时，才返回 true。</li>\n\t<li><code>removeRange(int left, int right)</code>&nbsp;停止跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中当前正在跟踪的每个实数。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true （区间 [10, 14) 中的每个数都正在被跟踪）\n<strong>queryRange(13, 15)</strong>: false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\n<strong>queryRange(16, 17)</strong>: true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>半开区间&nbsp;<code>[left, right)</code>&nbsp;表示所有满足&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;的实数。</li>\n\t<li>对&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;的所有调用中&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>。</li>\n\t<li>在单个测试用例中，对&nbsp;<code>addRange</code>&nbsp;的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n\t<li>在单个测试用例中，对&nbsp; <code>queryRange</code> 的调用总数不超过 <code>5000</code> 次。</li>\n\t<li>在单个测试用例中，对 <code>removeRange</code> 的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\n</ul>\n\n<p>&nbsp;</p>\n"
}
