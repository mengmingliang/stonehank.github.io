{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number} n\n * @return {TreeNode[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> generateTrees = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(n===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cTree</span>(<span class=\"hljs-params\">left,right</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(right&lt;left)<span class=\"hljs-keyword\">return</span> [<span class=\"hljs-literal\">null</span>]\n    <span class=\"hljs-comment\">// if(right===left)return [new TreeNode(left)]</span>\n    <span class=\"hljs-keyword\">let</span> list=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=left;i&lt;=right;i++){\n      <span class=\"hljs-keyword\">let</span> leftList=cTree(left,i<span class=\"hljs-number\">-1</span>)\n      <span class=\"hljs-keyword\">let</span> rightList=cTree(i+<span class=\"hljs-number\">1</span>,right)\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;leftList.length;j++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;rightList.length;k++){\n          <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> TreeNode(i)\n          root.left=leftList[j]\n          root.right=rightList[k]  \n          list.push(root)\n        }   \n      }\n    }\n      <span class=\"hljs-keyword\">return</span> list\n  }\n  <span class=\"hljs-keyword\">return</span> cTree(<span class=\"hljs-number\">1</span>,n)\n};\n</code></pre>\n"
  ],
  "titleSlug": "unique-binary-search-trees-ii",
  "content": "<p>给定一个整数 <em>n</em>，生成所有由 1 ...&nbsp;<em>n</em> 为节点所组成的<strong>二叉搜索树</strong>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong>\n[\n&nbsp; [1,null,3,2],\n&nbsp; [3,2,null,1],\n&nbsp; [3,1,null,null,2],\n&nbsp; [2,1,3],\n&nbsp; [1,null,2,null,3]\n]\n<strong>解释:</strong>\n以上的输出对应以下 5 种不同结构的二叉搜索树：\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n"
}
