{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> preorderTraversal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> stack=[root],rights=[],res=[]\n    <span class=\"hljs-keyword\">while</span>(stack[stack.length<span class=\"hljs-number\">-1</span>]){\n        <span class=\"hljs-keyword\">let</span> last=stack[stack.length<span class=\"hljs-number\">-1</span>]\n        res.push(last.val)\n        <span class=\"hljs-keyword\">if</span>(last.right){\n            rights.push(last.right)\n        }            \n        <span class=\"hljs-keyword\">if</span>(last.left){\n            stack.push(last.left)\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(rights.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> res\n            stack.push(rights.pop())\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-preorder-traversal",
  "content": "<p>给定一个二叉树，返回它的&nbsp;<em>前序&nbsp;</em>遍历。</p>\n\n<p>&nbsp;<strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [1,2,3]\n</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n"
}
