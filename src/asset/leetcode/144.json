{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar preorderTraversal = function(root) {\n    let stack=[root],rights=[],res=[]\n    while(stack[stack.length-1]){\n        let last=stack[stack.length-1]\n        res.push(last.val)\n        if(last.right){\n            rights.push(last.right)\n        }            \n        if(last.left){\n            stack.push(last.left)\n        }else{\n            if(rights.length===0)return res\n            stack.push(rights.pop())\n        }\n    }\n    return res\n};"
  ],
  "titleSlug": "binary-tree-preorder-traversal",
  "content": "<p>Given a binary tree, return the <em>preorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;<code>[1,null,2,3]</code>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong>&nbsp;<code>[1,2,3]</code>\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
  "translatedContent": "<p>给定一个二叉树，返回它的&nbsp;<em>前序&nbsp;</em>遍历。</p>\n\n<p>&nbsp;<strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [1,2,3]\n</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n"
}
