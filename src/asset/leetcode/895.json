{
  "code": [
    "<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">var</span> FreqStack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.freq = {}\n  <span class=\"hljs-keyword\">this</span>.m = {}\n  <span class=\"hljs-keyword\">this</span>.maxfreq = <span class=\"hljs-number\">0</span>\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} x\n * @return {void}\n */</span>\nFreqStack.prototype.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.freq[x]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">this</span>.freq[x]=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">this</span>.freq[x]++\n  <span class=\"hljs-keyword\">let</span> f=<span class=\"hljs-keyword\">this</span>.freq[x]\n  <span class=\"hljs-keyword\">this</span>.maxfreq = <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>.maxfreq, f);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.m[f]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">this</span>.m[f]=[]\n  <span class=\"hljs-keyword\">this</span>.m[f].push(x)\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nFreqStack.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxFArr=<span class=\"hljs-keyword\">this</span>.m[<span class=\"hljs-keyword\">this</span>.maxfreq]\n  <span class=\"hljs-keyword\">let</span> del=maxFArr.pop()\n  <span class=\"hljs-keyword\">this</span>.freq[del]--\n  <span class=\"hljs-keyword\">if</span>(maxFArr.length===<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">this</span>.maxfreq--\n  }\n  <span class=\"hljs-keyword\">return</span> del\n};\n\n<span class=\"hljs-comment\">/** \n * Your FreqStack object will be instantiated and called as such:\n * var obj = Object.create(FreqStack).createNew()\n * obj.push(x)\n * var param_2 = obj.pop()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "maximum-frequency-stack",
  "content": "<p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。</p>\n\n<p><code>FreqStack</code>&nbsp;有两个函数：</p>\n\n<ul>\n\t<li><code>push(int x)</code>，将整数&nbsp;<code>x</code>&nbsp;推入栈中。</li>\n\t<li><code>pop()</code>，它<strong>移除</strong>并返回栈中出现最频繁的元素。\n\t<ul>\n\t\t<li>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>\n[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>解释：</strong>\n执行六次 .push 操作后，栈自底向上为 [5,7,5,7,4,5]。然后：\n\npop() -&gt; 返回 5，因为 5 是出现频率最高的。\n栈变成 [5,7,5,7,4]。\n\npop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈顶。\n栈变成 [5,7,5,4]。\n\npop() -&gt; 返回 5 。\n栈变成 [5,7,4]。\n\npop() -&gt; 返回 4 。\n栈变成 [5,7]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>对&nbsp;<code>FreqStack.push(int x)</code>&nbsp;的调用中&nbsp;<code>0 &lt;= x &lt;= 10^9</code>。</li>\n\t<li>如果栈的元素数目为零，则保证不会调用&nbsp; <code>FreqStack.pop()</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>单个测试样例中，对&nbsp;<code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>10000</code>。</li>\n\t<li>所有测试样例中，对&nbsp;<code>FreqStack.push</code>&nbsp;和 <code>FreqStack.pop</code>&nbsp;的总调用次数不会超过&nbsp;<code>150000</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n"
}
