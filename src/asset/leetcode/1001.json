{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @param {number[][]} lamps\n * @param {number[][]} queries\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> gridIllumination = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N, lamps, queries</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> row={},col={},rdSlash={},ltSlash={}\n  <span class=\"hljs-keyword\">let</span> lampHash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;lamps.length;i++){\n    <span class=\"hljs-keyword\">let</span> [x,y]=lamps[i]\n    lampHash.set(x+<span class=\"hljs-string\">'-'</span>+y,<span class=\"hljs-literal\">true</span>)\n    <span class=\"hljs-keyword\">let</span> ltSy=y-x\n    <span class=\"hljs-keyword\">let</span> rdSx=x+y\n    <span class=\"hljs-keyword\">if</span>(row[x]==<span class=\"hljs-literal\">null</span>)row[x]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> row[x]++\n    <span class=\"hljs-keyword\">if</span>(col[y]==<span class=\"hljs-literal\">null</span>)col[y]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> col[y]++\n    <span class=\"hljs-keyword\">if</span>(rdSlash[rdSx]==<span class=\"hljs-literal\">null</span>)rdSlash[rdSx]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> rdSlash[rdSx]++\n    <span class=\"hljs-keyword\">if</span>(ltSlash[ltSy]==<span class=\"hljs-literal\">null</span>)ltSlash[ltSy]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> ltSlash[ltSy]++\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkSurr</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> d=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> dx <span class=\"hljs-keyword\">of</span> d){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> dy <span class=\"hljs-keyword\">of</span> d){\n        <span class=\"hljs-keyword\">let</span> newx=x+dx,newy=y+dy\n        <span class=\"hljs-keyword\">if</span>(newx&lt;<span class=\"hljs-number\">0</span> || newy&lt;<span class=\"hljs-number\">0</span> || newx&gt;=N || newy&gt;=N)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span>(lampHash.has(newx+<span class=\"hljs-string\">'-'</span>+newy)){\n          lampHash.delete(newx+<span class=\"hljs-string\">'-'</span>+newy)\n          <span class=\"hljs-keyword\">let</span> r=newx,c=newy,lt=newy-newx,rd=newx+newy\n          row[r]--\n          col[c]--\n          rdSlash[rd]--\n          ltSlash[lt]--\n        }\n      }\n    }\n  }\n  <span class=\"hljs-comment\">// console.log()</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkIsLight</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> r=x,c=y,lt=y-x,rd=x+y\n    <span class=\"hljs-keyword\">let</span> isLight=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(row[r]&gt;<span class=\"hljs-number\">0</span>||col[c]&gt;<span class=\"hljs-number\">0</span>||rdSlash[rd]&gt;<span class=\"hljs-number\">0</span>||ltSlash[lt]&gt;<span class=\"hljs-number\">0</span>)isLight=<span class=\"hljs-number\">1</span>\n    checkSurr([x,y])\n    <span class=\"hljs-comment\">// console.log(isLight)</span>\n    <span class=\"hljs-keyword\">return</span> isLight\n  }\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;queries.length;i++){\n    result.push(checkIsLight(queries[i]))\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "grid-illumination",
  "hasThinking": false,
  "content": "<p>在&nbsp;<code>N x N</code>&nbsp;的网格上，每个单元格&nbsp;<code>(x, y)</code>&nbsp;上都有一盏灯，其中&nbsp;<code>0 &lt;= x &lt; N</code>&nbsp;且&nbsp;<code>0 &lt;= y &lt; N</code> 。</p>\n\n<p>最初，一定数量的灯是亮着的。<code>lamps[i]</code>&nbsp;告诉我们亮着的第 <code>i</code> 盏灯的位置。每盏灯都照亮其所在 x 轴、y 轴和两条对角线上的每个正方形（类似于国际象棋中的皇后）。</p>\n\n<p>对于第 <code>i</code> 次查询&nbsp;<code>queries[i] = (x, y)</code>，如果单元格 (x, y) 是被照亮的，则查询结果为 1，否则为 0 。</p>\n\n<p>在每个查询 <code>(x, y)</code> 之后 [按照查询的顺序]，我们关闭位于单元格 (x, y) 上或其相邻 8 个方向上（与单元格 (x, y) 共享一个角或边）的任何灯。</p>\n\n<p>返回答案数组 <code>answer</code>。每个值 <code>answer[i]</code> 应等于第 <code>i</code>&nbsp;次查询&nbsp;<code>queries[i]</code>&nbsp;的结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\n<strong>输出：</strong>[1,0]\n<strong>解释： </strong>\n在执行第一次查询之前，我们位于 [0, 0] 和 [4, 4] 灯是亮着的。\n表示哪些单元格亮起的网格如下所示，其中 [0, 0] 位于左上角：\n1 1 1 1 1\n1 1 0 0 1\n1 0 1 0 1\n1 0 0 1 1\n1 1 1 1 1\n然后，由于单元格 [1, 1] 亮着，第一次查询返回 1。在此查询后，位于 [0，0] 处的灯将关闭，网格现在如下所示：\n1 0 0 0 1\n0 1 0 0 1\n0 0 1 0 1\n0 0 0 1 1\n1 1 1 1 1\n在执行第二次查询之前，我们只有 [4, 4] 处的灯亮着。现在，[1, 0] 处的查询返回 0，因为该单元格不再亮着。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= lamps.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= queries.length &lt;= 20000</code></li>\n\t<li><code>lamps[i].length == queries[i].length == 2</code></li>\n</ol>\n"
}
