{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> intersect = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1, nums2</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> insertion=[]\n    <span class=\"hljs-keyword\">let</span> cache=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums1.length;i++){\n        <span class=\"hljs-keyword\">let</span> cur=nums1[i]\n        <span class=\"hljs-keyword\">if</span>(cache[cur]==<span class=\"hljs-literal\">null</span>)cache[cur]=<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span> cache[cur]++\n    }\n    \n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums2.length;i++){\n        <span class=\"hljs-keyword\">let</span> cur=nums2[i]\n        <span class=\"hljs-keyword\">if</span>(cache[cur]&gt;<span class=\"hljs-number\">0</span>){\n            insertion.push(cur)\n            cache[cur]--\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> insertion\n};\n</code></pre>\n"
  ],
  "titleSlug": "intersection-of-two-arrays-ii",
  "translatedContent": "<p>给定两个数组，编写一个函数来计算它们的交集。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>输出: </strong>[2,2]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>输出: </strong>[4,9]</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n\t<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n\n<p><strong><strong>进阶:</strong></strong></p>\n\n<ul>\n\t<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n\t<li>如果&nbsp;<em>nums1&nbsp;</em>的大小比&nbsp;<em>nums2&nbsp;</em>小很多，哪种方法更优？</li>\n\t<li>如果&nbsp;<em>nums2&nbsp;</em>的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n"
}
