{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n */</span>\n<span class=\"hljs-keyword\">var</span> CBTInserter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[root]\n  <span class=\"hljs-keyword\">let</span> next=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">while</span>(!next){\n    <span class=\"hljs-keyword\">let</span> len=stack.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> node=stack.shift()\n      <span class=\"hljs-keyword\">if</span>(node.left)stack.push(node.left)\n      <span class=\"hljs-keyword\">else</span>{next=node; <span class=\"hljs-keyword\">break</span>}\n      <span class=\"hljs-keyword\">if</span>(node.right)stack.push(node.right)\n      <span class=\"hljs-keyword\">else</span>{next=node; <span class=\"hljs-keyword\">break</span>}\n    }\n  }\n  <span class=\"hljs-keyword\">this</span>.stack=stack\n  <span class=\"hljs-keyword\">this</span>.root=root\n  <span class=\"hljs-keyword\">this</span>.next=next\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} v\n * @return {number}\n */</span>\nCBTInserter.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> TreeNode(v)\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">this</span>.next.val\n  <span class=\"hljs-keyword\">this</span>.stack.push(newNode)\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.next.left){\n    <span class=\"hljs-keyword\">this</span>.next.left=newNode\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">this</span>.next.right=newNode\n    <span class=\"hljs-keyword\">this</span>.next=<span class=\"hljs-keyword\">this</span>.stack.shift()\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n\n<span class=\"hljs-comment\">/**\n * @return {TreeNode}\n */</span>\nCBTInserter.prototype.get_root = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.root\n};\n\n<span class=\"hljs-comment\">/** \n * Your CBTInserter object will be instantiated and called as such:\n * var obj = Object.create(CBTInserter).createNew(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "complete-binary-tree-inserter",
  "content": "<p>完全二叉树是每一层（除最后一层外）都是完全填充（即，结点数达到最大）的，并且所有的结点都尽可能地集中在左侧。</p>\n\n<p>设计一个用完全二叉树初始化的数据结构&nbsp;<code>CBTInserter</code>，它支持以下几种操作：</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;使用头结点为&nbsp;<code>root</code>&nbsp;的给定树初始化该数据结构；</li>\n\t<li><code>CBTInserter.insert(int v)</code> 将&nbsp;<code>TreeNode</code>&nbsp;插入到存在值为&nbsp;<code>node.val =&nbsp;v</code>&nbsp; 的树中以使其保持完全二叉树的状态，<strong>并返回插入的 <code>TreeNode</code>&nbsp;的父结点的值</strong>；</li>\n\t<li><code>CBTInserter.get_root()</code> 将返回树的头结点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]\n<strong>输出：</strong>[null,1,[1,2]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>输出：</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>最初给定的树是完全二叉树，且包含&nbsp;<code>1</code>&nbsp;到&nbsp;<code>1000</code>&nbsp;个结点。</li>\n\t<li>每个测试用例最多调用&nbsp;<code>CBTInserter.insert</code>&nbsp; 操作&nbsp;<code>10000</code>&nbsp;次。</li>\n\t<li>给定结点或插入结点的每个值都在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;之间。</li>\n</ol>\n"
}
