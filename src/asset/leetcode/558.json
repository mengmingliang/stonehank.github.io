{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Node} quadTree1\n * @param {Node} quadTree2\n * @return {Node}\n */</span>\n<span class=\"hljs-keyword\">var</span> intersect = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t1, t2</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(t1.isLeaf){\n    <span class=\"hljs-keyword\">return</span> t1.val?t1:t2\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(t2.isLeaf){\n    <span class=\"hljs-keyword\">return</span> t2.val?t2:t1\n  }\n  <span class=\"hljs-keyword\">let</span> tl=intersect(t1.topLeft,t2.topLeft),\n      tr=intersect(t1.topRight,t2.topRight),\n      bl=intersect(t1.bottomLeft,t2.bottomLeft),\n      br=intersect(t1.bottomRight,t2.bottomRight)\n  <span class=\"hljs-keyword\">if</span>(tl.isLeaf &amp;&amp; tr.isLeaf &amp;&amp; bl.isLeaf &amp;&amp; br.isLeaf &amp;&amp; \n     tl.val===tr.val &amp;&amp; tl.val===bl.val &amp;&amp; tl.val===br.val){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Node(tl.val,<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Node(<span class=\"hljs-literal\">false</span>,<span class=\"hljs-literal\">false</span>,tl,tr,bl,br)\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "quad-tree-intersection",
  "hasThinking": false,
  "content": "<p>四叉树是一种树数据，其中每个结点恰好有四个子结点：<code>topLeft</code>、<code>topRight</code>、<code>bottomLeft</code>&nbsp;和&nbsp;<code>bottomRight</code>。四叉树通常被用来划分一个二维空间，递归地将其细分为四个象限或区域。</p>\n\n<p>我们希望在四叉树中存储 True/False 信息。四叉树用来表示 <code>N * N</code> 的布尔网格。对于每个结点, 它将被等分成四个孩子结点<strong>直到这个区域内的值都是相同的</strong>。每个节点都有另外两个布尔属性：<code>isLeaf</code>&nbsp;和&nbsp;<code>val</code>。当这个节点是一个叶子结点时&nbsp;<code>isLeaf</code>&nbsp;为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>例如，下面是两个四叉树 A 和 B：</p>\n\n<pre>A:\n+-------+-------+   T: true\n|       |       |   F: false\n|   T   |   T   |\n|       |       |\n+-------+-------+\n|       |       |\n|   F   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight: T\nbottomLeft: F\nbottomRight: F\n\nB:               \n+-------+---+---+\n|       | F | F |\n|   T   +---+---+\n|       | T | T |\n+-------+---+---+\n|       |       |\n|   T   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight:\n     topLeft: F\n     topRight: F\n     bottomLeft: T\n     bottomRight: T\nbottomLeft: T\nbottomRight: F\n</pre>\n\n<p>&nbsp;</p>\n\n<p>你的任务是实现一个函数，该函数根据两个四叉树返回表示这两个四叉树的逻辑或(或并)的四叉树。</p>\n\n<pre>A:                 B:                 C (A or B):\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       | F | F |  |       |       |\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\n|       |       |  |       | T | T |  |       |       |\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       |       |  |       |       |\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\n|       |       |  |       |       |  |       |       |\n+-------+-------+  +-------+-------+  +-------+-------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都表示大小为&nbsp;<code>N * N</code>&nbsp;的网格。</li>\n\t<li><code>N</code>&nbsp;将确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n\t<li>逻辑或的定义如下：如果&nbsp;<code>A 为 True</code> ，或者&nbsp;<code>B 为 True</code> ，或者&nbsp;<code>A 和 B 都为 True</code>，则 &quot;A 或 B&quot; 为 True。</li>\n</ol>\n"
}
