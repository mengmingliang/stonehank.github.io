{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} num\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isAdditiveNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n \n  <span class=\"hljs-keyword\">let</span> found=<span class=\"hljs-literal\">false</span>\n  backtrack([],<span class=\"hljs-number\">0</span>)\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">temp,left</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(left===S.length &amp;&amp; temp.length&gt;=<span class=\"hljs-number\">3</span>){\n      <span class=\"hljs-keyword\">return</span> found=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=left;i&lt;S.length;i++){\n      <span class=\"hljs-keyword\">let</span> l=S.substring(left,i+<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">if</span>(l.length&gt;<span class=\"hljs-number\">1</span> &amp;&amp; l[<span class=\"hljs-number\">0</span>]===<span class=\"hljs-string\">\"0\"</span>)<span class=\"hljs-keyword\">return</span>\n      l=+l\n      <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">let</span> s=temp[temp.length<span class=\"hljs-number\">-2</span>]+temp[temp.length<span class=\"hljs-number\">-1</span>]\n        <span class=\"hljs-keyword\">if</span>(s&lt;l)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(s&gt;l)<span class=\"hljs-keyword\">continue</span>\n      }\n      temp.push(l)\n      backtrack(temp,i+<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">if</span>(found)<span class=\"hljs-keyword\">return</span>\n      temp.pop()\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> found   \n};\n</code></pre>\n"
  ],
  "titleSlug": "additive-number",
  "content": "<p>累加数是一个字符串，组成它的数字可以形成累加序列。</p>\n\n<p>一个有效的累加序列必须<strong>至少</strong>包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。</p>\n\n<p>给定一个只包含数字&nbsp;<code>&#39;0&#39;-&#39;9&#39;</code>&nbsp;的字符串，编写一个算法来判断给定输入是否是累加数。</p>\n\n<p><strong>说明:&nbsp;</strong>累加序列里的数不会以 0 开头，所以不会出现&nbsp;<code>1, 2, 03</code> 或者&nbsp;<code>1, 02, 3</code>&nbsp;的情况。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;112358&quot;</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 1, 2, 3, 5, 8 </code>。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;199100199&quot;</code>\n<strong>输出:</strong> true \n<strong>解释: </strong>累加序列为: <code>1, 99, 100, 199。</code>1 + 99 = 100, 99 + 100 = 199</pre>\n\n<p><strong>进阶:</strong><br>\n你如何处理一个溢出的过大的整数输入?</p>\n"
}
