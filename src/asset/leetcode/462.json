{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minMoves2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeSort</span>(<span class=\"hljs-params\">arr</span>)</span>{\n      <span class=\"hljs-keyword\">let</span> aux=[]\n      <span class=\"hljs-keyword\">let</span> len=arr.length;\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\">arr,lo,hi</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(lo&gt;=hi)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor(lo+(hi-lo)/<span class=\"hljs-number\">2</span>);\n        sort(arr,lo,mid)\n        sort(arr,mid+<span class=\"hljs-number\">1</span>,hi)\n        merge(arr,lo,mid,hi)\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">arr,lo,mid,hi</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> i=lo,j=mid+<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=lo;i&lt;=hi;i++){\n          aux[i]=arr[i]\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=lo;k&lt;=hi;k++){\n          <span class=\"hljs-keyword\">if</span>(i&gt;mid)arr[k]=aux[j++]\n          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j&gt;hi)arr[k]=aux[i++]\n          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(aux[i]&lt;aux[j])arr[k]=aux[i++]\n          <span class=\"hljs-keyword\">else</span> arr[k]=aux[j++]\n        }\n      }\n      sort(arr,<span class=\"hljs-number\">0</span>,len<span class=\"hljs-number\">-1</span>)\n      <span class=\"hljs-keyword\">return</span> arr\n    }    \n    nums=mergeSort(nums)\n    <span class=\"hljs-keyword\">let</span> allSteps=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> mid=nums[<span class=\"hljs-built_in\">Math</span>.floor(nums.length/<span class=\"hljs-number\">2</span>)]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n        allSteps+=<span class=\"hljs-built_in\">Math</span>.abs(mid-nums[i])\n    }\n    <span class=\"hljs-keyword\">return</span> allSteps\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-moves-to-equal-array-elements-ii",
  "content": "<p>给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。</p>\n\n<p><strong>例如:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[1,2,3]\n\n<strong>输出:</strong>\n2\n\n<strong>说明：\n</strong>只有两个动作是必要的（记得每一步仅可使其中一个元素加1或减1）： \n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>\n"
}
