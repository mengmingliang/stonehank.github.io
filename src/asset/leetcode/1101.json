{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} logs\n * @param {number} N\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> earliestAcq = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">logs, N</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> uf=<span class=\"hljs-built_in\">Array</span>(N).fill().map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>i)\n  <span class=\"hljs-keyword\">let</span> weight=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">let</span> count=N\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">i</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(i!==uf[i]){\n      uf[i]=find(uf[i])\n    }\n    <span class=\"hljs-keyword\">return</span> uf[i]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">union</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n        j=find(b)\n    <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(weight[i]&lt;weight[j]){\n      uf[i]=j\n      weight[j]+=weight[i]\n    }<span class=\"hljs-keyword\">else</span>{\n      uf[j]=i\n      weight[i]+=weight[j]\n    }\n    count--\n  }\n  logs.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;logs.length;i++){\n    <span class=\"hljs-keyword\">let</span> [data,id1,id2]=logs[i]\n    union(id1,id2)\n    <span class=\"hljs-keyword\">if</span>(count===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> data\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "the-earliest-moment-when-everyone-become-friends",
  "hasThinking": false,
  "content": "<p>在一个社交圈子当中，有&nbsp;<code>N</code>&nbsp;个人。每个人都有一个从&nbsp;<code>0</code> 到&nbsp;<code>N-1</code>&nbsp;唯一的 id&nbsp;编号。</p>\n\n<p>我们有一份日志列表&nbsp;<code>logs</code>，其中每条记录都包含一个非负整数的时间戳，以及分属两个人的不同&nbsp;id，<code>logs[i] = [timestamp, id_A, id_B]</code>。</p>\n\n<p>每条日志标识出两个人成为好友的时间，友谊是相互的：如果 A 和 B 是好友，那么 B 和 A 也是好友。</p>\n\n<p>如果 A 是 B 的好友，或者 A 是 B 的好友的好友，那么就可以认为 A 也与 B 熟识。</p>\n\n<p>返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6\n<strong>输出：</strong>20190301\n<strong>解释：</strong>\n第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。\n第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].\n第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].\n第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].\n第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。\n第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= logs[i][0] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= logs[i][1], logs[i][2] &lt;= N - 1</code></li>\n\t<li>保证 <code>logs[i][0]</code> 中的所有时间戳都不同</li>\n\t<li><code>Logs</code>&nbsp;不一定按某一标准排序</li>\n\t<li><code>logs[i][1] != logs[i][2]</code></li>\n</ol>\n"
}
