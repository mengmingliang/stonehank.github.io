{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minPathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(grid.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>  \n  <span class=\"hljs-keyword\">let</span> mem=[]\n  <span class=\"hljs-keyword\">let</span> r=grid.length<span class=\"hljs-number\">-1</span>,c=grid[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=r;i++)mem[i]=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dp</span>(<span class=\"hljs-params\">grid,r,c</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(mem[r][c])<span class=\"hljs-keyword\">return</span> mem[r][c]\n    <span class=\"hljs-comment\">// if(r===0 &amp;&amp; c===0)return grid[0][0]</span>\n    <span class=\"hljs-keyword\">if</span>(r===<span class=\"hljs-number\">0</span>){ <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=c;i++)sum+=grid[<span class=\"hljs-number\">0</span>][i]; <span class=\"hljs-keyword\">return</span> sum }\n    <span class=\"hljs-keyword\">if</span>(c===<span class=\"hljs-number\">0</span>){ <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=r;i++)sum+=grid[i][<span class=\"hljs-number\">0</span>]; <span class=\"hljs-keyword\">return</span> sum }\n    <span class=\"hljs-keyword\">let</span> newR=r&gt;<span class=\"hljs-number\">0</span>?r<span class=\"hljs-number\">-1</span>:<span class=\"hljs-number\">0</span>,newC=c&gt;<span class=\"hljs-number\">0</span>?c<span class=\"hljs-number\">-1</span>:<span class=\"hljs-number\">0</span>\n    sum=<span class=\"hljs-built_in\">Math</span>.min(dp(grid,newR,c),dp(grid,r,newC))+grid[r][c]\n    mem[r][c]=sum\n    <span class=\"hljs-keyword\">return</span> sum\n  }\n  <span class=\"hljs-keyword\">return</span> dp(grid,r,c)\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-path-sum",
  "content": "<p>给定一个包含非负整数的 <em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 因为路径 1&rarr;3&rarr;1&rarr;1&rarr;1 的总和最小。\n</pre>\n"
}
