{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minPathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(grid.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>  \n  <span class=\"hljs-keyword\">let</span> m=grid.length,n=grid[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(m).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">Infinity</span>))\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">if</span>(i&lt;m<span class=\"hljs-number\">-1</span>){\n        dp[i+<span class=\"hljs-number\">1</span>][j]=<span class=\"hljs-built_in\">Math</span>.min(dp[i+<span class=\"hljs-number\">1</span>][j],dp[i][j]+grid[i+<span class=\"hljs-number\">1</span>][j])\n      }\n      <span class=\"hljs-keyword\">if</span>(j&lt;n<span class=\"hljs-number\">-1</span>){\n        dp[i][j+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-built_in\">Math</span>.min(dp[i][j+<span class=\"hljs-number\">1</span>],dp[i][j]+grid[i][j+<span class=\"hljs-number\">1</span>])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-path-sum",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>与<code>NO.62</code>和<code>NO.63</code>一个模式。</p>\n<p><code>dp[i][j]</code>代表当前位置的最小路径和，状态转移方程：</p>\n<p>右侧：<code>dp[i+1][j]=Math.min(dp[i+1][j],dp[i][j]+grid[i+1][j])</code></p>\n<p>下侧：<code>dp[i][j+1]=Math.min(dp[i][j+1],dp[i][j]+grid[i][j+1])</code></p>\n",
  "content": "<p>给定一个包含非负整数的 <em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>\n\n<p><strong>说明：</strong>每次只能向下或者向右移动一步。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n<strong>输出:</strong> 7\n<strong>解释:</strong> 因为路径 1&rarr;3&rarr;1&rarr;1&rarr;1 的总和最小。\n</pre>\n"
}
