{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n  let len=0\n  let hash={}\n  for(let i=0;i<nums.length;i++){\n    let n=nums[i]\n    if(!hash[n])hash[n]=1\n    else hash[n]++\n  }\n  for(let i=0;i<nums.length;i++){\n    let l1=hash[nums[i]+1] || 0,\n        // l2=hash[nums[i]-1] || 0,\n        l3=hash[nums[i]]\n    if(l1>0)l1+=l3\n    // if(l2>0)l2+=l3\n    len=Math.max(len,l1)\n  }\n  return len\n};"
  ],
  "titleSlug": "longest-harmonious-subsequence",
  "content": "<p>We define a harmonious array is an array where the difference between its maximum value and its minimum value is <b>exactly</b> 1.</p>\r\n\r\n<p>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible <a href=\"https://en.wikipedia.org/wiki/Subsequence\">subsequences</a>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,2,2,5,2,3,7]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The longest harmonious subsequence is [3,2,2,2,3].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of the input array will not exceed 20,000.\r\n</p>\r\n\r\n",
  "translatedContent": "<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。</p>\n\n<p>现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,2,2,5,2,3,7]\n<strong>输出:</strong> 5\n<strong>原因:</strong> 最长的和谐数组是：[3,2,2,2,3].\n</pre>\n\n<p><strong>说明:</strong> 输入的数组长度最大不超过20,000.</p>\n"
}
