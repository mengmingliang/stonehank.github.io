{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findLHS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> nums){\n    <span class=\"hljs-keyword\">if</span>(hash[n]==<span class=\"hljs-literal\">null</span>)hash[n]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> hash[n]++\n  }\n  <span class=\"hljs-keyword\">let</span> maxLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> hash){\n    <span class=\"hljs-keyword\">let</span> nxt=+k+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span>(hash[nxt]&gt;<span class=\"hljs-number\">0</span>)maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,hash[k]+hash[nxt])\n  }\n  <span class=\"hljs-keyword\">return</span> maxLen\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-harmonious-subsequence",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>首先通过<code>hash</code>将每一个数字的频率保存。</p>\n<p>然后对每一个<code>hash[k]</code>，找出是否存在<code>hash[k+1]</code>，如果存在<code>hash[k+1]</code>，那么就和最大长度<code>maxLen</code>比较。</p>\n<p>最后返回<code>maxLen</code>，注意，只需要比较<code>hash[k+1]</code>，不需要比较<code>hash[k-1]</code>，因为每一个数字都是连锁的。</p>\n",
  "content": "<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。</p>\n\n<p>现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,2,2,5,2,3,7]\n<strong>输出:</strong> 5\n<strong>原因:</strong> 最长的和谐数组是：[3,2,2,2,3].\n</pre>\n\n<p><strong>说明:</strong> 输入的数组长度最大不超过20,000.</p>\n"
}
