{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestValidParentheses = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[<span class=\"hljs-number\">-1</span>]\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n    <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"(\"</span>){\n      stack.push(i)\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(stack.length&gt;<span class=\"hljs-number\">1</span>){\n        stack.pop()\n        max=<span class=\"hljs-built_in\">Math</span>.max(max,i-stack[stack.length<span class=\"hljs-number\">-1</span>])\n      }<span class=\"hljs-keyword\">else</span>{\n        stack[<span class=\"hljs-number\">0</span>]=i\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> max\n  \n  <span class=\"hljs-comment\">// var max = 0;</span>\n  <span class=\"hljs-comment\">// var n = s.length;</span>\n  <span class=\"hljs-comment\">// var dp = Array(n).fill(0)</span>\n  <span class=\"hljs-comment\">// for(var i = 1; i &lt; n; i++){</span>\n  <span class=\"hljs-comment\">//   if (s[i] === ')' &amp;&amp; s[i - 1] === '('){</span>\n  <span class=\"hljs-comment\">//       dp[i] = (dp[i - 2] || 0) + 2;</span>\n  <span class=\"hljs-comment\">//   } else {</span>\n  <span class=\"hljs-comment\">//     if (s[i] === ')' &amp;&amp; dp[i - 1] &gt; 0 &amp;&amp; s[i - dp[i - 1] - 1] === '('){</span>\n  <span class=\"hljs-comment\">//       dp[i] = 2 + dp[i - 1];</span>\n  <span class=\"hljs-comment\">//       dp[i] += (dp[i - dp[i]] || 0)</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   max = Math.max(max, dp[i])</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return max;</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-valid-parentheses",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>一般来说，遇到括号问题，首先会想到用<code>stack</code>，这道题也同样，用<code>stack</code>保存每一个括号的索引值，每次<code>pop</code>的时候，\n记录最大值。</p>\n<p>另外这道题也可以用<code>DP</code>，<code>DP</code>的思路是当存在<code>()</code>，需要<code>+2</code>，当存在<code>(()())</code>，需要<code>+2</code>后再加上第一个<code>(</code>上的值。</p>\n",
  "content": "<p>给定一个只包含 <code>&#39;(&#39;</code>&nbsp;和 <code>&#39;)&#39;</code>&nbsp;的字符串，找出最长的包含有效括号的子串的长度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;(()&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()&quot;</code>\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;<code>)()())</code>&quot;\n<strong>输出:</strong> 4\n<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()()&quot;</code>\n</pre>\n"
}
