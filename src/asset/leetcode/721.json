{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[][]} accounts\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> accountsMerge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">accounts</span>) </span>{\n\n<span class=\"hljs-comment\">//   let emailToNum={},vertexToEmail=[],startId=0,vertexToName=[]</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;accounts.length;i++){</span>\n<span class=\"hljs-comment\">//     let name=accounts[i][0]</span>\n<span class=\"hljs-comment\">//     for(let j=1;j&lt;accounts[i].length;j++){</span>\n<span class=\"hljs-comment\">//       let cur=accounts[i][j]</span>\n<span class=\"hljs-comment\">//       if(emailToNum[cur]==null){</span>\n<span class=\"hljs-comment\">//         emailToNum[cur]=startId</span>\n<span class=\"hljs-comment\">//         vertexToEmail[startId]=cur</span>\n<span class=\"hljs-comment\">//         vertexToName[startId]=name</span>\n<span class=\"hljs-comment\">//         startId++</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   let graph=[]</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;accounts.length;i++){</span>\n<span class=\"hljs-comment\">//     let v=emailToNum[accounts[i][1]]</span>\n<span class=\"hljs-comment\">//     if(graph[v]==null)graph[v]=[]</span>\n<span class=\"hljs-comment\">//     for(let j=2;j&lt;accounts[i].length;j++){</span>\n<span class=\"hljs-comment\">//       graph[v].push(emailToNum[accounts[i][j]])    </span>\n<span class=\"hljs-comment\">//       if(graph[emailToNum[accounts[i][j]]]==null)graph[emailToNum[accounts[i][j]]]=[v]</span>\n<span class=\"hljs-comment\">//       else graph[emailToNum[accounts[i][j]]].push(v)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n<span class=\"hljs-comment\">//   let allV=graph.length</span>\n<span class=\"hljs-comment\">//   let result=[]</span>\n<span class=\"hljs-comment\">//   let marked=[]</span>\n<span class=\"hljs-comment\">//   for(let v=0;v&lt;allV;v++){</span>\n<span class=\"hljs-comment\">//     if(marked[v])continue</span>\n<span class=\"hljs-comment\">//     result.push([vertexToName[v]])</span>\n<span class=\"hljs-comment\">//     dfs(graph,v)</span>\n<span class=\"hljs-comment\">//   }</span>\n  \n<span class=\"hljs-comment\">//   function dfs(graph,v){</span>\n<span class=\"hljs-comment\">//     insert(result[result.length-1],vertexToEmail[v])</span>\n<span class=\"hljs-comment\">//     marked[v]=true</span>\n<span class=\"hljs-comment\">//     let adj=graph[v]</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;adj.length;i++){</span>\n<span class=\"hljs-comment\">//       if(marked[adj[i]])continue</span>\n<span class=\"hljs-comment\">//       dfs(graph,adj[i])</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   function insert(arr,str){</span>\n<span class=\"hljs-comment\">//     let id=arr.length</span>\n<span class=\"hljs-comment\">//     while(id&gt;=1){</span>\n<span class=\"hljs-comment\">//       if(str&lt;arr[id-1])id--</span>\n<span class=\"hljs-comment\">//       else break</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     arr.splice(id,0,str)</span>\n<span class=\"hljs-comment\">//   }</span>\n\n\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WeightquickUnion</span>(<span class=\"hljs-params\">N</span>)</span>{\n    <span class=\"hljs-keyword\">const</span> sz=[]\n    <span class=\"hljs-keyword\">const</span> id=[]\n    <span class=\"hljs-comment\">// count为当前有多少个连通的组合</span>\n    <span class=\"hljs-keyword\">let</span> count=N\n    <span class=\"hljs-comment\">// N为连接点的数量</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n      id[i]=i\n      sz[i]=<span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-comment\">// 找到根节点</span>\n    <span class=\"hljs-keyword\">this</span>.find=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i</span>)</span>{\n      <span class=\"hljs-keyword\">while</span>(id[i]!==i){\n        i=id[i]\n      }\n      <span class=\"hljs-keyword\">return</span> i\n    }\n    <span class=\"hljs-keyword\">this</span>.count=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n      <span class=\"hljs-keyword\">return</span> count\n    }\n    <span class=\"hljs-comment\">// 判断两点是否已经连通</span>\n    <span class=\"hljs-keyword\">this</span>.connected=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p,q</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.find(p)===<span class=\"hljs-keyword\">this</span>.find(q)\n    }\n    <span class=\"hljs-keyword\">this</span>.union=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">p,q</span>) </span>{\n      <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-keyword\">this</span>.find(p)\n      <span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-keyword\">this</span>.find(q)\n      <span class=\"hljs-comment\">// 相同的源头，不进行处理</span>\n      <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">return</span>\n      <span class=\"hljs-comment\">// 判断大小树，小树连接到大树</span>\n      <span class=\"hljs-keyword\">if</span>(sz[i]&lt;sz[j]){\n        sz[j]+=sz[i]\n        id[i]=j\n      }<span class=\"hljs-keyword\">else</span>{\n        sz[i]+=sz[j]\n        id[j]=i\n      }\n      count--\n    }\n    <span class=\"hljs-keyword\">this</span>.showId=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n      <span class=\"hljs-keyword\">return</span> id\n    }\n    <span class=\"hljs-keyword\">this</span>.showSz=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">return</span> sz\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> uf = <span class=\"hljs-keyword\">new</span> WeightquickUnion(accounts.length)\n  <span class=\"hljs-keyword\">const</span> email2id = {}\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; accounts.length; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &lt; accounts[i].length; j++) {\n      <span class=\"hljs-keyword\">const</span> email = accounts[i][j]\n      <span class=\"hljs-keyword\">if</span> (email2id[email] !== <span class=\"hljs-literal\">undefined</span>) {\n        uf.union(i, email2id[email])\n      } <span class=\"hljs-keyword\">else</span> {\n        email2id[email] = i\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> sortedEmails = <span class=\"hljs-built_in\">Object</span>.keys(email2id).sort()\n  <span class=\"hljs-keyword\">const</span> id2emails = {}\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> email <span class=\"hljs-keyword\">of</span> sortedEmails) {\n    <span class=\"hljs-keyword\">const</span> id = uf.find(email2id[email])\n    <span class=\"hljs-keyword\">if</span> (id2emails[id] == <span class=\"hljs-literal\">null</span>) id2emails[id] = []\n    id2emails[id].push(email)\n  }\n  <span class=\"hljs-keyword\">const</span> res = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> id <span class=\"hljs-keyword\">in</span> id2emails) {\n    res.push([accounts[id][<span class=\"hljs-number\">0</span>], ...id2emails[id]])\n  }\n\n  <span class=\"hljs-keyword\">return</span> res\n\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "accounts-merge",
  "translatedContent": "<p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code>&nbsp;是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code>&nbsp;是&nbsp;<em>名称 (name)</em>，其余元素是 <em>emails </em>表示该帐户的邮箱地址。</p>\n\n<p>现在，我们想合并这些帐户。如果两个帐户都有一些共同的邮件地址，则两个帐户必定属于同一个人。请注意，即使两个帐户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的帐户，但其所有帐户都具有相同的名称。</p>\n\n<p>合并帐户后，按以下格式返回帐户：每个帐户的第一个元素是名称，其余元素是按顺序排列的邮箱地址。accounts 本身可以以任意顺序返回。</p>\n\n<p><strong>例子 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \naccounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Explanation:</strong> \n  第一个和第三个 John 是同一个人，因为他们有共同的电子邮件 &quot;johnsmith@mail.com&quot;。 \n  第二个 John 和 Mary 是不同的人，因为他们的电子邮件地址没有被其他帐户使用。\n  我们可以以任何顺序返回这些列表，例如答案[[&#39;Mary&#39;，&#39;mary@mail.com&#39;]，[&#39;John&#39;，&#39;johnnybravo@mail.com&#39;]，\n  [&#39;John&#39;，&#39;john00@mail.com&#39;，&#39;john_newyork@mail.com&#39;，&#39;johnsmith@mail.com&#39;]]仍然会被接受。\n\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>accounts</code>的长度将在<code>[1，1000]</code>的范围内。</li>\n\t<li><code>accounts[i]</code>的长度将在<code>[1，10]</code>的范围内。</li>\n\t<li><code>accounts[i][j]</code>的长度将在<code>[1，30]</code>的范围内。</li>\n</ul>\n"
}
