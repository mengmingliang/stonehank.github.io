{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} graph\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestPathLength = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">graph</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> starts=[]\n  <span class=\"hljs-keyword\">let</span> minLen=<span class=\"hljs-number\">13</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;graph.length;i++){\n    <span class=\"hljs-keyword\">if</span>(graph[i].length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">if</span>(graph[i].length&lt;minLen){\n      minLen=graph[i].length\n      starts=[i]\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(graph[i].length===minLen){\n      starts.push(i)\n    }\n  }\n\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> s <span class=\"hljs-keyword\">of</span> starts){\n    <span class=\"hljs-keyword\">if</span>(graph[s].length===graph.length<span class=\"hljs-number\">-1</span>)res=graph.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">else</span> res=<span class=\"hljs-built_in\">Math</span>.min(res,bfs(s))\n  }\n  <span class=\"hljs-keyword\">return</span> res===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-number\">0</span>:res\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bfs</span>(<span class=\"hljs-params\">start</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> visited=<span class=\"hljs-built_in\">Array</span>(graph.length).fill(<span class=\"hljs-number\">0</span>)\n    visited[start]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> arr=[[start,visited,<span class=\"hljs-number\">1</span>,<span class=\"hljs-literal\">null</span>]]\n    <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">let</span> len=arr.length\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n        <span class=\"hljs-keyword\">let</span> [v,visited,count,parent]=arr.shift()\n        <span class=\"hljs-keyword\">let</span> adj=graph[v]\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;adj.length;j++){\n          <span class=\"hljs-keyword\">let</span> newVisited=visited.slice()\n          <span class=\"hljs-keyword\">let</span> newCount=count\n          <span class=\"hljs-keyword\">if</span>(!newVisited[adj[j]]){\n            newCount++\n            newVisited[adj[j]]=<span class=\"hljs-number\">1</span>\n          }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">if</span>(adj.length&gt;<span class=\"hljs-number\">1</span> &amp;&amp; parent===adj[j])<span class=\"hljs-keyword\">continue</span>\n            newVisited[adj[j]]++\n          }\n          <span class=\"hljs-keyword\">if</span>(newCount===visited.length)<span class=\"hljs-keyword\">return</span> step+<span class=\"hljs-number\">1</span>\n          <span class=\"hljs-keyword\">if</span>(newVisited[adj[j]]&gt;graph[adj[j]].length)<span class=\"hljs-keyword\">continue</span>\n          arr.push([adj[j],newVisited,newCount,v])\n        }\n      }\n      step++\n    }    \n  }\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-path-visiting-all-nodes",
  "content": "<p>给出&nbsp;<code>graph</code>&nbsp;为有 N 个节点（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）的无向连通图。&nbsp;</p>\n\n<p><code>graph.length = N</code>，且只有节点 <code>i</code>&nbsp;和 <code>j</code>&nbsp;连通时，<code>j != i</code>&nbsp;在列表&nbsp;<code>graph[i]</code>&nbsp;中恰好出现一次。</p>\n\n<p>返回能够访问所有节点的最短路径的长度。你可以在任一节点开始和停止，也可以多次重访节点，并且可以重用边。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2,3],[0],[0],[0]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [1,0,2,0,3]</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>一个可能的路径为 [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n"
}
