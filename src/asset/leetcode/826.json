{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} difficulty\n * @param {number[]} profit\n * @param {number[]} worker\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxProfitAssignment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">difficulty, profit, worker</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(difficulty.length).fill(<span class=\"hljs-number\">0</span>)\n  \n  <span class=\"hljs-keyword\">let</span> minDifficult=<span class=\"hljs-literal\">Infinity</span>,minDiffIdx\n\n  <span class=\"hljs-keyword\">let</span> diff_pro=[]\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;difficulty.length;i++){\n    diff_pro[i]=[difficulty[i],profit[i]]\n  }  \n  \n  diff_pro.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  \n  dp[<span class=\"hljs-number\">0</span>]=diff_pro[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;diff_pro.length;i++){\n    dp[i]=<span class=\"hljs-built_in\">Math</span>.max(dp[i<span class=\"hljs-number\">-1</span>],diff_pro[i][<span class=\"hljs-number\">1</span>])\n  }   \n  \n  <span class=\"hljs-comment\">// console.log(dp,diff_pro)</span>\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;worker.length;i++){\n    <span class=\"hljs-keyword\">if</span>(worker[i]&lt;diff_pro[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">continue</span>\n    sum+=dp[bs(diff_pro,worker[i])]\n  }\n  \n  <span class=\"hljs-keyword\">return</span> sum\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bs</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.ceil((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid][<span class=\"hljs-number\">0</span>]&gt;n)hi=mid<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">else</span> lo=mid\n    }\n    <span class=\"hljs-keyword\">return</span> lo\n  }\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "most-profit-assigning-work",
  "content": "<p>有一些工作：<code>difficulty[i]&nbsp;</code>表示第<code>i</code>个工作的难度，<code>profit[i]</code>表示第<code>i</code>个工作的收益。</p>\n\n<p>现在我们有一些工人。<code>worker[i]</code>是第<code>i</code>个工人的能力，即该工人只能完成难度小于等于<code>worker[i]</code>的工作。</p>\n\n<p>每一个工人都最多只能安排一个工作，但是一个工作可以完成多次。</p>\n\n<p>举个例子，如果3个工人都尝试完成一份报酬为1的同样工作，那么总收益为 $3。如果一个工人不能完成任何工作，他的收益为 $0 。</p>\n\n<p>我们能得到的最大收益是多少？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>输出: </strong>100 \n<strong>解释: </strong>工人被分配的工作难度是 [4,4,6,6] ，分别获得 [20,20,30,30] 的收益。</pre>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; 的范围是&nbsp;<code>[1, 10^5]</code></li>\n</ul>\n"
}
