{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> wordBreak = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, wordDict</span>) </span>{\n  <span class=\"hljs-comment\">// let hash={}</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;wordDict.length;i++){</span>\n  <span class=\"hljs-comment\">//   hash[wordDict[i]]=true</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// let visited=[]</span>\n  <span class=\"hljs-comment\">// let find=false</span>\n  <span class=\"hljs-comment\">// function backtrack(start){</span>\n  <span class=\"hljs-comment\">//   if(start&gt;=s.length)return find=true</span>\n  <span class=\"hljs-comment\">//   let cur=''</span>\n  <span class=\"hljs-comment\">//   for(let i=start;i&lt;s.length;i++){</span>\n  <span class=\"hljs-comment\">//     if(visited[i])continue</span>\n  <span class=\"hljs-comment\">//     let w=cur+s.substring(start,i+1)</span>\n  <span class=\"hljs-comment\">//     if(hash[w]){</span>\n  <span class=\"hljs-comment\">//       visited[i]=true</span>\n  <span class=\"hljs-comment\">//       backtrack(i+1)     </span>\n  <span class=\"hljs-comment\">//       if(find)return</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// backtrack(0)</span>\n  <span class=\"hljs-comment\">// return find</span>\n\n  <span class=\"hljs-comment\">// dp</span>\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(s.length + <span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">false</span>)\n\n  dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>; i &lt;= s.length; i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>; j &lt; i; j++){\n      <span class=\"hljs-keyword\">if</span>(dp[j] &amp;&amp; wordDict.includes(s.substring(j, i))){\n        dp[i] = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> dp[s.length];\n};\n</code></pre>\n"
  ],
  "titleSlug": "word-break",
  "content": "<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>拆分时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]\n<strong>输出:</strong> true\n<strong>解释:</strong> 返回 true 因为 <code>&quot;</code>applepenapple<code>&quot;</code> 可以被拆分成 <code>&quot;</code>apple pen apple<code>&quot;</code>。\n&nbsp;    注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>输出:</strong> false\n</pre>\n"
}
