{
  "code": [
    "/**\n * @param {number[][]} matrix\n * @return {number}\n */\nvar longestIncreasingPath = function(matrix) {\n  // dfs\n  \n  let max=0,visited=[]\n  for(let i=0;i<matrix.length;i++){\n    visited[i]=[]\n  }\n  \n  for(let i=0;i<matrix.length;i++){\n    for(let j=0;j<matrix[i].length;j++){\n      if(visited[i][j])continue\n      dfs(i,j,matrix[i][j])\n      function dfs(i,j,val){\n        if(visited[i][j]!=null)return visited[i][j]\n        let count=1\n        if(i>0 && matrix[i-1][j]>val){\n          count=Math.max(dfs(i-1,j,matrix[i-1][j])+1,count)\n        }\n        if(i<matrix.length-1 && matrix[i+1][j]>val){\n          count=Math.max(dfs(i+1,j,matrix[i+1][j])+1,count)\n        }\n        if(j>0 && matrix[i][j-1]>val){\n          count=Math.max(dfs(i,j-1,matrix[i][j-1])+1,count)\n        }\n        if(j<matrix[0].length-1 && matrix[i][j+1]>val){\n          count=Math.max(dfs(i,j+1,matrix[i][j+1])+1,count)\n        }\n        visited[i][j]=count\n        if(count>max)max=count\n        return count\n      }\n    }\n  }\n  // for(let i=0;i<visited.length;i++){\n  //   for(let j=0;j<visited[i].length;j++){\n  //     if(visited[i][j]>max)max=visited[i][j]\n  //   }\n  // }\n  return max\n};"
  ],
  "titleSlug": "longest-increasing-path-in-a-matrix",
  "content": "<p>Given an integer matrix, find the length of the longest increasing path.</p>\r\n\r\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = \r\n[\r\n  [<font color=\"red\">9</font>,9,4],\r\n  [<font color=\"red\">6</font>,6,8],\r\n  [<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\r\n] \r\n<strong>Output:</strong> 4 \r\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = \r\n[\r\n  [<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\r\n  [3,2,<font color=\"red\">6</font>],\r\n  [2,2,1]\r\n] \r\n<strong>Output: </strong>4 \r\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\r\n</pre>",
  "translatedContent": "<p>给定一个整数矩阵，找出最长递增路径的长度。</p>\n\n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>nums = \n[\n  [<strong>9</strong>,9,4],\n  [<strong>6</strong>,6,8],\n  [<strong>2</strong>,<strong>1</strong>,1]\n] \n<strong>输出:</strong> 4 \n<strong>解释:</strong> 最长递增路径为&nbsp;<code>[1, 2, 6, 9]</code>。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> nums = \n[\n  [<strong>3</strong>,<strong>4</strong>,<strong>5</strong>],\n  [3,2,<strong>6</strong>],\n  [2,2,1]\n] \n<strong>输出: </strong>4 \n<strong>解释: </strong>最长递增路径是&nbsp;<code>[3, 4, 5, 6]</code>。注意不允许在对角线方向上移动。\n</pre>\n"
}
