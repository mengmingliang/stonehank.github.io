{
  "code": [
    "/**\n * @param {string} s\n * @return {string}\n */\nvar originalDigits = function(s) {\n  let num=Array(10).fill(0)\n  let cache={\n    a:0,b:1,c:2,d:3,e:4,f:5,g:6,h:7,i:8,j:9,k:10,l:11,m:12,n:13,\n    o:14,p:15,q:16,r:17,s:18,t:19,u:20,v:21,w:22,x:23,y:24,z:25\n  }\n  let letterCount=[]\n  for(let i=0;i<s.length;i++){\n    let curId=cache[s[i]]\n    if(!letterCount[curId])letterCount[curId]=1\n    else letterCount[curId]++\n  }\n  function rm(word,n){\n    for(let i=0;i<word.length;i++)letterCount[cache[word[i]]]-=n\n    return letterCount\n  }\n  for(let i=0;i<letterCount.length;i++){\n    if(!letterCount[i])continue\n    let curC=letterCount[i]\n    if(i===cache[\"z\"]){rm(\"zero\",curC);num[0]+=curC}\n    else if(i===cache[\"w\"]){rm(\"two\",curC);num[2]+=curC}\n    else if(i===cache[\"u\"]){rm(\"four\",curC);num[4]+=curC}\n    else if(i===cache[\"x\"]){rm(\"six\",curC);num[6]+=curC}\n    else if(i===cache[\"g\"]){rm(\"eight\",curC);num[8]+=curC}\n  }\n\n  for(let i=0;i<letterCount.length;i++){\n    if(!letterCount[i])continue\n    let curC=letterCount[i]\n    if(i===cache[\"o\"]){rm(\"one\",curC);num[1]+=curC}\n    else if(i===cache[\"h\"]){rm(\"three\",curC);num[3]+=curC}\n    else if(i===cache[\"f\"]){rm(\"five\",curC);num[5]+=curC}\n    else if(i===cache[\"s\"]){rm(\"seven\",curC);num[7]+=curC}\n  }\n  for(let i=0;i<letterCount.length;i++){\n    if(!letterCount[i])continue\n    let curC=letterCount[i]\n    if(i===cache[\"e\"]){rm(\"nine\",curC);num[9]+=curC}\n  }\n  let res=''\n  for(let i=0;i<num.length;i++)\n    res+=(i+'').repeat(num[i])\n  return res\n};"
  ],
  "titleSlug": "reconstruct-original-digits-from-english",
  "content": "<p>Given a <b>non-empty</b> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>Input contains only lowercase English letters.</li>\r\n<li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.</li>\r\n<li>Input length is less than 50,000.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: \"owoztneoer\"\r\n\r\nOutput: \"012\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\nInput: \"fviefuro\"\r\n\r\nOutput: \"45\"\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个<strong>非空</strong>字符串，其中包含字母顺序打乱的英文单词表示的数字<code>0-9</code>。按升序输出原始的数字。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入只包含小写英文字母。</li>\n\t<li>输入保证合法并可以转换为原始的数字，这意味着像 &quot;abc&quot; 或 &quot;zerone&quot; 的输入是不允许的。</li>\n\t<li>输入字符串的长度小于 50,000。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n输入: &quot;owoztneoer&quot;\n\n输出: &quot;012&quot; (zeroonetwo)\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n输入: &quot;fviefuro&quot;\n\n输出: &quot;45&quot; (fourfive)\n</pre>\n"
}
