{
  "code": [
    "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    // let left=[],maxProfit=0,minPrice=Infinity\n    // for(let i=0;i<prices.length;i++){\n    //     if(prices[i]<minPrice)minPrice=prices[i]\n    //     if(prices[i]-minPrice>maxProfit)maxProfit=prices[i]-minPrice\n    //     left[i]=maxProfit\n    // }\n    \n    // let maxPrice=0\n    // maxProfit=0\n    // for(let i=prices.length-1;i>=1;i--){\n    //     if(prices[i]>maxPrice)maxPrice=prices[i]\n    //     if(maxPrice-prices[i]+left[i]>maxProfit)maxProfit=maxPrice-prices[i]+left[i]\n    // }\n    // return maxProfit\n    \n    let sell1=0,buy1=-prices[0],sell2=0,buy2=-prices[0]\n    for(let i=0;i<prices.length;i++){\n        sell1=Math.max(buy1+prices[i],sell1)\n        buy1=Math.max(buy1,-prices[i])\n        sell2=Math.max(buy2+prices[i],sell2)\n        buy2=Math.max(-prices[i]+sell1,buy2)\n    }\n    return sell2\n};"
  ],
  "titleSlug": "best-time-to-buy-and-sell-stock-iii",
  "content": "<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,3,5,0,0,3,1,4]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\r\n&nbsp;            Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,4,5]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\r\n&nbsp;            Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\r\n&nbsp;            engaging multiple transactions at the same time. You must sell before buying again.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,6,4,3,1]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.</pre>\r\n",
  "translatedContent": "<p>给定一个数组，它的第<em> i</em> 个元素是一支给定的股票在第 <em>i </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成&nbsp;<em>两笔&nbsp;</em>交易。</p>\n\n<p><strong>注意:</strong>&nbsp;你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> [3,3,5,0,0,3,1,4]\n<strong>输出:</strong> 6\n<strong>解释:</strong> 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n&nbsp;    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1,2,3,4,5]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 &nbsp; \n&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 &nbsp; \n&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> [7,6,4,3,1] \n<strong>输出:</strong> 0 \n<strong>解释:</strong> 在这个情况下, 没有交易完成, 所以最大利润为 0。</pre>\n"
}
