{
  "code": [
    "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n    let res=0,cache={}\n    for(let i=0;i<points.length;i++){\n        let m=new Map(),p1=points[i]\n        for(let j=0;j<points.length;j++){\n            if(i===j)continue;\n            let p2=points[j]\n            let d1=p1[0]-p2[0]\n            let d2=p1[1]-p2[1]\n            let dis=Math.sqrt(d1*d1+d2*d2)\n            if(!m.has(dis))m.set(dis,1)\n            else m.set(dis,m.get(dis)+1)\n        }\n        for(let k of m){\n            let v=k[1]\n            if(v>1)res+=v*v-v\n        }\n    }\n    return res\n};"
  ],
  "titleSlug": "number-of-boomerangs",
  "content": "<p>Given <i>n</i> points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<b>the order of the tuple matters</b>).</p>\r\n\r\n<p>Find the number of boomerangs. You may assume that <i>n</i> will be at most <b>500</b> and coordinates of points are all in the range <b>[-10000, 10000]</b> (inclusive).</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[[0,0],[1,0],[2,0]]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nThe two boomerangs are <b>[[1,0],[0,0],[2,0]]</b> and <b>[[1,0],[2,0],[0,0]]</b>\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定平面上<em>&nbsp;n </em>对不同的点，&ldquo;回旋镖&rdquo; 是由点表示的元组&nbsp;<code>(i, j, k)</code>&nbsp;，其中&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;之间的距离和&nbsp;<code>i</code>&nbsp;和&nbsp;<code>k</code>&nbsp;之间的距离相等（<strong>需要考虑元组的顺序</strong>）。</p>\n\n<p>找到所有回旋镖的数量。你可以假设<em>&nbsp;n </em>最大为 <strong>500</strong>，所有点的坐标在闭区间<strong> [-10000, 10000] </strong>中。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[[0,0],[1,0],[2,0]]\n\n<strong>输出:</strong>\n2\n\n<strong>解释:</strong>\n两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n"
}
