{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> solveSudoku = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> memRow=[],memCol=[],memBlock=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkRow</span>(<span class=\"hljs-params\">rowIdx,val</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!memRow[rowIdx])memRow[rowIdx]=[]\n    <span class=\"hljs-keyword\">return</span> !memRow[rowIdx][val]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkCol</span>(<span class=\"hljs-params\">colIdx,val</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!memCol[colIdx])memCol[colIdx]=[]\n    <span class=\"hljs-keyword\">return</span> !memCol[colIdx][val]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkBlock</span>(<span class=\"hljs-params\">blockIdx,val</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!memBlock[blockIdx])memBlock[blockIdx]=[]\n    <span class=\"hljs-keyword\">return</span> !memBlock[blockIdx][val]\n  }\n  <span class=\"hljs-keyword\">let</span> needToFill=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> r=<span class=\"hljs-number\">0</span>;r&lt;board.length;r++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">0</span>;c&lt;board[r].length;c++){\n      <span class=\"hljs-keyword\">let</span> curVal=board[r][c]\n      <span class=\"hljs-keyword\">if</span>(curVal!==<span class=\"hljs-string\">'.'</span>){\n        <span class=\"hljs-keyword\">if</span>(!memRow[r])memRow[r]=[]\n        memRow[r][curVal]=<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span>(!memCol[c])memCol[c]=[]\n        memCol[c][curVal]=<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">let</span> blockIdx=<span class=\"hljs-built_in\">Math</span>.floor(r/<span class=\"hljs-number\">3</span>)*<span class=\"hljs-number\">3</span>+<span class=\"hljs-built_in\">Math</span>.floor(c/<span class=\"hljs-number\">3</span>)\n        <span class=\"hljs-keyword\">if</span>(!memBlock[blockIdx])memBlock[blockIdx]=[]\n        memBlock[blockIdx][curVal]=<span class=\"hljs-number\">1</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        needToFill.push([r,c])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> hasFound=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillandCheck</span>(<span class=\"hljs-params\">index</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(index===needToFill.length)<span class=\"hljs-keyword\">return</span> hasFound=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> cur=needToFill[index]\n    <span class=\"hljs-keyword\">let</span> [r,c]=cur\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> val=<span class=\"hljs-number\">1</span>;val&lt;<span class=\"hljs-number\">10</span>;val++){\n      val=<span class=\"hljs-string\">''</span>+val\n      <span class=\"hljs-keyword\">let</span> blockIdx=<span class=\"hljs-built_in\">Math</span>.floor(r/<span class=\"hljs-number\">3</span>)*<span class=\"hljs-number\">3</span>+<span class=\"hljs-built_in\">Math</span>.floor(c/<span class=\"hljs-number\">3</span>)\n      <span class=\"hljs-keyword\">if</span>(checkRow(r,val) &amp;&amp; checkCol(c,val) &amp;&amp; checkBlock(blockIdx,val)){\n        memRow[r][val]=<span class=\"hljs-number\">1</span>\n        memCol[c][val]=<span class=\"hljs-number\">1</span>\n        memBlock[blockIdx][val]=<span class=\"hljs-number\">1</span>\n        board[r][c]=val\n        fillandCheck(index+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">if</span>(hasFound)<span class=\"hljs-keyword\">return</span>\n        board[r][c]=<span class=\"hljs-string\">'.'</span>\n        memRow[r][val]=<span class=\"hljs-number\">0</span>\n        memCol[c][val]=<span class=\"hljs-number\">0</span>\n        memBlock[blockIdx][val]=<span class=\"hljs-number\">0</span>\n      }\n    }\n  }\n\n  fillandCheck(<span class=\"hljs-number\">0</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "sudoku-solver",
  "content": "<p>编写一个程序，通过已填充的空格来解决数独问题。</p>\n\n<p>一个数独的解法需<strong>遵循如下规则</strong>：</p>\n\n<ol>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。</li>\n</ol>\n\n<p>空白格用&nbsp;<code>&#39;.&#39;</code>&nbsp;表示。</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"></p>\n\n<p><small>一个数独。</small></p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"></p>\n\n<p><small>答案被标成红色。</small></p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>给定的数独序列只包含数字&nbsp;<code>1-9</code>&nbsp;和字符&nbsp;<code>&#39;.&#39;</code>&nbsp;。</li>\n\t<li>你可以假设给定的数独只有唯一解。</li>\n\t<li>给定数独永远是&nbsp;<code>9x9</code>&nbsp;形式的。</li>\n</ul>\n"
}
