{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestPathBinaryMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=grid.length\n  <span class=\"hljs-keyword\">if</span>(N===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">if</span>(grid[N<span class=\"hljs-number\">-1</span>][N<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">if</span>(grid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(N).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-literal\">false</span>))\n  used[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> arr=[[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]]\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> [x,y]=arr.shift()\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">-1</span>;j&lt;=<span class=\"hljs-number\">1</span>;j++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">-1</span>;k&lt;=<span class=\"hljs-number\">1</span>;k++){\n          <span class=\"hljs-keyword\">if</span>(j===<span class=\"hljs-number\">0</span> &amp;&amp; k===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> nx=x+j,ny=y+k\n          <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || ny&lt;<span class=\"hljs-number\">0</span> || nx&gt;=N || ny&gt;=N)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">if</span>(grid[nx][ny]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">if</span>(nx===N<span class=\"hljs-number\">-1</span> &amp;&amp; ny===N<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> step+<span class=\"hljs-number\">1</span>\n          <span class=\"hljs-keyword\">if</span>(used[nx][ny])<span class=\"hljs-keyword\">continue</span>\n          used[nx][ny]=<span class=\"hljs-literal\">true</span>\n          arr.push([nx,ny])\n        }\n      }\n    }\n    step++\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-path-in-binary-matrix",
  "hasThinking": false,
  "content": "<p>在一个&nbsp;N &times;&nbsp;N 的方形网格中，每个单元格有两种状态：空（0）或者阻塞（1）。</p>\n\n<p>一条从左上角到右下角、长度为 <code>k</code> 的畅通路径，由满足下述条件的单元格&nbsp;<code>C_1, C_2, ..., C_k</code>&nbsp;组成：</p>\n\n<ul>\n\t<li>相邻单元格&nbsp;<code>C_i</code> 和&nbsp;<code>C_{i+1}</code>&nbsp;在八个方向之一上连通（此时，<code>C_i</code> 和&nbsp;<code>C_{i+1}</code>&nbsp;不同且共享边或角）</li>\n\t<li><code>C_1</code> 位于&nbsp;<code>(0, 0)</code>（即，值为&nbsp;<code>grid[0][0]</code>）</li>\n\t<li><code>C_k</code>&nbsp;位于&nbsp;<code>(N-1, N-1)</code>（即，值为&nbsp;<code>grid[N-1][N-1]</code>）</li>\n\t<li>如果 <code>C_i</code> 位于&nbsp;<code>(r, c)</code>，则 <code>grid[r][c]</code>&nbsp;为空（即，<code>grid[r][c] ==&nbsp;0</code>）</li>\n</ul>\n\n<p>返回这条从左上角到右下角的最短畅通路径的长度。如果不存在这样的路径，返回 -1 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[0,1],[1,0]]\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/16/example1_1.png\" style=\"height: 151px; width: 150px;\">\n<strong>输出：</strong>2\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/16/example1_2.png\" style=\"height: 151px; width: 150px;\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[0,0,0],[1,1,0],[1,1,0]]\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/16/example2_1.png\" style=\"height: 146px; width: 150px;\">\n<strong>输出：</strong>4\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/16/example2_2.png\" style=\"height: 151px; width: 150px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> 为&nbsp;<code>0</code> 或&nbsp;<code>1</code></li>\n</ol>\n"
}
