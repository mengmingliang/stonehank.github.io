{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findSubsequences = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n<span class=\"hljs-comment\">//   function backtrack(result,temp,start,nums){</span>\n<span class=\"hljs-comment\">//     if(temp.length&gt;1) result.push(temp.slice())</span>\n    \n<span class=\"hljs-comment\">//     let used=new Set()</span>\n<span class=\"hljs-comment\">//     for(let i=start;i&lt;nums.length;i++){</span>\n<span class=\"hljs-comment\">//       if(temp.length&gt;0 &amp;&amp; nums[i]&lt;temp[temp.length-1])continue</span>\n<span class=\"hljs-comment\">//       if(used.has(nums[i]))continue</span>\n<span class=\"hljs-comment\">//       temp.push(nums[i])</span>\n<span class=\"hljs-comment\">//       used.add(nums[i])</span>\n<span class=\"hljs-comment\">//       backtrack(result,temp,i+1,nums)</span>\n<span class=\"hljs-comment\">//       temp.pop()</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   let result=[]</span>\n<span class=\"hljs-comment\">//   backtrack(result,[],0,nums)</span>\n<span class=\"hljs-comment\">//   return result</span>\n  \n  \n  \n  <span class=\"hljs-comment\">// 方法二</span>\n  <span class=\"hljs-keyword\">let</span> mem=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">result,temp,start,nums</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">let</span> strify=<span class=\"hljs-built_in\">JSON</span>.stringify(temp)\n      <span class=\"hljs-keyword\">if</span>(!mem.has(strify)){\n        mem.set(strify,<span class=\"hljs-literal\">true</span>)\n        result.push(temp.slice())\n      }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; nums[i]&lt;temp[temp.length<span class=\"hljs-number\">-1</span>])<span class=\"hljs-keyword\">continue</span>\n      temp.push(nums[i])\n      backtrack(result,temp,i+<span class=\"hljs-number\">1</span>,nums)\n      temp.pop()\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> result=[]\n  backtrack(result,[],<span class=\"hljs-number\">0</span>,nums)\n  <span class=\"hljs-keyword\">return</span> result\n};\n\n</code></pre>\n"
  ],
  "titleSlug": "increasing-subsequences",
  "content": "<p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4, 6, 7, 7]\n<strong>输出:</strong> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给定数组的长度不会超过15。</li>\n\t<li>数组中的整数范围是&nbsp;[-100,100]。</li>\n\t<li>给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。</li>\n</ol>\n"
}
