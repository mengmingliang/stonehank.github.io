{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> detectCycle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> fast=head,slow=head\n  <span class=\"hljs-keyword\">let</span> cycle=<span class=\"hljs-literal\">false</span>,node=<span class=\"hljs-literal\">null</span>,loopLength=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(fast &amp;&amp; fast.next){\n    fast=fast.next.next\n    slow=slow.next\n    loopLength++\n    <span class=\"hljs-keyword\">if</span>(fast===slow){\n      cycle=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(!cycle)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  fast=head\n  <span class=\"hljs-keyword\">while</span>(fast!==slow){\n    slow=slow.next\n    fast=fast.next\n  }\n  <span class=\"hljs-keyword\">return</span> fast\n};\n</code></pre>\n"
  ],
  "titleSlug": "linked-list-cycle-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>首先通过快慢<code>双指针</code>计算出是否存在环，和环的节点数。</p>\n<h2>知道了环的节点数，继续<code>双指针</code>一前一后相隔环的长度，当它们相遇的时候，必定在环的起点。</h2>\n",
  "content": "<p>给定一个链表，返回链表开始入环的第一个节点。&nbsp;如果链表无环，则返回&nbsp;<code>null</code>。</p>\n\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>\n\n<p><strong>说明：</strong>不允许修改给定的链表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\n<strong>输出：</strong>tail connects to node index 1\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"></p>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>head = [1,2], pos = 0\n<strong>输出：</strong>tail connects to node index 0\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"></p>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>head = [1], pos = -1\n<strong>输出：</strong>no cycle\n<strong>解释：</strong>链表中没有环。\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br>\n你是否可以不用额外空间解决此题？</p>\n"
}
