{
  "code": [
    "/**\n * Initialize your data structure here.\n */\nvar MyHashSet = function() {\n    this.hashTable=[]\n    this.hash=function(key){\n        return key % 777\n    }\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n    let hashV=this.hash(key)\n    if(this.hashTable[hashV] && this.hashTable[hashV].includes(key))return\n    if(this.hashTable[hashV])this.hashTable[hashV].push(key)\n    else this.hashTable[hashV]=[key]\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n    let hashV=this.hash(key)\n    if(!this.hashTable[hashV])return\n    let idx=this.hashTable[hashV].indexOf(key)\n    if(idx===-1)return\n    this.hashTable[hashV].splice(idx,1)\n};\n\n/**\n * Returns true if this set contains the specified element \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n    let hashV=this.hash(key)\n    if(!this.hashTable[hashV])return false\n    return this.hashTable[hashV].includes(key)\n};\n\n/** \n * Your MyHashSet object will be instantiated and called as such:\n * var obj = Object.create(MyHashSet).createNew()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"
  ],
  "titleSlug": "design-hashset",
  "content": "<p>Design a HashSet&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>add(value)</code>:&nbsp;Insert a value into the HashSet.&nbsp;</li>\r\n\t<li><code>contains(value)</code> : Return whether the value exists in the HashSet or not.</li>\r\n\t<li><code>remove(value)</code>: Remove a value in&nbsp;the HashSet. If the value does not exist in the HashSet, do nothing.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashSet hashSet = new MyHashSet();\r\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// returns false (not found)\r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns false (already removed)\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashSet library.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>不使用任何内建的哈希表库设计一个哈希集合</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>add(value)</code>：向哈希集合中插入一个值。</li>\n\t<li><code>contains(value)</code> ：返回哈希集合中是否存在这个值。</li>\n\t<li><code>remove(value)</code>：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n\n<p><br>\n<strong>示例:</strong></p>\n\n<pre>MyHashSet hashSet = new MyHashSet();\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// 返回 false (未找到)\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回 true\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// 返回  false (已经被删除)\n</pre>\n\n<p><br>\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[1, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希集合库。</li>\n</ul>\n"
}
