{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findTargetSumWays = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, S</span>) </span>{\n<span class=\"hljs-comment\">//     let count=0</span>\n<span class=\"hljs-comment\">//     let cache={}</span>\n<span class=\"hljs-comment\">//     function calcSum(lo,sum){</span>\n<span class=\"hljs-comment\">//         if(lo===nums.length){</span>\n<span class=\"hljs-comment\">//             if(sum===S)count++</span>\n<span class=\"hljs-comment\">//             return sum</span>\n<span class=\"hljs-comment\">//         }</span>\n     \n<span class=\"hljs-comment\">//         calcSum(lo+1,sum-nums[lo])</span>\n<span class=\"hljs-comment\">//         calcSum(lo+1,sum+nums[lo])</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     calcSum(0,0)</span>\n<span class=\"hljs-comment\">//     return count</span>\n\n    \n  <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> nums) {\n    sum += n;\n  }\n  <span class=\"hljs-keyword\">return</span> sum &lt; S || (S + sum) % <span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : subsetSum(nums, (S + sum) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>);\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">subsetSum</span>(<span class=\"hljs-params\">nums, s</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-built_in\">Array</span>(s + <span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>);\n  dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> nums) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = s; i &gt;= n; i--) dp[i] += dp[i - n];\n  }\n  <span class=\"hljs-keyword\">return</span> dp[s];\n};\n</code></pre>\n"
  ],
  "titleSlug": "target-sum",
  "hasThinking": false,
  "content": "<p>给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号&nbsp;<code>+</code>&nbsp;和&nbsp;<code>-</code>。对于数组中的任意一个整数，你都可以从&nbsp;<code>+</code>&nbsp;或&nbsp;<code>-</code>中选择一个符号添加在前面。</p>\n\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums: [1, 1, 1, 1, 1], S: 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组的长度不会超过20，并且数组中的值全为正数。</li>\n\t<li>初始的数组的和不会超过1000。</li>\n\t<li>保证返回的最终结果为32位整数。</li>\n</ol>\n"
}
