{
  "code": [
    "/**\n * @param {number[]} nums\n * @param {number} S\n * @return {number}\n */\nvar findTargetSumWays = function(nums, S) {\n//     let count=0\n//     let cache={}\n//     function calcSum(lo,sum){\n//         if(lo===nums.length){\n//             if(sum===S)count++\n//             return sum\n//         }\n     \n//         calcSum(lo+1,sum-nums[lo])\n//         calcSum(lo+1,sum+nums[lo])\n//     }\n//     calcSum(0,0)\n//     return count\n\n    \n  let sum = 0;\n  for (let n of nums) {\n    sum += n;\n  }\n  return sum < S || (S + sum) % 2 > 0 ? 0 : subsetSum(nums, (S + sum) >>> 1);\n};\n\nfunction subsetSum(nums, s) {\n  const dp = Array(s + 1).fill(0);\n  dp[0] = 1;\n  for (let n of nums) {\n    for (let i = s; i >= n; i--) dp[i] += dp[i - n];\n  }\n  return dp[s];\n};"
  ],
  "titleSlug": "target-sum",
  "content": "<p>\r\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.\r\n</p> \r\n\r\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.  \r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums is [1, 1, 1, 1, 1], S is 3. \r\n<b>Output:</b> 5\r\n<b>Explanation:</b> \r\n\r\n-1+1+1+1+1 = 3\r\n+1-1+1+1+1 = 3\r\n+1+1-1+1+1 = 3\r\n+1+1+1-1+1 = 3\r\n+1+1+1+1-1 = 3\r\n\r\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array is positive and will not exceed 20. </li>\r\n<li>The sum of elements in the given array will not exceed 1000.</li>\r\n<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号&nbsp;<code>+</code>&nbsp;和&nbsp;<code>-</code>。对于数组中的任意一个整数，你都可以从&nbsp;<code>+</code>&nbsp;或&nbsp;<code>-</code>中选择一个符号添加在前面。</p>\n\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums: [1, 1, 1, 1, 1], S: 3\n<strong>输出:</strong> 5\n<strong>解释:</strong> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>数组的长度不会超过20，并且数组中的值全为正数。</li>\n\t<li>初始的数组的和不会超过1000。</li>\n\t<li>保证返回的最终结果为32位整数。</li>\n</ol>\n"
}
