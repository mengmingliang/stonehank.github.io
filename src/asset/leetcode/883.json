{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} grid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> projectionArea = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> arr=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;grid.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;grid[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> cur=grid[i][j]\n      <span class=\"hljs-keyword\">if</span>(cur!==<span class=\"hljs-number\">0</span>)\n        arr.push([i,j,cur])\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> hashX={},hashY={},zSum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n    <span class=\"hljs-keyword\">let</span> x=arr[i][<span class=\"hljs-number\">0</span>],\n      y=arr[i][<span class=\"hljs-number\">1</span>],\n      z=arr[i][<span class=\"hljs-number\">2</span>]\n      zSum++\n<span class=\"hljs-comment\">// console.log(x,y,z)</span>\n    <span class=\"hljs-keyword\">if</span>(hashX[x]===<span class=\"hljs-literal\">undefined</span>)hashX[x]=z\n    <span class=\"hljs-keyword\">if</span>(hashX[x]!==<span class=\"hljs-literal\">undefined</span> &amp;&amp; z&gt;hashX[x])hashX[x]=z\n    <span class=\"hljs-keyword\">if</span>(hashY[y]===<span class=\"hljs-literal\">undefined</span>)hashY[y]=z\n    <span class=\"hljs-keyword\">if</span>(hashY[y]!==<span class=\"hljs-literal\">undefined</span> &amp;&amp; z&gt;hashY[y])hashY[y]=z\n  }\n  <span class=\"hljs-comment\">// console.log(hashX,hashY,zSum)</span>\n  <span class=\"hljs-keyword\">let</span> xSum=<span class=\"hljs-number\">0</span>,ySum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> hashX){\n    xSum+=hashX[key]\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> hashY){\n    ySum+=hashY[key]\n  }\n  <span class=\"hljs-comment\">// console.log( xSum+ySum+zSum)</span>\n  <span class=\"hljs-keyword\">return</span> xSum+ySum+zSum\n};\n</code></pre>\n"
  ],
  "titleSlug": "projection-area-of-3d-shapes",
  "translatedContent": "<p>在&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;的网格中，我们放置了一些与 x，y，z 三轴对齐的&nbsp;<code>1 * 1 * 1</code>&nbsp;立方体。</p>\n\n<p>每个值&nbsp;<code>v = grid[i][j]</code>&nbsp;表示 <code>v</code>&nbsp;个正方体叠放在单元格&nbsp;<code>(i, j)</code>&nbsp;上。</p>\n\n<p>现在，我们查看这些立方体在 xy、yz&nbsp;和 zx&nbsp;平面上的<em>投影</em>。</p>\n\n<p>投影就像影子，将三维形体映射到一个二维平面上。</p>\n\n<p>在这里，从顶部、前面和侧面看立方体时，我们会看到&ldquo;影子&rdquo;。</p>\n\n<p>返回所有三个投影的总面积。</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[[2]]\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[[1,2],[3,4]]\n<strong>输出：</strong>17\n<strong>解释：</strong>\n这里有该形体在三个轴对齐平面上的三个投影(&ldquo;阴影部分&rdquo;)。\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"height: 200px; width: 749px;\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[[1,0],[0,2]]\n<strong>输出：</strong>8\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>输出：</strong>14\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>输出：</strong>21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n"
}
