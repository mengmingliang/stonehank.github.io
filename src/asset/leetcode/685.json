{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} edges\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findRedundantDirectedConnection = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">edges</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=edges.length\n  <span class=\"hljs-keyword\">let</span> uf=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>i)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">i</span>)</span>{\n    <span class=\"hljs-keyword\">while</span>(i!=uf[i])i=uf[i]\n    <span class=\"hljs-keyword\">return</span> i\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">union</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n        j=find(b)\n    <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">return</span>\n    uf[i]=j\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">connect</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n        j=find(b)\n    <span class=\"hljs-keyword\">return</span> i===j\n  }\n  <span class=\"hljs-comment\">// 先找是否存在两个父元素的节点，例如：[a,b],[c,b]，如果存在，那么结果就在这2个节点之中</span>\n  <span class=\"hljs-keyword\">let</span> c1=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>],c2=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> parent = <span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [<span class=\"hljs-keyword\">from</span>,to] <span class=\"hljs-keyword\">of</span> edges) {\n    <span class=\"hljs-keyword\">if</span> (parent[to]) {\n      c1 = [parent[to], to];\n      c2 = [<span class=\"hljs-keyword\">from</span>,to];\n      <span class=\"hljs-keyword\">break</span>;\n    }\n    parent[to]=<span class=\"hljs-keyword\">from</span>;\n  }\n  <span class=\"hljs-comment\">// 如果存在两个父元素的节点 则需要除了这两个edge外，其他的先连接</span>\n  <span class=\"hljs-comment\">// 如果不存在，那么互相连接，出现环的直接返回</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [<span class=\"hljs-keyword\">from</span>,to] <span class=\"hljs-keyword\">of</span> edges) {\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">from</span> == c1[<span class=\"hljs-number\">0</span>] &amp;&amp; to == c1[<span class=\"hljs-number\">1</span>]) || (<span class=\"hljs-keyword\">from</span> == c2[<span class=\"hljs-number\">0</span>] &amp;&amp; to == c2[<span class=\"hljs-number\">1</span>])) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">if</span>(connect(<span class=\"hljs-keyword\">from</span>,to))<span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">from</span>,to]\n    union(<span class=\"hljs-keyword\">from</span>,to)\n  }\n  <span class=\"hljs-comment\">// 到此是除了c1,c2，其他都连接了</span>\n  <span class=\"hljs-comment\">// 那么先连接前面的，如果c1已经连接了，说明c1是构成环的最后一条边</span>\n  <span class=\"hljs-comment\">// 如果c1未连接，说明要么c2是构成环的最后一条边，要么c1,c2是构成环的最后2条边，都要返回c2</span>\n  <span class=\"hljs-keyword\">if</span>(connect(c1[<span class=\"hljs-number\">0</span>],c1[<span class=\"hljs-number\">1</span>]))<span class=\"hljs-keyword\">return</span> c1\n  <span class=\"hljs-keyword\">return</span> c2;    \n};\n</code></pre>\n"
  ],
  "titleSlug": "redundant-connection-ii",
  "content": "<p>在本问题中，有根树指满足以下条件的<strong>有向</strong>图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。</p>\n\n<p>输入一个有向图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n\n<p>结果图是一个以<code>边</code>组成的二维数组。 每一个<code>边</code> 的元素是一对 <code>[u, v]</code>，用以表示<strong>有向</strong>图中连接顶点 <code>u</code> and <code>v</code>和顶点的边，其中父节点<code>u</code>是子节点<code>v</code>的一个父节点。</p>\n\n<p>返回一条能删除的边，使得剩下的图是有N个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n<strong>解释:</strong> 给定的有向图如下:\n  1\n / \\\nv   v\n2--&gt;3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [[1,2], [2,3], [3,4], [4,1], [1,5]]\n<strong>输出:</strong> [4,1]\n<strong>解释:</strong> 给定的有向图如下:\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>二维数组大小的在3到1000范围内。</li>\n\t<li>二维数组中的每个整数在1到N之间，其中 N 是二维数组的大小。</li>\n</ul>\n"
}
