{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[][]} board\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isValidSudoku = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rowIsValid</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> hash={}\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board[id].length;i++){\n      <span class=\"hljs-keyword\">let</span> cur=board[id][i]\n      <span class=\"hljs-keyword\">if</span>(hash[cur])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(cur!==<span class=\"hljs-string\">'.'</span>)hash[cur]=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">colIsValid</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> hash={}\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board.length;i++){\n      <span class=\"hljs-keyword\">let</span> cur=board[i][id]\n      <span class=\"hljs-keyword\">if</span>(hash[cur])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(cur!==<span class=\"hljs-string\">'.'</span>)hash[cur]=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">boxIsValid</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> f=<span class=\"hljs-built_in\">Math</span>.floor(id/<span class=\"hljs-number\">3</span>),\n        m=id % <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">let</span> rs=f*<span class=\"hljs-number\">3</span>,re=f*<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">2</span>,\n        cs=m*<span class=\"hljs-number\">3</span>,ce=m*<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">let</span> hash={}\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=rs;i&lt;=re;i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=cs;j&lt;=ce;j++){\n        <span class=\"hljs-keyword\">let</span> cur=board[i][j]\n        <span class=\"hljs-keyword\">if</span>(hash[cur])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">if</span>(cur!==<span class=\"hljs-string\">'.'</span>)hash[cur]=<span class=\"hljs-literal\">true</span>\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">9</span>;i++){\n    <span class=\"hljs-keyword\">if</span>(!rowIsValid(i) || !colIsValid(i) || !boxIsValid(i))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "valid-sudoku",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>因为存在<code>9</code>行，<code>9</code>列，<code>9</code>个<code>3*3</code>的格子，因此可以遍历<code>[0,9]</code>，分别检查对应索引的行，列和块。</p>\n<p>具体检查步骤就是创建<code>hash</code>，如果内部存在相同的数字，则返回<code>false</code>。</p>\n<p>行列检查都很简单，块需要将<code>id</code>转化为行开始的索引，行结束的索引，列开始的索引，列结束的索引。</p>\n<p><code>[行开始，行结束]</code>为<code>[Math.floor(id/3)*3,Math.floor(id/3)*3+2]</code></p>\n<p><code>[列开始，列结束]</code>为<code>[id%3*3,id%3*3+2]</code></p>\n",
  "content": "<p>判断一个&nbsp;9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p>\n\n<ol>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一行只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一列只能出现一次。</li>\n\t<li>数字&nbsp;<code>1-9</code>&nbsp;在每一个以粗实线分隔的&nbsp;<code>3x3</code>&nbsp;宫内只能出现一次。</li>\n</ol>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height: 250px; width: 250px;\"></p>\n\n<p><small>上图是一个部分填充的有效的数独。</small></p>\n\n<p>数独部分空格内已填入了数字，空白格用&nbsp;<code>&#39;.&#39;</code>&nbsp;表示。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\n[\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>输出:</strong> false\n<strong>解释:</strong> 除了第一行的第一个数字从<strong> 5</strong> 改为 <strong>8 </strong>以外，空格内其他数字均与 示例1 相同。\n     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>一个有效的数独（部分已被填充）不一定是可解的。</li>\n\t<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>\n\t<li>给定数独序列只包含数字&nbsp;<code>1-9</code>&nbsp;和字符&nbsp;<code>&#39;.&#39;</code>&nbsp;。</li>\n\t<li>给定数独永远是&nbsp;<code>9x9</code>&nbsp;形式的。</li>\n</ul>\n"
}
