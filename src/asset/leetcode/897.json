{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar increasingBST = function(root) {\n    let rearrangeTree=new TreeNode(),head=rearrangeTree,last\n    function inOrder(node){\n        if(!node)return\n        if(node.left)inOrder(node.left)\n        rearrangeTree.val=node.val\n        rearrangeTree.right=new TreeNode()\n        last=rearrangeTree\n        rearrangeTree=rearrangeTree.right\n        if(node.right)inOrder(node.right)\n    }\n    inOrder(root)\n    last.right=null\n    return head\n};"
  ],
  "titleSlug": "increasing-order-search-tree",
  "content": "<p>Given a tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [5,3,6,2,4,null,8,1,null,null,null,7,9]\r\n\r\n       5\r\n      / \\\r\n    3    6\r\n   / \\    \\\r\n  2   4    8\r\n&nbsp;/        / \\ \r\n1        7   9\r\n\r\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\r\n\r\n 1\r\n&nbsp; \\\r\n&nbsp;  2\r\n&nbsp;   \\\r\n&nbsp;    3\r\n&nbsp;     \\\r\n&nbsp;      4\r\n&nbsp;       \\\r\n&nbsp;        5\r\n&nbsp;         \\\r\n&nbsp;          6\r\n&nbsp;           \\\r\n&nbsp;            7\r\n&nbsp;             \\\r\n&nbsp;              8\r\n&nbsp;               \\\r\n                 9  </pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be between 1 and 100.</li>\r\n\t<li>Each node will have a unique integer value from 0 to 1000.</li>\r\n</ol>\r\n",
  "translatedContent": "<p>给定一个树，<strong>按中序遍历</strong>重新排列树，使树中最左边的结点现在是树的根，并且每个结点没有左子结点，只有一个右子结点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 ：</strong></p>\n\n<pre><strong>输入：</strong>[5,3,6,2,4,null,8,1,null,null,null,7,9]\n\n       5\n      / \\\n    3    6\n   / \\    \\\n  2   4    8\n&nbsp;/        / \\ \n1        7   9\n\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n 1\n&nbsp; \\\n&nbsp;  2\n&nbsp;   \\\n&nbsp;    3\n&nbsp;     \\\n&nbsp;      4\n&nbsp;       \\\n&nbsp;        5\n&nbsp;         \\\n&nbsp;          6\n&nbsp;           \\\n&nbsp;            7\n&nbsp;             \\\n&nbsp;              8\n&nbsp;               \\\n                 9  </pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>给定树中的结点数介于 1 和&nbsp;100 之间。</li>\n\t<li>每个结点都有一个从 0 到 1000 范围内的唯一整数值。</li>\n</ol>\n"
}
