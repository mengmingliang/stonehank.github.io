{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar nextGreaterElements = function(nums) {\n    let len=nums.length\n    let res=Array(len).fill(null)\n    let temp=[]\n    for(let i=0;i<len;i++){\n        while(temp.length>0 && nums[i]>nums[temp[temp.length-1]]){\n          res[temp.pop()]=nums[i]\n        }\n        temp.push(i)\n    }\n    for(let i=0;i<len;i++){\n        while(temp.length>0 && nums[i]>nums[temp[temp.length-1]]){\n          res[temp.pop()]=nums[i]\n        }\n    }    \n    for(let i=0;i<res.length;i++){\n        if(res[i]===null){\n            res[i]=-1\n        }\n    }\n    return res\n};\n"
  ],
  "titleSlug": "next-greater-element-ii",
  "content": "<p>\r\nGiven a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,1]\r\n<b>Output:</b> [2,-1,2]\r\n<b>Explanation:</b> The first 1's next greater number is 2; </br>The number 2 can't find next greater number; </br>The second 1's next greater number needs to search circularly, which is also 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of given array won't exceed 10000.\r\n</p>",
  "translatedContent": "<p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,1]\n<strong>输出:</strong> [2,-1,2]\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\n</pre>\n\n<p><strong>注意:</strong> 输入数组的长度不会超过 10000。</p>\n"
}
