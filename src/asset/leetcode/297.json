{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> serialize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ser</span>(<span class=\"hljs-params\">root</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"#\"</span>\n    <span class=\"hljs-keyword\">return</span> root.val+<span class=\"hljs-string\">\"#\"</span>+ser(root.left)+ser(root.right)    \n  }\n  <span class=\"hljs-keyword\">let</span> res=ser(root)\n  <span class=\"hljs-keyword\">return</span> res.split(<span class=\"hljs-string\">'#'</span>).reverse().join(<span class=\"hljs-string\">\"#\"</span>)\n};\n\n<span class=\"hljs-comment\">/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> deserialize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> nodes=data.split(<span class=\"hljs-string\">\"#\"</span>)\n  <span class=\"hljs-keyword\">return</span> buildTree()\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildTree</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(nodes.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">let</span> curVal=nodes.pop()\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span>(curVal!==<span class=\"hljs-string\">\"\"</span>){\n      node=<span class=\"hljs-keyword\">new</span> TreeNode(+curVal)\n      node.left=buildTree()\n      node.right=buildTree()\n    }\n    <span class=\"hljs-keyword\">return</span> node\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "serialize-and-deserialize-binary-tree",
  "content": "<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n\n<p><strong>示例:&nbsp;</strong></p>\n\n<pre>你可以将以下二叉树：\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n序列化为 <code>&quot;[1,2,3,null,null,4,5]&quot;</code></pre>\n\n<p><strong>提示:&nbsp;</strong>这与 LeetCode 目前使用的方式一致，详情请参阅&nbsp;<a href=\"/faq/#binary-tree\">LeetCode 序列化二叉树的格式</a>。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>\n\n<p><strong>说明:&nbsp;</strong>不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p>\n"
}
