{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> firstMissingPositive = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n=A.length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++ i)\n    <span class=\"hljs-keyword\">while</span>(A[i] &gt; <span class=\"hljs-number\">0</span> &amp;&amp; A[i] &lt;= n &amp;&amp; A[A[i] - <span class=\"hljs-number\">1</span>] != A[i])\n    swap(i, A[i] - <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++ i)\n    <span class=\"hljs-keyword\">if</span>(A[i] != i + <span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">return</span> i + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> t=A[i]\n    A[i]=A[j]\n    A[j]=t\n  }\n  <span class=\"hljs-keyword\">return</span> n + <span class=\"hljs-number\">1</span>;\n};\n</code></pre>\n"
  ],
  "titleSlug": "first-missing-positive",
  "hasThinking": false,
  "content": "<p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>输入: [1,2,0]\n输出: 3\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>输入: [3,4,-1,1]\n输出: 2\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre>输入: [7,8,9,11,12]\n输出: 1\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>你的算法的时间复杂度应为O(<em>n</em>)，并且只能使用常数级别的空间。</p>\n"
}
