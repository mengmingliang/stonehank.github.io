{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} arr\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxChunksToSorted = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">arr</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res=[]\n    <span class=\"hljs-keyword\">let</span> curMax=<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkChunk</span>(<span class=\"hljs-params\">arr,i,lastChunk</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(i===arr.length){\n            res.push(lastChunk)\n            <span class=\"hljs-keyword\">return</span>\n        }\n        <span class=\"hljs-keyword\">let</span> cur=arr[i]\n        <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-built_in\">Math</span>,lastChunk)\n        <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-built_in\">Math</span>.min.apply(<span class=\"hljs-built_in\">Math</span>,arr.slice(i))\n        <span class=\"hljs-keyword\">if</span>(max&gt;min){\n            lastChunk.push(cur)\n        }<span class=\"hljs-keyword\">else</span>{\n           \n            <span class=\"hljs-keyword\">if</span>(min-max===<span class=\"hljs-number\">1</span>){\n                res.push(lastChunk)\n                lastChunk=[cur]\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(min-max&gt;<span class=\"hljs-number\">1</span>){\n                lastChunk.push(cur)\n            }\n        }\n        checkChunk(arr,i+<span class=\"hljs-number\">1</span>,lastChunk)\n    }\n    checkChunk(arr,<span class=\"hljs-number\">0</span>,[])\n    \n    <span class=\"hljs-keyword\">return</span> res.length\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "max-chunks-to-make-sorted",
  "translatedContent": "<p>数组<code>arr</code>是<code>[0, 1, ..., arr.length - 1]</code>的一种排列，我们将这个数组分割成几个&ldquo;块&rdquo;，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。</p>\n\n<p>我们最多能将数组分成多少块？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> arr = [4,3,2,1,0]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> arr = [1,0,2,3,4]\n<strong>输出:</strong> 4\n<strong>解释:</strong>\n我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。\n然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>arr</code> 的长度在 <code>[1, 10]</code> 之间。</li>\n\t<li><code>arr[i]</code>是 <code>[0, 1, ..., arr.length - 1]</code>的一种排列。</li>\n</ul>\n"
}
