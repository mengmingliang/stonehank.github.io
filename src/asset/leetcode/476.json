{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} num\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findComplement = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(num===<span class=\"hljs-number\">0</span>){<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>}\n    <span class=\"hljs-keyword\">let</span> n=num;\n    <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> powN=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span>(n&gt;=<span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">let</span> x=n % <span class=\"hljs-number\">2</span>? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>\n        n=<span class=\"hljs-built_in\">parseInt</span>(n/<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>)\n        res+=x*<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,powN)\n        powN++;\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-complement",
  "content": "<p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的整数保证在32位带符号整数的范围内。</li>\n\t<li>你可以假定二进制数不包含前导零位。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> 5\n<strong>输出:</strong> 2\n<strong>解释:</strong> 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> 1\n<strong>输出:</strong> 0\n<strong>解释:</strong> 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。\n</pre>\n"
}
