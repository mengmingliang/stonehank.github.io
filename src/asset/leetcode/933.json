{
  "code": [
    "<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">var</span> RecentCounter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.list=[]\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} t\n * @return {number}\n */</span>\nRecentCounter.prototype.ping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">t</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> prev=t<span class=\"hljs-number\">-3000</span>\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[<span class=\"hljs-keyword\">this</span>.list.length<span class=\"hljs-number\">-1</span>]&lt;prev){\n    <span class=\"hljs-keyword\">this</span>.list.push(t)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">this</span>.list.push(t)\n  <span class=\"hljs-keyword\">let</span> idx=bsEnd(<span class=\"hljs-keyword\">this</span>.list,prev)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.list.length-idx\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }  \n};\n\n<span class=\"hljs-comment\">/** \n * Your RecentCounter object will be instantiated and called as such:\n * var obj = Object.create(RecentCounter).createNew()\n * var param_1 = obj.ping(t)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "number-of-recent-calls",
  "content": "<p>写一个&nbsp;<code>RecentCounter</code>&nbsp;类来计算最近的请求。</p>\n\n<p>它只有一个方法：<code>ping(int t)</code>，其中&nbsp;<code>t</code>&nbsp;代表以毫秒为单位的某个时间。</p>\n\n<p>返回从 3000 毫秒前到现在的&nbsp;<code>ping</code>&nbsp;数。</p>\n\n<p>任何处于&nbsp;<code>[t - 3000, t]</code>&nbsp;时间范围之内的 <code>ping</code>&nbsp;都将会被计算在内，包括当前（指 <code>t</code>&nbsp;时刻）的 <code>ping</code>。</p>\n\n<p>保证每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>inputs = [&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;], inputs = [[],[1],[100],[3001],[3002]]\n<strong>输出：</strong>[null,1,2,3,3]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>每个测试用例最多调用&nbsp;<code>10000</code>&nbsp;次&nbsp;<code>ping</code>。</li>\n\t<li>每个测试用例会使用严格递增的 <code>t</code> 值来调用&nbsp;<code>ping</code>。</li>\n\t<li>每次调用 <code>ping</code>&nbsp;都有&nbsp;<code>1 &lt;= t &lt;= 10^9</code>。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
