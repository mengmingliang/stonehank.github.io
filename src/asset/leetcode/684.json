{
  "code": [
    "/**\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar findRedundantConnection = function(edges) {\n    let id=[]\n    // 找顶点\n    function find(i){\n        if(id[i]==null)id[i]=i\n        while(id[i]!==i){\n          i=id[i]\n        }\n        return i\n    }\n    for(let i=0;i<edges.length;i++){\n        let p1=edges[i][0],\n            p2=edges[i][1]\n        let t1=find(p1),\n            t2=find(p2)\n        if(t1!==t2) id[t1]=t2\n        else return edges[i]\n    }\n    \n};"
  ],
  "titleSlug": "redundant-connection",
  "content": "<p>\r\nIn this problem, a tree is an <b>undirected</b> graph that is connected and has no cycles.\r\n</p><p>\r\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n</p><p>\r\nThe resulting graph is given as a 2D-array of <code>edges</code>.  Each element of <code>edges</code> is a pair <code>[u, v]</code> with <code>u < v</code>, that represents an <b>undirected</b> edge connecting nodes <code>u</code> and <code>v</code>.\r\n</p><p>\r\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge <code>[u, v]</code> should be in the same format, with <code>u < v</code>.\r\n</p><p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [1,3], [2,3]]\r\n<b>Output:</b> [2,3]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n  1\r\n / \\\r\n2 - 3\r\n</pre>\r\n</p>\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4], [1,4], [1,5]]\r\n<b>Output:</b> [1,4]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n5 - 1 - 2\r\n    |   |\r\n    4 - 3\r\n</pre>\r\n</p>\r\n<p><b>Note:</b><br />\r\n<li>The size of the input 2D-array will be between 3 and 1000.</li>\r\n<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>\r\n</p>\r\n\r\n<br />\r\n\r\n<p>\r\n<b><font color=\"red\">Update (2017-09-26):</font></b><br>\r\nWe have overhauled the problem description + test cases and specified clearly the graph is an <b><i>undirected</i></b> graph. For the <b><i>directed</i></b> graph follow up please see <b><a href=\"https://leetcode.com/problems/redundant-connection-ii/description/\">Redundant Connection II</a></b>). We apologize for any inconvenience caused.\r\n</p>",
  "translatedContent": "<p>在本问题中, 树指的是一个连通且无环的<strong>无向</strong>图。</p>\n\n<p>输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p>\n\n<p>结果图是一个以<code>边</code>组成的二维数组。每一个<code>边</code>的元素是一对<code>[u, v]</code>&nbsp;，满足&nbsp;<code>u &lt; v</code>，表示连接顶点<code>u</code>&nbsp;和<code>v</code>的<strong>无向</strong>图的边。</p>\n\n<p>返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边&nbsp;<code>[u, v]</code> 应满足相同的格式&nbsp;<code>u &lt; v</code>。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [1,3], [2,3]]\n<strong>输出:</strong> [2,3]\n<strong>解释:</strong> 给定的无向图为:\n  1\n / \\\n2 - 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:</strong> [[1,2], [2,3], [3,4], [1,4], [1,5]]\n<strong>输出:</strong> [1,4]\n<strong>解释:</strong> 给定的无向图为:\n5 - 1 - 2\n    |   |\n    4 - 3\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>输入的二维数组大小在 3 到 1000。</li>\n\t<li>二维数组中的整数在1到N之间，其中N是输入数组的大小。</li>\n</ul>\n\n<p><strong>更新(2017-09-26):</strong><br>\n我们已经重新检查了问题描述及测试用例，明确图是<em><strong>无向&nbsp;</strong></em>图。对于有向图详见<strong><a href=\"https://leetcodechina.com/problems/redundant-connection-ii/description/\">冗余连接II</a>。</strong>对于造成任何不便，我们深感歉意。</p>\n"
}
