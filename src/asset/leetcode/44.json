{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isMatch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, p</span>) </span>{\n  <span class=\"hljs-comment\">// let dp=[]</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;p.length+1;i++){</span>\n  <span class=\"hljs-comment\">//   dp[i]=[]</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;s.length+1;j++){</span>\n  <span class=\"hljs-comment\">//     dp[i][j]=false</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// dp[0][0]=true</span>\n  <span class=\"hljs-comment\">// for(let i=1;i&lt;dp.length;i++){</span>\n  <span class=\"hljs-comment\">//   if(p[i-1]==='*' &amp;&amp; dp[i-1][0]){</span>\n  <span class=\"hljs-comment\">//     dp[i][0]=true</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// // console.log(dp)</span>\n  <span class=\"hljs-comment\">// for(let i=1;i&lt;dp.length;i++){</span>\n  <span class=\"hljs-comment\">//   for(let j=1;j&lt;dp[0].length;j++){</span>\n  <span class=\"hljs-comment\">//     let pId=i-1,sId=j-1</span>\n  <span class=\"hljs-comment\">//     if(p[pId]===\"?\" || p[pId]===s[sId]){</span>\n  <span class=\"hljs-comment\">//       dp[i][j]=dp[i-1][j-1]</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//     if(p[pId]===\"*\"){</span>\n  <span class=\"hljs-comment\">//       let k=0</span>\n  <span class=\"hljs-comment\">//       for(;k&lt;dp[i-1].length;k++){</span>\n  <span class=\"hljs-comment\">//         if(dp[i-1][k])break</span>\n  <span class=\"hljs-comment\">//       }</span>\n  <span class=\"hljs-comment\">//       for(let x=k;x&lt;dp[i].length;x++){</span>\n  <span class=\"hljs-comment\">//         dp[i][x]=true</span>\n  <span class=\"hljs-comment\">//       }</span>\n  <span class=\"hljs-comment\">//       break</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return dp[dp.length-1][dp[0].length-1]</span>\n  \n  <span class=\"hljs-keyword\">let</span> star=<span class=\"hljs-number\">-1</span>,\n      pi=<span class=\"hljs-number\">0</span>,\n      si=<span class=\"hljs-number\">0</span>,\n      match=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(si&lt;s.length){\n    <span class=\"hljs-keyword\">if</span>(pi&lt;p.length &amp;&amp; (p[pi]===s[si] || p[pi]===<span class=\"hljs-string\">\"?\"</span>)){\n      pi++\n      si++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pi&lt;p.length &amp;&amp; p[pi]===<span class=\"hljs-string\">\"*\"</span>){\n      match=si\n      star=pi\n      pi++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(star!==<span class=\"hljs-number\">-1</span>){\n      match++\n      pi=star+<span class=\"hljs-number\">1</span>\n      si=match\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n  <span class=\"hljs-keyword\">while</span>(pi&lt;p.length &amp;&amp; p[pi]===<span class=\"hljs-string\">\"*\"</span>){\n    pi++\n  }\n  <span class=\"hljs-keyword\">return</span> pi===p.length\n};\n</code></pre>\n"
  ],
  "titleSlug": "wildcard-matching",
  "content": "<p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>) ，实现一个支持&nbsp;<code>&#39;?&#39;</code>&nbsp;和&nbsp;<code>&#39;*&#39;</code>&nbsp;的通配符匹配。</p>\n\n<pre>&#39;?&#39; 可以匹配任何单个字符。\n&#39;*&#39; 可以匹配任意字符串（包括空字符串）。\n</pre>\n\n<p>两个字符串<strong>完全匹配</strong>才算匹配成功。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>?</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong> &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;*&#39; 可以匹配任意字符串。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;cb&quot;\np = &quot;?a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong>&nbsp;&#39;?&#39; 可以匹配 &#39;c&#39;, 但第二个 &#39;a&#39; 无法匹配 &#39;b&#39;。\n</pre>\n\n<p><strong>示例&nbsp;4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;adceb&quot;\np = &quot;*a*b&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;第一个 &#39;*&#39; 可以匹配空字符串, 第二个 &#39;*&#39; 可以匹配字符串 &quot;dce&quot;.\n</pre>\n\n<p><strong>示例&nbsp;5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;acdcb&quot;\np = &quot;a*c?b&quot;\n<strong>输入:</strong> false</pre>\n"
}
