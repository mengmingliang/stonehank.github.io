{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string[]} d\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> findLongestWord = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, d</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isSubsquence</span>(<span class=\"hljs-params\">str,pattern</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span>(i&lt;str.length){\n            <span class=\"hljs-keyword\">if</span>(str.length-i &lt;pattern.length-j)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n            <span class=\"hljs-keyword\">if</span>(str[i]===pattern[j]){i++; j++}\n            <span class=\"hljs-keyword\">else</span> i++\n            <span class=\"hljs-keyword\">if</span>(j===pattern.length)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>            \n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n      \n    <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-string\">''</span>,maxLen=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;d.length;i++){\n        <span class=\"hljs-keyword\">if</span>(isSubsquence(s,d[i])){\n            <span class=\"hljs-keyword\">if</span>(d[i].length&gt;maxLen){result=d[i]; maxLen=d[i].length}\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(d[i].length===maxLen &amp;&amp; d[i]&lt;result) result=d[i]\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-word-in-dictionary-through-deleting",
  "translatedContent": "<p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n\n<strong>输出:</strong> \n&quot;apple&quot;\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n\n<strong>输出:</strong> \n&quot;a&quot;\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>所有输入的字符串只包含小写字母。</li>\n\t<li>字典的大小不会超过 1000。</li>\n\t<li>所有输入的字符串长度不会超过 1000。</li>\n</ol>\n"
}
