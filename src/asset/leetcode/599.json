{
  "code": [
    "/**\n * @param {string[]} list1\n * @param {string[]} list2\n * @return {string[]}\n */\nvar findRestaurant = function(list1, list2) {\n    let helper=new Map()\n    let min=Infinity,res=[]\n    for(let i=0;i<list1.length;i++){\n        helper.set(list1[i],i)\n    }\n    // console.log(helper)\n    for(let i=0;i<list2.length;i++){\n        let cur=helper.get(list2[i])\n        if(cur!==undefined){\n            let totalI=cur+i\n            // console.log(totalI,list2[i])\n            if(totalI===min)res.push(list2[i])\n            else if(totalI<min){\n                min=totalI\n                res=[list2[i]]\n            }\n        }\n    } \n    \n  \n    return res\n};"
  ],
  "titleSlug": "minimum-index-sum-of-two-lists",
  "content": "<p>\r\nSuppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. \r\n</p>\r\n<p>\r\nYou need to help them find out their <b>common interest</b> with the <b>least list index sum</b>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\r\n<b>Output:</b> [\"Shogun\"]\r\n<b>Explanation:</b> The only restaurant they both like is \"Shogun\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"KFC\", \"Shogun\", \"Burger King\"]\r\n<b>Output:</b> [\"Shogun\"]\r\n<b>Explanation:</b> The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of both lists will be in the range of [1, 1000].</li>\r\n<li>The length of strings in both lists will be in the range of [1, 30].</li>\r\n<li>The index is starting from 0 to the list length minus 1.</li>\r\n<li>No duplicates in both lists.</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p>\n\n<p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]\n<strong>输出:</strong> [&quot;Shogun&quot;]\n<strong>解释:</strong> 他们唯一共同喜爱的餐厅是&ldquo;Shogun&rdquo;。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]\n<strong>输出:</strong> [&quot;Shogun&quot;]\n<strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是&ldquo;Shogun&rdquo;，它有最小的索引和1(0+1)。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>两个列表的长度范围都在&nbsp;[1, 1000]内。</li>\n\t<li>两个列表中的字符串的长度将在[1，30]的范围内。</li>\n\t<li>下标从0开始，到列表的长度减1。</li>\n\t<li>两个列表都没有重复的元素。</li>\n</ol>\n"
}
