{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> increasingTriplet = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-comment\">// let increase=[nums[0]]</span>\n    <span class=\"hljs-comment\">// for(let i=1;i&lt;nums.length;i++){</span>\n    <span class=\"hljs-comment\">//   let cur=nums[i]</span>\n    <span class=\"hljs-comment\">//   let len=increase.length</span>\n    <span class=\"hljs-comment\">//   let last=increase[len-1]</span>\n    <span class=\"hljs-comment\">//   if(cur&gt;last)increase[len]=cur</span>\n    <span class=\"hljs-comment\">//   else {</span>\n    <span class=\"hljs-comment\">//     let idx=bs(increase,nums[i])</span>\n    <span class=\"hljs-comment\">//     increase[idx]=cur</span>\n    <span class=\"hljs-comment\">//   }</span>\n    <span class=\"hljs-comment\">//   if(increase.length===3)return true</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// function bs(arr,n){</span>\n    <span class=\"hljs-comment\">//   let lo=0,hi=arr.length-1</span>\n    <span class=\"hljs-comment\">//   while(lo&lt;hi){</span>\n    <span class=\"hljs-comment\">//     let mid=Math.floor((lo+hi)/2)</span>\n    <span class=\"hljs-comment\">//     if(arr[mid]&lt;n)lo=mid+1</span>\n    <span class=\"hljs-comment\">//     else hi=mid</span>\n    <span class=\"hljs-comment\">//   }</span>\n    <span class=\"hljs-comment\">//   return hi</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// return false</span>\n  \n  <span class=\"hljs-keyword\">let</span> first=<span class=\"hljs-literal\">Infinity</span>,second=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> nums){\n    <span class=\"hljs-keyword\">if</span>(n&lt;=first)first=n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&lt;=second)second=n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "increasing-triplet-subsequence",
  "translatedContent": "<p>给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。</p>\n\n<p>数学表达式如下:</p>\n\n<blockquote>如果存在这样的&nbsp;<em>i, j, k,&nbsp;</em>&nbsp;且满足&nbsp;0 &le; <em>i</em> &lt; <em>j</em> &lt; <em>k</em> &le; <em>n</em>-1，<br>\n使得&nbsp;<em>arr[i]</em> &lt; <em>arr[j]</em> &lt; <em>arr[k] </em>，返回 true ;&nbsp;否则返回 false 。</blockquote>\n\n<p><strong>说明:</strong> 要求算法的时间复杂度为 O(<em>n</em>)，空间复杂度为 O(<em>1</em>) 。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5]\n<strong>输出: </strong>true\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>[5,4,3,2,1]\n<strong>输出: </strong>false</pre>\n"
}
