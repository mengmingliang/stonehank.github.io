{
  "code": [
    "/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\n// var maxProfit = function(prices, fee) {\n//     // if(prices.length<2)return 0\n//     // let buy=[0-prices[0]],sell=[0]\n//     // let days=prices.length\n//     // for(let i=1;i<days;i++){\n//     //     buy[i]=Math.max(buy[i-1],sell[i-1]-prices[i])\n//     //     sell[i]=Math.max(sell[i-1],buy[i-1]+prices[i]-fee)\n//     // }\n//     // return sell[sell.length-1]\n    \n//     let buy=-prices[0],sell=0,rest=0,\n//         prev_buy,prev_sell,prev_rest\n//     for(let i=0;i<prices.length;i++){\n//         prev_buy=buy;prev_sell=sell;prev_rest=rest\n//         buy=Math.max(prev_buy,prev_sell-prices[i],prev_rest-prices[i])\n//         sell=prev_buy+prices[i]-fee\n//         rest=Math.max(prev_rest,prev_sell)\n//     }\n//     return Math.max(sell,rest)\n// };\n\nfunction maxProfit(prices,fee){\n  let prev_sell,prev_buy,prev_rest,\n      sell=0,buy=-prices[0],rest=0\n  for(let i=0;i<prices.length;i++){\n      prev_buy=buy;prev_rest=rest;prev_sell=sell\n      sell=prev_buy+prices[i]-fee\n      buy=Math.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])\n      rest=Math.max(prev_rest,prev_sell)\n  }\n  return Math.max(sell,rest)\n}"
  ],
  "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
  "content": "<p>Your are given an array of integers <code>prices</code>, for which the <code>i</code>-th element is the price of a given stock on day <code>i</code>; and a non-negative integer <code>fee</code> representing a transaction fee.</p>\r\n<p>You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.  You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)</p>\r\n<p>Return the maximum profit you can make.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> prices = [1, 3, 2, 8, 4, 9], fee = 2\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> The maximum profit can be achieved by:\r\n<li>Buying at prices[0] = 1</li><li>Selling at prices[3] = 8</li><li>Buying at prices[4] = 4</li><li>Selling at prices[5] = 9</li>The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < prices.length <= 50000</code>.</li>\r\n<li><code>0 < prices[i] < 50000</code>.</li>\r\n<li><code>0 <= fee < 50000</code>.</li>\r\n</p>",
  "translatedContent": "<p>给定一个整数数组&nbsp;<code>prices</code>，其中第&nbsp;<code>i</code>&nbsp;个元素代表了第&nbsp;<code>i</code>&nbsp;天的股票价格 ；非负整数&nbsp;<code>fee</code> 代表了交易股票的手续费用。</p>\n\n<p>你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n\n<p>返回获得利润的最大值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>输出:</strong> 8\n<strong>解释:</strong> 能够达到的最大利润:  \n在此处买入&nbsp;prices[0] = 1\n在此处卖出 prices[3] = 8\n在此处买入 prices[4] = 4\n在此处卖出 prices[5] = 9\n总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; prices.length &lt;= 50000</code>.</li>\n\t<li><code>0 &lt; prices[i] &lt; 50000</code>.</li>\n\t<li><code>0 &lt;= fee &lt; 50000</code>.</li>\n</ul>\n"
}
