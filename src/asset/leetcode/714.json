{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */</span>\n<span class=\"hljs-comment\">// var maxProfit = function(prices, fee) {</span>\n<span class=\"hljs-comment\">//     // if(prices.length&lt;2)return 0</span>\n<span class=\"hljs-comment\">//     // let buy=[0-prices[0]],sell=[0]</span>\n<span class=\"hljs-comment\">//     // let days=prices.length</span>\n<span class=\"hljs-comment\">//     // for(let i=1;i&lt;days;i++){</span>\n<span class=\"hljs-comment\">//     //     buy[i]=Math.max(buy[i-1],sell[i-1]-prices[i])</span>\n<span class=\"hljs-comment\">//     //     sell[i]=Math.max(sell[i-1],buy[i-1]+prices[i]-fee)</span>\n<span class=\"hljs-comment\">//     // }</span>\n<span class=\"hljs-comment\">//     // return sell[sell.length-1]</span>\n    \n<span class=\"hljs-comment\">//     let buy=-prices[0],sell=0,rest=0,</span>\n<span class=\"hljs-comment\">//         prev_buy,prev_sell,prev_rest</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;prices.length;i++){</span>\n<span class=\"hljs-comment\">//         prev_buy=buy;prev_sell=sell;prev_rest=rest</span>\n<span class=\"hljs-comment\">//         buy=Math.max(prev_buy,prev_sell-prices[i],prev_rest-prices[i])</span>\n<span class=\"hljs-comment\">//         sell=prev_buy+prices[i]-fee</span>\n<span class=\"hljs-comment\">//         rest=Math.max(prev_rest,prev_sell)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return Math.max(sell,rest)</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxProfit</span>(<span class=\"hljs-params\">prices,fee</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> prev_sell,prev_buy,prev_rest,\n      sell=<span class=\"hljs-number\">0</span>,buy=-prices[<span class=\"hljs-number\">0</span>],rest=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prices.length;i++){\n      prev_buy=buy;prev_rest=rest;prev_sell=sell\n      sell=prev_buy+prices[i]-fee\n      buy=<span class=\"hljs-built_in\">Math</span>.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])\n      rest=<span class=\"hljs-built_in\">Math</span>.max(prev_rest,prev_sell)\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(sell,rest)\n}\n</code></pre>\n"
  ],
  "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
  "translatedContent": "<p>给定一个整数数组&nbsp;<code>prices</code>，其中第&nbsp;<code>i</code>&nbsp;个元素代表了第&nbsp;<code>i</code>&nbsp;天的股票价格 ；非负整数&nbsp;<code>fee</code> 代表了交易股票的手续费用。</p>\n\n<p>你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\n\n<p>返回获得利润的最大值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>输出:</strong> 8\n<strong>解释:</strong> 能够达到的最大利润:  \n在此处买入&nbsp;prices[0] = 1\n在此处卖出 prices[3] = 8\n在此处买入 prices[4] = 4\n在此处卖出 prices[5] = 9\n总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; prices.length &lt;= 50000</code>.</li>\n\t<li><code>0 &lt; prices[i] &lt; 50000</code>.</li>\n\t<li><code>0 &lt;= fee &lt; 50000</code>.</li>\n</ul>\n"
}
