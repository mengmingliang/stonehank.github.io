{
  "code": [
    "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    function check(str){\n        if(!str)return false\n        for(let i=0;i<str.length/2;i++){\n            if(str[i]!==str[str.length-1-i])return false\n        }\n        return true\n    }\n    let result=[],temp=[]\n    backtrack(result,temp,s,0)\n    return result\n    \n    function backtrack(result,temp,s,start){\n        if(start===s.length){\n            result.push(temp.slice())\n        }\n        for(let i=start;i<s.length;i++){\n            let str=s.substring(start,i+1)\n            if(check(str)){\n                temp.push(str)\n                backtrack(result,temp,s,i+1)\n                temp.pop()\n            }\n            \n        }\n    }\n};"
  ],
  "titleSlug": "palindrome-partitioning",
  "content": "<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>\r\n\r\n<p>Return all possible palindrome partitioning of <em>s</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;aab&quot;\r\n<strong>Output:</strong>\r\n[\r\n  [&quot;aa&quot;,&quot;b&quot;],\r\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\r\n]\r\n</pre>\r\n",
  "translatedContent": "<p>给定一个字符串 <em>s</em>，将<em> s </em>分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回 <em>s</em> 所有可能的分割方案。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong>\n[\n  [&quot;aa&quot;,&quot;b&quot;],\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n]</pre>\n"
}
