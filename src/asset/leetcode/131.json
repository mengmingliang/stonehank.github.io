{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> partition = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> result=[]\n  backtrack([],<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> result\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isP</span>(<span class=\"hljs-params\">str</span>)</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;str.length/<span class=\"hljs-number\">2</span>;i++){\n      <span class=\"hljs-keyword\">if</span>(str[i]!==str[str.length<span class=\"hljs-number\">-1</span>-i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">arr,start</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(start===s.length) result.push(arr.slice())\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;s.length;i++){\n      <span class=\"hljs-keyword\">let</span> str=s.substring(start,i+<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">if</span>(isP(str)){\n        arr.push(str)\n        backtrack(arr,i+<span class=\"hljs-number\">1</span>)\n        arr.pop()\n      }\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "palindrome-partitioning",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2>回溯，<code>start</code>为从当前哪个索引开始，检测以<code>start</code>为开头的每一个子字符串，如果存在回文字符串，就添加到<code>arr</code>中，直到<code>start===s.length</code>，\n说明当前<code>arr</code>为其中一个解，添加到结果<code>result</code>中。</h2>\n",
  "content": "<p>给定一个字符串 <em>s</em>，将<em> s </em>分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回 <em>s</em> 所有可能的分割方案。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong>\n[\n  [&quot;aa&quot;,&quot;b&quot;],\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n]</pre>\n"
}
