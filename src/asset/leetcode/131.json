{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> partition = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">str</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!str)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;str.length/<span class=\"hljs-number\">2</span>;i++){\n            <span class=\"hljs-keyword\">if</span>(str[i]!==str[str.length<span class=\"hljs-number\">-1</span>-i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">let</span> result=[],temp=[]\n    backtrack(result,temp,s,<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> result\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">result,temp,s,start</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(start===s.length){\n            result.push(temp.slice())\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;s.length;i++){\n            <span class=\"hljs-keyword\">let</span> str=s.substring(start,i+<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span>(check(str)){\n                temp.push(str)\n                backtrack(result,temp,s,i+<span class=\"hljs-number\">1</span>)\n                temp.pop()\n            }\n            \n        }\n    }\n};\n</code></pre>\n"
  ],
  "titleSlug": "palindrome-partitioning",
  "content": "<p>给定一个字符串 <em>s</em>，将<em> s </em>分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回 <em>s</em> 所有可能的分割方案。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong>\n[\n  [&quot;aa&quot;,&quot;b&quot;],\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n]</pre>\n"
}
