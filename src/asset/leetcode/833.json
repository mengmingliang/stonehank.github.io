{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {number[]} indexes\n * @param {string[]} sources\n * @param {string[]} targets\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> findReplaceString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, indexes, sources, targets</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> newS=<span class=\"hljs-string\">''</span>,endID=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> auxIdx=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;indexes.length;i++){\n    auxIdx[i]=[indexes[i],i]\n  }\n  auxIdx.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;auxIdx.length;i++){\n    <span class=\"hljs-keyword\">let</span> [id,initI]=auxIdx[i]\n    <span class=\"hljs-keyword\">let</span> s=sources[initI],t=targets[initI]\n    newS+=S.substring(endID,id)\n    endID=id+s.length\n    <span class=\"hljs-keyword\">let</span> inits=S.substring(id,endID)\n    <span class=\"hljs-keyword\">if</span>(inits===s){\n      newS+=t\n    }<span class=\"hljs-keyword\">else</span>{\n      newS+=inits\n    }\n  }\n  newS+=S.substring(endID)\n  <span class=\"hljs-keyword\">return</span> newS\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-and-replace-in-string",
  "hasThinking": false,
  "content": "<p>对于某些字符串 <code>S</code>，我们将执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。</p>\n\n<p>每个替换操作具有 3 个参数：起始索引 <code>i</code>，源字 <code>x</code> 和目标字 <code>y</code>。规则是如果 <code>x</code> 从<strong>原始字符串 <code>S</code></strong> 中的位置 <code>i</code> 开始，那么我们将用 <code>y</code> 替换出现的 <code>x</code>。如果没有，我们什么都不做。</p>\n\n<p>举个例子，如果我们有 <code>S&nbsp;= &ldquo;abcd&rdquo;</code> 并且我们有一些替换操作 <code>i = 2，x = &ldquo;cd&rdquo;，y = &ldquo;ffff&rdquo;</code>，那么因为 <code>&ldquo;cd&rdquo;</code> 从原始字符串 <code>S</code> 中的位置 <code>2</code> 开始，我们将用&nbsp;<code>&ldquo;ffff&rdquo;</code> 替换它。</p>\n\n<p>再来看 <code>S = &ldquo;abcd&rdquo;</code> 上的另一个例子，如果我们有替换操作<code> i = 0，x = &ldquo;ab&rdquo;，y = &ldquo;eee&rdquo;</code>，以及另一个替换操作 <code>i = 2，x = &ldquo;ec&rdquo;，y = &ldquo;ffff&rdquo;</code>，那么第二个操作将不执行任何操作，因为原始字符串中&nbsp;<code>S[2] = &#39;c&#39;</code>，与 <code>x[0] = &#39;e&#39;</code> 不匹配。</p>\n\n<p>所有这些操作同时发生。保证在替换时不会有任何重叠：&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> 不是有效的测试用例。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>输出：</strong>&quot;eeebffff&quot;\n<strong>解释：\n</strong>&quot;a&quot; 从 S 中的索引 0 开始，所以它被替换为 &quot;eee&quot;。\n&quot;cd&quot; 从 S 中的索引 2 开始，所以它被替换为 &quot;ffff&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>输出：</strong>&quot;eeecd&quot;\n<strong>解释：\n</strong>&quot;ab&quot; 从 S 中的索引 0 开始，所以它被替换为 &quot;eee&quot;。\n&quot;ec&quot; 没有从<strong>原始的</strong> S 中的索引 2 开始，所以它没有被替换。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;=&nbsp;indexes.length =&nbsp;sources.length =&nbsp;targets.length &lt;= 100</code></li>\n\t<li><code>0&nbsp;&lt;&nbsp;indexes[i]&nbsp;&lt; S.length &lt;= 1000</code></li>\n\t<li>给定输入中的所有字符都是小写字母。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
