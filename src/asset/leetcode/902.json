{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} D\n * @param {number} N\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> atMostNGivenDigitSet = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">D, N</span>) </span>{\n\n  <span class=\"hljs-comment\">// 例如 [1,2,5,7] , 576</span>\n  <span class=\"hljs-comment\">/*\n    先算 小于等于100的(2位数和1位数) ==&gt;20\n    再算 在101~576之间 能够确定的3位数，比如这里是 1xx,2xx ==&gt; 4^2 *2\n    再算 不能确定的，因为存在5相等，因此就是算 76\n    再按照上面循环计算，但是注意，这里再算76，算出的结果要减去(1位数)\n    因为 这里前缀确定是5的三位数，可能存在512，但不能存在 52（不符合三位数）\n  */</span>\n  <span class=\"hljs-keyword\">if</span>(N===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span>(N&lt;=<span class=\"hljs-number\">10</span>)<span class=\"hljs-keyword\">return</span> D.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span>n&lt;=N).length\n  <span class=\"hljs-keyword\">let</span> isPre=<span class=\"hljs-literal\">false</span>, c=N\n  <span class=\"hljs-keyword\">while</span>(c&gt;=<span class=\"hljs-number\">10</span>) c/=<span class=\"hljs-number\">10</span>\n  <span class=\"hljs-keyword\">if</span>(c===<span class=\"hljs-number\">1</span>)isPre=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> SN=<span class=\"hljs-string\">''</span>+N, NL=SN.length\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>,preRes=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span>(isPre)res= <span class=\"hljs-built_in\">Math</span>.pow(D.length,NL<span class=\"hljs-number\">-1</span>)+atMostNGivenDigitSet(D,<span class=\"hljs-built_in\">Math</span>.floor(N/<span class=\"hljs-number\">10</span>))\n  <span class=\"hljs-keyword\">else</span>{\n    preRes=atMostNGivenDigitSet(D,<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">10</span>,NL<span class=\"hljs-number\">-1</span>))\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;D.length;i++){\n      <span class=\"hljs-keyword\">if</span>(+D[i]&lt;+SN[<span class=\"hljs-number\">0</span>]){\n        res+=<span class=\"hljs-built_in\">Math</span>.pow(D.length,NL<span class=\"hljs-number\">-1</span>)\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(+D[i]===+SN[<span class=\"hljs-number\">0</span>]){\n        <span class=\"hljs-keyword\">let</span> restNum=+SN.slice(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">let</span> r1=atMostNGivenDigitSet(D,restNum)\n        <span class=\"hljs-keyword\">if</span>(NL&lt;=<span class=\"hljs-number\">2</span>)res+=r1\n        <span class=\"hljs-keyword\">else</span> res+=r1- atMostNGivenDigitSet(D,<span class=\"hljs-built_in\">Math</span>.min(<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">10</span>,NL<span class=\"hljs-number\">-2</span>),restNum))\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res+preRes\n};\n</code></pre>\n"
  ],
  "titleSlug": "numbers-at-most-n-given-digit-set",
  "content": "<p>我们有一组<strong>排序的</strong>数字 <code>D</code>，它是&nbsp; <code>{&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}</code>&nbsp;的非空子集。（请注意，<code>&#39;0&#39;</code> 不包括在内。）</p>\n\n<p>现在，我们用这些数字进行组合写数字，想用多少次就用多少次。例如&nbsp;<code>D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}</code>，我们可以写出像&nbsp;<code>&#39;13&#39;, &#39;551&#39;, &#39;1351315&#39;</code>&nbsp;这样的数字。</p>\n\n<p>返回可以用 <code>D</code> 中的数字写出的小于或等于 <code>N</code> 的正整数的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], N = 100\n<strong>输出：</strong>20\n<strong>解释：</strong>\n可写出的 20 个数字是：\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], N = 1000000000\n<strong>输出：</strong>29523\n<strong>解释：</strong>\n我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，\n81 个四位数字，243 个五位数字，729 个六位数字，\n2187 个七位数字，6561 个八位数字和 19683 个九位数字。\n总共，可以使用D中的数字写出 29523 个整数。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>D</code> 是按排序顺序的数字 <code>&#39;1&#39;-&#39;9&#39;</code> 的子集。</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n"
}
