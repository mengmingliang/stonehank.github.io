{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> expressiveWords = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> counts=[],letters=[]\n  <span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;S.length;i++){\n    <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">0</span> &amp;&amp; S[i]===S[i<span class=\"hljs-number\">-1</span>]){\n      counts[j]++\n    }<span class=\"hljs-keyword\">else</span>{\n      counts[++j]=<span class=\"hljs-number\">1</span>\n      letters.push(S[i])\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> word <span class=\"hljs-keyword\">of</span> words){\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,k=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;word.length){\n      <span class=\"hljs-keyword\">if</span>(word[i]!==letters[k])<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">let</span> id=i+<span class=\"hljs-number\">1</span>,count=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">while</span>(id&lt;word.length &amp;&amp; word[id<span class=\"hljs-number\">-1</span>]===word[id]){\n        count++\n        id++\n      }\n      <span class=\"hljs-keyword\">if</span>(counts[k]&lt;count)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">if</span>(counts[k]&lt;<span class=\"hljs-number\">3</span> &amp;&amp; counts[k]!==count)<span class=\"hljs-keyword\">break</span>\n      i=id\n      k++\n    }\n    <span class=\"hljs-keyword\">if</span>(k===counts.length)res++\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "expressive-words",
  "hasThinking": false,
  "content": "<p>有时候人们会用重复写一些字母来表示额外的感受，比如 <code>&quot;hello&quot; -&gt; &quot;heeellooo&quot;</code>, <code>&quot;hi&quot; -&gt; &quot;hiii&quot;</code>。我们将相邻字母都相同的一串字符定义为相同字母组，例如：&quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;。</p>\n\n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母&nbsp;<code>c</code>&nbsp;），然后往其中添加相同的字母&nbsp;<code>c</code>&nbsp;使其长度达到 3 或以上。</p>\n\n<p>例如，以&nbsp;&quot;hello&quot; 为例，我们可以对字母组&nbsp;&quot;o&quot; 扩张得到 &quot;hellooo&quot;，但是无法以同样的方法得到 &quot;helloo&quot; 因为字母组 &quot;oo&quot; 长度小于&nbsp;3。此外，我们可以进行另一种扩张 &quot;ll&quot; -&gt; &quot;lllll&quot; 以获得&nbsp;&quot;helllllooo&quot;。如果&nbsp;<code>S = &quot;helllllooo&quot;</code>，那么查询词&nbsp;&quot;hello&quot; 是可扩张的，因为可以对它执行这两种扩张操作使得&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>。</p>\n\n<p>输入一组查询单词，输出其中可扩张的单词数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>输出：</strong>1\n<strong>解释</strong>：\n我们能通过扩张 &quot;hello&quot; 的 &quot;e&quot; 和 &quot;o&quot; 来得到 &quot;heeellooo&quot;。\n我们不能通过扩张 &quot;helo&quot; 来得到 &quot;heeellooo&quot; 因为 &quot;ll&quot; 的长度小于 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li>\n\t<li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li>\n</ul>\n"
}
