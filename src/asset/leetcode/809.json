{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> expressiveWords = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>,flag=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(k&lt;S.length &amp;&amp; j&lt;words[i].length){\n      <span class=\"hljs-comment\">// if(j&gt;=words[i].length)break</span>\n      <span class=\"hljs-keyword\">let</span> curL=words[i][j]\n      <span class=\"hljs-keyword\">let</span> curS=S[k]\n      <span class=\"hljs-keyword\">if</span>(curL!==curS)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">let</span> countL=<span class=\"hljs-number\">0</span>,countS=<span class=\"hljs-number\">0</span>\n      flag=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">while</span>(curL===words[i][j]){ j++;countL++}\n      <span class=\"hljs-keyword\">while</span>(curS===S[k]){ k++;countS++}\n      <span class=\"hljs-keyword\">if</span>(countS&lt;countL || countS===<span class=\"hljs-number\">2</span> &amp;&amp; countL===<span class=\"hljs-number\">1</span>){\n        flag=<span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">break</span>\n      }\n    }\n    <span class=\"hljs-keyword\">if</span>(k===S.length &amp;&amp; flag)res++\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "expressive-words",
  "translatedContent": "<p>有时候人们会用额外的字母来表示额外的情感，比如 &quot;hello&quot; -&gt; &quot;heeellooo&quot;, &quot;hi&quot; -&gt; &quot;hiii&quot;。我们将连续的相同的字母分组，并且相邻组的字母都不相同。我们将一个拥有三个或以上字母的组定义为扩张状态（extended），如第一个例子中的 &quot;e&quot; 和&quot; o&quot; 以及第二个例子中的 &quot;i&quot;。 此外，&quot;abbcccaaaa&quot; 将有分组&nbsp;&quot;a&quot; , &quot;bb&quot; , &quot;ccc&quot; , &quot;dddd&quot;；其中 &quot;ccc&quot; 和 &quot;aaaa&quot; 处于扩张状态。</p>\n\n<p>对于一个给定的字符串 S ，如果另一个单词能够通过将一些字母组扩张从而使其和 S 相同，我们将这个单词定义为可扩张的（stretchy）。我们允许选择一个字母组（如包含字母&nbsp;<code>c</code>&nbsp;），然后往其中添加相同的字母&nbsp;<code>c</code>&nbsp;使其长度达到 3 或以上。注意，我们不能将一个只包含一个字母的字母组，如 &quot;h&quot;，扩张到一个包含两个字母的组，如 &quot;hh&quot;；所有的扩张必须使该字母组变成扩张状态（至少包含三个字母）。</p>\n\n<p>输入一组单词，输出其中可扩张的单词数量。</p>\n\n<pre>\n<strong>示例：</strong>\n<strong>输入：</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>输出：</strong>1\n<strong>解释</strong>：\n我们能通过扩张&quot;hello&quot;的&quot;e&quot;和&quot;o&quot;来得到&quot;heeellooo&quot;。\n我们不能通过扩张&quot;helo&quot;来得到&quot;heeellooo&quot;因为&quot;ll&quot;不处于扩张状态。\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>。</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li>\n\t<li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li>\n</ul>\n"
}
