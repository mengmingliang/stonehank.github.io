{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> swapPairs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> cHead=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-string\">'init'</span>)\n  cHead.next=head\n  <span class=\"hljs-keyword\">let</span> node=cHead\n  <span class=\"hljs-keyword\">while</span>(node){\n    <span class=\"hljs-keyword\">let</span> last=node.next\n    <span class=\"hljs-keyword\">if</span>(!last)<span class=\"hljs-keyword\">return</span> cHead.next\n    <span class=\"hljs-keyword\">let</span> lastnext=last.next\n    <span class=\"hljs-keyword\">if</span>(!lastnext)<span class=\"hljs-keyword\">return</span> cHead.next\n    <span class=\"hljs-keyword\">let</span> finalnext=lastnext.next\n    node.next=lastnext\n    lastnext.next=last\n    last.next=finalnext\n    node=node.next.next\n  }\n  <span class=\"hljs-keyword\">return</span> cHead.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "swap-nodes-in-pairs",
  "translatedContent": "<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 <code>1-&gt;2-&gt;3-&gt;4</code>, 你应该返回 <code>2-&gt;1-&gt;4-&gt;3</code>.</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你的算法只能使用常数的额外空间。</li>\n\t<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n"
}
