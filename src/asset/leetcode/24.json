{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n  let cHead=new ListNode('init')\n  cHead.next=head\n  let node=cHead\n  while(node){\n    let last=node.next\n    if(!last)return cHead.next\n    let lastnext=last.next\n    if(!lastnext)return cHead.next\n    let finalnext=lastnext.next\n    node.next=lastnext\n    lastnext.next=last\n    last.next=finalnext\n    node=node.next.next\n  }\n  return cHead.next\n};"
  ],
  "titleSlug": "swap-nodes-in-pairs",
  "content": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Your algorithm should use only constant extra space.</li>\r\n\t<li>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 <code>1-&gt;2-&gt;3-&gt;4</code>, 你应该返回 <code>2-&gt;1-&gt;4-&gt;3</code>.</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你的算法只能使用常数的额外空间。</li>\n\t<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n"
}
