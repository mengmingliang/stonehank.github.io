{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} numCourses\n * @param {number[][]} prerequisites\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> canFinish = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">numCourses, prerequisites</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> graph=[], stack=[],marked=[]\n  <span class=\"hljs-keyword\">let</span> hasCycle=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;numCourses;i++){\n    graph[i]=[]\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prerequisites.length;i++){\n    <span class=\"hljs-keyword\">let</span> v=prerequisites[i][<span class=\"hljs-number\">1</span>],w=prerequisites[i][<span class=\"hljs-number\">0</span>]\n    graph[v].push(w)\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;numCourses;i++){\n    <span class=\"hljs-keyword\">if</span>(marked[i])<span class=\"hljs-keyword\">continue</span>\n    checkCycle(i,stack)\n    <span class=\"hljs-keyword\">if</span>(hasCycle)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkCycle</span>(<span class=\"hljs-params\">v,stack</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(hasCycle)<span class=\"hljs-keyword\">return</span>\n    marked[v]=<span class=\"hljs-literal\">true</span>\n    stack[v]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> adj=graph[v]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;adj.length;i++){\n      <span class=\"hljs-keyword\">if</span>(!marked[adj[i]]){\n        checkCycle(adj[i],stack)\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(stack[adj[i]]){\n        <span class=\"hljs-keyword\">return</span> hasCycle=<span class=\"hljs-literal\">true</span>\n      }\n    }\n    stack[v]=<span class=\"hljs-literal\">false</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "course-schedule",
  "content": "<p>现在你总共有 <em>n</em> 门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。</p>\n\n<p>在选修某些课程之前需要一些先修课程。&nbsp;例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p>\n\n<p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 2, [[1,0]] \n<strong>输出: </strong>true\n<strong>解释:</strong>&nbsp;总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 2, [[1,0],[0,1]]\n<strong>输出: </strong>false\n<strong>解释:</strong>&nbsp;总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">图的表示法</a>。</li>\n\t<li>你可以假定输入的先决条件中没有重复的边。</li>\n</ol>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li>\n\t<li>\n\t<p>拓扑排序也可以通过&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;完成。</p>\n\t</li>\n</ol>\n"
}
