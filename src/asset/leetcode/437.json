{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> pathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, sum</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> hashMap = {};\n    <span class=\"hljs-keyword\">let</span> currentSum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">return</span> pathSumRecursive(root, currentSum, hashMap, sum);\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pathSumRecursive</span>(<span class=\"hljs-params\">node, currentSum, hashMap, target</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  \n\n    currentSum += node.val;\n    <span class=\"hljs-keyword\">let</span> totalPaths = hashMap[currentSum - target] || <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-comment\">// if (currentSum === target) {</span>\n    <span class=\"hljs-comment\">//     totalPaths++;</span>\n    <span class=\"hljs-comment\">// }</span>\n    \n    <span class=\"hljs-keyword\">if</span> (hashMap[currentSum]) {\n        hashMap[currentSum]++;\n    } <span class=\"hljs-keyword\">else</span> {\n        hashMap[currentSum] = <span class=\"hljs-number\">1</span>;\n    }\n\n    totalPaths += pathSumRecursive(node.left, currentSum, hashMap, target);\n    totalPaths += pathSumRecursive(node.right, currentSum, hashMap, target);\n    \n    hashMap[currentSum]--;\n    <span class=\"hljs-keyword\">return</span> totalPaths;\n}\n</code></pre>\n"
  ],
  "titleSlug": "path-sum-iii",
  "content": "<p>给定一个二叉树，它的每个结点都存放着一个整数值。</p>\n\n<p>找出路径和等于给定数值的路径总数。</p>\n\n<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>\n\n<p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <strong>5</strong>   <strong>-3</strong>\n   <strong>/</strong> <strong>\\</strong>    <strong>\\</strong>\n  <strong>3</strong>   <strong>2</strong>   <strong>11</strong>\n / \\   <strong>\\</strong>\n3  -2   <strong>1</strong>\n\n返回 3。和等于 8 的路径有:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3.  -3 -&gt; 11\n</pre>\n"
}
