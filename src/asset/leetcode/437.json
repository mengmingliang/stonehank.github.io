{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> pathSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, sum</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> hash={},res=<span class=\"hljs-number\">0</span>,targ=sum\n  hash[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasPath</span>(<span class=\"hljs-params\">root,curSum</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> curV=root.val\n    <span class=\"hljs-keyword\">let</span> newSum=curSum+curV\n    <span class=\"hljs-keyword\">if</span>(hash[newSum-targ]&gt;<span class=\"hljs-number\">0</span>)res+=hash[newSum-targ]\n    <span class=\"hljs-keyword\">if</span>(hash[newSum]==<span class=\"hljs-literal\">null</span>)hash[newSum]=<span class=\"hljs-number\">0</span>\n    hash[newSum]++\n    <span class=\"hljs-keyword\">if</span>(root.left)hasPath(root.left,newSum)\n    <span class=\"hljs-keyword\">if</span>(root.right)hasPath(root.right,newSum)\n    hash[newSum]--\n  }\n  hasPath(root,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "path-sum-iii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>O(n^2)</code>：遍历树，对每一个节点，进行计算从这个节点开始往下的路径和的处理。</p>\n<p><code>O(nlogn)</code>：类似<code>Two Sum</code>，定义一个<code>hash</code>，用来保存当前<strong>从上往下的路径</strong>上的和，如果发现<code>当前和-target</code>存在，\n直接添加到结果。</p>\n<p>要注意的是：<code>hash[sum]</code>保存的和只能用于当前节点以下的路径，如果当前节点以下都处理完毕，需要减去这次保存的结果，<code>hash[sum]--</code>。</p>\n",
  "content": "<p>给定一个二叉树，它的每个结点都存放着一个整数值。</p>\n\n<p>找出路径和等于给定数值的路径总数。</p>\n\n<p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>\n\n<p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <strong>5</strong>   <strong>-3</strong>\n   <strong>/</strong> <strong>\\</strong>    <strong>\\</strong>\n  <strong>3</strong>   <strong>2</strong>   <strong>11</strong>\n / \\   <strong>\\</strong>\n3  -2   <strong>1</strong>\n\n返回 3。和等于 8 的路径有:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3.  -3 -&gt; 11\n</pre>\n"
}
