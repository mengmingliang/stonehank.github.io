{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} stamp\n * @param {string} target\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> movesToStamp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stamp, target</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">let</span> reCheck=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">while</span>(reCheck){\n    reCheck=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=target.length-stamp.length;i++){\n      <span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>,k=i\n      <span class=\"hljs-keyword\">while</span>(j&lt;stamp.length){\n        <span class=\"hljs-keyword\">if</span>(stamp[j]===target[k] || target[k]===<span class=\"hljs-string\">\"*\"</span>){\n          j++;k++\n        }<span class=\"hljs-keyword\">else</span>{\n          <span class=\"hljs-keyword\">break</span>\n        }\n      }\n      <span class=\"hljs-keyword\">if</span>(j===stamp.length){\n        <span class=\"hljs-keyword\">if</span>(target.substring(i,k)===<span class=\"hljs-string\">\"*\"</span>.repeat(stamp.length)){\n          <span class=\"hljs-keyword\">continue</span>\n        }\n        res.push(i)\n        target=target.substring(<span class=\"hljs-number\">0</span>,i)+<span class=\"hljs-string\">\"*\"</span>.repeat(stamp.length)+target.substring(k)\n        reCheck=<span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(target===<span class=\"hljs-string\">\"*\"</span>.repeat(target.length)){\n    <span class=\"hljs-keyword\">return</span> res.reverse()\n  }\n  <span class=\"hljs-keyword\">return</span> []\n};\n</code></pre>\n"
  ],
  "titleSlug": "stamping-the-sequence",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>类似字符串搜索，每次执行对<code>target</code>进行搜索stamp，然后将匹配的<code>target</code>段改为<code>*</code>，这样，搜索就有3个规则</p>\n<ol>\n<li>如果<code>stamp[i]===target[j] || target[j]===&quot;*&quot;</code>，匹配成立，继续下一个字符检查。</li>\n<li>检查完毕，如果匹配的<code>target</code>全是<code>*</code>，那么匹配不成立，continue。</li>\n<li>检查完毕，如果当前未能发现匹配，则说明无法匹配，返回 <code>[]</code>。</li>\n</ol>\n",
  "content": "<p>你想要用<strong>小写字母</strong>组成一个目标字符串&nbsp;<code>target</code>。&nbsp;</p>\n\n<p>开始的时候，序列由&nbsp;<code>target.length</code>&nbsp;个&nbsp;<code>&#39;?&#39;</code>&nbsp;记号组成。而你有一个小写字母印章&nbsp;<code>stamp</code>。</p>\n\n<p>在每个回合，你可以将印章放在序列上，并将序列中的每个字母替换为印章上的相应字母。你最多可以进行&nbsp;<code>10 * target.length</code>&nbsp; 个回合。</p>\n\n<p>举个例子，如果初始序列为 &quot;?????&quot;，而你的印章 <code>stamp</code>&nbsp;是&nbsp;<code>&quot;abc&quot;</code>，那么在第一回合，你可以得到&nbsp;&quot;abc??&quot;、&quot;?abc?&quot;、&quot;??abc&quot;。（请注意，印章必须完全包含在序列的边界内才能盖下去。）</p>\n\n<p>如果可以印出序列，那么返回一个数组，该数组由每个回合中被印下的最左边字母的索引组成。如果不能印出序列，就返回一个空数组。</p>\n\n<p>例如，如果序列是 &quot;ababc&quot;，印章是 <code>&quot;abc&quot;</code>，那么我们就可以返回与操作&nbsp;&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot; 相对应的答案 <code>[0, 2]</code>；</p>\n\n<p>另外，如果可以印出序列，那么需要保证可以在 <code>10 * target.length</code>&nbsp;个回合内完成。任何超过此数字的答案将不被接受。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>输出：</strong>[0,2]\n（[1,0,2] 以及其他一些可能的结果也将作为答案被接受）\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>输出：</strong>[3,0,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> 和&nbsp;<code>target</code>&nbsp;只包含小写字母。</li>\n</ol>\n"
}
