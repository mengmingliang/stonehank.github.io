{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} envelopes\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxEnvelopes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">envelopes</span>) </span>{\n  envelopes.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a[<span class=\"hljs-number\">0</span>]===b[<span class=\"hljs-number\">0</span>]?b[<span class=\"hljs-number\">1</span>]-a[<span class=\"hljs-number\">1</span>]:a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>])\n  <span class=\"hljs-comment\">// function canFit(a,b){</span>\n  <span class=\"hljs-comment\">//   return a[0]&gt;b[0] &amp;&amp; a[1]&gt;b[1]</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// memorize</span>\n  \n  <span class=\"hljs-comment\">// let mem=[]</span>\n  <span class=\"hljs-comment\">// function getNums(idx){</span>\n  <span class=\"hljs-comment\">//   if(mem[idx]!=null)return mem[idx]</span>\n  <span class=\"hljs-comment\">//   let res=1</span>\n  <span class=\"hljs-comment\">//   let env=envelopes[idx]</span>\n  <span class=\"hljs-comment\">//   for(let i=0;i&lt;idx;i++){</span>\n  <span class=\"hljs-comment\">//     if(canFit(env,envelopes[i])){</span>\n  <span class=\"hljs-comment\">//       res=Math.max(res,getNums(i)+1)</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   mem[idx]=res</span>\n  <span class=\"hljs-comment\">//   return res</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// let max=0</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;envelopes.length;i++){</span>\n  <span class=\"hljs-comment\">//   max=Math.max(max,getNums(i))</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return max</span>\n  \n  <span class=\"hljs-comment\">// dp</span>\n  \n  <span class=\"hljs-comment\">// let n=envelopes.length</span>\n  <span class=\"hljs-comment\">// let dp=Array(n).fill(0)</span>\n  <span class=\"hljs-comment\">// let max=0</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;n;i++){</span>\n  <span class=\"hljs-comment\">//   dp[i]=1</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;i;j++){</span>\n  <span class=\"hljs-comment\">//     if(canFit(envelopes[i],envelopes[j]))</span>\n  <span class=\"hljs-comment\">//       dp[i]=Math.max(dp[i],dp[j]+1)</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   max=Math.max(max,dp[i])</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return max</span>\n  \n  <span class=\"hljs-comment\">// bs</span>\n  <span class=\"hljs-keyword\">let</span> output = [];\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> e <span class=\"hljs-keyword\">of</span> envelopes) {\n    <span class=\"hljs-keyword\">let</span> i = binarySearch(output, e);\n    output[i] = e;\n  }\n  <span class=\"hljs-keyword\">return</span> output.length\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">binarySearch</span>(<span class=\"hljs-params\">output, envelope</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>, right = output.length<span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">while</span>(left &lt;= right) {\n        <span class=\"hljs-keyword\">let</span> mid = <span class=\"hljs-built_in\">Math</span>.floor((right+left)/<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">if</span>(output[mid][<span class=\"hljs-number\">1</span>] &lt; envelope[<span class=\"hljs-number\">1</span>]) { \n          left = mid + <span class=\"hljs-number\">1</span>\n        }<span class=\"hljs-keyword\">else</span> { \n          right = mid - <span class=\"hljs-number\">1</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> left;\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "russian-doll-envelopes",
  "hasThinking": false,
  "content": "<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式&nbsp;<code>(w, h)</code>&nbsp;出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\n\n<p>请计算最多能有多少个信封能组成一组&ldquo;俄罗斯套娃&rdquo;信封（即可以把一个信封放到另一个信封里面）。</p>\n\n<p><strong>说明:</strong><br>\n不允许旋转信封。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>\n<strong>输出:</strong> 3 \n<strong>解释:</strong> 最多信封的个数为 <code>3, 组合为: </code>[2,3] =&gt; [5,4] =&gt; [6,7]。\n</pre>\n"
}
