{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-comment\">// var findDuplicate = function(nums) {</span>\n<span class=\"hljs-comment\">//     let f=nums[nums[0]]</span>\n<span class=\"hljs-comment\">//     let s=nums[0]</span>\n<span class=\"hljs-comment\">//     while(f!==s){</span>\n<span class=\"hljs-comment\">//         f=nums[nums[f]]</span>\n<span class=\"hljs-comment\">//         s=nums[s]</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     f=0</span>\n<span class=\"hljs-comment\">//     while(f!==s){</span>\n<span class=\"hljs-comment\">//         f=nums[f]</span>\n<span class=\"hljs-comment\">//         s=nums[s]</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return s</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-keyword\">var</span> findDuplicate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> l=<span class=\"hljs-number\">1</span>,\n    hi=nums.length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bS</span>(<span class=\"hljs-params\">arr,l,hi</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(l&gt;=hi)<span class=\"hljs-keyword\">return</span> l\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((l+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">if</span>(nums[i]&lt;=mid)count++\n    }\n    <span class=\"hljs-keyword\">if</span>(count&lt;=mid)l=mid+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> hi=mid\n    <span class=\"hljs-keyword\">return</span> bS(arr,l,hi)\n  }\n  <span class=\"hljs-keyword\">return</span> bS(nums,l,hi)\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-the-duplicate-number",
  "translatedContent": "<p>给定一个包含&nbsp;<em>n</em> + 1 个整数的数组&nbsp;<em>nums</em>，其数字都在 1 到 <em>n&nbsp;</em>之间（包括 1 和 <em>n</em>），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <code>[1,3,4,2,2]</code>\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [3,1,3,4,2]\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ol>\n\t<li><strong>不能</strong>更改原数组（假设数组是只读的）。</li>\n\t<li>只能使用额外的 <em>O</em>(1) 的空间。</li>\n\t<li>时间复杂度小于 <em>O</em>(<em>n</em><sup>2</sup>) 。</li>\n\t<li>数组中只有一个重复的数字，但它可能不止重复出现一次。</li>\n</ol>\n"
}
