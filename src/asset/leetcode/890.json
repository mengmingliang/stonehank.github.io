{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n * @param {string} pattern\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findAndReplacePattern = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words, pattern</span>) </span>{\n  <span class=\"hljs-keyword\">let</span>  res=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">let</span> c={},d={},j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(;j&lt;words[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> cur=words[i][j], curP=pattern[j]\n      <span class=\"hljs-keyword\">if</span>(!c[curP])c[curP]=cur\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(c[curP]!==cur)<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">if</span>(!d[cur])d[cur]=curP\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(d[cur]!==curP)<span class=\"hljs-keyword\">break</span>          \n    }\n    <span class=\"hljs-keyword\">if</span>(j===words[i].length)res.push(words[i])\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-and-replace-pattern",
  "hasThinking": false,
  "content": "<p>你有一个单词列表&nbsp;<code>words</code>&nbsp;和一个模式&nbsp;&nbsp;<code>pattern</code>，你想知道 <code>words</code> 中的哪些单词与模式匹配。</p>\n\n<p>如果存在字母的排列 <code>p</code>&nbsp;，使得将模式中的每个字母 <code>x</code> 替换为 <code>p(x)</code> 之后，我们就得到了所需的单词，那么单词与模式是匹配的。</p>\n\n<p><em>（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）</em></p>\n\n<p>返回 <code>words</code> 中与给定模式匹配的单词列表。</p>\n\n<p>你可以按任何顺序返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>输出：</strong>[&quot;mee&quot;,&quot;aqq&quot;]\n<strong>解释：\n</strong>&quot;mee&quot; 与模式匹配，因为存在排列 {a -&gt; m, b -&gt; e, ...}。\n&quot;ccc&quot; 与模式不匹配，因为 {a -&gt; c, b -&gt; c, ...} 不是排列。\n因为 a 和 b 映射到同一个字母。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\n</ul>\n"
}
