{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n */</span>\n<span class=\"hljs-keyword\">var</span> NumMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">if</span> (matrix.length == <span class=\"hljs-number\">0</span> || matrix[<span class=\"hljs-number\">0</span>].length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;matrix.length+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;matrix[<span class=\"hljs-number\">0</span>].length+<span class=\"hljs-number\">1</span>;j++) dp[i][j]=<span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;dp.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;dp[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> t=dp[i<span class=\"hljs-number\">-1</span>][j]\n      <span class=\"hljs-keyword\">let</span> l=dp[i][j<span class=\"hljs-number\">-1</span>]\n      <span class=\"hljs-keyword\">let</span> lt=dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n      dp[i][j]=t+l-lt+matrix[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n    }\n  }\n\n  <span class=\"hljs-keyword\">this</span>.dp=dp\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} row1 \n * @param {number} col1 \n * @param {number} row2 \n * @param {number} col2\n * @return {number}\n */</span>\nNumMatrix.prototype.sumRegion = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">row1, col1, row2, col2</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.dp[row2+<span class=\"hljs-number\">1</span>][col2+<span class=\"hljs-number\">1</span>]-<span class=\"hljs-keyword\">this</span>.dp[row2+<span class=\"hljs-number\">1</span>][col1]-<span class=\"hljs-keyword\">this</span>.dp[row1][col2+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-keyword\">this</span>.dp[row1][col1]\n};\n\n<span class=\"hljs-comment\">/** \n * Your NumMatrix object will be instantiated and called as such:\n * var obj = Object.create(NumMatrix).createNew(matrix)\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "range-sum-query-2d-immutable",
  "hasThinking": false,
  "content": "<p>给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (<em>row</em>1,&nbsp;<em>col</em>1) ，右下角为 (<em>row</em>2,&nbsp;<em>col</em>2)。</p>\n\n<p><img alt=\"Range Sum Query 2D\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/range_sum_query_2d.png\"><br>\n<small>上图子矩阵左上角&nbsp;(row1, col1) = <strong>(2, 1)</strong>&nbsp;，右下角(row2, col2) = <strong>(4, 3)，</strong>该子矩形内元素的总和为 8。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>你可以假设矩阵不可变。</li>\n\t<li>会多次调用&nbsp;<em>sumRegion&nbsp;</em>方法<em>。</em></li>\n\t<li>你可以假设&nbsp;<em>row</em>1 &le; <em>row</em>2 且&nbsp;<em>col</em>1 &le; <em>col</em>2。</li>\n</ol>\n"
}
