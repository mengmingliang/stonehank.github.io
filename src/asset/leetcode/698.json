{
  "code": [
    "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar canPartitionKSubsets = function(nums, k) {\n  // nums.sort((a,b)=>a-b)\n  let mem={}\n  let sum=0\n  for(let i=0;i<nums.length;i++){\n    sum+=nums[i]\n    if(mem[nums[i]]==null)mem[nums[i]]=1\n    else mem[nums[i]]++\n  }\n  if(sum%k!==0)return false\n  let initTarget=sum/k\n\n  let marked=Array(nums.length).fill(false)\n  \n  function check(target,k,start,marked){\n    if(k===1)return true\n    if(target===0){\n      if(check(initTarget,k-1,0,marked))return true\n    }\n    if(target<0)return false\n    for(let i=start;i<nums.length;i++){\n      if(marked[i])continue\n      let cur=nums[i]\n      marked[i]=true\n      if(check(target-cur,k,i+1,marked))return true\n      marked[i]=false\n    }\n    return false\n  }\n\n  return check(initTarget,k,0,marked)\n};"
  ],
  "titleSlug": "partition-to-k-equal-sum-subsets",
  "content": "<p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, find whether it's possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>1 <= k <= len(nums) <= 16</code>.</li>\r\n<li><code>0 < nums[i] < 10000</code>.</li>\r\n</p>",
  "translatedContent": "<p>给定一个整数数组&nbsp;&nbsp;<code>nums</code> 和一个正整数 <code>k</code>，找出是否有可能把这个数组分成 <code>k</code> 个非空子集，其总和都相等。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>输出：</strong> True\n<strong>说明：</strong> 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\n</ul>\n"
}
