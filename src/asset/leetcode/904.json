{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} tree\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> totalFruit = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tree</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxCount=<span class=\"hljs-number\">-1</span>,lastIndex=<span class=\"hljs-number\">0</span>,count,maxTypes,lastV1,lastV2\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">traverse</span>(<span class=\"hljs-params\">lastIndex</span>)</span>{\n    lastV1=<span class=\"hljs-literal\">null</span>;lastV2=<span class=\"hljs-literal\">null</span>;count=<span class=\"hljs-number\">0</span>;maxTypes=<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=lastIndex;i&lt;tree.length;i++){\n      <span class=\"hljs-keyword\">let</span> cur=tree[i]\n      <span class=\"hljs-keyword\">if</span>(lastV1===cur || lastV2===cur)count++\n      <span class=\"hljs-keyword\">else</span>{\n        maxTypes--\n        <span class=\"hljs-keyword\">if</span>(maxTypes===<span class=\"hljs-number\">0</span>)lastIndex=i\n        <span class=\"hljs-keyword\">if</span>(maxTypes&lt;<span class=\"hljs-number\">0</span>){\n          <span class=\"hljs-keyword\">if</span>(count&gt;maxCount)maxCount=count\n          <span class=\"hljs-keyword\">return</span> traverse(lastIndex)\n        }<span class=\"hljs-keyword\">else</span>{\n          count++\n          <span class=\"hljs-keyword\">if</span>(lastV1==<span class=\"hljs-literal\">null</span>)lastV1=cur\n          <span class=\"hljs-keyword\">else</span> lastV2=cur\n        }\n      }\n    }\n  }\n  traverse(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">if</span>(count&gt;maxCount)maxCount=count\n  <span class=\"hljs-keyword\">return</span> maxCount\n};\n</code></pre>\n"
  ],
  "titleSlug": "fruit-into-baskets",
  "translatedContent": "<p>在一排树中，第 <code>i</code> 棵树产生&nbsp;<code>tree[i]</code> 型的水果。<br>\n你可以<strong>从你选择的任何树开始</strong>，然后重复执行以下步骤：</p>\n\n<ol>\n\t<li>把这棵树上的水果放进你的篮子里。如果你做不到，就停下来。</li>\n\t<li>移动到当前树右侧的下一棵树。如果右边没有树，就停下来。</li>\n</ol>\n\n<p>请注意，在选择一颗树后，你没有任何选择：你必须执行步骤 1，然后执行步骤 2，然后返回步骤 1，然后执行步骤 2，依此类推，直至停止。</p>\n\n<p>你有两个篮子，每个篮子可以携带任何数量的水果，但你希望每个篮子只携带一种类型的水果。<br>\n用这个程序你能收集的水果总量是多少？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,1]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[0,1,2,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以收集 [1,2,2].\n如果我们从第一棵树开始，我们将只能收集到 [0, 1]。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,2,2]\n<strong>输出：</strong>4\n<strong>解释：</strong>我们可以收集 [2,3,2,2].\n如果我们从第一棵树开始，我们将只能收集到 [1, 2]。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[3,3,3,1,2,1,1,2,3,3,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>我们可以收集 [1,2,1,1,2].\n如果我们从第一棵树或第八棵树开始，我们将只能收集到 4 个水果。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\n</ol>\n"
}
