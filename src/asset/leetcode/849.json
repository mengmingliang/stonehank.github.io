{
  "code": [
    "/**\n * @param {number[]} seats\n * @return {number}\n */\nvar maxDistToClosest = function(seats) {\n  let maxD=0,len=seats.length\n  let seatIdx=[]\n  for(let i=0;i<len;i++){\n    if(seats[i]===1)seatIdx.push(i)\n  }\n\n  let rI=0\n  let left=null,right=seatIdx[rI++]\n  let i=0\n  while(i!=null && i<len){\n    if(seats[i]===1){\n      left=i++\n      right=seatIdx[rI++]\n      continue\n    }\n\n    let sum\n    if(left==null)sum=2*(right-i)\n    else if(right==null)sum=2*(len-left-1)\n    else sum=right-left\n    maxD=Math.max(maxD,Math.floor(sum/2))   \n    i=right\n  } \n  return maxD\n};"
  ],
  "titleSlug": "maximize-distance-to-closest-person",
  "content": "<p>In a row of <code>seats</code>, <code>1</code> represents a person sitting in that seat, and <code>0</code> represents that the seat is empty.&nbsp;</p>\r\n\r\n<p>There is at least one empty seat, and at least one person sitting.</p>\r\n\r\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.&nbsp;</p>\r\n\r\n<p>Return that maximum distance to closest person.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,0,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the second open seat (seats[2]), then the closest person has distance 2.\r\nIf Alex sits in any other open seat, the closest person has distance 1.\r\nThus, the maximum distance to the closest person is 2.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,0,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the last seat, the closest person is 3 seats away.\r\nThis is the maximum distance possible, so the answer is 3.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\r\n\t<li><code>seats</code>&nbsp;contains only 0s or 1s, at least one <code>0</code>, and at least one <code>1</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
  "translatedContent": "<p>在一排座位（&nbsp;<code>seats</code>）中，<code>1</code>&nbsp;代表有人坐在座位上，<code>0</code>&nbsp;代表座位上是空的。</p>\n\n<p>至少有一个空座位，且至少有一人坐在座位上。</p>\n\n<p>亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。</p>\n\n<p>返回他到离他最近的人的最大距离。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0,1,0,1]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 <span style=\"\">3 </span>。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\n\t<li><code>seats</code>&nbsp;中只含有 0 和 1，至少有一个 <code>0</code>，且至少有一个 <code>1</code>。</li>\n</ol>\n"
}
