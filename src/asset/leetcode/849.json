{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} seats\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxDistToClosest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">seats</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxD=<span class=\"hljs-number\">0</span>,len=seats.length\n  <span class=\"hljs-keyword\">let</span> seatIdx=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n    <span class=\"hljs-keyword\">if</span>(seats[i]===<span class=\"hljs-number\">1</span>)seatIdx.push(i)\n  }\n\n  <span class=\"hljs-keyword\">let</span> rI=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-literal\">null</span>,right=seatIdx[rI++]\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(i!=<span class=\"hljs-literal\">null</span> &amp;&amp; i&lt;len){\n    <span class=\"hljs-keyword\">if</span>(seats[i]===<span class=\"hljs-number\">1</span>){\n      left=i++\n      right=seatIdx[rI++]\n      <span class=\"hljs-keyword\">continue</span>\n    }\n\n    <span class=\"hljs-keyword\">let</span> sum\n    <span class=\"hljs-keyword\">if</span>(left==<span class=\"hljs-literal\">null</span>)sum=<span class=\"hljs-number\">2</span>*(right-i)\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(right==<span class=\"hljs-literal\">null</span>)sum=<span class=\"hljs-number\">2</span>*(len-left<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-keyword\">else</span> sum=right-left\n    maxD=<span class=\"hljs-built_in\">Math</span>.max(maxD,<span class=\"hljs-built_in\">Math</span>.floor(sum/<span class=\"hljs-number\">2</span>))   \n    i=right\n  } \n  <span class=\"hljs-keyword\">return</span> maxD\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximize-distance-to-closest-person",
  "content": "<p>在一排座位（&nbsp;<code>seats</code>）中，<code>1</code>&nbsp;代表有人坐在座位上，<code>0</code>&nbsp;代表座位上是空的。</p>\n\n<p>至少有一个空座位，且至少有一人坐在座位上。</p>\n\n<p>亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。</p>\n\n<p>返回他到离他最近的人的最大距离。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0,1,0,1]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[1,0,0,0]\n<strong>输出：</strong>3\n<strong>解释： </strong>\n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 <span style=\"\">3 </span>。\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\n\t<li><code>seats</code>&nbsp;中只含有 0 和 1，至少有一个 <code>0</code>，且至少有一个 <code>1</code>。</li>\n</ol>\n"
}
