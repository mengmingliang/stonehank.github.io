{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */</span>\n<span class=\"hljs-keyword\">var</span> nextGreatestLetter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">letters, target</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> len=letters.length\n    <span class=\"hljs-keyword\">let</span> last=letters[len<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-keyword\">if</span>(target&gt;=last)<span class=\"hljs-keyword\">return</span> letters[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bS</span>(<span class=\"hljs-params\">letters,lo,hi</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(lo&gt;=hi)<span class=\"hljs-keyword\">return</span> letters[lo]\n        <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">if</span>(letters[mid]&gt;target)<span class=\"hljs-keyword\">return</span> bS(letters,lo,mid)\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> bS(letters,mid+<span class=\"hljs-number\">1</span>,hi)\n    }\n    <span class=\"hljs-keyword\">return</span> bS(letters,<span class=\"hljs-number\">0</span>,len)\n    \n};\n</code></pre>\n"
  ],
  "titleSlug": "find-smallest-letter-greater-than-target",
  "translatedContent": "<p>给定一个只包含小写字母的有序数组<code>letters</code>&nbsp;和一个目标字母&nbsp;<code>target</code>，寻找有序数组里面比目标字母大的最小字母。</p>\n\n<p>数组里字母的顺序是循环的。举个例子，如果目标字母<code>target = &#39;z&#39;</code> 并且有序数组为&nbsp;<code>letters = [&#39;a&#39;, &#39;b&#39;]</code>，则答案返回&nbsp;<code>&#39;a&#39;</code>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;a&quot;\n<strong>输出:</strong> &quot;c&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;c&quot;\n<strong>输出:</strong> &quot;f&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;d&quot;\n<strong>输出:</strong> &quot;f&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;g&quot;\n<strong>输出:</strong> &quot;j&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;j&quot;\n<strong>输出:</strong> &quot;c&quot;\n\n<strong>输入:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;k&quot;\n<strong>输出:</strong> &quot;c&quot;\n</pre>\n\n<p><strong>注:</strong></p>\n\n<ol>\n\t<li><code>letters</code>长度范围在<code>[2, 10000]</code>区间内。</li>\n\t<li><code>letters</code> 仅由小写字母组成，最少包含两个不同的字母。</li>\n\t<li>目标字母<code>target</code> 是一个小写字母。</li>\n</ol>\n"
}
