{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n */</span>\n<span class=\"hljs-keyword\">var</span> ExamRoom = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.N=N<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">this</span>.list=[]\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nExamRoom.prototype.seat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list.length===<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">this</span>.list.push(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>.list[<span class=\"hljs-number\">0</span>]<span class=\"hljs-number\">-0</span>,<span class=\"hljs-keyword\">this</span>.N-<span class=\"hljs-keyword\">this</span>.list[<span class=\"hljs-keyword\">this</span>.list.length<span class=\"hljs-number\">-1</span>])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">this</span>.list.length<span class=\"hljs-number\">-1</span>;i++){\n    <span class=\"hljs-keyword\">let</span> gap=<span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.list[i+<span class=\"hljs-number\">1</span>]-<span class=\"hljs-keyword\">this</span>.list[i])/<span class=\"hljs-number\">2</span>)\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,gap)\n  }\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[<span class=\"hljs-number\">0</span>]===max){\n    <span class=\"hljs-keyword\">this</span>.list.unshift(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">this</span>.list.length<span class=\"hljs-number\">-1</span>;i++){\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.list[i+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-keyword\">this</span>.list[i])/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> midGap=<span class=\"hljs-built_in\">Math</span>.floor((<span class=\"hljs-keyword\">this</span>.list[i+<span class=\"hljs-number\">1</span>]-<span class=\"hljs-keyword\">this</span>.list[i])/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(midGap===max){\n      <span class=\"hljs-keyword\">this</span>.list.splice(i+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,mid)\n      <span class=\"hljs-keyword\">return</span> mid\n    }\n  }\n  <span class=\"hljs-keyword\">this</span>.list.push(<span class=\"hljs-keyword\">this</span>.N)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.N\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} p\n * @return {void}\n */</span>\nExamRoom.prototype.leave = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">p</span>) </span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">this</span>.list.length;i++){\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[i]===p)\n      <span class=\"hljs-keyword\">this</span>.list.splice(i,<span class=\"hljs-number\">1</span>)\n  }\n  <span class=\"hljs-comment\">// console.log(this.list)</span>\n};\n\n<span class=\"hljs-comment\">/** \n * Your ExamRoom object will be instantiated and called as such:\n * var obj = Object.create(ExamRoom).createNew(N)\n * var param_1 = obj.seat()\n * obj.leave(p)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "exam-room",
  "content": "<p>在考场里，一排有&nbsp;<code>N</code>&nbsp;个座位，分别编号为&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;。</p>\n\n<p>当学生进入考场后，他必须坐在能够使他与离他最近的人之间的距离达到最大化的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)</p>\n\n<p>返回&nbsp;<code>ExamRoom(int N)</code>&nbsp;类，它有两个公开的函数：其中，函数&nbsp;<code>ExamRoom.seat()</code>&nbsp;会返回一个&nbsp;<code>int</code>&nbsp;（整型数据），代表学生坐的位置；函数&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;代表坐在座位 <code>p</code> 上的学生现在离开了考场。请确保每次调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时都有学生坐在座位&nbsp;<code>p</code>&nbsp;上。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]\n<strong>输出：</strong>[null,0,9,4,2,null,5]\n<strong>解释：</strong>\nExamRoom(10) -&gt; null\nseat() -&gt; 0，没有人在考场里，那么学生坐在 0 号座位上。\nseat() -&gt; 9，学生最后坐在 9 号座位上。\nseat() -&gt; 4，学生最后坐在 4 号座位上。\nseat() -&gt; 2，学生最后坐在 2 号座位上。\nleave(4) -&gt; null\nseat() -&gt; 5，学生最后坐在 5 号座位上。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li>在所有的测试样例中&nbsp;<code>ExamRoom.seat()</code>&nbsp;和&nbsp;<code>ExamRoom.leave()</code>&nbsp;最多被调用&nbsp;<code>10^4</code>&nbsp;次。</li>\n\t<li>调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时需要确保当前有学生坐在座位 <code>p</code> 上。</li>\n</ol>\n"
}
