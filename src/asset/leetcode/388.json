{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} input\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> lengthLongestPath = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">input</span>) </span>{\n    <span class=\"hljs-comment\">// let paths=[]</span>\n    <span class=\"hljs-keyword\">let</span> tTime=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> curPath=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">let</span> isFile=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">let</span> maxCount=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> tempCount=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> tempList=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;input.length;i++){\n        <span class=\"hljs-keyword\">if</span>(input[i]===<span class=\"hljs-string\">\".\"</span>){\n            isFile=<span class=\"hljs-literal\">true</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(input[i]===<span class=\"hljs-string\">\"\\n\"</span>){\n            \n            \n            <span class=\"hljs-keyword\">if</span>(tTime&lt;tempList.length ){\n                <span class=\"hljs-keyword\">let</span> t=tempList.length-tTime\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;t;i++){\n                    \n                    tempCount-=tempList.pop()\n                }\n            }\n\n            tempCount+=curPath.length\n            tempList[tTime]=curPath.length\n            \n            <span class=\"hljs-keyword\">if</span>(isFile){\n                maxCount=<span class=\"hljs-built_in\">Math</span>.max(maxCount,tempCount+tempList.length<span class=\"hljs-number\">-1</span>)\n            }\n            <span class=\"hljs-comment\">// console.log(curPath,tempList,maxCount)</span>\n            <span class=\"hljs-comment\">// paths.push([curPath,curPath.length,tTime,isFile])</span>\n            tTime=<span class=\"hljs-number\">0</span>\n            curPath=<span class=\"hljs-string\">''</span>\n            isFile=<span class=\"hljs-literal\">false</span>\n            <span class=\"hljs-keyword\">while</span>(input[++i]===<span class=\"hljs-string\">'\\t'</span>){\n                tTime++   \n            }\n        }\n        curPath+=input[i]\n    }\n    <span class=\"hljs-comment\">// paths.push([curPath,curPath.length,tTime,isFile])</span>\n    <span class=\"hljs-comment\">// console.log(paths)</span>\n    <span class=\"hljs-keyword\">if</span>(tTime&lt;tempList.length ){\n        <span class=\"hljs-keyword\">let</span> t=tempList.length-tTime\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;t;i++){\n\n            tempCount-=tempList.pop()\n        }\n    }\n    tempCount+=curPath.length\n    tempList[tTime]=curPath.length\n    <span class=\"hljs-keyword\">if</span>(isFile){\n        maxCount=<span class=\"hljs-built_in\">Math</span>.max(maxCount,tempCount+tempList.length<span class=\"hljs-number\">-1</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> maxCount\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-absolute-file-path",
  "content": "<p>假设我们以下述方式将我们的文件系统抽象成一个字符串:</p>\n\n<p>字符串&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;</code> 表示:</p>\n\n<pre>\ndir\n    subdir1\n    subdir2\n        file.ext\n</pre>\n\n<p>目录&nbsp;<code>dir</code> 包含一个空的子目录&nbsp;<code>subdir1</code> 和一个包含一个文件&nbsp;<code>file.ext</code>&nbsp;的子目录&nbsp;<code>subdir2</code> 。</p>\n\n<p>字符串&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code> 表示:</p>\n\n<pre>\ndir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n</pre>\n\n<p>目录&nbsp;<code>dir</code> 包含两个子目录 <code>subdir1</code> 和&nbsp;<code>subdir2</code>。&nbsp;<code>subdir1</code> 包含一个文件&nbsp;<code>file1.ext</code> 和一个空的二级子目录 <code>subsubdir1</code>。<code>subdir2</code> 包含一个二级子目录&nbsp;<code>subsubdir2</code> ，其中包含一个文件&nbsp;<code>file2.ext</code>。</p>\n\n<p>我们致力于寻找我们文件系统中文件的最长 (按字符的数量统计) 绝对路径。例如，在上述的第二个例子中，最长路径为&nbsp;<code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>，其长度为&nbsp;<code>32</code> (不包含双引号)。</p>\n\n<p>给定一个以上述格式表示文件系统的字符串，返回文件系统中文件的最长绝对路径的长度。 如果系统中没有文件，返回&nbsp;<code>0</code>。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>文件名至少存在一个&nbsp;<code>.</code> 和一个扩展名。</li>\n\t<li>目录或者子目录的名字不能包含&nbsp;<code>.</code>。</li>\n</ul>\n\n<p>要求时间复杂度为&nbsp;<code>O(n)</code>&nbsp;，其中&nbsp;<code>n</code> 是输入字符串的大小。</p>\n\n<p>请注意，如果存在路径&nbsp;<code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>&nbsp;的话，那么&nbsp;&nbsp;<code>a/aa/aaa/file1.txt</code>&nbsp;就不是一个最长的路径。</p>\n"
}
