{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @param {number[]} blacklist\n */</span>\n<span class=\"hljs-keyword\">var</span> Solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N, blacklist</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.hash={}\n  <span class=\"hljs-keyword\">this</span>.rest=N-blacklist.length\n  <span class=\"hljs-keyword\">let</span> last=N<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;blacklist.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=blacklist[i]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.hash[cur]==<span class=\"hljs-literal\">null</span>)\n      <span class=\"hljs-keyword\">this</span>.hash[cur]=last--\n  }\n  <span class=\"hljs-comment\">// console.log(this.hash,this.rest)</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> blacklist){\n    <span class=\"hljs-keyword\">if</span>(n&gt;=<span class=\"hljs-keyword\">this</span>.rest)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-keyword\">this</span>.hash[n]\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">this</span>.hash[cur]!=<span class=\"hljs-literal\">null</span> &amp;&amp; cur!=<span class=\"hljs-keyword\">this</span>.hash[cur]){\n      cur=<span class=\"hljs-keyword\">this</span>.hash[cur]\n    }\n    <span class=\"hljs-keyword\">this</span>.hash[n]=cur\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nSolution.prototype.pick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> rd=<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*<span class=\"hljs-keyword\">this</span>.rest)\n  <span class=\"hljs-comment\">// console.log(this.hash)</span>\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.hash[rd]!=<span class=\"hljs-literal\">null</span>){\n    rd=<span class=\"hljs-keyword\">this</span>.hash[rd]\n  }\n  <span class=\"hljs-keyword\">return</span> rd\n};\n\n<span class=\"hljs-comment\">/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(N, blacklist)\n * var param_1 = obj.pick()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "random-pick-with-blacklist",
  "content": "<p>给定一个包含 [0，n ) 中独特的整数的黑名单 B，写一个函数从 [ 0，n ) 中返回一个<strong>不在</strong> B 中的随机整数。</p>\n\n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;不包含&nbsp;N，详细参见&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>&nbsp;。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[1,[]],[],[],[]]\n<strong>输出: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[2,[]],[],[],[]]\n<strong>输出: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[4,[2]],[],[],[]]\n<strong>输出: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>N</code>&nbsp;和黑名单&nbsp;<code>B</code>。<code>pick</code>&nbsp;没有参数，输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n"
}
