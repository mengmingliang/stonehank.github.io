{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> smallestDistancePair = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  nums.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n\n  <span class=\"hljs-keyword\">let</span> lo = <span class=\"hljs-number\">0</span>,hi=nums[nums.length<span class=\"hljs-number\">-1</span>]-nums[<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> counts=getLessEqualCounts(mid)\n    <span class=\"hljs-keyword\">if</span>(counts&gt;=k)hi=mid\n    <span class=\"hljs-keyword\">else</span> lo=mid+<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> lo\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLessEqualCounts</span>(<span class=\"hljs-params\">target</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> counts=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">while</span>(j&lt;nums.length &amp;&amp; (nums[j]-nums[i])&lt;=target)j++\n      counts+=j-i<span class=\"hljs-number\">-1</span>\n    }\n    <span class=\"hljs-keyword\">return</span> counts\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-k-th-smallest-pair-distance",
  "hasThinking": false,
  "content": "<p>给定一个整数数组，返回所有数对之间的第 k 个最小<strong>距离</strong>。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>\nnums = [1,3,1]\nk = 1\n<strong>输出：0</strong> \n<strong>解释：</strong>\n所有数对如下：\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。\n</pre>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n"
}
