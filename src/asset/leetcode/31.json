{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> nextPermutation = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=nums.length<span class=\"hljs-number\">-2</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=i;k&lt;nums.length<span class=\"hljs-number\">-1</span>;k++){\n      <span class=\"hljs-keyword\">if</span>(nums[i]&lt;nums[k+<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> swap(nums,i,k+<span class=\"hljs-number\">1</span>)\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=i;k&lt;nums.length<span class=\"hljs-number\">-1</span>;k++){\n      swap(nums,k,k+<span class=\"hljs-number\">1</span>) \n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> t=arr[i]\n    arr[i]=arr[j]\n    arr[j]=t\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "next-permutation",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>从最低位开始找(倒序遍历)；</p>\n<ol>\n<li>\n<p>如果当前<code>nums[i]</code>的后面存在一个数<code>nums[k]&gt;nums[i]</code>，那么交换<code>i</code>和<code>k</code>就是当前下一个的排列。</p>\n</li>\n<li>\n<p>如果不能存在这个数，那么说明<code>nums[i]</code>比它后面所有的数都大，要将它放到最末尾，通过插入排序的方法，将它与后面一个个交换直到末尾。</p>\n</li>\n</ol>\n<p>也就是说，对于<code>nums[i]</code>，它后面的是一个递增序列，递增序列才能保证存在<code>条件1</code>的数<code>nums[k]</code>是一个比<code>nums[i]</code>大的最小值。</p>\n",
  "content": "<p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>\n\n<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>\n\n<p>必须<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>修改，只允许使用额外常数空间。</p>\n\n<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br>\n<code>1,2,3</code> &rarr; <code>1,3,2</code><br>\n<code>3,2,1</code> &rarr; <code>1,2,3</code><br>\n<code>1,1,5</code> &rarr; <code>1,5,1</code></p>\n"
}
