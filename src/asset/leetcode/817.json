{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @param {number[]} G\n * @return {number}\n */</span>\n<span class=\"hljs-comment\">// var numComponents = function(head, G) {</span>\n<span class=\"hljs-comment\">//     let count=0;</span>\n<span class=\"hljs-comment\">//     let headArr=[]</span>\n<span class=\"hljs-comment\">//     function swap(a,i,j){</span>\n<span class=\"hljs-comment\">//         let temp=a[i]</span>\n<span class=\"hljs-comment\">//         a[i]=a[j]</span>\n<span class=\"hljs-comment\">//         a[j]=temp</span>\n<span class=\"hljs-comment\">//     }    </span>\n<span class=\"hljs-comment\">//     while(head.val!=undefined){</span>\n<span class=\"hljs-comment\">//         headArr[head.val]=count++</span>\n<span class=\"hljs-comment\">//         if(head.next) head=head.next</span>\n<span class=\"hljs-comment\">//         else break;</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     let newIdxArr=[]</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;G.length;i++){</span>\n<span class=\"hljs-comment\">//         newIdxArr[i]=headArr[G[i]]</span>\n<span class=\"hljs-comment\">//         // if(i&gt;0){</span>\n<span class=\"hljs-comment\">//         //     let cur=i</span>\n<span class=\"hljs-comment\">//         //     while(newIdxArr[cur]&lt;newIdxArr[cur-1]){</span>\n<span class=\"hljs-comment\">//         //         swap(newIdxArr,cur,cur-1)</span>\n<span class=\"hljs-comment\">//         //         cur--</span>\n<span class=\"hljs-comment\">//         //     }</span>\n<span class=\"hljs-comment\">//         // }</span>\n<span class=\"hljs-comment\">//     }</span>\n\n<span class=\"hljs-comment\">//     let quick = function (array, lo, hi) {</span>\n<span class=\"hljs-comment\">//       let index;</span>\n<span class=\"hljs-comment\">//       if (array.length &gt; 1) {</span>\n<span class=\"hljs-comment\">//         if(hi&lt;=lo)return</span>\n<span class=\"hljs-comment\">//         index = partition(array, lo, hi);</span>\n<span class=\"hljs-comment\">//           quick(array, lo, index - 1);</span>\n<span class=\"hljs-comment\">//           quick(array, index, hi);</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     };</span>\n\n<span class=\"hljs-comment\">//     let partition = function (array, l, r) {</span>\n<span class=\"hljs-comment\">//       let pivot = array[Math.floor((r + l) / 2)],</span>\n<span class=\"hljs-comment\">//         i = l,</span>\n<span class=\"hljs-comment\">//         j = r;</span>\n<span class=\"hljs-comment\">//       while (i &lt;= j) {</span>\n<span class=\"hljs-comment\">//         while (array[i] &lt; pivot) {i++}</span>\n<span class=\"hljs-comment\">//         while (array[j] &gt; pivot) {j--}</span>\n<span class=\"hljs-comment\">//         if (i &lt;= j) swap(array, i++, j--);</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       return i</span>\n<span class=\"hljs-comment\">//     }</span>\n    \n<span class=\"hljs-comment\">//     quick(newIdxArr,0,newIdxArr.length-1)</span>\n    \n<span class=\"hljs-comment\">//     // newIdxArr.sort((a,b)=&gt;a-b)</span>\n<span class=\"hljs-comment\">//     let res=1</span>\n<span class=\"hljs-comment\">//     for(let i=1;i&lt;newIdxArr.length;i++){</span>\n<span class=\"hljs-comment\">//         let gap=newIdxArr[i]-newIdxArr[i-1]</span>\n<span class=\"hljs-comment\">//         if(gap===1 || gap===0){</span>\n<span class=\"hljs-comment\">//             continue;</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//         res++</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return res</span>\n<span class=\"hljs-keyword\">const</span> numComponents = <span class=\"hljs-function\">(<span class=\"hljs-params\">head, G</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> wanted = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Int8Array</span>(<span class=\"hljs-number\">10000</span>)\n  G.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> { wanted[v] = <span class=\"hljs-number\">1</span> })\n  <span class=\"hljs-keyword\">let</span> ans = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> connected = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> cur = head; cur; cur = cur.next) {\n    <span class=\"hljs-keyword\">if</span> (wanted[cur.val]) {\n      connected = <span class=\"hljs-literal\">true</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// break connection</span>\n      <span class=\"hljs-keyword\">if</span> (connected) {\n        ++ans, connected = <span class=\"hljs-literal\">false</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (connected) {\n    ++ans, connected = <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> ans\n}\n    \n</code></pre>\n"
  ],
  "titleSlug": "linked-list-components",
  "content": "<p>给定一个链表（链表结点包含一个整型值）的头结点&nbsp;<code>head</code>。</p>\n\n<p>同时给定列表&nbsp;<code>G</code>，该列表是上述链表中整型值的一个子集。</p>\n\n<p>返回列表&nbsp;<code>G</code>&nbsp;中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表&nbsp;<code>G</code>&nbsp;中）构成的集合。</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3\nG = [0, 1, 3]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\nG = [0, 3, 1, 4]\n<strong>输出:</strong> 2\n<strong>解释:</strong> \n链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>如果&nbsp;<code>N</code>&nbsp;是给定链表&nbsp;<code>head</code>&nbsp;的长度，<code>1 &lt;= N &lt;= 10000</code>。</li>\n\t<li>链表中每个结点的值所在范围为&nbsp;<code>[0, N - 1]</code>。</li>\n\t<li><code>1 &lt;= G.length &lt;= 10000</code></li>\n\t<li><code>G</code> 是链表中所有结点的值的一个子集.</li>\n</ul>\n"
}
