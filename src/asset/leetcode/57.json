{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for an interval.\n * function Interval(start, end) {\n *     this.start = start;\n *     this.end = end;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Interval[]} intervals\n * @param {Interval} newInterval\n * @return {Interval[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">intervals, newInterval</span>) </span>{\n  \n  <span class=\"hljs-comment\">// // 类似skyline解法，O(nlgn)</span>\n  <span class=\"hljs-comment\">// let aux=[]</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;intervals.length;i++){</span>\n  <span class=\"hljs-comment\">//   aux.push([intervals[i].start,0],[intervals[i].end,1])</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// aux.push([newInterval.start,0],[newInterval.end,1])</span>\n  <span class=\"hljs-comment\">// aux.sort((a,b)=&gt;{</span>\n  <span class=\"hljs-comment\">//   if(a[0]&lt;b[0])return -1</span>\n  <span class=\"hljs-comment\">//   else if(a[0]&gt;b[0])return 1</span>\n  <span class=\"hljs-comment\">//   else{</span>\n  <span class=\"hljs-comment\">//     if(a[1]===0)return -1</span>\n  <span class=\"hljs-comment\">//     else return 1</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// })</span>\n  <span class=\"hljs-comment\">// let stack=[],result=[]</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;aux.length;i++){</span>\n  <span class=\"hljs-comment\">//   let [idx,state]=aux[i]</span>\n  <span class=\"hljs-comment\">//   if(state===0){</span>\n  <span class=\"hljs-comment\">//     stack.push(idx)</span>\n  <span class=\"hljs-comment\">//   }else{</span>\n  <span class=\"hljs-comment\">//     let start=stack.pop()</span>\n  <span class=\"hljs-comment\">//     if(stack.length===0){</span>\n  <span class=\"hljs-comment\">//       let inter=new Interval(start,idx)</span>\n  <span class=\"hljs-comment\">//       result.push(inter)</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return result</span>\n\n  <span class=\"hljs-comment\">// 直接逻辑判断 O(n)</span>\n  <span class=\"hljs-keyword\">let</span> result = [];\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> interval <span class=\"hljs-keyword\">of</span> intervals){\n    <span class=\"hljs-keyword\">if</span>(interval.end &lt; newInterval.start){\n      result.push(interval);\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(interval.start &gt; newInterval.end){\n      result.push(newInterval);\n      newInterval = interval;\n    }<span class=\"hljs-keyword\">else</span>{\n      newInterval.start=<span class=\"hljs-built_in\">Math</span>.min(newInterval.start, interval.start)\n      newInterval.end=<span class=\"hljs-built_in\">Math</span>.max(newInterval.end, interval.end)\n    }\n  }\n  result.push(newInterval);\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "insert-interval",
  "thinking": "<hr>\n<p>思路：</p>\n<p>一种最简单的想法就是，先添加<code>newIntervals</code>，然后重新按照起始端点排序，最后再处理重叠区间，就相当于<code>Leetcode 56</code>一模一样。</p>\n<p>时间复杂度是<code>O(nlgn)</code>。</p>\n<p>另外是时间复杂度<code>O(n)</code>的方法。</p>\n<p>思路比较简洁的是重新构建区间，</p>\n<p>检查每一段区间，如果<code>当前区间.end &lt; 新区间.start</code>，那么当前区间肯定是在新区间前面且不重叠的，直接添加当前区间进结果就好。</p>\n<p>如果<code>当前区间.start &gt; 新区间.end</code>，那么当前区间肯定是在新区间后面且不重叠的，并且说明新区间已经处理完毕，直接添加新区间到结果。</p>\n<p>其他情况，说明存在重叠区域，更新新区间的开始点和结束点。</p>\n",
  "content": "<p>给出一个<em>无重叠的 ，</em>按照区间起始端点排序的区间列表。</p>\n\n<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>输出:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\n<strong>输出:</strong> [[1,2],[3,10],[12,16]]\n<strong>解释:</strong> 这是因为新的区间 <code>[4,8]</code> 与 <code>[3,5],[6,7],[8,10]</code>&nbsp;重叠。\n</pre>\n",
  "hasThinking": true
}
