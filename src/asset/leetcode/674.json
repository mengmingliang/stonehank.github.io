{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLengthOfLCIS = function(nums) {\n    if(nums.length===0)return 0\n    let start=0,maxLen=0\n    let i=1\n    for(;i<nums.length;i++){\n        if(nums[i]<=nums[i-1]){\n            let temp=i-start\n            if(temp>maxLen)maxLen=temp\n            start=i\n        }\n    }\n    let temp=i-start\n    if(temp>maxLen)maxLen=temp\n    return maxLen\n};"
  ],
  "titleSlug": "longest-continuous-increasing-subsequence",
  "content": "<p>\r\nGiven an unsorted array of integers, find the length of longest <code>continuous</code> increasing subsequence (subarray).\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,5,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [1,3,5], its length is 3. \r\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,2,2,2]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [2], its length is 1. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nLength of the array will not exceed 10,000.\r\n</p>",
  "translatedContent": "<p>给定一个未经排序的整数数组，找到最长且<strong>连续</strong>的的递增序列。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 最长连续递增序列是 [1,3,5], 长度为3。\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 \n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 最长连续递增序列是 [2], 长度为1。\n</pre>\n\n<p><strong>注意：</strong>数组长度不会超过10000。</p>\n"
}
