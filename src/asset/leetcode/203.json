{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @param {number} val\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeElements = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head, val</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n  root.next=head\n  <span class=\"hljs-keyword\">let</span> lastNode=root,node=head\n  <span class=\"hljs-keyword\">while</span>(lastNode){\n    <span class=\"hljs-keyword\">if</span>(node &amp;&amp; node.val===val){\n      <span class=\"hljs-keyword\">let</span> nxt=node.next\n      lastNode.next=nxt\n      node=nxt\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(node)node=node.next\n      lastNode=lastNode.next\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> root.next\n};\n</code></pre>\n"
  ],
  "titleSlug": "remove-linked-list-elements",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>只需要时刻跟踪当前<code>node</code>和当前<code>node</code>的上一个节点<code>lastNode</code>。</p>\n<p>遇到<code>node.val===val</code>，那么就改变<code>lastNode.next</code>为<code>node.next</code>。</p>\n",
  "content": "<p>删除链表中等于给定值&nbsp;<strong><em>val&nbsp;</em></strong>的所有节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5\n</pre>\n"
}
