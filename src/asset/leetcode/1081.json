{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} text\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> smallestSubsequence = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">text</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> idx=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>[])\n  <span class=\"hljs-comment\">// 记录每一个字母的索引数组</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;text.length;i++){\n    <span class=\"hljs-keyword\">let</span> code=text.charCodeAt(i)<span class=\"hljs-number\">-97</span>\n    <span class=\"hljs-keyword\">if</span>(idx[code].length===<span class=\"hljs-number\">0</span>)len++\n    idx[code].push(i)\n  }\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> limit=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">while</span>(len--&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> minMax=<span class=\"hljs-literal\">Infinity</span>\n    \n    <span class=\"hljs-comment\">// 首先找到每一个字母对应索引的最大值中 的 最小值</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;idx.length;i++){\n      <span class=\"hljs-keyword\">let</span> list=idx[i]\n      <span class=\"hljs-keyword\">if</span>(list.length===<span class=\"hljs-number\">0</span> || used[i])<span class=\"hljs-keyword\">continue</span>\n      minMax=<span class=\"hljs-built_in\">Math</span>.min(minMax,list[list.length<span class=\"hljs-number\">-1</span>])\n    }\n    <span class=\"hljs-comment\">// 接着按字母顺序检查每一个字母对应索引的最小值，如果这个最小值不大于刚才的最大最小值，则添加进res</span>\n    <span class=\"hljs-comment\">// 同时，之后如果碰到当前索引之前的索引，可以删除</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;idx.length;i++){\n      <span class=\"hljs-keyword\">let</span> list=idx[i]\n      <span class=\"hljs-keyword\">if</span>(list.length===<span class=\"hljs-number\">0</span> || used[i])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">while</span>(list[<span class=\"hljs-number\">0</span>]&lt;limit){\n        list.shift()\n      }\n      <span class=\"hljs-keyword\">if</span>(list[<span class=\"hljs-number\">0</span>]&lt;=minMax){\n        used[i]=<span class=\"hljs-literal\">true</span>\n        limit=list[<span class=\"hljs-number\">0</span>]\n        res+=<span class=\"hljs-built_in\">String</span>.fromCharCode(i+<span class=\"hljs-number\">97</span>)\n        <span class=\"hljs-keyword\">break</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "smallest-subsequence-of-distinct-characters",
  "hasThinking": false,
  "content": "<p>返回字符串 <code>text</code>&nbsp;中按字典序排列最小的子序列，该子序列包含&nbsp;<code>text</code>&nbsp;中所有不同字符一次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;cdadabcc&quot;\n<strong>输出：</strong>&quot;adbc&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abcd&quot;\n<strong>输出：</strong>&quot;abcd&quot;\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;ecbacba&quot;\n<strong>输出：</strong>&quot;eacb&quot;\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>&quot;leetcode&quot;\n<strong>输出：</strong>&quot;letcod&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= text.length &lt;= 1000</code></li>\n\t<li><code>text</code>&nbsp;由小写英文字母组成</li>\n</ol>\n"
}
