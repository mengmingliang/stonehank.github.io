{
  "code": [
    "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subarraySum = function(nums, k) {\n  let map={},result=0,sum=0\n  map[0]=1\n  for(let i=0;i<nums.length;i++){\n    sum+=nums[i]\n    result+=map[sum-k]||0\n    if(!map[sum])map[sum]=1\n    else map[sum]++\n  }\n  return result\n};"
  ],
  "titleSlug": "subarray-sum-equals-k",
  "content": "<p>Given an array of integers and an integer <b>k</b>, you need to find the total number of continuous subarrays whose sum equals to <b>k</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>nums = [1,1,1], k = 2\r\n<b>Output:</b> 2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the array is in range [1, 20,000].</li>\r\n<li>The range of numbers in the array is [-1000, 1000] and the range of the integer <b>k</b> is [-1e7, 1e7].</li>\r\n</ol>\r\n</p>\r\n",
  "translatedContent": "<p>给定一个整数数组和一个整数&nbsp;<strong>k，</strong>你需要找到该数组中和为&nbsp;<strong>k&nbsp;</strong>的连续的子数组的个数。</p>\n\n<p><strong>示例 1 :</strong></p>\n\n<pre>\n<strong>输入:</strong>nums = [1,1,1], k = 2\n<strong>输出:</strong> 2 , [1,1] 与 [1,1] 为两种不同的情况。\n</pre>\n\n<p><strong>说明 :</strong></p>\n\n<ol>\n\t<li>数组的长度为 [1, 20,000]。</li>\n\t<li>数组中元素的范围是 [-1000, 1000] ，且整数&nbsp;<strong>k&nbsp;</strong>的范围是&nbsp;[-1e7, 1e7]。</li>\n</ol>\n"
}
