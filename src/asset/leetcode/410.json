{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> splitArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, m</span>) </span>{\n  <span class=\"hljs-comment\">//DP</span>\n  <span class=\"hljs-comment\">// let dp=[]</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;m;i++){</span>\n  <span class=\"hljs-comment\">//   dp[i]=[]</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;nums.length;j++){</span>\n  <span class=\"hljs-comment\">//     if(i===0 &amp;&amp; j===0)dp[i][j]=nums[0]</span>\n  <span class=\"hljs-comment\">//     else if(i===0)dp[i][j]=dp[i][j-1]+nums[j]</span>\n  <span class=\"hljs-comment\">//     else dp[i][j]=Infinity</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// for(let i=1;i&lt;dp.length;i++){</span>\n  <span class=\"hljs-comment\">//   for(let j=i;j&lt;dp[0].length;j++){</span>\n  <span class=\"hljs-comment\">//     for(let k=0;k&lt;j;k++){</span>\n  <span class=\"hljs-comment\">//       let kSum=dp[0][j]-dp[0][k]</span>\n  <span class=\"hljs-comment\">//       dp[i][j]=Math.min(Math.max(dp[i-1][k],kSum),dp[i][j])</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return dp[dp.length-1][dp[0].length-1]</span>\n  \n  <span class=\"hljs-comment\">// BS</span>\n  \n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>,max=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n    sum+=nums[i]\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,nums[i])\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">splitGroupNum</span>(<span class=\"hljs-params\">pivot</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> splitNum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> tempSum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      tempSum+=nums[i]\n      <span class=\"hljs-keyword\">if</span>(tempSum&gt;pivot){\n        <span class=\"hljs-comment\">// tempSum-=nums[i]</span>\n        splitNum++\n        tempSum=nums[i]\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> splitNum+<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">let</span> lo=max,hi=sum\n  <span class=\"hljs-keyword\">while</span>(lo&lt;=hi){\n    <span class=\"hljs-keyword\">let</span> pivot=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> count=splitGroupNum(pivot)\n    <span class=\"hljs-keyword\">if</span>(count&gt;m){\n      lo=pivot+<span class=\"hljs-number\">1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      hi=pivot<span class=\"hljs-number\">-1</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> lo\n};\n</code></pre>\n"
  ],
  "titleSlug": "split-array-largest-sum",
  "content": "<p>给定一个非负整数数组和一个整数&nbsp;<em>m</em>，你需要将这个数组分成&nbsp;<em>m&nbsp;</em>个非空的连续子数组。设计一个算法使得这&nbsp;<em>m&nbsp;</em>个子数组各自和的最大值最小。</p>\n\n<p><strong>注意:</strong><br />\n数组长度&nbsp;<em>n&nbsp;</em>满足以下条件:</p>\n\n<ul>\n\t<li>1 &le; <em>n</em> &le; 1000</li>\n\t<li>1 &le; <em>m</em> &le; min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>示例: </strong></p>\n\n<pre>\n输入:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n输出:\n18\n\n解释:\n一共有四种方法将<strong>nums</strong>分割为2个子数组。\n其中最好的方式是将其分为<strong>[7,2,5]</strong> 和 <strong>[10,8]</strong>，\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。\n</pre>\n"
}
