{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> uniquePathsWithObstacles = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obstacleGrid</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(obstacleGrid[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> m=obstacleGrid.length,n=obstacleGrid[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(m).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>))\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">if</span>(obstacleGrid[i][j]===<span class=\"hljs-number\">1</span>)dp[i][j]=<span class=\"hljs-literal\">null</span>\n    }\n  }\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      <span class=\"hljs-keyword\">if</span>(i&lt;m<span class=\"hljs-number\">-1</span> &amp;&amp; dp[i+<span class=\"hljs-number\">1</span>][j]!=<span class=\"hljs-literal\">null</span>)dp[i+<span class=\"hljs-number\">1</span>][j]+=dp[i][j]\n      <span class=\"hljs-keyword\">if</span>(j&lt;n<span class=\"hljs-number\">-1</span> &amp;&amp; dp[i][j+<span class=\"hljs-number\">1</span>]!=<span class=\"hljs-literal\">null</span>)dp[i][j+<span class=\"hljs-number\">1</span>]+=dp[i][j]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "unique-paths-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>比<code>NO.62</code>多了一个条件：障碍，同样还是<code>DP</code>的思路；</p>\n<p><code>dp[i][j]</code>表示从开始到当前<code>[i,j]</code>位置，总共有多少种不同的路径；</p>\n<p>对于每一个<code>dp[i][j]</code>，因为机器人只能<strong>向右</strong>和<strong>向下</strong>；</p>\n<p>那么右侧同样也能继承当前<code>[i,j]</code>的路径，即<code>dp[i][j+1]+=dp[i][j]</code>，下侧同理，<code>dp[i+1][j]+=dp[i][j]</code>；</p>\n<p>如果遇到障碍则不能去计算，可以对所有障碍设置为<code>dp[x][y]=null</code>，因此在状态转移方程中，\n需要额外一个判断条件：<code>dp[i+1][j]!=null</code>或者<code>dp[i][j+1]!=null</code>。</p>\n",
  "content": "<p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为&ldquo;Start&rdquo; ）。</p>\n\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为&ldquo;Finish&rdquo;）。</p>\n\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" style=\"height: 183px; width: 400px;\"></p>\n\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n\n<p><strong>说明：</strong><em>m</em>&nbsp;和 <em>n </em>的值均不超过 100。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:\n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [0,1,0],\n&nbsp; [0,0,0]\n]\n<strong>输出:</strong> 2\n<strong>解释:</strong>\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 <code>2</code> 条不同的路径：\n1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右\n</pre>\n"
}
