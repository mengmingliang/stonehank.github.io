{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minDepth = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> leftH=minDepth(root.left),\n      rightH=minDepth(root.right)\n  <span class=\"hljs-keyword\">if</span>(root.left &amp;&amp; root.right){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.min(leftH,rightH)+<span class=\"hljs-number\">1</span>\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!root.left){\n    <span class=\"hljs-keyword\">return</span> rightH+<span class=\"hljs-number\">1</span>\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!root.right){\n    <span class=\"hljs-keyword\">return</span> leftH+<span class=\"hljs-number\">1</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-depth-of-binary-tree",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>必须是<code>root</code>到<code>leaf</code>的最小高度，如果当前节点是<code>leaf</code>，返回<code>1</code>；否则：</p>\n<p>当前节点存在2个子节点，那么返回<code>min(leftH,rightH)+1</code>；</p>\n<p>当前节点只有1个子节点，那么只能返回<code>存在的子节点的高度+1</code>。</p>\n",
  "content": "<p>给定一个二叉树，找出其最小深度。</p>\n\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\n\n<p><strong>示例:</strong></p>\n\n<p>给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>返回它的最小深度 &nbsp;2.</p>\n"
}
