{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestSubstring = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, k</span>) </span>{\n  \n  <span class=\"hljs-keyword\">return</span> check(s,k,uniq(s))\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">uniq</span>(<span class=\"hljs-params\">str</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">set</span>=new Set(str);\n    let arr=[]\n    for(let i of <span class=\"hljs-keyword\">set</span>){\n      arr.push(i)\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">s,k,arr</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(s.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n      <span class=\"hljs-keyword\">let</span> count=s.match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(arr[i],<span class=\"hljs-string\">'g'</span>)).length;\n      <span class=\"hljs-keyword\">if</span>(count &lt; k){\n        <span class=\"hljs-keyword\">let</span> index=s.match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(arr[i])).index\n        <span class=\"hljs-keyword\">let</span> newArr=uniq(s.split(arr[i]));\n        <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;newArr.length;i++){\n          <span class=\"hljs-keyword\">let</span> cur=check(newArr[i],k,uniq(newArr[i]))\n          max=<span class=\"hljs-built_in\">Math</span>.max(max,cur)\n        }\n        <span class=\"hljs-keyword\">return</span> max;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> s.length\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ol>\n<li><code>Window Slide</code></li>\n</ol>\n<p>每次只选取内部存在独立字母为<code>limit</code>子字符串，例如：<code>limit==1</code>，那么可以选取<code>abcdde</code>中的<code>a</code>，<code>b</code>，<code>c</code>，<code>dd</code>，<code>e</code>。</p>\n<p><code>limit</code>的范围是<code>[1,26]</code>，因为最多26个字母。</p>\n<p>每一都对<code>limit</code>长度的子字符串进行双指针检测，其中变量<code>uniq</code>表示当前子串里面独立的字母的个数，\n变量<code>valid</code>表示子串内部有效(个数大于等于<code>k</code>)的字母的个数；</p>\n<p>如果存在<code>uniq===limit &amp;&amp; uniq===valid</code>，说明子串存在<code>limit</code>个独立字母，并且每个字母出现次数不小于<code>k</code>，可以作为结果并且筛选最大值。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> longestSubstring = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> count\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> limit=<span class=\"hljs-number\">1</span>;limit&lt;=<span class=\"hljs-number\">26</span>;limit++){\n    count=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">let</span> uniq=<span class=\"hljs-number\">0</span>, valid=<span class=\"hljs-number\">0</span>, i=<span class=\"hljs-number\">0</span>, j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(j&lt;s.length){\n      <span class=\"hljs-keyword\">if</span>(uniq&lt;=limit){\n        <span class=\"hljs-keyword\">let</span> code=s.charCodeAt(j)<span class=\"hljs-number\">-97</span>\n        <span class=\"hljs-keyword\">if</span>(count[code]===<span class=\"hljs-number\">0</span>)uniq++\n        count[code]++\n        <span class=\"hljs-keyword\">if</span>(count[code]===k)valid++\n        j++\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">let</span> code=s.charCodeAt(i)<span class=\"hljs-number\">-97</span>\n        <span class=\"hljs-keyword\">if</span>(count[code]===k)valid--\n        count[code]--\n        <span class=\"hljs-keyword\">if</span>(count[code]===<span class=\"hljs-number\">0</span>)uniq--\n        i++\n      }\n      <span class=\"hljs-keyword\">if</span>(uniq===limit &amp;&amp; uniq===valid){\n        max=<span class=\"hljs-built_in\">Math</span>.max(j-i,max)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n<ol start=\"2\">\n<li><code>Recursion</code></li>\n</ol>\n<p>对一个字符串<code>s</code>，检查它内部每一个字母，如果发现某一个字母<code>s[i]</code>出现的次数小于<code>k</code>，那么说明包含这个字母的子串一定无效，通过<code>split</code>，以当前无效字母进行分割<code>s</code>，在递归处理每一个分割的子串。</p>\n<p>一个小优化：可以通过<code>set</code>对字符串去重后再递归处理。</p>\n",
  "content": "<p>找到给定字符串（由小写字符组成）中的最长子串 <strong><em>T</em></strong> ，&nbsp;要求&nbsp;<strong><em>T</em></strong>&nbsp;中的每一字符出现次数都不少于 <em>k</em> 。输出 <strong><em>T&nbsp;</em></strong>的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n输入:\ns = &quot;aaabb&quot;, k = 3\n\n输出:\n3\n\n最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n输入:\ns = &quot;ababbc&quot;, k = 2\n\n输出:\n5\n\n最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。\n</pre>\n"
}
