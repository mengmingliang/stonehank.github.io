{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n    <span class=\"hljs-keyword\">let</span> last=<span class=\"hljs-literal\">null</span>,lastCount=<span class=\"hljs-number\">0</span>,count=<span class=\"hljs-number\">0</span>,dupli=[]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inOrder</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(node.left)inOrder(node.left)\n        <span class=\"hljs-comment\">// console.log(last,node.val,count,dupli)</span>\n        <span class=\"hljs-keyword\">if</span>(node.val!==last){\n            <span class=\"hljs-keyword\">if</span>(lastCount&lt;count)dupli=[last]\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(lastCount===count)dupli.push(last)\n            lastCount=<span class=\"hljs-built_in\">Math</span>.max(lastCount,count)\n            count=<span class=\"hljs-number\">1</span>\n            last=node.val\n        }<span class=\"hljs-keyword\">else</span> count++\n        <span class=\"hljs-keyword\">if</span>(node.right)inOrder(node.right)\n    }\n    inOrder(root)\n    <span class=\"hljs-keyword\">if</span>(lastCount&lt;count)dupli=[last]\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(lastCount===count)dupli.push(last)\n    <span class=\"hljs-keyword\">return</span> dupli\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-mode-in-binary-search-tree",
  "translatedContent": "<p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>\n\n<p>假定 BST 有如下定义：</p>\n\n<ul>\n\t<li>结点左子树中所含结点的值小于等于当前结点的值</li>\n\t<li>结点右子树中所含结点的值大于等于当前结点的值</li>\n\t<li>左子树和右子树都是二叉搜索树</li>\n</ul>\n\n<p>例如：<br>\n给定 BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>返回[2]</code>.</p>\n\n<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p>\n\n<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>\n"
}
