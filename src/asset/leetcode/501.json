{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar findMode = function(root) {\n    if(!root)return []\n    let last=null,lastCount=0,count=0,dupli=[]\n    function inOrder(node){\n        if(!node)return\n        if(node.left)inOrder(node.left)\n        // console.log(last,node.val,count,dupli)\n        if(node.val!==last){\n            if(lastCount<count)dupli=[last]\n            else if(lastCount===count)dupli.push(last)\n            lastCount=Math.max(lastCount,count)\n            count=1\n            last=node.val\n        }else count++\n        if(node.right)inOrder(node.right)\n    }\n    inOrder(root)\n    if(lastCount<count)dupli=[last]\n    else if(lastCount===count)dupli.push(last)\n    return dupli\n};"
  ],
  "titleSlug": "find-mode-in-binary-search-tree",
  "content": "<p>Given a binary search tree (BST) with duplicates, find all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (the most frequently occurred element) in the given BST.</p>\r\n\r\n<p>Assume a BST is defined as follows:</p>\r\n\r\n<ul>\r\n\t<li>The left subtree of a node contains only nodes with keys <b>less than or equal to</b> the node&#39;s key.</li>\r\n\t<li>The right subtree of a node contains only nodes with keys <b>greater than or equal to</b> the node&#39;s key.</li>\r\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example:<br />\r\nGiven BST <code>[1,null,2,2]</code>,</p>\r\n\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>return <code>[2]</code>.</p>\r\n\r\n<p><b>Note:</b> If a tree has more than one mode, you can return them in any order.</p>\r\n\r\n<p><b>Follow up:</b> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\r\n",
  "translatedContent": "<p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>\n\n<p>假定 BST 有如下定义：</p>\n\n<ul>\n\t<li>结点左子树中所含结点的值小于等于当前结点的值</li>\n\t<li>结点右子树中所含结点的值大于等于当前结点的值</li>\n\t<li>左子树和右子树都是二叉搜索树</li>\n</ul>\n\n<p>例如：<br>\n给定 BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>返回[2]</code>.</p>\n\n<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p>\n\n<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>\n"
}
