{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} bills\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> lemonadeChange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">bills</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> change={<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">0</span>}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;bills.length;i++){\n    <span class=\"hljs-keyword\">if</span>(bills[i]===<span class=\"hljs-number\">5</span>){\n      change[<span class=\"hljs-number\">5</span>]++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(bills[i]===<span class=\"hljs-number\">10</span>){\n      <span class=\"hljs-keyword\">if</span>(change[<span class=\"hljs-number\">5</span>]--===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      change[<span class=\"hljs-number\">10</span>]++\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(bills[i]===<span class=\"hljs-number\">20</span>){\n      <span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">if</span>(change[<span class=\"hljs-number\">10</span>]&gt;<span class=\"hljs-number\">0</span>){\n        change[<span class=\"hljs-number\">10</span>]--\n        c+=<span class=\"hljs-number\">10</span>\n      }\n      <span class=\"hljs-keyword\">while</span>(c&lt;<span class=\"hljs-number\">15</span> &amp;&amp; change[<span class=\"hljs-number\">5</span>]&gt;<span class=\"hljs-number\">0</span>){\n        c+=<span class=\"hljs-number\">5</span>\n        change[<span class=\"hljs-number\">5</span>]--\n      }\n      <span class=\"hljs-keyword\">if</span>(c&lt;<span class=\"hljs-number\">15</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>    \n};\n</code></pre>\n"
  ],
  "titleSlug": "lemonade-change",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2>使用一个<code>hash</code>保存收到的钱，对于<code>10</code>，查看<code>hash[5]</code>是否<code>&gt;0</code>即可，对于<code>20</code>，优先查看是否有<code>hash[10]</code>，因为<code>10</code>的用途只有1个，\n就是给<code>20</code>找零，因此可以使用贪心。</h2>\n",
  "content": "<p>在柠檬水摊上，每一杯柠檬水的售价为&nbsp;<code>5</code>&nbsp;美元。</p>\n\n<p>顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p>\n\n<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>\n\n<p>注意，一开始你手头没有任何零钱。</p>\n\n<p>如果你能给每位顾客正确找零，返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,5,10,20]\n<strong>输出：</strong>true\n<strong>解释：\n</strong>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n由于所有客户都得到了正确的找零，所以我们输出 true。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,10]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[10,10]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[5,5,10,10,20]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n由于不是每位顾客都得到了正确的找零，所以答案是 false。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\n\t<li><code>bills[i]</code>&nbsp;不是&nbsp;<code>5</code>&nbsp;就是&nbsp;<code>10</code>&nbsp;或是&nbsp;<code>20</code>&nbsp;</li>\n</ul>\n"
}
