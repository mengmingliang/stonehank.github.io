{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MyHashMap = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.hash={}\n};\n\n<span class=\"hljs-comment\">/**\n * value will always be non-negative. \n * @param {number} key \n * @param {number} value\n * @return {void}\n */</span>\nMyHashMap.prototype.put = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key, value</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.hash[key]=value\n};\n\n<span class=\"hljs-comment\">/**\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \n * @param {number} key\n * @return {number}\n */</span>\nMyHashMap.prototype.get = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.hash[key]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.hash[key]\n};\n\n<span class=\"hljs-comment\">/**\n * Removes the mapping of the specified value key if this map contains a mapping for the key \n * @param {number} key\n * @return {void}\n */</span>\nMyHashMap.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.hash[key]!=<span class=\"hljs-literal\">null</span>){\n    <span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-keyword\">this</span>.hash[key])\n  }\n};\n\n<span class=\"hljs-comment\">/** \n * Your MyHashMap object will be instantiated and called as such:\n * var obj = Object.create(MyHashMap).createNew()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "design-hashmap",
  "content": "<p>不使用任何内建的哈希表库设计一个哈希映射</p>\n\n<p>具体地说，你的设计应该包含以下的功能</p>\n\n<ul>\n\t<li><code>put(key, value)</code>：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。</li>\n\t<li><code>get(key)</code>：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。</li>\n\t<li><code>remove(key)</code>：如果映射中存在这个键，删除这个数值对。</li>\n</ul>\n\n<p><br />\n<strong>示例：</strong></p>\n\n<pre>\nMyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到)\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; // 更新已有的值\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 1 \nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; // 删除键为2的数据\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 返回 -1 (未找到) \n</pre>\n\n<p><br />\n<strong>注意：</strong></p>\n\n<ul>\n\t<li>所有的值都在&nbsp;<code>[1, 1000000]</code>的范围内。</li>\n\t<li>操作的总数目在<code>[1, 10000]</code>范围内。</li>\n\t<li>不要使用内建的哈希库。</li>\n</ul>\n"
}
