{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} label\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> pathInZigZagTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">label</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">let</span> log=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-comment\">// 找出当前2的指数的边界</span>\n  <span class=\"hljs-keyword\">while</span> (log &lt;= label) log &lt;&lt;= <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">while</span> (label &gt;= <span class=\"hljs-number\">1</span>) {\n    res.push(label);\n    <span class=\"hljs-comment\">// 这里找到按照上一行的顺序的话，当前行实际的数字应该是什么</span>\n    <span class=\"hljs-comment\">// 例如，上一行是4,5,6,7, 当前行第二个是14，那么当前行第二个如果按照上一行顺序应该是9</span>\n    label = log + <span class=\"hljs-built_in\">Math</span>.floor(log / <span class=\"hljs-number\">2</span>) - label - <span class=\"hljs-number\">1</span>;\n    label=<span class=\"hljs-built_in\">Math</span>.floor(label / <span class=\"hljs-number\">2</span>)\n    log=<span class=\"hljs-built_in\">Math</span>.floor(log / <span class=\"hljs-number\">2</span>)\n  }\n  res.reverse()\n  <span class=\"hljs-keyword\">return</span> res;\n};\n</code></pre>\n"
  ],
  "titleSlug": "path-in-zigzag-labelled-binary-tree",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>如果不存在<code>zigzag</code>那么就很容易算，每次只需要找<code>Math.floor(n/2)</code>。</p>\n<p>在存在<code>zigzag</code>的情况下，由于每一行的顺序跟上一行都不同，因此要找到当前行对应的数字<strong>按照上一行的顺序</strong>的数字。</p>\n<p>例如，上一行是<code>4,5,6,7</code>, 当前行是<code>15,14,13...</code>，那么当前行<strong>第二个</strong>如果按照上一行顺序应该是<code>9</code>。</p>\n<p>接着对<code>9</code>执行<code>Math.floor(n/2)</code>。</p>\n",
  "content": "<p>在一棵无限的二叉树上，每个节点都有两个子节点，树中的节点 <strong>逐行</strong> 依次按&nbsp;&ldquo;之&rdquo; 字形进行标记。</p>\n\n<p>如下图所示，在奇数行（即，第一行、第三行、第五行&hellip;&hellip;）中，按从左到右的顺序进行标记；</p>\n\n<p>而偶数行（即，第二行、第四行、第六行&hellip;&hellip;）中，按从右到左的顺序进行标记。</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/tree.png\" style=\"height: 138px; width: 300px;\"></p>\n\n<p>给你树上某一个节点的标号 <code>label</code>，请你返回从根节点到该标号为 <code>label</code> 节点的路径，该路径是由途经的节点标号所组成的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>label = 14\n<strong>输出：</strong>[1,3,4,14]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>label = 26\n<strong>输出：</strong>[1,2,6,10,26]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= label &lt;= 10^6</code></li>\n</ul>\n"
}
