{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> postorderTraversal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[],stack=[],node=root\n  <span class=\"hljs-keyword\">while</span>(stack.length&gt;<span class=\"hljs-number\">0</span> || node){\n    <span class=\"hljs-keyword\">while</span>(node){\n      res.push(node.val)\n      stack.push(node)\n      node=node.right\n    }\n    node=stack.pop()   \n    node=node.left\n  }\n  <span class=\"hljs-keyword\">return</span> res.reverse()\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-postorder-traversal",
  "content": "<p>给定一个二叉树，返回它的 <em>后序&nbsp;</em>遍历。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>输出:</strong> [3,2,1]</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n"
}
