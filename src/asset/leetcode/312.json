{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxCoins = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=nums.length\n  <span class=\"hljs-keyword\">if</span>(N===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      dp[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N-i;j++){\n      <span class=\"hljs-keyword\">let</span> k=j+i\n      <span class=\"hljs-keyword\">let</span> maxPoint=<span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n=j;n&lt;=k;n++){\n        <span class=\"hljs-keyword\">let</span> left=<span class=\"hljs-number\">0</span>,mid=<span class=\"hljs-number\">0</span>,right=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">if</span>(n<span class=\"hljs-number\">-1</span>&gt;=j) left+=dp[j][n<span class=\"hljs-number\">-1</span>]\n        <span class=\"hljs-keyword\">if</span>(n+<span class=\"hljs-number\">1</span>&lt;=k) right+=dp[n+<span class=\"hljs-number\">1</span>][k]\n        mid=(nums[j<span class=\"hljs-number\">-1</span>] || <span class=\"hljs-number\">1</span>)*(nums[k+<span class=\"hljs-number\">1</span>] || <span class=\"hljs-number\">1</span>)*nums[n]\n        maxPoint=<span class=\"hljs-built_in\">Math</span>.max(maxPoint,(left+mid+right))\n      }\n      dp[j][k]=maxPoint\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][N<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "burst-balloons",
  "content": "<p>有 <code>n</code> 个气球，编号为<code>0</code> 到 <code>n-1</code>，每个气球上都标有一个数字，这些数字存在数组&nbsp;<code>nums</code>&nbsp;中。</p>\n\n<p>现在要求你戳破所有的气球。每当你戳破一个气球 <code>i</code> 时，你可以获得&nbsp;<code>nums[left] * nums[i] * nums[right]</code>&nbsp;个硬币。&nbsp;这里的&nbsp;<code>left</code>&nbsp;和&nbsp;<code>right</code>&nbsp;代表和&nbsp;<code>i</code>&nbsp;相邻的两个气球的序号。注意当你戳破了气球 <code>i</code> 后，气球&nbsp;<code>left</code>&nbsp;和气球&nbsp;<code>right</code>&nbsp;就变成了相邻的气球。</p>\n\n<p>求所能获得硬币的最大数量。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设&nbsp;<code>nums[-1] = nums[n] = 1</code>，但注意它们不是真实存在的所以并不能被戳破。</li>\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>[3,1,5,8]</code>\n<strong>输出:</strong> <code>167 \n<strong>解释: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n&nbsp;    coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre>\n"
}
