{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MinStack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.stack=[]\n  <span class=\"hljs-keyword\">this</span>.min=[]\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} x\n * @return {void}\n */</span>\nMinStack.prototype.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.stack.push(x)\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.min.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">this</span>.min.push(x)\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">this</span>.min.push(<span class=\"hljs-built_in\">Math</span>.min(x,<span class=\"hljs-keyword\">this</span>.getMin()))\n  \n};\n\n<span class=\"hljs-comment\">/**\n * @return {void}\n */</span>\nMinStack.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.min.pop()\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack.pop()\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nMinStack.prototype.top = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack[<span class=\"hljs-keyword\">this</span>.stack.length<span class=\"hljs-number\">-1</span>]\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number}\n */</span>\nMinStack.prototype.getMin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.min[<span class=\"hljs-keyword\">this</span>.min.length<span class=\"hljs-number\">-1</span>]\n};\n\n<span class=\"hljs-comment\">/** \n * Your MinStack object will be instantiated and called as such:\n * var obj = Object.create(MinStack).createNew()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "min-stack",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2>两个栈，一个栈<code>stack</code>保存元素本身，另一个栈<code>min</code>保存到目前为止的最小元素。</h2>\n",
  "content": "<p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>\n\n<ul>\n\t<li>push(x)&nbsp;-- 将元素 x 推入栈中。</li>\n\t<li>pop()&nbsp;-- 删除栈顶的元素。</li>\n\t<li>top()&nbsp;-- 获取栈顶元素。</li>\n\t<li>getMin() -- 检索栈中的最小元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; 返回 -3.\nminStack.pop();\nminStack.top();      --&gt; 返回 0.\nminStack.getMin();   --&gt; 返回 -2.\n</pre>\n"
}
