{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> solve = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(board.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">let</span> visited=[],noValid=[]\n  <span class=\"hljs-keyword\">let</span> moves=[[<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board.length;i++){\n    visited[i]=[]\n    noValid[i]=[]\n  }\n  <span class=\"hljs-keyword\">let</span> rows=[<span class=\"hljs-number\">0</span>,board.length<span class=\"hljs-number\">-1</span>], cols=[<span class=\"hljs-number\">0</span>,board[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>]\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;board[<span class=\"hljs-number\">0</span>].length;j++){\n      <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span> || j===<span class=\"hljs-number\">0</span> || i===board.length<span class=\"hljs-number\">-1</span> || j===board[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>){\n        <span class=\"hljs-keyword\">if</span>(board[i][j]===<span class=\"hljs-string\">'X'</span>)<span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span>(visited[i][j])<span class=\"hljs-keyword\">continue</span>\n        noValid[i][j]=<span class=\"hljs-literal\">true</span>\n        dfs([i,j])        \n      }\n    }\n  }\n  \n  <span class=\"hljs-comment\">// for(let i=0;i&lt;rows.length;i++){</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;board[0].length;j++){</span>\n  <span class=\"hljs-comment\">//     let curX=rows[i],curY=j</span>\n  <span class=\"hljs-comment\">//     if(board[curX][curY]==='X')continue</span>\n  <span class=\"hljs-comment\">//     if(visited[curX][curY])continue</span>\n  <span class=\"hljs-comment\">//     noValid[curX][curY]=true</span>\n  <span class=\"hljs-comment\">//     dfs([curX,curY])</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;board.length;i++){</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;cols.length;j++){</span>\n  <span class=\"hljs-comment\">//     let curX=i,curY=cols[j]</span>\n  <span class=\"hljs-comment\">//     if(board[curX][curY]==='X')continue</span>\n  <span class=\"hljs-comment\">//     if(visited[curX][curY])continue</span>\n  <span class=\"hljs-comment\">//     noValid[curX][curY]=true</span>\n  <span class=\"hljs-comment\">//     dfs([curX,curY])</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;board.length<span class=\"hljs-number\">-1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;board[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(board[i][j]===<span class=\"hljs-string\">\"X\"</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(noValid[i][j])<span class=\"hljs-keyword\">continue</span>\n      board[i][j]=<span class=\"hljs-string\">\"X\"</span>\n    }\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    visited[x][y]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [dtX,dtY] <span class=\"hljs-keyword\">of</span> moves){\n      <span class=\"hljs-keyword\">let</span> newX=x+dtX,newY=y+dtY\n      <span class=\"hljs-keyword\">if</span>(newX&lt;<span class=\"hljs-number\">0</span> || newY&lt;<span class=\"hljs-number\">0</span> || newX&gt;=board.length || newY&gt;=board[<span class=\"hljs-number\">0</span>].length)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(board[newX][newY]===<span class=\"hljs-string\">\"X\"</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(visited[newX][newY])<span class=\"hljs-keyword\">continue</span>\n      noValid[newX][newY]=<span class=\"hljs-literal\">true</span>\n      dfs([newX,newY])\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "surrounded-regions",
  "content": "<p>给定一个二维的矩阵，包含&nbsp;<code>&#39;X&#39;</code>&nbsp;和&nbsp;<code>&#39;O&#39;</code>（<strong>字母 O</strong>）。</p>\n\n<p>找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的&nbsp;<code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>X X X X\nX O O X\nX X O X\nX O X X\n</pre>\n\n<p>运行你的函数后，矩阵变为：</p>\n\n<pre>X X X X\nX X X X\nX X X X\nX O X X\n</pre>\n\n<p><strong>解释:</strong></p>\n\n<p>被围绕的区间不会存在于边界上，换句话说，任何边界上的&nbsp;<code>&#39;O&#39;</code>&nbsp;都不会被填充为&nbsp;<code>&#39;X&#39;</code>。 任何不在边界上，或不与边界上的&nbsp;<code>&#39;O&#39;</code>&nbsp;相连的&nbsp;<code>&#39;O&#39;</code>&nbsp;最终都会被填充为&nbsp;<code>&#39;X&#39;</code>。如果两个元素在水平或垂直方向相邻，则称它们是&ldquo;相连&rdquo;的。</p>\n"
}
