{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for an interval.\n * function Interval(start, end) {\n *     this.start = start;\n *     this.end = end;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {Interval[]} A\n * @param {Interval[]} B\n * @return {Interval[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> intervalIntersection = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, B</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n    <span class=\"hljs-keyword\">let</span> a=A[i]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;B.length;j++){\n      <span class=\"hljs-keyword\">let</span> b=B[j]\n      <span class=\"hljs-keyword\">if</span>(b.end&lt;a.start)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">let</span> inte=hasInterv(a,b)\n      <span class=\"hljs-keyword\">if</span>(inte){\n        res.push(inte)\n      }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">break</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasInterv</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> intS=<span class=\"hljs-built_in\">Math</span>.max(a.start,b.start)\n    <span class=\"hljs-keyword\">let</span> intE=<span class=\"hljs-built_in\">Math</span>.min(a.end,b.end)\n    <span class=\"hljs-keyword\">if</span>(intS&lt;=intE)<span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">start</span>:intS,<span class=\"hljs-attr\">end</span>:intE}\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "interval-list-intersections",
  "hasThinking": false,
  "content": "<p>给定两个由一些<strong>闭区间</strong>组成的列表，每个区间列表都是成对不相交的，并且已经排序。</p>\n\n<p>返回这两个区间列表的交集。</p>\n\n<p><em>（形式上，闭区间&nbsp;<code>[a, b]</code>（其中&nbsp;<code>a &lt;= b</code>）表示实数&nbsp;<code>x</code>&nbsp;的集合，而&nbsp;<code>a &lt;= x &lt;= b</code>。两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3]。）</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/interval1.png\" style=\"height: 140px; width: 506px;\"></strong></p>\n\n<pre><strong>输入：</strong>A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]\n<strong>输出：</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n<strong>注意：</strong>输入和所需的输出都是区间对象组成的列表，而不是数组或列表。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\n</ol>\n"
}
