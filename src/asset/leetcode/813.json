{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> largestSumOfAverages = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, K</span>) </span>{\n        <span class=\"hljs-keyword\">let</span> N = A.length;\n        <span class=\"hljs-keyword\">let</span> memo = []\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N+<span class=\"hljs-number\">1</span>;i++){\n            memo[i]=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n        }\n        <span class=\"hljs-keyword\">let</span> cur = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; ++i) {\n            cur += A[i];\n            memo[i + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = cur / (i + <span class=\"hljs-number\">1</span>);\n        }\n    \n        <span class=\"hljs-keyword\">return</span> search(N, K, A, memo);\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\"> n,  k,  A, memo</span>) </span>{\n        <span class=\"hljs-comment\">// console.log(k)</span>\n        <span class=\"hljs-keyword\">if</span> (memo[n][k] &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> memo[n][k];\n        <span class=\"hljs-keyword\">if</span> (n &lt; k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">let</span> cur = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = n - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; --i) {\n            cur += A[i];\n            memo[n][k] = <span class=\"hljs-built_in\">Math</span>.max(memo[n][k], search(i, k - <span class=\"hljs-number\">1</span>, A, memo) + cur / (n - i));\n        }\n        <span class=\"hljs-comment\">// console.log(memo)</span>\n        <span class=\"hljs-keyword\">return</span> memo[n][k];\n};\n    }\n\n   \n</code></pre>\n"
  ],
  "titleSlug": "largest-sum-of-averages",
  "translatedContent": "<p>我们将给定的数组&nbsp;<code>A</code>&nbsp;分成&nbsp;<code>K</code>&nbsp;个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。</p>\n\n<p>注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>输出:</strong> 20\n<strong>解释:</strong> \nA 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.\n我们也可以把 A 分成[9, 1], [2], [3, 9].\n这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\n\t<li>答案误差在&nbsp;<code>10^-6</code>&nbsp;内被视为是正确的。</li>\n</ul>\n"
}
