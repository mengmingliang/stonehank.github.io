{
  "code": [
    "/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumOfAverages = function(A, K) {\n        let N = A.length;\n        let memo = []\n        for(let i=0;i<N+1;i++){\n            memo[i]=Array(N+1).fill(0)\n        }\n        let cur = 0;\n        for (let i = 0; i < N; ++i) {\n            cur += A[i];\n            memo[i + 1][1] = cur / (i + 1);\n        }\n    \n        return search(N, K, A, memo);\n    \n    function search( n,  k,  A, memo) {\n        // console.log(k)\n        if (memo[n][k] > 0) return memo[n][k];\n        if (n < k) return 0;\n        let cur = 0;\n        for (let i = n - 1; i > 0; --i) {\n            cur += A[i];\n            memo[n][k] = Math.max(memo[n][k], search(i, k - 1, A, memo) + cur / (n - i));\n        }\n        // console.log(memo)\n        return memo[n][k];\n};\n    }\n\n   "
  ],
  "titleSlug": "largest-sum-of-averages",
  "content": "<p>We partition a row of numbers <code>A</code>&nbsp;into at most <code>K</code> adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?</p>\r\n\r\n<p>Note that our partition must use every number in A, and that scores are not necessarily integers.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nA = [9,1,2,3,9]\r\nK = 3\r\n<strong>Output:</strong> 20\r\n<strong>Explanation:</strong> \r\nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\r\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\r\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\r\n\t<li>Answers within <code>10^-6</code> of the correct answer will be accepted as correct.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>我们将给定的数组&nbsp;<code>A</code>&nbsp;分成&nbsp;<code>K</code>&nbsp;个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。</p>\n\n<p>注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>输出:</strong> 20\n<strong>解释:</strong> \nA 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.\n我们也可以把 A 分成[9, 1], [2], [3, 9].\n这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.\n</pre>\n\n<p><strong>说明: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\n\t<li>答案误差在&nbsp;<code>10^-6</code>&nbsp;内被视为是正确的。</li>\n</ul>\n"
}
