{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} deadends\n * @param {string} target\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> openLock = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deadends, target</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> deadHash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(deadends)\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;deadends.length;i++)deadHash[deadends[i]]=true</span>\n    <span class=\"hljs-keyword\">let</span> lock=<span class=\"hljs-string\">'0000'</span>\n    <span class=\"hljs-keyword\">if</span>(deadHash.has(lock))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">let</span> tryed=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(),trying=[<span class=\"hljs-string\">'0000'</span>]\n    tryed.add(lock)\n    <span class=\"hljs-comment\">// tryed[lock]=lock</span>\n    <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(trying.length&gt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">let</span> len=trying.length\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n            <span class=\"hljs-keyword\">let</span> newLock=trying.shift()\n            <span class=\"hljs-keyword\">if</span>(target===newLock)<span class=\"hljs-keyword\">return</span> step\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++){\n                <span class=\"hljs-keyword\">let</span> lock1=newLock.substring(<span class=\"hljs-number\">0</span>,i)+(newLock[i]===<span class=\"hljs-string\">'9'</span>?<span class=\"hljs-string\">'0'</span>:+newLock[i]+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">''</span>)+newLock.substring(i+<span class=\"hljs-number\">1</span>)\n                <span class=\"hljs-keyword\">let</span> lock2=newLock.substring(<span class=\"hljs-number\">0</span>,i)+(newLock[i]===<span class=\"hljs-string\">'0'</span>?<span class=\"hljs-string\">'9'</span>:+newLock[i]<span class=\"hljs-number\">-1</span>+<span class=\"hljs-string\">''</span>)+newLock.substring(i+<span class=\"hljs-number\">1</span>)\n                <span class=\"hljs-keyword\">if</span>(!tryed.has(lock1) &amp;&amp; !deadHash.has(lock1)){\n                    tryed.add(lock1)\n                    trying.push(lock1)\n                }\n                <span class=\"hljs-keyword\">if</span>(!tryed.has(lock2) &amp;&amp; !deadHash.has(lock2)){\n                    tryed.add(lock2)\n                    trying.push(lock2)\n                }            \n            }\n        }\n       step++\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "open-the-lock",
  "translatedContent": "<p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code> 。每个拨轮可以自由旋转：例如把 <code>&#39;9&#39;</code> 变为&nbsp; <code>&#39;0&#39;</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">，</span></font><code>&#39;0&#39;</code> 变为 <code>&#39;9&#39;</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p>\n\n<p>锁的初始数字为 <code>&#39;0000&#39;</code> ，一个代表四个拨轮的数字的字符串。</p>\n\n<p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p>\n\n<p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入：</strong>deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>输出：</strong>6\n<strong>解释：</strong>\n可能的移动序列为 &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;。\n注意 &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; 这样的序列是不能解锁的，\n因为当拨动到 &quot;0102&quot; 时这个锁就会被锁定。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>输出：</strong>1\n<strong>解释：</strong>\n把最后一位反向旋转一次即可 &quot;0000&quot; -&gt; &quot;0009&quot;。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>输出：</strong>-1\n<strong>解释：\n</strong>无法旋转到目标数字且不被锁定。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre>\n<strong>输入:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;\n<strong>输出：</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>死亡列表 <code>deadends</code> 的长度范围为 <code>[1, 500]</code>。</li>\n\t<li>目标数字 <code>target</code> 不会在 <code>deadends</code> 之中。</li>\n\t<li>每个 <code>deadends</code> 和 <code>target</code> 中的字符串的数字会在 10,000 个可能的情况 <code>&#39;0000&#39;</code> 到 <code>&#39;9999&#39;</code> 中产生。</li>\n</ol>\n"
}
