{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> reorganizeString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> codeA=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> alp=[],cache=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;S.length;i++){\n    <span class=\"hljs-keyword\">let</span> code=S.charCodeAt(i)-codeA\n    <span class=\"hljs-keyword\">if</span>(!cache[code])cache[code]=[S[i],<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">else</span> cache[code][<span class=\"hljs-number\">1</span>]++\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;cache.length;i++){\n    <span class=\"hljs-keyword\">if</span>(!cache[i])<span class=\"hljs-keyword\">continue</span>\n    alp.push(cache[i])\n  }\n  alp.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>b[<span class=\"hljs-number\">1</span>]-a[<span class=\"hljs-number\">1</span>])\n  <span class=\"hljs-keyword\">let</span> first=alp[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">if</span>(first[<span class=\"hljs-number\">1</span>]===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> S\n  alp=alp.slice(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">let</span> rest=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;alp.length;i++){\n    rest+=alp[i][<span class=\"hljs-number\">1</span>]\n  }\n  <span class=\"hljs-keyword\">if</span>(rest&lt;first[<span class=\"hljs-number\">1</span>]<span class=\"hljs-number\">-1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-built_in\">Array</span>(first[<span class=\"hljs-number\">1</span>]).fill(<span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(rest&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">if</span>(start===result.length)start=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(result[start].includes(alp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])){\n      start++\n      <span class=\"hljs-keyword\">continue</span>\n    }\n    result[start++]+=alp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n    alp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]--\n    sink(alp)\n    rest--\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sink</span>(<span class=\"hljs-params\">alp</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;alp.length<span class=\"hljs-number\">-1</span> &amp;&amp; alp[i][<span class=\"hljs-number\">1</span>]&lt;alp[i+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]){\n      swap(alp,i,i+<span class=\"hljs-number\">1</span>)\n      i++\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">arr,i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> t=arr[i]\n    arr[i]=arr[j]\n    arr[j]=t\n  }\n  <span class=\"hljs-keyword\">let</span> finalRes=first[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;result.length;i++){\n    <span class=\"hljs-keyword\">if</span>(i===result.length<span class=\"hljs-number\">-1</span>)finalRes+=result[i]\n    <span class=\"hljs-keyword\">else</span> finalRes+=result[i]+first[<span class=\"hljs-number\">0</span>]\n  }\n  <span class=\"hljs-keyword\">return</span> finalRes\n};\n</code></pre>\n"
  ],
  "titleSlug": "reorganize-string",
  "content": "<p>给定一个字符串<code>S</code>，检查是否能重新排布其中的字母，使得两相邻的字符不同。</p>\n\n<p>若可行，输出任意可行的结果。若不可行，返回空字符串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aab&quot;\n<strong>输出:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aaab&quot;\n<strong>输出:</strong> &quot;&quot;\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>S</code> 只包含小写字母并且长度在<code>[1, 500]</code>区间内。</li>\n</ul>\n"
}
