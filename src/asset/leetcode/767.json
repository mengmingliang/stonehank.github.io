{
  "code": [
    "/**\n * @param {string} S\n * @return {string}\n */\nvar reorganizeString = function(S) {\n  let codeA='a'.charCodeAt(0)\n  let alp=[],cache=[]\n  for(let i=0;i<S.length;i++){\n    let code=S.charCodeAt(i)-codeA\n    if(!cache[code])cache[code]=[S[i],1]\n    else cache[code][1]++\n  }\n  for(let i=0;i<cache.length;i++){\n    if(!cache[i])continue\n    alp.push(cache[i])\n  }\n  alp.sort((a,b)=>b[1]-a[1])\n  let first=alp[0]\n  if(first[1]===1)return S\n  alp=alp.slice(1)\n  let rest=0\n  for(let i=0;i<alp.length;i++){\n    rest+=alp[i][1]\n  }\n  if(rest<first[1]-1)return ''\n  let result=Array(first[1]).fill('')\n  let start=0\n  while(rest>0){\n    if(start===result.length)start=0\n    if(result[start].includes(alp[0][0])){\n      start++\n      continue\n    }\n    result[start++]+=alp[0][0]\n    alp[0][1]--\n    sink(alp)\n    rest--\n  }\n  function sink(alp){\n    let i=0\n    while(i<alp.length-1 && alp[i][1]<alp[i+1][1]){\n      swap(alp,i,i+1)\n      i++\n    }\n  }\n  function swap(arr,i,j){\n    let t=arr[i]\n    arr[i]=arr[j]\n    arr[j]=t\n  }\n  let finalRes=first[0]\n  for(let i=0;i<result.length;i++){\n    if(i===result.length-1)finalRes+=result[i]\n    else finalRes+=result[i]+first[0]\n  }\n  return finalRes\n};"
  ],
  "titleSlug": "reorganize-string",
  "content": "<p>Given a string <code>S</code>, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.</p>\r\n\r\n<p>If possible, output any possible result.&nbsp; If not possible, return the empty string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aab&quot;\r\n<strong>Output:</strong> &quot;aba&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aaab&quot;\r\n<strong>Output:</strong> &quot;&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> will consist of lowercase letters and have length in range <code>[1, 500]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
  "translatedContent": "<p>给定一个字符串<code>S</code>，检查是否能重新排布其中的字母，使得两相邻的字符不同。</p>\n\n<p>若可行，输出任意可行的结果。若不可行，返回空字符串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aab&quot;\n<strong>输出:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> S = &quot;aaab&quot;\n<strong>输出:</strong> &quot;&quot;\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li><code>S</code> 只包含小写字母并且长度在<code>[1, 500]</code>区间内。</li>\n</ul>\n"
}
