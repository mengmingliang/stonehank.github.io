{
  "code": [
    "/**\n * @param {number} k\n * @param {number} n\n * @return {number[][]}\n */\nvar combinationSum3 = function(k, n) {\n    let validNum=[]\n    let res=[]\n    let cache={}\n    function getSumComb(sum,validNum,times,start){\n        if(times===0){\n            if(sum===0)res.push(validNum.slice())\n            return\n        }\n        for(let i=start;i<=9;i++){\n            validNum.push(i)\n            getSumComb(sum-i,validNum,times-1,i+1)\n            validNum.pop()       \n        }\n    }\n    getSumComb(n,validNum,k,1)\n    return res\n};"
  ],
  "titleSlug": "combination-sum-iii",
  "content": "<div>\r\n<p>Find all possible combinations of <i><b>k</b></i> numbers that add up to a number <i><b>n</b></i>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 7\r\n<strong>Output:</strong> [[1,2,4]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 9\r\n<strong>Output:</strong> [[1,2,6], [1,3,5], [2,3,4]]\r\n</pre>\r\n</div>",
  "translatedContent": "<p>找出所有相加之和为&nbsp;<em><strong>n</strong> </em>的&nbsp;<strong><em>k&nbsp;</em></strong>个数的组合<strong><em>。</em></strong>组合中只允许含有 1 -&nbsp;9 的正整数，并且每种组合中不存在重复的数字。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>所有数字都是正整数。</li>\n\t<li>解集不能包含重复的组合。&nbsp;</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 7\n<strong>输出:</strong> [[1,2,4]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 9\n<strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]\n</pre>\n"
}
