{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> uniqueLetterString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash=[]\n  <span class=\"hljs-keyword\">let</span> MOD=<span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>\n  <span class=\"hljs-keyword\">let</span> Acode=<span class=\"hljs-string\">'A'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(S.length).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> n=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;S.length;i++){\n    <span class=\"hljs-keyword\">let</span> code=S.charCodeAt(i)-Acode\n    dp[i]=((dp[i<span class=\"hljs-number\">-1</span>]||<span class=\"hljs-number\">0</span>)+<span class=\"hljs-number\">1</span>+n) % MOD\n    <span class=\"hljs-keyword\">if</span>(!hash[code])hash[code]=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,i]\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> [prevSum,lastIdx,curIdx]=hash[code]\n      <span class=\"hljs-keyword\">let</span> minus=(curIdx-lastIdx+<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">2</span>+prevSum\n      hash[code][<span class=\"hljs-number\">0</span>]+=curIdx-lastIdx+<span class=\"hljs-number\">1</span>\n      hash[code][<span class=\"hljs-number\">1</span>]=curIdx+<span class=\"hljs-number\">1</span>\n      hash[code][<span class=\"hljs-number\">2</span>]=i\n      dp[i]-=minus\n    }\n    n++\n  }\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;dp.length;i++)sum= (sum +dp[i]) % MOD\n  <span class=\"hljs-keyword\">return</span> sum\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "unique-letter-string",
  "content": "<p>如果一个字符在字符串&nbsp;<code>S</code>&nbsp;中有且仅有出现一次，那么我们称其为独特字符。</p>\n\n<p>例如，在字符串&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;中，<code>&quot;L&quot;</code>&nbsp;和&nbsp;<code>&quot;R&quot;</code>&nbsp;可以被称为独特字符。</p>\n\n<p>我们再定义&nbsp;<code>UNIQ(S)</code>&nbsp;作为字符串&nbsp;<code>S</code>&nbsp;中独特字符的个数。</p>\n\n<p>那么，在&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;中，&nbsp;<code>UNIQ(&quot;LETTER&quot;) =&nbsp; 2</code>。</p>\n\n<p>对于给定字符串&nbsp;<code>S</code>，计算其所有非空子串的独特字符的个数，即&nbsp;<code>UNIQ(substring)</code>。</p>\n\n<p>如果出现两个或者多个相同的子串，将其认为是不同的两个子串。</p>\n\n<p>考虑到答案可能会非常大，规定返回格式为：结果 mod&nbsp;<code>10 ^ 9 + 7</code>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;ABC&quot;\n<strong>输出: </strong>10\n<strong>解释:</strong> 所有可能的子串为：&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; 和 &quot;ABC&quot;。\n     其中，每一个子串都由独特字符构成。\n     所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>&quot;ABA&quot;\n<strong>输出: </strong>8\n<strong>解释: </strong>除了子串 UNIQ(&#39;ABA&#39;) = 1，其余与示例1相同。\n</pre>\n\n<p><strong>说明:</strong> <code>0 &lt;= S.length &lt;= 10000</code>。</p>\n"
}
