{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numSimilarGroups = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=A.length\n  <span class=\"hljs-keyword\">let</span> group=N\n  <span class=\"hljs-keyword\">let</span> uf=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">0</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n,i</span>)=&gt;</span>i)\n  <span class=\"hljs-keyword\">let</span> weight=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">i</span>)</span>{\n    <span class=\"hljs-keyword\">while</span>(i!==uf[i])i=uf[i]\n    <span class=\"hljs-keyword\">return</span> i\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">union</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n        j=find(b)\n    <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">return</span>\n    group--\n    <span class=\"hljs-keyword\">if</span>(weight[i]&lt;weight[j]){\n      weight[j]+=weight[i]\n      uf[i]=j\n    }<span class=\"hljs-keyword\">else</span>{\n      weight[i]+=weight[j]\n      uf[j]=i\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isConnected</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=find(a),\n        j=find(b)\n    <span class=\"hljs-keyword\">return</span> i===j\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isSimilar</span>(<span class=\"hljs-params\">nA,nB</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(nA===nB)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> first=<span class=\"hljs-literal\">null</span>,second=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nA.length;i++){\n      <span class=\"hljs-keyword\">if</span>(nA[i]!==nB[i]){\n        <span class=\"hljs-keyword\">if</span>(second!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(first!=<span class=\"hljs-literal\">null</span>){\n          <span class=\"hljs-keyword\">if</span>(nA[first]!==nB[i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-keyword\">if</span>(nB[first]!==nA[i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n          second=i\n        }<span class=\"hljs-keyword\">else</span> first=i\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      <span class=\"hljs-keyword\">if</span>(i===j)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(isConnected(i,j))<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(isSimilar(A[i],A[j])){\n        union(i,j)\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> group\n};\n</code></pre>\n"
  ],
  "titleSlug": "similar-string-groups",
  "content": "<p>如果我们交换字符串&nbsp;<code>X</code> 中的两个不同位置的字母，使得它和字符串&nbsp;<code>Y</code> 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。</p>\n\n<p>例如，<code>&quot;tars&quot;</code> 和 <code>&quot;rats&quot;</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)；&nbsp;<code>&quot;rats&quot;</code> 和 <code>&quot;arts&quot;</code> 也是相似的，但是 <code>&quot;star&quot;</code> 不与 <code>&quot;tars&quot;</code>，<code>&quot;rats&quot;</code>，或 <code>&quot;arts&quot;</code> 相似。</p>\n\n<p>总之，它们通过相似性形成了两个关联组：<code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> 和 <code>{&quot;star&quot;}</code>。注意，<code>&quot;tars&quot;</code> 和 <code>&quot;arts&quot;</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p>\n\n<p>我们给出了一个不包含重复的字符串列表 <code>A</code>。列表中的每个字符串都是 <code>A</code> 中其它所有字符串的一个字母异位词。请问 <code>A</code> 中有多少个相似字符串组？</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>输出：</strong>2</pre>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 2000</code></li>\n\t<li><code>A[i].length &lt;= 1000</code></li>\n\t<li><code>A.length * A[i].length &lt;= 20000</code></li>\n\t<li><code>A</code> 中的所有单词都只包含小写字母。</li>\n\t<li><code>A</code> 中的所有单词都具有相同的长度，且是彼此的字母异位词。</li>\n\t<li>此问题的判断限制时间已经延长。</li>\n</ol>\n\n<p><strong>备注：</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 字母异位词[anagram]，一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p>\n"
}
