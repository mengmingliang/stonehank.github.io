{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} x\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isSelfCrossing = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> limitW=<span class=\"hljs-literal\">Infinity</span>,limitH=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">2</span>;i&lt;x.length;i++){\n    <span class=\"hljs-keyword\">let</span> pre=x[i<span class=\"hljs-number\">-1</span>],\n        pre2=x[i<span class=\"hljs-number\">-2</span>],\n        pre3=x[i<span class=\"hljs-number\">-3</span>] ||<span class=\"hljs-number\">0</span>,\n        pre4=x[i<span class=\"hljs-number\">-4</span>] ||<span class=\"hljs-number\">0</span>,\n        pre5=x[i<span class=\"hljs-number\">-5</span>] ||<span class=\"hljs-number\">0</span>,\n        cur=x[i]\n    <span class=\"hljs-keyword\">let</span> calcW=i % <span class=\"hljs-number\">2</span>===<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span>(calcW &amp;&amp; cur&gt;=limitH)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(!calcW &amp;&amp; cur&gt;=limitW)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">let</span> limit=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span>(cur&gt;pre2)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">if</span>(cur&lt;pre2){\n      <span class=\"hljs-keyword\">let</span> gap=pre2-pre4\n      <span class=\"hljs-keyword\">if</span>(pre3&gt;pre &amp;&amp; pre2&lt;=pre4) gap=pre2\n      <span class=\"hljs-keyword\">if</span>(cur&lt;gap) limit=pre\n    }\n    <span class=\"hljs-keyword\">if</span>(!limit) limit=pre-pre3\n    <span class=\"hljs-keyword\">if</span>(calcW)limitW=limit\n    <span class=\"hljs-keyword\">else</span> limitH=limit\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "self-crossing",
  "content": "<p>给定一个含有&nbsp;<code>n</code>&nbsp;个正数的数组&nbsp;<em>x</em>。从点&nbsp;<code>(0,0)</code>&nbsp;开始，先向北移动&nbsp;<code>x[0]</code>&nbsp;米，然后向西移动&nbsp;<code>x[1]</code>&nbsp;米，向南移动&nbsp;<code>x[2]</code>&nbsp;米，向东移动&nbsp;<code>x[3]</code>&nbsp;米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。</p>\n\n<p>编写一个&nbsp;<code>O(1)</code>&nbsp;空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼──&gt;\n&nbsp; &nbsp; │\n\n输入: </strong><code>[2,1,1,2]</code>\n<strong>输出:</strong> true \n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>┌──────┐\n│ &nbsp; &nbsp; &nbsp;│\n│\n│\n└────────────&gt;\n\n输入: </strong><code>[1,2,3,4]</code>\n<strong>输出: </strong>false \n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>┌───┐\n│ &nbsp; │\n└───┼&gt;\n\n输入:</strong> <code>[1,1,1,1]</code>\n<strong>输出:</strong> true \n</pre>\n"
}
