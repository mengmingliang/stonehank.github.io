{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> threeSumClosest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, target</span>) </span>{\n  <span class=\"hljs-comment\">// let min=Infinity,result=null</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;nums.length-2;i++){</span>\n  <span class=\"hljs-comment\">//   for(let j=i+1;j&lt;nums.length-1;j++){</span>\n  <span class=\"hljs-comment\">//     for(let k=j+1;k&lt;nums.length;k++){</span>\n  <span class=\"hljs-comment\">//       let sum=nums[i]+nums[j]+nums[k]</span>\n  <span class=\"hljs-comment\">//       if(Math.abs(sum-target)&lt;min){</span>\n  <span class=\"hljs-comment\">//         min=Math.abs(sum-target)</span>\n  <span class=\"hljs-comment\">//         if(min===0)return target</span>\n  <span class=\"hljs-comment\">//         result=sum</span>\n  <span class=\"hljs-comment\">//       }</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return result</span>\n  \n  nums.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> fix=<span class=\"hljs-number\">0</span>;fix&lt;nums.length<span class=\"hljs-number\">-2</span>;fix++){\n    <span class=\"hljs-keyword\">let</span> left=fix+<span class=\"hljs-number\">1</span>,right=nums.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">let</span> sum\n    <span class=\"hljs-keyword\">while</span>(left&lt;right){\n      sum=nums[fix]+nums[left]+nums[right]\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Math</span>.abs(sum-target)&lt;min){\n        min=<span class=\"hljs-built_in\">Math</span>.abs(sum-target)\n        <span class=\"hljs-keyword\">if</span>(min===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> target\n        result=sum\n      }\n      <span class=\"hljs-keyword\">if</span>(sum&gt;target)right--\n      <span class=\"hljs-keyword\">else</span> left++\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "3sum-closest",
  "hasThinking": false,
  "content": "<p>给定一个包括&nbsp;<em>n</em> 个整数的数组&nbsp;<code>nums</code><em>&nbsp;</em>和 一个目标值&nbsp;<code>target</code>。找出&nbsp;<code>nums</code><em>&nbsp;</em>中的三个整数，使得它们的和与&nbsp;<code>target</code>&nbsp;最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>\n\n<pre>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n</pre>\n"
}
