{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> verticalTraversal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> aux=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">root,x,y</span>)</span>{\n    root.x=x\n    root.y=y\n    aux.push([root.val,x,y])\n    <span class=\"hljs-keyword\">if</span>(root.left)dfs(root.left,x<span class=\"hljs-number\">-1</span>,y<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-keyword\">if</span>(root.right)dfs(root.right,x+<span class=\"hljs-number\">1</span>,y<span class=\"hljs-number\">-1</span>)\n  }\n  dfs(root,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-comment\">// console.log(aux)</span>\n  aux.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>{\n    <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">1</span>]&lt;b[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">1</span>]&gt;b[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">2</span>]&lt;b[<span class=\"hljs-number\">2</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(a[<span class=\"hljs-number\">2</span>]&gt;b[<span class=\"hljs-number\">2</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>]-b[<span class=\"hljs-number\">0</span>]\n      }\n    }\n  })\n  <span class=\"hljs-comment\">// console.log(aux)</span>\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-keyword\">let</span> temp=[aux[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;aux.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=aux[i],\n        pre=aux[i<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-comment\">// console.log(cur,pre)</span>\n    <span class=\"hljs-keyword\">if</span>(cur[<span class=\"hljs-number\">1</span>]===pre[<span class=\"hljs-number\">1</span>]){\n      temp.push(cur[<span class=\"hljs-number\">0</span>])\n    }<span class=\"hljs-keyword\">else</span>{\n      res.push(temp.slice())\n      temp=[cur[<span class=\"hljs-number\">0</span>]]\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">0</span>)res.push(temp)\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "vertical-order-traversal-of-a-binary-tree",
  "hasThinking": false,
  "content": "<p>给定二叉树，按<em>垂序</em>遍历返回其结点值。</p>\n\n<p>对位于&nbsp;<code>(X, Y)</code>&nbsp;的每个结点而言，其左右子结点分别位于&nbsp;<code>(X-1, Y-1)</code>&nbsp;和&nbsp;<code>(X+1, Y-1)</code>。</p>\n\n<p>把一条垂线从&nbsp;<code>X = -infinity</code>&nbsp;移动到&nbsp;<code>X = +infinity</code>&nbsp;，每当该垂线与结点接触时，我们按从上到下的顺序报告结点的值（ <code>Y</code>&nbsp;坐标递减）。</p>\n\n<p>如果两个结点位置相同，则首先报告的结点值较小。</p>\n\n<p>按&nbsp;<code>X</code>&nbsp;坐标顺序返回非空报告的列表。每个报告都有一个结点值列表。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/1236_example_1.PNG\" style=\"height: 186px; width: 201px;\"></p>\n\n<pre><strong>输入：</strong>[3,9,20,null,null,15,7]\n<strong>输出：</strong>[[9],[3,15],[20],[7]]\n<strong>解释： </strong>\n在不丧失其普遍性的情况下，我们可以假设根结点位于 (0, 0)：\n然后，值为 9 的结点出现在 (-1, -1)；\n值为 3 和 15 的两个结点分别出现在 (0, 0) 和 (0, -2)；\n值为 20 的结点出现在 (1, -1)；\n值为 7 的结点出现在 (2, -2)。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/tree2.png\" style=\"height: 150px; width: 236px;\"></strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,6,7]\n<strong>输出：</strong>[[4],[2],[1,5,6],[3],[7]]\n<strong>解释：</strong>\n根据给定的方案，值为 5 和 6 的两个结点出现在同一位置。\n然而，在报告 &quot;[1,5,6]&quot; 中，结点值 5 排在前面，因为 5 小于 6。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>树的结点数介于 <code>1</code>&nbsp;和&nbsp;<code>1000</code>&nbsp;之间。</li>\n\t<li>每个结点值介于&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1000</code>&nbsp;之间。</li>\n</ol>\n"
}
