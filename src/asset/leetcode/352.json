{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for an interval.\n * function Interval(start, end) {\n *     this.start = start;\n *     this.end = end;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> SummaryRanges = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">this</span>.list=[]\n  <span class=\"hljs-keyword\">this</span>.res=[]\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} val\n * @return {void}\n */</span>\nSummaryRanges.prototype.addNum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[val]!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> \n  <span class=\"hljs-keyword\">this</span>.list[val]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[val<span class=\"hljs-number\">-1</span>]!=<span class=\"hljs-literal\">null</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.list[val+<span class=\"hljs-number\">1</span>]!=<span class=\"hljs-literal\">null</span>){\n    <span class=\"hljs-keyword\">let</span> preIntIdx=bsEnd(<span class=\"hljs-keyword\">this</span>.res,val<span class=\"hljs-number\">-1</span>,<span class=\"hljs-string\">'end'</span>),\n        nxtIntIdx=bsEnd(<span class=\"hljs-keyword\">this</span>.res,val+<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'start'</span>)\n    <span class=\"hljs-comment\">// console.log(val,preIntIdx,nxtIntIdx,this.res)</span>\n    <span class=\"hljs-keyword\">let</span> newInt=<span class=\"hljs-keyword\">new</span> Interval(<span class=\"hljs-keyword\">this</span>.res[preIntIdx].start,<span class=\"hljs-keyword\">this</span>.res[nxtIntIdx].end)\n    <span class=\"hljs-keyword\">this</span>.res.splice(nxtIntIdx,<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">this</span>.res.splice(nxtIntIdx,<span class=\"hljs-number\">0</span>,newInt)\n    <span class=\"hljs-keyword\">this</span>.res.splice(preIntIdx,<span class=\"hljs-number\">1</span>)\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[val<span class=\"hljs-number\">-1</span>]!=<span class=\"hljs-literal\">null</span>){\n    <span class=\"hljs-keyword\">let</span> preIntIdx=bsEnd(<span class=\"hljs-keyword\">this</span>.res,val<span class=\"hljs-number\">-1</span>,<span class=\"hljs-string\">'end'</span>)\n    <span class=\"hljs-keyword\">let</span> newInt=<span class=\"hljs-keyword\">new</span> Interval(<span class=\"hljs-keyword\">this</span>.res[preIntIdx].start,val)\n    <span class=\"hljs-keyword\">this</span>.res.splice(preIntIdx,<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">this</span>.res.splice(preIntIdx,<span class=\"hljs-number\">0</span>,newInt)\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.list[val+<span class=\"hljs-number\">1</span>]!=<span class=\"hljs-literal\">null</span>){\n    <span class=\"hljs-keyword\">let</span> nxtIntIdx=bsEnd(<span class=\"hljs-keyword\">this</span>.res,val+<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'start'</span>)\n    <span class=\"hljs-comment\">// if(this.res[nxtIntIdx].start===val)return</span>\n    <span class=\"hljs-comment\">// if(val===70)console.log(nxtIntIdx,val,this.res)</span>\n    <span class=\"hljs-keyword\">let</span> newInt=<span class=\"hljs-keyword\">new</span> Interval(val,<span class=\"hljs-keyword\">this</span>.res[nxtIntIdx].end)\n    <span class=\"hljs-keyword\">this</span>.res.splice(nxtIntIdx,<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">this</span>.res.splice(nxtIntIdx,<span class=\"hljs-number\">0</span>,newInt)  \n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.res.length===<span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">this</span>.res[<span class=\"hljs-keyword\">this</span>.res.length<span class=\"hljs-number\">-1</span>].end&lt;val)\n      <span class=\"hljs-keyword\">this</span>.res.push(<span class=\"hljs-keyword\">new</span> Interval(val,val))\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> insertIdx=bsEnd(<span class=\"hljs-keyword\">this</span>.res,val,<span class=\"hljs-string\">'end'</span>)\n      <span class=\"hljs-comment\">// if(this.res[insertIdx].end===val)return</span>\n      <span class=\"hljs-keyword\">this</span>.res.splice(insertIdx,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">new</span> Interval(val,val))\n    }   \n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n,attr</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid][attr]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * @return {Interval[]}\n */</span>\nSummaryRanges.prototype.getIntervals = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.res\n  <span class=\"hljs-comment\">// let res=[],left=null</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;this.list.length;i++){</span>\n  <span class=\"hljs-comment\">//   let v=this.list[i]</span>\n  <span class=\"hljs-comment\">//   if(v!=null &amp;&amp; left==null)left=i</span>\n  <span class=\"hljs-comment\">//   if(v==null &amp;&amp; left!=null){</span>\n  <span class=\"hljs-comment\">//     res.push(new Interval(left,i-1))</span>\n  <span class=\"hljs-comment\">//     left=null</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// if(left!=null)res.push(new Interval(left,this.list.length-1))</span>\n  <span class=\"hljs-comment\">// return res</span>\n};\n\n<span class=\"hljs-comment\">/** \n * Your SummaryRanges object will be instantiated and called as such:\n * var obj = Object.create(SummaryRanges).createNew()\n * obj.addNum(val)\n * var param_2 = obj.getIntervals()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "data-stream-as-disjoint-intervals",
  "content": "<p>给定一个非负整数的数据流输入 a<sub>1</sub>，a<sub>2</sub>，&hellip;，a<sub>n，</sub>&hellip;，将到目前为止看到的数字总结为不相交的区间列表。</p>\n\n<p>例如，假设数据流中的整数为 1，3，7，2，6，&hellip;，每次的总结为：</p>\n\n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br>\n如果有很多合并，并且与数据流的大小相比，不相交区间的数量很小，该怎么办?</p>\n\n<p><strong>提示：</strong><br>\n特别感谢 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> 提供了本问题和其测试用例。</p>\n"
}
