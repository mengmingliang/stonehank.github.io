{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> kSmallestPairs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1, nums2, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">let</span> index=<span class=\"hljs-built_in\">Array</span>(nums1.length).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;k;i++){\n    <span class=\"hljs-keyword\">let</span> start=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>,minIdx=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">while</span>(start&lt;nums1.length){\n      <span class=\"hljs-keyword\">if</span>(index[start]&gt;=nums2.length){\n        start++\n        <span class=\"hljs-keyword\">continue</span>\n      }\n      <span class=\"hljs-keyword\">let</span> id1=start,id2=index[start]\n      <span class=\"hljs-keyword\">if</span>(nums1[id1]+nums2[id2]&lt;min){\n        min=nums1[id1]+nums2[id2]\n        minIdx=start\n      }\n      start++\n    }\n    <span class=\"hljs-keyword\">if</span>(minIdx===<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">break</span>\n    result.push([nums1[minIdx],nums2[index[minIdx]]])\n    index[minIdx]+=<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-k-pairs-with-smallest-sums",
  "content": "<p>给定两个以升序排列的整形数组 <strong>nums1</strong> 和 <strong>nums2</strong>, 以及一个整数 <strong>k</strong>。</p>\n\n<p>定义一对值&nbsp;<strong>(u,v)</strong>，其中第一个元素来自&nbsp;<strong>nums1</strong>，第二个元素来自 <strong>nums2</strong>。</p>\n\n<p>找到和最小的 k 对数字&nbsp;<strong>(u<sub>1</sub>,v<sub>1</sub>), (u<sub>2</sub>,v<sub>2</sub>) ... (u<sub>k</sub>,v<sub>k</sub>)</strong>。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>输出:</strong> [1,2],[1,4],[1,6]\n<strong>解释: </strong>返回序列中的前 3 对数：\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>输出: </strong>[1,1],[1,1]\n<strong>解释: </strong>返回序列中的前 2 对数：\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>输出:</strong> [1,3],[2,3]\n<strong>解释: </strong>也可能序列中所有的数对都被返回:[1,3],[2,3]\n</pre>\n"
}
