{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar reverseList = function(head) {\n    function iteratively (node){\n        let prev=null\n        while(node){\n            let next=node.next\n            node.next=prev\n            prev=node\n            node=next\n        }\n        return prev\n    }\n    \n    \n    function recursively (node,prev){\n        if(!node && prev) return prev\n        if(!node) return node\n        if(!prev)  prev=null\n        let next=node.next\n        node.next=prev\n        prev=node\n        node=next\n        return recursively(node,prev)\n        \n    }\n    \n    return recursively(head)\n};"
  ],
  "titleSlug": "reverse-linked-list",
  "content": "<p>Reverse a singly linked list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\r\n<strong>Output:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\r\n",
  "translatedContent": "<p>反转一个单链表。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre>\n\n<p><strong>进阶:</strong><br>\n你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p>\n"
}
