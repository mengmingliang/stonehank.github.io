{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> shortestCompletingWord = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">licensePlate, words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> kind=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> lowerLicense=licensePlate.toLowerCase()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;lowerLicense.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=lowerLicense[i]\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-regexp\">/[a-z]/</span>.test(cur))<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> code=cur.charCodeAt(<span class=\"hljs-number\">0</span>)<span class=\"hljs-number\">-97</span>\n    <span class=\"hljs-keyword\">if</span>(hash[code]===<span class=\"hljs-number\">0</span>)kind++\n    hash[code]++\n  }\n  <span class=\"hljs-keyword\">let</span> minLen=<span class=\"hljs-literal\">Infinity</span>,res=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">if</span>(words[i]&gt;=minLen)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> k=kind,memo=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;words[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> code=words[i].charCodeAt(j)<span class=\"hljs-number\">-97</span>\n      memo[code]++\n      <span class=\"hljs-keyword\">if</span>(memo[code]===hash[code])k--\n    }\n    <span class=\"hljs-keyword\">if</span>(k===<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">if</span>(words[i].length&lt;minLen){\n        minLen=words[i].length\n        res=words[i]\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "shortest-completing-word",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>首先对<code>licensePlate</code>全部转换为小写，并且构建<code>hash</code>，并且记录出现字母的种类数<code>k</code>。</p>\n<p>接着遍历<code>words[i]</code>，每次遍历构建一个临时<code>memo</code>，如果存在<code>memo[code]===hash[code]</code>，说明存在这个字母的数量，<code>k--</code>；</p>\n<h2>每次遍历，如果发现<code>k===0</code>，说明满足要求，可以判断当前单词是否更短。</h2>\n",
  "content": "<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为完整词。在所有完整词中，最短的单词我们称之为最短完整词。</p>\n\n<p>单词在匹配牌照中的字母时不区分大小写，比如牌照中的&nbsp;<code>&quot;P&quot;</code>&nbsp;依然可以匹配单词中的&nbsp;<code>&quot;p&quot;</code>&nbsp;字母。</p>\n\n<p>我们保证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一个。</p>\n\n<p>牌照中可能包含多个相同的字符，比如说：对于牌照 <code>&quot;PP&quot;</code>，单词&nbsp;<code>&quot;pair&quot;</code>&nbsp;无法匹配，但是&nbsp;<code>&quot;supper&quot;</code>&nbsp;可以匹配。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]\n<strong>输出：</strong>&quot;steps&quot;\n<strong>说明：</strong>最短完整词应该包括 &quot;s&quot;、&quot;p&quot;、&quot;s&quot; 以及 &quot;t&quot;。对于 &quot;step&quot; 它只包含一个 &quot;s&quot; 所以它不符合条件。同时在匹配过程中我们忽略牌照中的大小写。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]\n<strong>输出：</strong>&quot;pest&quot;\n<strong>说明：</strong>存在 3 个包含字母 &quot;s&quot; 且有着最短长度的完整词，但我们返回最先出现的完整词。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>牌照<code>（licensePlate）</code>的长度在区域<code>[1, 7]</code>中。</li>\n\t<li>牌照<code>（licensePlate）</code>将会包含数字、空格、或者字母（大写和小写）。</li>\n\t<li>单词列表<code>（words）</code>长度在区间&nbsp;<code>[10, 1000]</code>&nbsp;中。</li>\n\t<li>每一个单词&nbsp;<code>words[i]</code>&nbsp;都是小写，并且长度在区间&nbsp;<code>[1, 15]</code>&nbsp;中。</li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
