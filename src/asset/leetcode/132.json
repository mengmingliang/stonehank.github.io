{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minCut = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=s.length\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> palin=<span class=\"hljs-built_in\">Array</span>(N).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-literal\">false</span>))\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++) palin[i][i]=<span class=\"hljs-literal\">true</span>\n\n  dp[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">2</span>;i&lt;dp.length;i++){\n    dp[i]=dp[i<span class=\"hljs-number\">-1</span>]+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;i;j++){\n      <span class=\"hljs-keyword\">if</span>(s[i<span class=\"hljs-number\">-1</span>]===s[j<span class=\"hljs-number\">-1</span>]){\n        <span class=\"hljs-keyword\">if</span>(i-j&lt;=<span class=\"hljs-number\">1</span> || palin[j][i<span class=\"hljs-number\">-2</span>]){\n          dp[i]=<span class=\"hljs-built_in\">Math</span>.min(dp[i],dp[j<span class=\"hljs-number\">-1</span>]+<span class=\"hljs-number\">1</span>)\n          palin[j<span class=\"hljs-number\">-1</span>][i<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-literal\">true</span>\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[N]\n};\n</code></pre>\n"
  ],
  "titleSlug": "palindrome-partitioning-ii",
  "content": "<p>给定一个字符串 <em>s</em>，将 <em>s</em> 分割成一些子串，使每个子串都是回文串。</p>\n\n<p>返回符合要求的最少分割次数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>&nbsp;&quot;aab&quot;\n<strong>输出:</strong> 1\n<strong>解释: </strong>进行一次分割就可将&nbsp;<em>s </em>分割成 [&quot;aa&quot;,&quot;b&quot;] 这样两个回文子串。\n</pre>\n"
}
