{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} arr\n * @param {number} k\n * @param {number} x\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findClosestElements = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">arr, k, x</span>) </span>{\n<span class=\"hljs-comment\">//   // O(Nlog(N))</span>\n<span class=\"hljs-comment\">//   let aux=[]</span>\n<span class=\"hljs-comment\">//   for(let i=0;i&lt;arr.length;i++){</span>\n<span class=\"hljs-comment\">//     aux[i]=[Math.abs(x-arr[i]),arr[i]]</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   aux.sort((a,b)=&gt;{</span>\n<span class=\"hljs-comment\">//     if(a[0]&gt;b[0])return 1</span>\n<span class=\"hljs-comment\">//     else if(a[0]&lt;b[0])return -1</span>\n<span class=\"hljs-comment\">//     else{</span>\n<span class=\"hljs-comment\">//       if(a[1]&gt;b[1])return 1</span>\n<span class=\"hljs-comment\">//       else if(a[1]&lt;b[1])return -1</span>\n<span class=\"hljs-comment\">//       else return 0</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   })</span>\n\n<span class=\"hljs-comment\">//   let res=aux.slice(0,k)</span>\n\n<span class=\"hljs-comment\">//   res.sort((a,b)=&gt;a[1]-b[1])</span>\n<span class=\"hljs-comment\">//   return res.map(arr=&gt;arr[1])</span>\n\n<span class=\"hljs-comment\">//   // O(N-K)</span>\n<span class=\"hljs-comment\">//   let lo=0,hi=arr.length-1</span>\n<span class=\"hljs-comment\">//   while(hi-lo&gt;=k){</span>\n<span class=\"hljs-comment\">//     let left=Math.abs(x-arr[lo])</span>\n<span class=\"hljs-comment\">//     let right=Math.abs(x-arr[hi])</span>\n<span class=\"hljs-comment\">//     if(left&lt;right){</span>\n<span class=\"hljs-comment\">//       hi--</span>\n<span class=\"hljs-comment\">//     }else if(left&gt;right){</span>\n<span class=\"hljs-comment\">//       lo++</span>\n<span class=\"hljs-comment\">//     }else{</span>\n<span class=\"hljs-comment\">//       hi--</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n<span class=\"hljs-comment\">//   return arr.slice(lo,hi+1)</span>\n  \n  <span class=\"hljs-comment\">// O(log(N-K))</span>\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length-k\n  <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Math</span>.abs(x-arr[mid])&gt;<span class=\"hljs-built_in\">Math</span>.abs(x-arr[mid+k])){\n      lo=mid+<span class=\"hljs-number\">1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      hi=mid\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> arr.slice(lo,lo+k)\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-k-closest-elements",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<ol>\n<li>因为接近<code>x</code>的<code>k</code>个数一定是连续的，因此我们只需要确定这个连续数组的起始点，就可以返回结果。</li>\n<li>起点的索引一定处于<code>[0,N-k]</code>的范围内，因此我们使用二分法，只要判断出起点与<code>x</code>的差不大于终点(起点+<code>k</code>)与<code>x</code>的差即可。</li>\n</ol>\n",
  "content": "<p>给定一个排序好的数组，两个整数 <code>k</code> 和 <code>x</code>，从数组中找到最靠近 <code>x</code>（两数之差最小）的 <code>k</code> 个数。返回的结果必须要是按升序排好的。如果有两个数与 <code>x</code> 的差值一样，优先选择数值较小的那个数。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4,5], k=4, x=3\n<strong>输出:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4,5], k=4, x=-1\n<strong>输出:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>k 的值为正数，且总是小于给定排序数组的长度。</li>\n\t<li>数组不为空，且长度不超过 10<sup>4</sup></li>\n\t<li>数组里的每个元素与&nbsp;x 的绝对值不超过 10<sup>4</sup></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>更新(2017/9/19):</strong><br />\n这个参数 <em>arr</em> 已经被改变为一个<strong>整数数组</strong>（而不是整数列表）。<strong><em>&nbsp;请重新加载代码定义以获取最新更改。</em></strong></p>\n"
}
