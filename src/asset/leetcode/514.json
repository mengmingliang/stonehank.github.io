{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} ring\n * @param {string} key\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findRotateSteps = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ring, key</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=ring.length,M=key.length\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;M+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      dp[i][j]=<span class=\"hljs-literal\">Infinity</span>\n    }\n  }\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;M+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N;j++){\n      <span class=\"hljs-keyword\">if</span>(ring[j]===key[i<span class=\"hljs-number\">-1</span>]){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;N;k++){\n          <span class=\"hljs-keyword\">if</span>(dp[i<span class=\"hljs-number\">-1</span>][k]!==<span class=\"hljs-literal\">Infinity</span>){\n            <span class=\"hljs-keyword\">let</span> abs=<span class=\"hljs-built_in\">Math</span>.abs(k-j)\n            dp[i][j]=<span class=\"hljs-built_in\">Math</span>.min(dp[i][j],dp[i<span class=\"hljs-number\">-1</span>][k]+<span class=\"hljs-built_in\">Math</span>.min(abs,N-abs)+<span class=\"hljs-number\">1</span>)\n          }\n        }        \n      }\n    }\n  }\n  \n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;dp[M].length;i++){\n    min=<span class=\"hljs-built_in\">Math</span>.min(min,dp[M][i])\n  }\n  <span class=\"hljs-keyword\">return</span> min\n}; \n</code></pre>\n"
  ],
  "titleSlug": "freedom-trail",
  "hasThinking": false,
  "content": "<p>视频游戏&ldquo;辐射4&rdquo;中，任务&ldquo;通向自由&rdquo;要求玩家到达名为&ldquo;Freedom Trail Ring&rdquo;的金属表盘，并使用表盘拼写特定关键词才能开门。</p>\r\n\r\n<p>给定一个字符串&nbsp;<strong>ring</strong>，表示刻在外环上的编码；给定另一个字符串&nbsp;<strong>key</strong>，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的<strong>最少</strong>步数。</p>\r\n\r\n<p>最初，<strong>ring&nbsp;</strong>的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使&nbsp;<strong>key&nbsp;</strong>的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完&nbsp;<strong>key&nbsp;</strong>中的所有字符。</p>\r\n\r\n<p>旋转&nbsp;<strong>ring&nbsp;</strong>拼出 key 字符&nbsp;<strong>key[i]&nbsp;</strong>的阶段中：</p>\r\n\r\n<ol>\r\n\t<li>您可以将&nbsp;<strong>ring&nbsp;</strong>顺时针或逆时针旋转<strong>一个位置</strong>，计为1步。旋转的最终目的是将字符串&nbsp;<strong>ring&nbsp;</strong>的一个字符与 12:00 方向对齐，并且这个字符必须等于字符&nbsp;<strong>key[i] 。</strong></li>\r\n\t<li>如果字符&nbsp;<strong>key[i]&nbsp;</strong>已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作&nbsp;<strong>1 步</strong>。按完之后，您可以开始拼写&nbsp;<strong>key&nbsp;</strong>的下一个字符（下一阶段）, 直至完成所有拼写。</li>\r\n</ol>\r\n\r\n<p><strong>示例：</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<center><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\"></center>\r\n&nbsp;\r\n\r\n<pre><strong>输入:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<strong>输出:</strong> 4\r\n<strong>解释:</strong>\r\n 对于 key 的第一个字符 &#39;g&#39;，已经在正确的位置, 我们只需要1步来拼写这个字符。 \r\n 对于 key 的第二个字符 &#39;d&#39;，我们需要逆时针旋转 ring &quot;godding&quot; 2步使它变成 &quot;ddinggo&quot;。\r\n 当然, 我们还需要1步进行拼写。\r\n 因此最终的输出是 4。\r\n</pre>\r\n\r\n<p><strong>提示：</strong></p>\r\n\r\n<ol>\r\n\t<li><strong>ring</strong> 和&nbsp;<strong>key</strong>&nbsp;的字符串长度取值范围均为&nbsp;1 至&nbsp;100；</li>\r\n\t<li>两个字符串中都只有小写字符，并且均可能存在重复字符；</li>\r\n\t<li>字符串&nbsp;<strong>key</strong>&nbsp;一定可以由字符串 <strong>ring</strong>&nbsp;旋转拼出。</li>\r\n</ol>"
}
