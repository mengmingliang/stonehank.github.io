{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> calculate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> sign=<span class=\"hljs-string\">'+'</span>\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n    <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\" \"</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i])){\n      <span class=\"hljs-keyword\">let</span> str=s[i]\n      <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(s[i+<span class=\"hljs-number\">1</span>])){\n        str+=s[++i]\n      }\n      <span class=\"hljs-keyword\">if</span>(sign===<span class=\"hljs-string\">\"+\"</span>)stack.push(+str)\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sign===<span class=\"hljs-string\">\"-\"</span>)stack.push(-str)\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sign===<span class=\"hljs-string\">\"*\"</span>)stack.push(stack.pop()*str)\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(sign===<span class=\"hljs-string\">\"/\"</span>)stack.push(~~(stack.pop()/str))\n    }<span class=\"hljs-keyword\">else</span>{\n      sign=s[i]\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> stack)sum+=n\n  <span class=\"hljs-keyword\">return</span> sum\n};\n</code></pre>\n"
  ],
  "titleSlug": "basic-calculator-ii",
  "content": "<p>实现一个基本的计算器来计算一个简单的字符串表达式的值。</p>\n\n<p>字符串表达式仅包含非负整数，<code>+</code>， <code>-</code> ，<code>*</code>，<code>/</code> 四种运算符和空格&nbsp;<code>&nbsp;</code>。 整数除法仅保留整数部分。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>&quot;3+2*2&quot;\n<strong>输出:</strong> 7\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> &quot; 3/2 &quot;\n<strong>输出:</strong> 1</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong> &quot; 3+5 / 2 &quot;\n<strong>输出:</strong> 5\n</pre>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>你可以假设所给定的表达式都是有效的。</li>\n\t<li>请<strong>不要</strong>使用内置的库函数 <code>eval</code>。</li>\n</ul>\n"
}
