{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> middleNode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res=[]\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkSum</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(node){\n            sum++\n            checkSum(node.next)\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">return</span>\n        }        \n    }\n    \n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRes</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">while</span>(node){\n            count++\n            <span class=\"hljs-comment\">// console.log(count,sum)</span>\n            <span class=\"hljs-keyword\">if</span>(count===<span class=\"hljs-built_in\">Math</span>.floor((sum/<span class=\"hljs-number\">2</span>)+<span class=\"hljs-number\">1</span>)){\n                res=node\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            node=node.next\n        }\n        <span class=\"hljs-keyword\">return</span>\n    }\n    checkSum(head)\n    getRes(head)\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "middle-of-the-linked-list",
  "translatedContent": "<p>给定一个带有头结点&nbsp;<code>head</code>&nbsp;的非空单链表，返回链表的中间结点。</p>\n\n<p>如果有两个中间结点，则返回第二个中间结点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5]\n<strong>输出：</strong>此列表中的结点 3 (序列化形式：[3,4,5])\n返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。\n注意，我们返回了一个 ListNode 类型的对象 ans，这样：\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,3,4,5,6]\n<strong>输出：</strong>此列表中的结点 4 (序列化形式：[4,5,6])\n由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>给定链表的结点数介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>100</code>&nbsp;之间。</li>\n</ul>\n"
}
