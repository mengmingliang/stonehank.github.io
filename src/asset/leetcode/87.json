{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isScramble = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s1, s2</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(s1===s2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> hashCheck=check(s1,s2)\n  <span class=\"hljs-keyword\">if</span>(!hashCheck)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> len=s1.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> result=<span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">let</span> left1=s1.substring(<span class=\"hljs-number\">0</span>,i),right1=s1.substring(i),\n          left2=s2.substring(<span class=\"hljs-number\">0</span>,i),right2=s2.substring(i)\n      result=isScramble(left1,left2) &amp;&amp; isScramble(right1,right2) || \n             isScramble(left1,s2.substring(len-i)) &amp;&amp; isScramble(right1,s2.substring(<span class=\"hljs-number\">0</span>,len-i))\n      <span class=\"hljs-keyword\">if</span>(result)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">s1,s2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> hash={}\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> s1){\n      <span class=\"hljs-keyword\">if</span>(hash[n]==<span class=\"hljs-literal\">null</span>)hash[n]=<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hash[n]++\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> s2){\n      <span class=\"hljs-keyword\">if</span>(!hash[n])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">else</span> hash[n]--\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "scramble-string",
  "content": "<p>给定一个字符串&nbsp;<em>s1</em>，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。</p>\n\n<p>下图是字符串&nbsp;<em>s1</em>&nbsp;=&nbsp;<code>&quot;great&quot;</code>&nbsp;的一种可能的表示形式。</p>\n\n<pre>    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre>\n\n<p>在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。</p>\n\n<p>例如，如果我们挑选非叶节点&nbsp;<code>&quot;gr&quot;</code>&nbsp;，交换它的两个子节点，将会产生扰乱字符串&nbsp;<code>&quot;rgeat&quot;</code>&nbsp;。</p>\n\n<pre>    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre>\n\n<p>我们将&nbsp;<code>&quot;rgeat&rdquo;</code>&nbsp;称作&nbsp;<code>&quot;great&quot;</code>&nbsp;的一个扰乱字符串。</p>\n\n<p>同样地，如果我们继续将其节点&nbsp;<code>&quot;eat&quot;</code>&nbsp;和&nbsp;<code>&quot;at&quot;</code>&nbsp;进行交换，将会产生另一个新的扰乱字符串&nbsp;<code>&quot;rgtae&quot;</code>&nbsp;。</p>\n\n<pre>    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre>\n\n<p>我们将&nbsp;<code>&quot;rgtae&rdquo;</code>&nbsp;称作&nbsp;<code>&quot;great&quot;</code>&nbsp;的一个扰乱字符串。</p>\n\n<p>给出两个长度相等的字符串 <em>s1 </em>和&nbsp;<em>s2</em>，判断&nbsp;<em>s2&nbsp;</em>是否是&nbsp;<em>s1&nbsp;</em>的扰乱字符串。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>输出:</strong> false</pre>\n"
}
