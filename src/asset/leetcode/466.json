{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s1\n * @param {number} n1\n * @param {string} s2\n * @param {number} n2\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> getMaxRepetitions = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s1, n1, s2, n2</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>, i, count = <span class=\"hljs-number\">0</span>, perCycle = <span class=\"hljs-number\">0</span>, firstEnd = <span class=\"hljs-number\">-1</span>, lastEnd = <span class=\"hljs-number\">-1</span>, nonMatch = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; s1.length * n1; i++) {\n        <span class=\"hljs-keyword\">if</span> (s2[j] === s1[i % s1.length]) {\n            j++;\n            nonMatch = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (++nonMatch &gt;= s1.length) <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">if</span> (j === s2.length) {\n            count++;\n            perCycle++;\n            j = <span class=\"hljs-number\">0</span>;\n \n            <span class=\"hljs-keyword\">if</span> (firstEnd === <span class=\"hljs-number\">-1</span>) {\n                firstEnd = i;\n                perCycle = <span class=\"hljs-number\">0</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((i - firstEnd) % s1.length === <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">let</span> cycleLen = i - firstEnd;\n                <span class=\"hljs-keyword\">let</span> remainLen = s1.length * n1 - i - <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">let</span> cycles = <span class=\"hljs-built_in\">Math</span>.floor(remainLen / cycleLen);\n                count += cycles * perCycle;\n                i += cycles * cycleLen;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.floor(count / n2);\n};\n</code></pre>\n"
  ],
  "titleSlug": "count-the-repetitions",
  "hasThinking": false,
  "content": "<p>定义由 n 个连接的字符串 s 组成字符串 S，即&nbsp;<code>S = [s,n]</code>。例如，<code>[&quot;abc&quot;, 3]</code>=&ldquo;abcabcabc&rdquo;。</p>\n\n<p>另一方面，如果我们可以从 s<sub>2&nbsp;</sub>中删除某些字符使其变为 s<sub>1</sub>，我们称字符串 s<sub>1&nbsp;</sub>可以从字符串 s<sub>2&nbsp;</sub>获得。例如，&ldquo;abc&rdquo; 可以根据我们的定义从 &ldquo;abdbec&rdquo; 获得，但不能从 &ldquo;acbbe&rdquo; 获得。</p>\n\n<p>现在给出两个非空字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>（每个最多 100 个字符长）和两个整数 0 &le; N<sub>1&nbsp;</sub>&le; 10<sup>6&nbsp;</sup>和 1 &le; N<sub>2&nbsp;</sub>&le; 10<sup>6</sup>。现在考虑字符串 S<sub>1&nbsp;</sub>和 S<sub>2</sub>，其中<code>S1=[s1,n1]</code>和<code>S2=[s2,n2]</code>。找出可以使<code>[S2,M]</code>从&nbsp;<code>S1</code>&nbsp;获得的最大整数 M。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>输入：\ns1 =&quot;acb&quot;,n1 = 4\ns2 =&quot;ab&quot;,n2 = 2\n\n返回：\n2\n</pre>\n"
}
