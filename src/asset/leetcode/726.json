{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} formula\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> countOfAtoms = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">formula</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> obj=resolve(formula)[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> keys=<span class=\"hljs-built_in\">Object</span>.keys(obj).sort()\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;keys.length;i++){\n    res+=keys[i]+<span class=\"hljs-string\">''</span>+(obj[keys[i]]===<span class=\"hljs-number\">1</span>?<span class=\"hljs-string\">''</span>:obj[keys[i]])\n  }\n  <span class=\"hljs-keyword\">return</span> res\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">str</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> hash={},name=<span class=\"hljs-string\">''</span>,subs=<span class=\"hljs-literal\">null</span>,count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(;i&lt;str.length;i++){\n      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/[A-Z]/</span>.test(str[i])){\n        hash=fillHash(name,subs,count,hash)\n        name=str[i]\n        subs=<span class=\"hljs-literal\">null</span>\n        count=<span class=\"hljs-number\">0</span>    \n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(str[i]===<span class=\"hljs-string\">\"(\"</span>){\n        hash=fillHash(name,subs,count,hash)\n        name=<span class=\"hljs-string\">''</span>\n        subs=<span class=\"hljs-literal\">null</span>\n        count=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">let</span> res=resolve(str.substring(i+<span class=\"hljs-number\">1</span>))\n        subs=res[<span class=\"hljs-number\">0</span>]\n        i+=res[<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(str[i]===<span class=\"hljs-string\">\")\"</span>){\n        <span class=\"hljs-keyword\">break</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(str[i])){\n        count=count*<span class=\"hljs-number\">10</span>+(+str[i])\n      }<span class=\"hljs-keyword\">else</span>{\n        name+=str[i]\n      }\n    }\n    hash=fillHash(name,subs,count,hash,<span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-keyword\">return</span> [hash,i]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillHash</span>(<span class=\"hljs-params\">name,subs,count,hash</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(count===<span class=\"hljs-number\">0</span>)count=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span>(name!==<span class=\"hljs-string\">''</span>){\n      <span class=\"hljs-keyword\">if</span>(hash[name]!=<span class=\"hljs-literal\">null</span>)hash[name]+=count\n      <span class=\"hljs-keyword\">else</span> hash[name]=count\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(subs!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> subs){\n        <span class=\"hljs-keyword\">if</span>(hash[k]==<span class=\"hljs-literal\">null</span>)hash[k]=subs[k]*count\n        <span class=\"hljs-keyword\">else</span> hash[k]+=subs[k]*count\n      }      \n    }\n    <span class=\"hljs-keyword\">return</span> hash\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-atoms",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这题需要对括号进行递归处理，遍历当前字符串</p>\n<p>定义4个变量：</p>\n<ul>\n<li><code>name</code>记录原子名称</li>\n<li><code>count</code>记录数量</li>\n<li><code>subs</code>记录括号内递归的返回值</li>\n<li><code>hash</code>记录当前字符串的结果</li>\n</ul>\n<ol>\n<li>\n<p>遇到<strong>大写字母</strong>，说明遇到一个新的原子；</p>\n<ol>\n<li>将之前如果存在原子名<code>name</code>和数量<code>count</code>，添加进<code>hash</code></li>\n<li>如果存在括号内的递归返回值<code>subs</code>，添加进<code>hash</code></li>\n</ol>\n</li>\n<li>\n<p>遇到<code>(</code>，需要将之前的原子名<code>name</code>和数量<code>count</code>添加进<code>hash</code>，参考步骤<code>1</code>；</p>\n<ul>\n<li>递归处理<code>(</code>后的内容</li>\n<li>将递归的返回值作为<code>subs</code></li>\n</ul>\n</li>\n<li>\n<p>遇到<code>)</code>，直接<code>break</code>，只需要在最后再进行一次步骤<code>1</code>的添加<code>hash</code>即可；</p>\n</li>\n<li>\n<p>遇到数字，添加进<code>count</code>；</p>\n</li>\n<li>\n<p>其他(小写字母)，记录到<code>name</code>。</p>\n</li>\n</ol>\n<hr>\n",
  "content": "<p>给定一个化学式<code>formula</code>（作为字符串），返回每种原子的数量。</p>\n\n<p>原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。</p>\n\n<p>如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。</p>\n\n<p>两个化学式连在一起是新的化学式。例如&nbsp;H2O2He3Mg4 也是化学式。</p>\n\n<p>一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。</p>\n\n<p>给定一个化学式，输出所有原子的数量。格式为：第一个（按字典序）原子的名子，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;H2O&quot;\n<strong>输出:</strong> &quot;H2O&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;O&#39;: 1}。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;Mg(OH)2&quot;\n<strong>输出:</strong> &quot;H2MgO2&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;K4(ON(SO3)2)2&quot;\n<strong>输出:</strong> &quot;K4N2O14S4&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有原子的第一个字母为大写，剩余字母都是小写。</li>\n\t<li><code>formula</code>的长度在<code>[1, 1000]</code>之间。</li>\n\t<li><code>formula</code>只包含字母、数字和圆括号，并且题目中给定的是合法的化学式。</li>\n</ul>\n"
}
