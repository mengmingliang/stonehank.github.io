{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} formula\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> countOfAtoms = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">formula</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> obj=partitionStr(formula,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> keys=<span class=\"hljs-built_in\">Object</span>.keys(obj)\n  keys.sort()\n  <span class=\"hljs-keyword\">let</span> ans=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">of</span> keys){\n    <span class=\"hljs-keyword\">if</span>(obj[k]===<span class=\"hljs-number\">1</span>)ans+=k\n    <span class=\"hljs-keyword\">else</span> ans+=k+obj[k]\n  }\n  <span class=\"hljs-keyword\">return</span> ans\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partitionStr</span>(<span class=\"hljs-params\">str,startIdx</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> mem={}\n    <span class=\"hljs-keyword\">let</span> newAtom=<span class=\"hljs-string\">''</span>,nums=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=startIdx;i&lt;str.length;i++){\n      <span class=\"hljs-keyword\">let</span> cur=str[i]\n      <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\"(\"</span>){\n        combineMem(mem,newAtom,nums)\n        newAtom=<span class=\"hljs-string\">''</span>\n        <span class=\"hljs-keyword\">let</span> [insertMem,nxtIdx]=partitionStr(str,i+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> insertMem){\n          <span class=\"hljs-keyword\">if</span>(mem[k]==<span class=\"hljs-literal\">null</span>)mem[k]=insertMem[k]\n          <span class=\"hljs-keyword\">else</span> mem[k]+=insertMem[k]\n        }\n\t\t    i=nxtIdx\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\")\"</span>){\n        combineMem(mem,newAtom,nums)\n        <span class=\"hljs-keyword\">let</span> multi=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">let</span> idx=i+<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-regexp\">/[0-9]/</span>.test(str[idx])){\n          multi=multi*<span class=\"hljs-number\">10</span>+(+str[idx++])\n        }\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> mem) mem[k]*=multi\n        <span class=\"hljs-keyword\">return</span> [mem,idx<span class=\"hljs-number\">-1</span>]\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/[A-Z]/</span>.test(cur)){\n        combineMem(mem,newAtom,nums)\n        nums=<span class=\"hljs-number\">0</span>\n        newAtom=cur\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/[a-z]/</span>.test(cur)){\n        newAtom+=cur\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/[0-9]/</span>.test(cur)){\n        nums=nums*<span class=\"hljs-number\">10</span>+(+cur)\n      }\n    } \n    combineMem(mem,newAtom,nums)\n    <span class=\"hljs-keyword\">return</span> mem\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">combineMem</span>(<span class=\"hljs-params\">mem,newAtom,nums</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(newAtom!==<span class=\"hljs-string\">''</span>){\n      <span class=\"hljs-keyword\">if</span>(mem[newAtom]==<span class=\"hljs-literal\">null</span>)mem[newAtom]=nums || <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> mem[newAtom]+=(nums || <span class=\"hljs-number\">1</span>)\n    }      \n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-atoms",
  "content": "<p>给定一个化学式<code>formula</code>（作为字符串），返回每种原子的数量。</p>\n\n<p>原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。</p>\n\n<p>如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。</p>\n\n<p>两个化学式连在一起是新的化学式。例如&nbsp;H2O2He3Mg4 也是化学式。</p>\n\n<p>一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。</p>\n\n<p>给定一个化学式，输出所有原子的数量。格式为：第一个（按字典序）原子的名子，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;H2O&quot;\n<strong>输出:</strong> &quot;H2O&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;O&#39;: 1}。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;Mg(OH)2&quot;\n<strong>输出:</strong> &quot;H2MgO2&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> \nformula = &quot;K4(ON(SO3)2)2&quot;\n<strong>输出:</strong> &quot;K4N2O14S4&quot;\n<strong>解释:</strong> \n原子的数量是 {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有原子的第一个字母为大写，剩余字母都是小写。</li>\n\t<li><code>formula</code>的长度在<code>[1, 1000]</code>之间。</li>\n\t<li><code>formula</code>只包含字母、数字和圆括号，并且题目中给定的是合法的化学式。</li>\n</ul>\n"
}
