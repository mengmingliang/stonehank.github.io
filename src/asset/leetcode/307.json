{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n */</span>\n<span class=\"hljs-keyword\">var</span> NumArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CreateSegTree</span>(<span class=\"hljs-params\">sum,start,end</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.sum=sum\n    <span class=\"hljs-keyword\">this</span>.left=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.right=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.start=start\n    <span class=\"hljs-keyword\">this</span>.end=end\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\">start,end</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(start===end)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> CreateSegTree(nums[start],start,end)\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((start+end)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> left=create(start,mid),\n      right=create(mid+<span class=\"hljs-number\">1</span>,end)\n    <span class=\"hljs-keyword\">let</span> root=<span class=\"hljs-keyword\">new</span> CreateSegTree(left.sum+right.sum,start,end)\n    root.left=left\n    root.right=right\n    <span class=\"hljs-keyword\">return</span> root\n  }\n\n  <span class=\"hljs-keyword\">let</span> s=<span class=\"hljs-number\">0</span>,e=nums.length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">if</span>(e&lt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">this</span>.root=create(s,e)\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} i \n * @param {number} val\n * @return {void}\n */</span>\nNumArray.prototype.update = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i, val</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_update</span>(<span class=\"hljs-params\">root,index,value</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(root.start===root.end &amp;&amp; root.start===index){\n      <span class=\"hljs-keyword\">return</span> root.sum=value\n    }\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((root.start+root.end)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(index&lt;=mid)_update(root.left,index,value)\n    <span class=\"hljs-keyword\">else</span> _update(root.right,index,value)\n    root.sum=root.left.sum+root.right.sum\n  }\n  _update(<span class=\"hljs-keyword\">this</span>.root,i,val)\n\n};\n\n<span class=\"hljs-comment\">/** \n * @param {number} i \n * @param {number} j\n * @return {number}\n */</span>\nNumArray.prototype.sumRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i, j</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_query</span>(<span class=\"hljs-params\">root,start,end</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(root.start===start &amp;&amp; root.end===end){\n      <span class=\"hljs-keyword\">return</span> root.sum\n    }\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((root.start+root.end)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span>(end&lt;=mid)<span class=\"hljs-keyword\">return</span> _query(root.left,start,end)\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (start&gt;=mid+<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> _query(root.right,start,end)\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> _query(root.left,start,mid)+_query(root.right,mid+<span class=\"hljs-number\">1</span>,end)\n  }\n  <span class=\"hljs-keyword\">return</span> _query(<span class=\"hljs-keyword\">this</span>.root,i,j)\n};\n\n<span class=\"hljs-comment\">/** \n * Your NumArray object will be instantiated and called as such:\n * var obj = Object.create(NumArray).createNew(nums)\n * obj.update(i,val)\n * var param_2 = obj.sumRange(i,j)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "range-sum-query-mutable",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>query</code>时间复杂度<code>O(n)</code>+<code>update</code>时间复杂度<code>O(1)</code> 和 <code>update</code>时间复杂度<code>O(n)</code>+<code>query</code>时间复杂度<code>O(1)</code>都可以通过。</p>\n<h2>但更好的还是建立线段树，<code>query</code>时间复杂度<code>O(logN)</code>+<code>update</code>时间复杂度<code>O(logN)</code>。</h2>\n",
  "content": "<p>给定一个整数数组 &nbsp;<em>nums</em>，求出数组从索引&nbsp;<em>i&nbsp;</em>到&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) 范围内元素的总和，包含&nbsp;<em>i,&nbsp; j&nbsp;</em>两点。</p>\n\n<p><em>update(i, val)</em> 函数可以通过将下标为&nbsp;<em>i&nbsp;</em>的数值更新为&nbsp;<em>val</em>，从而对数列进行修改。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>数组仅可以在&nbsp;<em>update&nbsp;</em>函数下进行修改。</li>\n\t<li>你可以假设 <em>update</em> 函数与 <em>sumRange</em> 函数的调用次数是均匀分布的。</li>\n</ol>\n"
}
