{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> reorderList = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!head)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">if</span>(!head.next)<span class=\"hljs-keyword\">return</span> head\n\n  <span class=\"hljs-keyword\">let</span> slow=head,\n      fast=head.next.next\n  <span class=\"hljs-keyword\">while</span>(fast &amp;&amp; fast.next){\n    slow=slow.next\n    fast=fast.next.next\n  }\n  \n  <span class=\"hljs-keyword\">let</span> startNode=slow, node=startNode.next\n  <span class=\"hljs-keyword\">while</span>(node.next){\n    <span class=\"hljs-keyword\">let</span> nxt=node.next\n    node.next=nxt.next\n    nxt.next=startNode.next\n    startNode.next=nxt\n  }\n  <span class=\"hljs-keyword\">let</span> p1=head,\n      p2=startNode.next;\n  <span class=\"hljs-keyword\">while</span>(p1!=startNode){\n    startNode.next=p2.next\n    p2.next=p1.next\n    p1.next=p2\n    p1=p2.next\n    p2=startNode.next\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "reorder-list",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>两种方法：</p>\n<ol>\n<li>计算出<code>head</code>的长度<code>len</code>和将要移动的节点的数量，<code>t=Math.floor((len-1)/2)</code>，使用<code>stack</code>保存<code>next</code>会发生改变的节点。</li>\n</ol>\n<p>在遍历到将要移动的节点上，执行<code>stack.pop</code>取出的节点作为头部，将当前节点插入到头部的<code>next</code>中。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> reorderList = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!head)<span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> node=head\n  <span class=\"hljs-keyword\">while</span>(node){\n    node=node.next\n    len++\n  }\n  <span class=\"hljs-keyword\">let</span> t=<span class=\"hljs-built_in\">Math</span>.floor((len<span class=\"hljs-number\">-1</span>)/<span class=\"hljs-number\">2</span>),k=len-t\n  <span class=\"hljs-keyword\">let</span> stack=[],lastNode=<span class=\"hljs-literal\">null</span>\n  node=head\n  <span class=\"hljs-keyword\">while</span>(node){\n    <span class=\"hljs-keyword\">if</span>(t--&gt;<span class=\"hljs-number\">0</span>)stack.push(node)\n    <span class=\"hljs-keyword\">if</span>(k--&lt;=0){\n      let startNode=stack.pop(),\n          secondNode=startNode.next,\n          nxt=node.next\n      startNode.next=node\n      node.next=secondNode\n      lastNode.next=nxt\n      node=nxt\n    }else{\n      if(k===0)lastNode=node\n      node=node.next\n    }\n  }\n};\n</code></pre>\n<ol start=\"2\">\n<li>使用快慢节点找出当前<code>head</code>的后半段，例如<code>[1,2,3,4,5]</code>后半段就是<code>[3,4,5]</code>，<code>[1,2,3,4]</code>后半段就是<code>[3,4]</code>。</li>\n</ol>\n<p>对后半段进行反转，然后依次插入到前半段每一个节点的<code>next</code>中。</p>\n<h2>例如：<code>[1,2,3,4,5,6,7]</code>，后半段是<code>[4,5,6,7]</code>，反转后是<code>[7,6,5,4]</code>，依次插入到<code>[1,2,3]</code>中，得到<code>[1,7,2,6,3,5,4]</code>。</h2>\n",
  "content": "<p>给定一个单链表&nbsp;<em>L</em>：<em>L</em><sub>0</sub>&rarr;<em>L</em><sub>1</sub>&rarr;&hellip;&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>n ，</sub><br>\n将其重新排列后变为： <em>L</em><sub>0</sub>&rarr;<em>L</em><sub><em>n</em></sub>&rarr;<em>L</em><sub>1</sub>&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>2</sub>&rarr;<em>L</em><sub><em>n</em>-2</sub>&rarr;&hellip;</p>\n\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</pre>\n"
}
