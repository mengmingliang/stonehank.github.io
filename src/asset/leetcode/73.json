{
  "code": [
    "/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */\nvar setZeroes = function(matrix) {\n    // let rowC=[],\n    //     colC=[]\n    // for(let i=0;i<matrix.length;i++){\n    //     for(let j=0;j<matrix[0].length;j++){\n    //         if(matrix[i][j]===0){\n    //             rowC[i]=true\n    //             colC[j]=true\n    //         }\n    //     }\n    // }\n    // for(let i=0;i<matrix.length;i++){\n    //     for(let j=0;j<matrix[0].length;j++){\n    //         if(rowC[i])matrix[i][j]=0\n    //     }\n    // }\n    //  for(let j=0;j<matrix[0].length;j++){\n    //     for(let i=0;i<matrix.length;i++){\n    //         if(colC[j])matrix[i][j]=0\n    //     }\n    // }   \n    let clearTop=matrix[0].includes(0)\n    for(let i=1;i<matrix.length;i++){\n        if(matrix[i].includes(0)){\n            for(let j=0;j<matrix[i].length;j++){\n                if(matrix[i][j]===0) matrix[0][j]=0\n                else matrix[i][j]=0\n            }\n        }\n    }\n    for(let i=0;i<matrix[0].length;i++){\n        if(matrix[0][i]===0){\n            for(let j=1;j<matrix.length;j++){\n                matrix[j][i]=0\n            }\n        }\n    }\n    if(clearTop){\n        for(let i=0;i<matrix[0].length;i++){\n            matrix[0][i]=0\n        }\n    }\n};"
  ],
  "titleSlug": "set-matrix-zeroes",
  "content": "<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n[\r\n&nbsp; [1,1,1],\r\n&nbsp; [1,0,1],\r\n&nbsp; [1,1,1]\r\n]\r\n<strong>Output:</strong> \r\n[\r\n&nbsp; [1,0,1],\r\n&nbsp; [0,0,0],\r\n&nbsp; [1,0,1]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n[\r\n&nbsp; [0,1,2,0],\r\n&nbsp; [3,4,5,2],\r\n&nbsp; [1,3,1,5]\r\n]\r\n<strong>Output:</strong> \r\n[\r\n&nbsp; [0,0,0,0],\r\n&nbsp; [0,4,5,0],\r\n&nbsp; [0,3,1,0]\r\n]\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>A straight forward solution using O(<em>m</em><em>n</em>) space is probably a bad idea.</li>\r\n\t<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>\r\n\t<li>Could you devise a constant space solution?</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给定一个&nbsp;<em>m</em> x <em>n</em> 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>算法<strong>。</strong></p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [1,1,1],\n&nbsp; [1,0,1],\n&nbsp; [1,1,1]\n]\n<strong>输出:</strong> \n[\n&nbsp; [1,0,1],\n&nbsp; [0,0,0],\n&nbsp; [1,0,1]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [0,1,2,0],\n&nbsp; [3,4,5,2],\n&nbsp; [1,3,1,5]\n]\n<strong>输出:</strong> \n[\n&nbsp; [0,0,0,0],\n&nbsp; [0,4,5,0],\n&nbsp; [0,3,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>一个直接的解决方案是使用 &nbsp;O(<em>m</em><em>n</em>)&nbsp;的额外空间，但这并不是一个好的解决方案。</li>\n\t<li>一个简单的改进方案是使用 O(<em>m</em>&nbsp;+&nbsp;<em>n</em>) 的额外空间，但这仍然不是最好的解决方案。</li>\n\t<li>你能想出一个常数空间的解决方案吗？</li>\n</ul>\n"
}
