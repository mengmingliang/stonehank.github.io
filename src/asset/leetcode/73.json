{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> setZeroes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n    <span class=\"hljs-comment\">// let rowC=[],</span>\n    <span class=\"hljs-comment\">//     colC=[]</span>\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;matrix.length;i++){</span>\n    <span class=\"hljs-comment\">//     for(let j=0;j&lt;matrix[0].length;j++){</span>\n    <span class=\"hljs-comment\">//         if(matrix[i][j]===0){</span>\n    <span class=\"hljs-comment\">//             rowC[i]=true</span>\n    <span class=\"hljs-comment\">//             colC[j]=true</span>\n    <span class=\"hljs-comment\">//         }</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;matrix.length;i++){</span>\n    <span class=\"hljs-comment\">//     for(let j=0;j&lt;matrix[0].length;j++){</span>\n    <span class=\"hljs-comment\">//         if(rowC[i])matrix[i][j]=0</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">//  for(let j=0;j&lt;matrix[0].length;j++){</span>\n    <span class=\"hljs-comment\">//     for(let i=0;i&lt;matrix.length;i++){</span>\n    <span class=\"hljs-comment\">//         if(colC[j])matrix[i][j]=0</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">// }   </span>\n    <span class=\"hljs-keyword\">let</span> clearTop=matrix[<span class=\"hljs-number\">0</span>].includes(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;matrix.length;i++){\n        <span class=\"hljs-keyword\">if</span>(matrix[i].includes(<span class=\"hljs-number\">0</span>)){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;matrix[i].length;j++){\n                <span class=\"hljs-keyword\">if</span>(matrix[i][j]===<span class=\"hljs-number\">0</span>) matrix[<span class=\"hljs-number\">0</span>][j]=<span class=\"hljs-number\">0</span>\n                <span class=\"hljs-keyword\">else</span> matrix[i][j]=<span class=\"hljs-number\">0</span>\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;matrix[<span class=\"hljs-number\">0</span>].length;i++){\n        <span class=\"hljs-keyword\">if</span>(matrix[<span class=\"hljs-number\">0</span>][i]===<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;matrix.length;j++){\n                matrix[j][i]=<span class=\"hljs-number\">0</span>\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span>(clearTop){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;matrix[<span class=\"hljs-number\">0</span>].length;i++){\n            matrix[<span class=\"hljs-number\">0</span>][i]=<span class=\"hljs-number\">0</span>\n        }\n    }\n};\n</code></pre>\n"
  ],
  "titleSlug": "set-matrix-zeroes",
  "content": "<p>给定一个&nbsp;<em>m</em> x <em>n</em> 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">原地</a></strong>算法<strong>。</strong></p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [1,1,1],\n&nbsp; [1,0,1],\n&nbsp; [1,1,1]\n]\n<strong>输出:</strong> \n[\n&nbsp; [1,0,1],\n&nbsp; [0,0,0],\n&nbsp; [1,0,1]\n]\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> \n[\n&nbsp; [0,1,2,0],\n&nbsp; [3,4,5,2],\n&nbsp; [1,3,1,5]\n]\n<strong>输出:</strong> \n[\n&nbsp; [0,0,0,0],\n&nbsp; [0,4,5,0],\n&nbsp; [0,3,1,0]\n]</pre>\n\n<p><strong>进阶:</strong></p>\n\n<ul>\n\t<li>一个直接的解决方案是使用 &nbsp;O(<em>m</em><em>n</em>)&nbsp;的额外空间，但这并不是一个好的解决方案。</li>\n\t<li>一个简单的改进方案是使用 O(<em>m</em>&nbsp;+&nbsp;<em>n</em>) 的额外空间，但这仍然不是最好的解决方案。</li>\n\t<li>你能想出一个常数空间的解决方案吗？</li>\n</ul>\n"
}
