{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minDistance = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">word1, word2</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">let</span> M=word1.length,N=word2.length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;M+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;N+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span>)dp[i][j]=j\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j===<span class=\"hljs-number\">0</span>)dp[i][j]=i\n      <span class=\"hljs-keyword\">else</span> dp[i][j]=<span class=\"hljs-number\">0</span>\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;M+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;N+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(word1[i<span class=\"hljs-number\">-1</span>]===word2[j<span class=\"hljs-number\">-1</span>]){\n        dp[i][j]=dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n      }<span class=\"hljs-keyword\">else</span>{\n        dp[i][j]=<span class=\"hljs-built_in\">Math</span>.min(dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>],dp[i<span class=\"hljs-number\">-1</span>][j],dp[i][j<span class=\"hljs-number\">-1</span>])+<span class=\"hljs-number\">1</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[M][N]\n};\n</code></pre>\n"
  ],
  "titleSlug": "edit-distance",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>DP</code>，定义<code>dp[i][j]</code>为<code>word1[0,i)</code>和<code>word2[0,j)</code>的最小编辑距离。</p>\n<p>为了比较<code>dp[i][j]</code>，如果当前<code>i</code>和<code>j</code>对应的字母相等，那么<code>dp[i][j]=dp[i-1][j-1]</code>；</p>\n<p>如果不相等，则需要考虑以下3种情况：</p>\n<ul>\n<li>替换</li>\n</ul>\n<p>替换当前字母，说明当前<code>i</code>和<code>j</code>对应的字母替换后能相等，只需要在<code>dp[i-1][j-1]</code>的基础上增加一次操作，转移方程为<code>dp[i][j]=dp[i-1][j-1]+1</code>。</p>\n<ul>\n<li>删除</li>\n</ul>\n<p>删除当前<code>word1[i]</code>，需要比较的是<code>word1[0,i-1)</code>和<code>word2[0,j)</code>，也就是说要在<code>dp[i-1][j]</code>的基础上增加一次操作，转义方程<code>dp[i][j]=dp[i-1][j]+1</code>。</p>\n<ul>\n<li>增加</li>\n</ul>\n<p>增加当前<code>word1[i]</code>，说明增加的字母一定与<code>j</code>对应的字母相等，需要比较的是<code>word1[0,i)</code>和<code>word2[0,j-1)</code>，转义方程为<code>dp[i][j]=dp[i][j-1]+1</code></p>\n",
  "content": "<p>给定两个单词&nbsp;<em>word1</em> 和&nbsp;<em>word2</em>，计算出将&nbsp;<em>word1</em>&nbsp;转换成&nbsp;<em>word2 </em>所使用的最少操作数&nbsp;。</p>\n\n<p>你可以对一个单词进行如下三种操作：</p>\n\n<ol>\n\t<li>插入一个字符</li>\n\t<li>删除一个字符</li>\n\t<li>替换一个字符</li>\n</ol>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong> \nhorse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)\nrorse -&gt; rose (删除 &#39;r&#39;)\nrose -&gt; ros (删除 &#39;e&#39;)\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>输出:</strong> 5\n<strong>解释:</strong> \nintention -&gt; inention (删除 &#39;t&#39;)\ninention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)\nenention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)\nexention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)\nexection -&gt; execution (插入 &#39;u&#39;)\n</pre>\n"
}
