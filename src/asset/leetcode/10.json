{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isMatch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, p</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> pLen=p.length,sLen=s.length\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(pLen+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(sLen+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">false</span>))\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pLen+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;sLen+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span> &amp;&amp; j===<span class=\"hljs-number\">0</span>){\n        dp[i][j]=<span class=\"hljs-literal\">true</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p[i<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-string\">\"*\"</span> &amp;&amp; j===<span class=\"hljs-number\">0</span>){\n        dp[i][j]=dp[i<span class=\"hljs-number\">-2</span>][j]\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;pLen+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;sLen+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">let</span> r=i<span class=\"hljs-number\">-1</span>,c=j<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">if</span>(p[r]===s[c] || p[r]===<span class=\"hljs-string\">'.'</span>){\n        dp[i][j]=dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p[r]===<span class=\"hljs-string\">\"*\"</span>){\n        <span class=\"hljs-keyword\">if</span>(((p[r<span class=\"hljs-number\">-1</span>]===s[c] || p[r<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-string\">\".\"</span>) &amp;&amp; dp[i][j<span class=\"hljs-number\">-1</span>]) || dp[i<span class=\"hljs-number\">-2</span>][j])\n          dp[i][j]=<span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[pLen][sLen]\n};\n</code></pre>\n"
  ],
  "titleSlug": "regular-expression-matching",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p><code>动态规划</code>,<code>dp[i][j]</code>代表到索引<code>[0,i]</code>的<code>p</code>是否能被索引<code>[0,j]</code>的<code>s</code>匹配。</p>\n<p>如果<code>p[i]===s[j] || p[i]==='.'</code>，说明它们匹配，<code>dp[i][j]=dp[i-1][j-1]</code>。</p>\n<p>如果不匹配，但是<code>p[i]==='*'</code>，</p>\n<ol>\n<li>如果<code>p</code>的前一个能和当前<code>s</code>匹配并且<code>dp[i][j-1]===true</code>，说明<code>*</code>可以延长上一个的<code>p</code>来匹配当前的<code>s</code>；</li>\n<li>如果上面条件不符合，但是<code>dp[i-2][j]===true</code>，也就是说前2个的<code>p</code>能和当前<code>s</code>匹配，那么<code>*</code>可以作为数量<code>0</code>,相当与忽略前一个<code>p</code>。</li>\n</ol>\n",
  "content": "<p>给你一个字符串&nbsp;<code>s</code>&nbsp;和一个字符规律&nbsp;<code>p</code>，请你来实现一个支持 <code>&#39;.&#39;</code>&nbsp;和&nbsp;<code>&#39;*&#39;</code>&nbsp;的正则表达式匹配。</p>\n\n<pre>&#39;.&#39; 匹配任意单个字符\n&#39;*&#39; 匹配零个或多个前面的那一个元素\n</pre>\n\n<p>所谓匹配，是要涵盖&nbsp;<strong>整个&nbsp;</strong>字符串&nbsp;<code>s</code>的，而不是部分字符串。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>.</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong> &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;因为 &#39;*&#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#39;a&#39;。因此，字符串 &quot;aa&quot; 可被视为 &#39;a&#39; 重复了一次。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&quot;.*&quot; 表示可匹配零个或多个（&#39;*&#39;）任意字符（&#39;.&#39;）。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;因为 &#39;*&#39; 表示零个或多个，这里 &#39;c&#39; 为 0 个, &#39;a&#39; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>输出:</strong> false</pre>\n"
}
