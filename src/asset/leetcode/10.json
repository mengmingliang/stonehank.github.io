{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isMatch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, p</span>) </span>{\n  <span class=\"hljs-comment\">// let newReg=new RegExp(`^${p}$`)</span>\n  <span class=\"hljs-comment\">// return newReg.test(s)</span>\n  \n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;p.length+<span class=\"hljs-number\">1</span>;i++){\n    dp[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;s.length+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">0</span> &amp;&amp; j===<span class=\"hljs-number\">0</span>)dp[i][j]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p[i<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-string\">\"*\"</span> &amp;&amp; j===<span class=\"hljs-number\">0</span>){\n        dp[i][j]=dp[i<span class=\"hljs-number\">-2</span>][j]\n      }<span class=\"hljs-keyword\">else</span>{\n        dp[i][j]=<span class=\"hljs-literal\">false</span>\n      }\n      \n    }\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;dp.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;dp[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> r=i<span class=\"hljs-number\">-1</span>,c=j<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">if</span>(p[r]===s[c] || p[r]===<span class=\"hljs-string\">'.'</span>){\n        <span class=\"hljs-keyword\">if</span>(dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])dp[i][j]=<span class=\"hljs-literal\">true</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p[r]===<span class=\"hljs-string\">\"*\"</span>){\n        <span class=\"hljs-keyword\">if</span>(((p[r<span class=\"hljs-number\">-1</span>]===s[c] || p[r<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-string\">\".\"</span>) &amp;&amp; dp[i][j<span class=\"hljs-number\">-1</span>]) || dp[i<span class=\"hljs-number\">-2</span>][j])dp[i][j]=<span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n  \n  <span class=\"hljs-keyword\">return</span> dp[dp.length<span class=\"hljs-number\">-1</span>][dp[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "regular-expression-matching",
  "content": "<p>给定一个字符串&nbsp;(<code>s</code>) 和一个字符模式&nbsp;(<code>p</code>)。实现支持 <code>&#39;.&#39;</code>&nbsp;和&nbsp;<code>&#39;*&#39;</code>&nbsp;的正则表达式匹配。</p>\n\n<pre>&#39;.&#39; 匹配任意单个字符。\n&#39;*&#39; 匹配零个或多个前面的元素。\n</pre>\n\n<p>匹配应该覆盖<strong>整个</strong>字符串&nbsp;(<code>s</code>) ，而不是部分字符串。</p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母。</li>\n\t<li><code>p</code>&nbsp;可能为空，且只包含从&nbsp;<code>a-z</code>&nbsp;的小写字母，以及字符&nbsp;<code>.</code>&nbsp;和&nbsp;<code>*</code>。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>输出:</strong> false\n<strong>解释:</strong> &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;*&#39; 代表可匹配零个或多个前面的元素, 即可以匹配 &#39;a&#39; 。因此, 重复 &#39;a&#39; 一次, 字符串可变为 &quot;aa&quot;。\n</pre>\n\n<p><strong>示例&nbsp;3:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&quot;.*&quot; 表示可匹配零个或多个(&#39;*&#39;)任意字符(&#39;.&#39;)。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>输出:</strong> true\n<strong>解释:</strong>&nbsp;&#39;c&#39; 可以不被重复, &#39;a&#39; 可以被重复一次。因此可以匹配字符串 &quot;aab&quot;。\n</pre>\n\n<p><strong>示例 5:</strong></p>\n\n<pre><strong>输入:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>输出:</strong> false</pre>\n"
}
