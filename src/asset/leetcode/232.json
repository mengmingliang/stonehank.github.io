{
  "code": [
    "/**\n * Initialize your data structure here.\n */\n\nfunction Stack(){\n    let stack=[]\n    this.push=function(val){\n      stack.push(val)\n    }\n    this.peek=function(){\n      return stack[stack.length-1]\n    }\n    this.pop=function(){\n      return stack.pop()\n    }\n    this.size=function(){\n      return stack.length\n    }\n    this.isEmpty=function(){\n      return stack.length===0\n    }\n  }\n\n\nvar MyQueue = function() {\n    this.stack1=new Stack()\n    this.stack2=new Stack()\n};\n\n/**\n * Push element x to the back of queue. \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.stack1.push(x) \n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n  if(this.stack2.isEmpty()){\n    while(!this.stack1.isEmpty()){\n      this.stack2.push(this.stack1.pop())\n    }\n  }\n    return this.stack2.isEmpty() ? \n      null :\n      this.stack2.pop()\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n  if(this.stack2.isEmpty()){\n    while(!this.stack1.isEmpty()){\n      this.stack2.push(this.stack1.pop())\n    }\n  }\n    return this.stack2.isEmpty() ? \n      null :\n      this.stack2.peek()\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return this.stack1.isEmpty() && this.stack2.isEmpty()\n};\n\n/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = Object.create(MyQueue).createNew()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */"
  ],
  "titleSlug": "implement-queue-using-stacks",
  "content": "<p>Implement the following operations of a queue using stacks.</p>\r\n\r\n<ul>\r\n\t<li>push(x) -- Push element x to the back of queue.</li>\r\n\t<li>pop() -- Removes the element from in front of queue.</li>\r\n\t<li>peek() -- Get the front element.</li>\r\n\t<li>empty() -- Return whether the queue is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nMyQueue queue = new MyQueue();\r\n\r\nqueue.push(1);\r\nqueue.push(2);  \r\nqueue.peek();  // returns 1\r\nqueue.pop();   // returns 1\r\nqueue.empty(); // returns false</pre>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>You must use <i>only</i> standard operations of a stack -- which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\r\n\t<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\r\n\t<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\r\n</ul>\r\n",
  "translatedContent": "<p>使用栈实现队列的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 将一个元素放入队列的尾部。</li>\n\t<li>pop() -- 从队列首部移除元素。</li>\n\t<li>peek() -- 返回队列首部的元素。</li>\n\t<li>empty() -- 返回队列是否为空。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用标准的栈操作 -- 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>\n\t<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n\t<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li>\n</ul>\n"
}
