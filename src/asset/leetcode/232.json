{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MyQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.stack1=[]\n  <span class=\"hljs-keyword\">this</span>.stack2=[]\n};\n\n<span class=\"hljs-comment\">/**\n * Push element x to the back of queue. \n * @param {number} x\n * @return {void}\n */</span>\nMyQueue.prototype.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.stack1.push(x)\n};\n\n<span class=\"hljs-comment\">/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */</span>\nMyQueue.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.peek()\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack2.pop()\n};\n\n<span class=\"hljs-comment\">/**\n * Get the front element.\n * @return {number}\n */</span>\nMyQueue.prototype.peek = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.stack2.length===<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">this</span>.stack1.length&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">this</span>.stack2.push(<span class=\"hljs-keyword\">this</span>.stack1.pop())\n    }    \n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack2[<span class=\"hljs-keyword\">this</span>.stack2.length<span class=\"hljs-number\">-1</span>]\n};\n\n<span class=\"hljs-comment\">/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */</span>\nMyQueue.prototype.empty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack1.length===<span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.stack2.length===<span class=\"hljs-number\">0</span> \n};\n\n<span class=\"hljs-comment\">/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "implement-queue-using-stacks",
  "hasThinking": false,
  "content": "<p>使用栈实现队列的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 将一个元素放入队列的尾部。</li>\n\t<li>pop() -- 从队列首部移除元素。</li>\n\t<li>peek() -- 返回队列首部的元素。</li>\n\t<li>empty() -- 返回队列是否为空。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用标准的栈操作 -- 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>\n\t<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n\t<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li>\n</ul>\n"
}
