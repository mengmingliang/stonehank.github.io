{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> singleNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> a=<span class=\"hljs-number\">0</span>,b=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> nums){\n    a=(a^n) &amp; ~b\n    b=(b^n) &amp; ~a\n  }\n  <span class=\"hljs-keyword\">return</span> a\n};\n</code></pre>\n"
  ],
  "titleSlug": "single-number-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>对于时间<code>O(n)</code>，空间<code>O(1)</code>的算法，需要编写一个状态机，当一个数出现<code>3</code>次，会抵消。</p>\n<p>如果单变量使用<code>^</code>，只能抵消偶数次数，如果要<code>3</code>次抵消，必须要有2个变量同时<code>^</code>。</p>\n<p><code>a=a^nums[i]</code></p>\n<p><code>b=b^nums[i]</code></p>\n<p>但仅仅这样两个变量完全一致，无法<code>3</code>次抵消。</p>\n<p>因此还需要使用<code>~</code>，<code>~</code>的作用是将<code>0</code>变为<code>1</code>，<code>1</code>变为<code>0</code>，同时也可以将当前状态逆转。</p>\n<p><code>a=(a^nums[i]) ~ b</code></p>\n<p><code>b=(b^nums[i]) ~ a</code></p>\n<p>例如一个数组<code>[2,2,2,2,2,2]</code>，它每次的<code>a</code>和<code>b</code>输出值为<code>2,0</code>，<code>0,2</code>，<code>0,0</code>，<code>2,0</code>，<code>0,2</code>，<code>0,0</code>，每<code>3</code>次置零。</p>\n",
  "content": "<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p>\n\n<p><strong>说明：</strong></p>\n\n<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,2,3,2]\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> [0,1,0,1,0,1,99]\n<strong>输出:</strong> 99</pre>\n"
}
