{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> printTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHeight</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(getHeight(node.left),getHeight(node.right))+<span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bfsResult</span>(<span class=\"hljs-params\">arr,col,row,resultArr,depth</span>)</span>{\n        <span class=\"hljs-keyword\">while</span>(depth&gt;<span class=\"hljs-number\">0</span>){\n            <span class=\"hljs-keyword\">let</span> temp=[]\n            <span class=\"hljs-keyword\">if</span>(col)col=<span class=\"hljs-built_in\">Math</span>.floor(col/<span class=\"hljs-number\">2</span>)\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n                <span class=\"hljs-keyword\">if</span>(arr[i])resultArr[row-depth][col+(i*<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,depth))]=arr[i].val+<span class=\"hljs-string\">''</span>\n                temp.push(arr[i]?arr[i].left:<span class=\"hljs-literal\">null</span>)\n                temp.push(arr[i]?arr[i].right:<span class=\"hljs-literal\">null</span>)\n            }\n            depth--\n            arr=temp            \n        }\n    }    \n    <span class=\"hljs-keyword\">let</span> col=<span class=\"hljs-number\">0</span>,row=getHeight(root),resultArr=[]\n    col=<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,row)<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;row;i++){\n        resultArr[i]=[]\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;col;j++){\n            resultArr[i][j]=<span class=\"hljs-string\">''</span>\n        }\n    }\n    bfsResult([root],col,row,resultArr,row)\n    <span class=\"hljs-keyword\">return</span> resultArr\n    \n};\n</code></pre>\n"
  ],
  "titleSlug": "print-binary-tree",
  "translatedContent": "<p>在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：</p>\n\n<ol>\n\t<li>行数&nbsp;<code>m</code>&nbsp;应当等于给定二叉树的高度。</li>\n\t<li>列数&nbsp;<code>n</code>&nbsp;应当总是奇数。</li>\n\t<li>根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（<strong>左下部分和右下部分</strong>）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。</li>\n\t<li>每个未使用的空间应包含一个空的字符串<code>&quot;&quot;</code>。</li>\n\t<li>使用相同的规则输出子树。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n     1\n    /\n   2\n<strong>输出:</strong>\n[[&quot;&quot;, &quot;1&quot;, &quot;&quot;],\n [&quot;2&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n     1\n    / \\\n   2   3\n    \\\n     4\n<strong>输出:</strong>\n[[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<strong>输出:</strong>\n[[&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;5&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;3&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;4&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>注意:</strong> 二叉树的高度在范围 [1, 10] 中。</p>\n"
}
