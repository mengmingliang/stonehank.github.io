{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> countSubstrings = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-comment\">// let count=0</span>\n    <span class=\"hljs-comment\">// function checkIs(str,lo,hi){</span>\n    <span class=\"hljs-comment\">//     while(lo&gt;=0 &amp;&amp; hi&lt;s.length &amp;&amp; str[lo--]===str[hi++] ){</span>\n    <span class=\"hljs-comment\">//         count++;</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// for(let i=0;i&lt;s.length;i++){</span>\n    <span class=\"hljs-comment\">//     // 检查奇数</span>\n    <span class=\"hljs-comment\">//     checkIs(s,i,i) </span>\n    <span class=\"hljs-comment\">//     // 偶数</span>\n    <span class=\"hljs-comment\">//     checkIs(s,i,i+1)</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// return count;</span>\n  \n  <span class=\"hljs-keyword\">let</span> n=s.length\n  <span class=\"hljs-keyword\">let</span> aux=<span class=\"hljs-built_in\">Array</span>(n).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-literal\">false</span>))\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(n).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>))\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    aux[i][i]=<span class=\"hljs-literal\">true</span>\n    dp[i][i]=<span class=\"hljs-number\">1</span>\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n-i;j++){\n      <span class=\"hljs-keyword\">let</span> k=j+i\n      dp[j][k]=dp[j+<span class=\"hljs-number\">1</span>][k]+dp[j][k<span class=\"hljs-number\">-1</span>]-dp[j+<span class=\"hljs-number\">1</span>][k<span class=\"hljs-number\">-1</span>]\n      <span class=\"hljs-keyword\">if</span>(s[j]===s[k]){\n        <span class=\"hljs-keyword\">if</span> (aux[j+<span class=\"hljs-number\">1</span>][k<span class=\"hljs-number\">-1</span>] || j+<span class=\"hljs-number\">1</span>&gt;k<span class=\"hljs-number\">-1</span>){\n          dp[j][k]+=<span class=\"hljs-number\">1</span>\n          aux[j][k]=<span class=\"hljs-literal\">true</span>\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][n<span class=\"hljs-number\">-1</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "palindromic-substrings",
  "hasThinking": false,
  "content": "<p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p>\n\n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;abc&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong> 三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> &quot;aaa&quot;\n<strong>输出:</strong> 6\n<strong>说明:</strong> 6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>输入的字符串长度不会超过1000。</li>\n</ol>\n"
}
