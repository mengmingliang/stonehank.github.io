{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isValid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;S.length;i++){\n    stack.push(S[i])\n    <span class=\"hljs-keyword\">let</span> len=stack.length\n    <span class=\"hljs-keyword\">if</span>(len&gt;<span class=\"hljs-number\">2</span> &amp;&amp; stack[len<span class=\"hljs-number\">-1</span>]===<span class=\"hljs-string\">\"c\"</span> &amp;&amp; stack[len<span class=\"hljs-number\">-2</span>]===<span class=\"hljs-string\">\"b\"</span> &amp;&amp; stack[len<span class=\"hljs-number\">-3</span>]===<span class=\"hljs-string\">\"a\"</span>){\n      stack.pop()\n      stack.pop()\n      stack.pop()\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(stack.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "check-if-word-is-valid-after-substitutions",
  "hasThinking": false,
  "content": "<p>给定有效字符串&nbsp;<code>&quot;abc&quot;</code>。</p>\n\n<p>对于任何有效的字符串 <code>V</code>，我们可以将 <code>V</code> 分成两个部分 <code>X</code> 和 <code>Y</code>，使得 <code>X + Y</code>（<code>X</code> 与 <code>Y</code> 连接）等于 <code>V</code>。（<code>X</code>&nbsp;或 <code>Y</code> 可以为空。）那么，<code>X + &quot;abc&quot; + Y</code> 也同样是有效的。</p>\n\n<p>例如，如果 <code>S = &quot;abc&quot;</code>，则有效字符串的示例是：<code>&quot;abc&quot;</code>，<code>&quot;aabcbc&quot;</code>，<code>&quot;abcabc&quot;</code>，<code>&quot;abcabcababcc&quot;</code>。<strong>无效</strong>字符串的示例是：<code>&quot;abccba&quot;</code>，<code>&quot;ab&quot;</code>，<code>&quot;cababc&quot;</code>，<code>&quot;bac&quot;</code>。</p>\n\n<p>如果给定字符串 <code>S</code> 有效，则返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>&quot;aabcbc&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>\n从有效字符串 &quot;abc&quot; 开始。\n然后我们可以在 &quot;a&quot; 和 &quot;bc&quot; 之间插入另一个 &quot;abc&quot;，产生 &quot;a&quot; + &quot;abc&quot; + &quot;bc&quot;，即 &quot;aabcbc&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abcabcababcc&quot;\n<strong>输出：</strong>true\n<strong>解释：</strong>\n&quot;abcabcabc&quot; 是有效的，它可以视作在原串后连续插入 &quot;abc&quot;。\n然后我们可以在最后一个字母之前插入 &quot;abc&quot;，产生 &quot;abcabcab&quot; + &quot;abc&quot; + &quot;c&quot;，即 &quot;abcabcababcc&quot;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abccba&quot;\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>&quot;cababc&quot;\n<strong>输出：</strong>false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S[i]</code> 为&nbsp;<code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>、或&nbsp;<code>&#39;c&#39;</code></li>\n</ol>\n\n<p>&nbsp;</p>\n"
}
