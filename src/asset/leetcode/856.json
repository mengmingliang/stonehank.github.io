{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> scoreOfParentheses = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolveP</span>(<span class=\"hljs-params\">s</span>)</span>{\n        <span class=\"hljs-comment\">// console.log(s)</span>\n        <span class=\"hljs-keyword\">if</span>(s.length===<span class=\"hljs-number\">0</span>){<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>}\n        <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">if</span>(s[<span class=\"hljs-number\">0</span>]===<span class=\"hljs-string\">\"(\"</span> &amp;&amp; s[<span class=\"hljs-number\">1</span>]===<span class=\"hljs-string\">\")\"</span>){\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>+(resolveP(s.substring(<span class=\"hljs-number\">2</span>)))\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n                <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"(\"</span>)count++\n                <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\")\"</span>)count--\n                <span class=\"hljs-keyword\">if</span>(count===<span class=\"hljs-number\">0</span>){\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>*(resolveP(s.substring(<span class=\"hljs-number\">1</span>,i)))+resolveP(s.substring(i+<span class=\"hljs-number\">1</span>))\n                }\n            }\n        }\n        \n    }\n    res=resolveP(S)\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "score-of-parentheses",
  "translatedContent": "<p>给定一个平衡括号字符串&nbsp;<code>S</code>，按下述规则计算该字符串的分数：</p>\n\n<ul>\n\t<li><code>()</code> 得 1 分。</li>\n\t<li><code>AB</code> 得&nbsp;<code>A + B</code>&nbsp;分，其中 A 和 B 是平衡括号字符串。</li>\n\t<li><code>(A)</code> 得&nbsp;<code>2 * A</code>&nbsp;分，其中 A 是平衡括号字符串。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入： </strong>&quot;()&quot;\n<strong>输出： </strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入： </strong>&quot;(())&quot;\n<strong>输出： </strong>2\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入： </strong>&quot;()()&quot;\n<strong>输出： </strong>2\n</pre>\n\n<p><strong>示例&nbsp;4：</strong></p>\n\n<pre><strong>输入： </strong>&quot;(()(()))&quot;\n<strong>输出： </strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;是平衡括号字符串，且只含有&nbsp;<code>(</code>&nbsp;和&nbsp;<code>)</code>&nbsp;。</li>\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\n</ol>\n"
}
