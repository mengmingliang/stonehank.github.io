{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @param {number} L\n * @param {number} R\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numSubarrayBoundedMax = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, L, R</span>) </span>{\n  <span class=\"hljs-comment\">// let finalRes=0</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;A.length;i++){</span>\n  <span class=\"hljs-comment\">//   if(A[i]&gt;R)continue</span>\n  <span class=\"hljs-comment\">//   var result=0,max=0</span>\n  <span class=\"hljs-comment\">//   backtrack(A,max,i)</span>\n  <span class=\"hljs-comment\">//   finalRes+=result</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// function backtrack(A,max,i){</span>\n  <span class=\"hljs-comment\">//   if(i&gt;=A.length)return</span>\n  <span class=\"hljs-comment\">//   max=Math.max(max,A[i])</span>\n  <span class=\"hljs-comment\">//   if(max&gt;R)return</span>\n  <span class=\"hljs-comment\">//   else if(max&gt;=L &amp;&amp; max&lt;=R)result++</span>\n  <span class=\"hljs-comment\">//   backtrack(A,max,i+1)</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return finalRes</span>\n  \n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>,count=<span class=\"hljs-number\">0</span>,start=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n    <span class=\"hljs-keyword\">if</span>(A[i]&gt;R){\n      start=i+<span class=\"hljs-number\">1</span>\n      count=<span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(A[i]&gt;=L &amp;&amp; A[i]&lt;=R)count=i-start+<span class=\"hljs-number\">1</span>\n      sum+=count\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> sum\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-subarrays-with-bounded-maximum",
  "content": "<p>给定一个元素都是正整数的数组<code>A</code>&nbsp;，正整数 <code>L</code>&nbsp;以及&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)。</p>\n\n<p>求连续、非空且其中最大元素满足大于等于<code>L</code>&nbsp;小于等于<code>R</code>的子数组个数。</p>\n\n<pre><strong>例如 :</strong>\n<strong>输入:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>输出:</strong> 3\n<strong>解释:</strong> 满足条件的子数组: [2], [2, 1], [3].\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>L, R&nbsp; 和&nbsp;<code>A[i]</code> 都是整数，范围在&nbsp;<code>[0, 10^9]</code>。</li>\n\t<li>数组&nbsp;<code>A</code>&nbsp;的长度范围在<code>[1, 50000]</code>。</li>\n</ul>\n"
}
