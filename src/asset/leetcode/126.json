{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findLadders = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">beginWord, endWord, wordList</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> acode=<span class=\"hljs-string\">'a'</span>.charCodeAt(<span class=\"hljs-number\">0</span>)\n  wordList.unshift(beginWord)\n  <span class=\"hljs-keyword\">let</span> arr=[beginWord],visitedFrom=[]\n  <span class=\"hljs-keyword\">let</span> hash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">let</span> step=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;wordList.length;i++){\n    hash.set(wordList[i],i)\n    visitedFrom[i]=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  }\n  <span class=\"hljs-keyword\">if</span>(!hash.has(endWord))<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> findIt=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">if</span>(findIt)<span class=\"hljs-keyword\">break</span>\n    step++\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> cur=arr.shift()\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;cur.length;j++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;<span class=\"hljs-number\">26</span>;k++){\n          <span class=\"hljs-keyword\">let</span> replaceL=<span class=\"hljs-built_in\">String</span>.fromCharCode(k+acode)\n          <span class=\"hljs-keyword\">if</span>(replaceL===cur[j])<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> newWord=cur.substring(<span class=\"hljs-number\">0</span>,j)+replaceL+cur.substring(j+<span class=\"hljs-number\">1</span>)\n          <span class=\"hljs-keyword\">if</span>(hash.has(newWord)){\n            <span class=\"hljs-keyword\">let</span> newIdx=hash.get(newWord),\n                oldIdx=hash.get(cur)\n            <span class=\"hljs-keyword\">if</span>(visitedFrom[newIdx].has(oldIdx))<span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span>(newWord===endWord){\n              visitedFrom[newIdx].set(oldIdx,step)\n              findIt=<span class=\"hljs-literal\">true</span>\n            }\n            <span class=\"hljs-keyword\">if</span>(findIt)<span class=\"hljs-keyword\">continue</span>\n            visitedFrom[newIdx].set(oldIdx,step)\n            arr.push(newWord)\n          }\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">let</span> used=[]\n  <span class=\"hljs-keyword\">let</span> trace=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> lastIdx=hash.get(endWord)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [idx,step] <span class=\"hljs-keyword\">of</span> visitedFrom[lastIdx]){\n    <span class=\"hljs-keyword\">let</span> temp=[endWord,wordList[idx]]\n    dfs(idx,step,temp) \n  }\n  \n  <span class=\"hljs-keyword\">return</span> result\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">oldIdx,oldStep,temp</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(wordList[oldIdx]===beginWord)<span class=\"hljs-keyword\">return</span> result.push(temp.slice().reverse())\n    <span class=\"hljs-keyword\">let</span> nxt=visitedFrom[oldIdx]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [newIdx,newStep] <span class=\"hljs-keyword\">of</span> nxt){\n     <span class=\"hljs-keyword\">if</span>(used[newIdx])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(newStep&gt;=oldStep || newStep&gt;step)<span class=\"hljs-keyword\">continue</span>\n      used[newIdx]=<span class=\"hljs-literal\">true</span>\n      temp.push(wordList[newIdx])\n      dfs(newIdx,newStep,temp)\n      temp.pop()\n      used[newIdx]=<span class=\"hljs-literal\">false</span> \n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "word-ladder-ii",
  "hasThinking": false,
  "content": "<p>给定两个单词（<em>beginWord</em> 和 <em>endWord</em>）和一个字典 <em>wordList</em>，找出所有从 <em>beginWord </em>到 <em>endWord </em>的最短转换序列。转换需遵循如下规则：</p>\n\n<ol>\n\t<li>每次转换只能改变一个字母。</li>\n\t<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>如果不存在这样的转换序列，返回一个空列表。</li>\n\t<li>所有单词具有相同的长度。</li>\n\t<li>所有单词只由小写字母组成。</li>\n\t<li>字典中不存在重复的单词。</li>\n\t<li>你可以假设 <em>beginWord</em> 和 <em>endWord </em>是非空的，且二者不相同。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>输出:</strong>\n[\n  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\n&nbsp; [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>输出: </strong>[]\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; 不在字典中，所以不存在符合要求的转换序列。</pre>\n"
}
