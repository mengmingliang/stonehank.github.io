{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findLadders = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">beginWord, endWord, wordList</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;wordList.length;i++){\n    hash.set(wordList[i],i)\n  }\n  <span class=\"hljs-keyword\">let</span> mem=<span class=\"hljs-built_in\">Array</span>(wordList.length).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> temp=<span class=\"hljs-built_in\">Array</span>(wordList.length).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> arr=[[beginWord,beginWord]]\n  <span class=\"hljs-keyword\">let</span> reach=<span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> [cur,str]=arr.shift()\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;cur.length;j++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;<span class=\"hljs-number\">26</span>;k++){\n          <span class=\"hljs-keyword\">let</span> repl=<span class=\"hljs-built_in\">String</span>.fromCharCode(k+<span class=\"hljs-number\">97</span>)\n          <span class=\"hljs-keyword\">if</span>(repl===cur[j])<span class=\"hljs-keyword\">continue</span>\n          <span class=\"hljs-keyword\">let</span> newS=cur.substring(<span class=\"hljs-number\">0</span>,j)+repl+cur.substring(j+<span class=\"hljs-number\">1</span>)\n          <span class=\"hljs-keyword\">if</span>(hash.has(newS)){\n            <span class=\"hljs-keyword\">let</span> id=hash.get(newS)\n            <span class=\"hljs-keyword\">if</span>(mem[id])<span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span>(newS===endWord)reach=<span class=\"hljs-literal\">true</span>\n            arr.push([newS,str+<span class=\"hljs-string\">'-'</span>+newS])\n            temp[id]=<span class=\"hljs-literal\">true</span>\n          }\n        }\n      }\n    }\n    mem=temp.slice()\n    <span class=\"hljs-keyword\">if</span>(reach)<span class=\"hljs-keyword\">break</span>\n  }\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n    <span class=\"hljs-keyword\">if</span>(arr[i][<span class=\"hljs-number\">0</span>]===endWord) \n      result.push(arr[i][<span class=\"hljs-number\">1</span>].split(<span class=\"hljs-string\">'-'</span>))\n  }\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "word-ladder-ii",
  "hasThinking": false,
  "content": "<p>给定两个单词（<em>beginWord</em> 和 <em>endWord</em>）和一个字典 <em>wordList</em>，找出所有从 <em>beginWord </em>到 <em>endWord </em>的最短转换序列。转换需遵循如下规则：</p>\n\n<ol>\n\t<li>每次转换只能改变一个字母。</li>\n\t<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>如果不存在这样的转换序列，返回一个空列表。</li>\n\t<li>所有单词具有相同的长度。</li>\n\t<li>所有单词只由小写字母组成。</li>\n\t<li>字典中不存在重复的单词。</li>\n\t<li>你可以假设 <em>beginWord</em> 和 <em>endWord </em>是非空的，且二者不相同。</li>\n</ul>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>输出:</strong>\n[\n  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\n&nbsp; [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>输出: </strong>[]\n\n<strong>解释:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; 不在字典中，所以不存在符合要求的转换序列。</pre>\n"
}
