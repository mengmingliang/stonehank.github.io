{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minDeletionSize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A[<span class=\"hljs-number\">0</span>].length;i++){\n    dp[i]=<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> rightCol=<span class=\"hljs-number\">0</span>;rightCol&lt;A[<span class=\"hljs-number\">0</span>].length;rightCol++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> leftCol=<span class=\"hljs-number\">0</span>;leftCol&lt;rightCol;leftCol++){\n      <span class=\"hljs-keyword\">let</span> allPass=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> row=<span class=\"hljs-number\">0</span>;row&lt;A.length;row++){\n        <span class=\"hljs-keyword\">if</span>(A[row][leftCol]&gt;A[row][rightCol]){\n          allPass=<span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-keyword\">break</span>\n        }\n      }\n\n      <span class=\"hljs-keyword\">if</span>(allPass){\n        dp[rightCol]=<span class=\"hljs-built_in\">Math</span>.max(dp[leftCol]+<span class=\"hljs-number\">1</span>,dp[rightCol])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> min=A[<span class=\"hljs-number\">0</span>].length<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;dp.length;i++){\n    min=<span class=\"hljs-built_in\">Math</span>.min(A[<span class=\"hljs-number\">0</span>].length-dp[i],min)\n  }\n  <span class=\"hljs-keyword\">return</span> min\n};\n</code></pre>\n"
  ],
  "titleSlug": "delete-columns-to-make-sorted-iii",
  "content": "<p>给定由&nbsp;<code>N</code>&nbsp;个小写字母字符串组成的数组&nbsp;<code>A</code>，其中每个字符串长度相等。</p>\n\n<p>选取一个删除索引序列，对于&nbsp;<code>A</code>&nbsp;中的每个字符串，删除对应每个索引处的字符。</p>\n\n<p>比如，有&nbsp;<code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code>，删除索引序列&nbsp;<code>{0, 1, 4}</code>，删除后&nbsp;<code>A</code>&nbsp;为<code>[&quot;bc&quot;,&quot;az&quot;]</code>。</p>\n\n<p>假设，我们选择了一组删除索引&nbsp;<code>D</code>，那么在执行删除操作之后，最终得到的数组的行中的每个元素都是按<strong>字典序</strong>排列的。</p>\n\n<p>清楚起见，<code>A[0]</code>&nbsp;是按字典序排列的（即，<code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>），<code>A[1]</code>&nbsp;是按字典序排列的（即，<code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>），依此类推。</p>\n\n<p>请你返回&nbsp;<code>D.length</code>&nbsp;的最小可能值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;babca&quot;,&quot;bbazb&quot;]\n<strong>输出：</strong>3\n<strong>解释：\n</strong>删除 0、1 和 4 这三列后，最终得到的数组是 A = [&quot;bc&quot;, &quot;az&quot;]。\n这两行是分别按字典序排列的（即，A[0][0] &lt;= A[0][1] 且 A[1][0] &lt;= A[1][1]）。\n注意，A[0] &gt; A[1] &mdash;&mdash; 数组 A 不一定是按字典序排列的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;edcba&quot;]\n<strong>输出：</strong>4\n<strong>解释：</strong>如果删除的列少于 4 列，则剩下的行都不会按字典序排列。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]\n<strong>输出：</strong>0\n<strong>解释：</strong>所有行都已按字典序排列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n"
}
