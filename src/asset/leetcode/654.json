{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar constructMaximumBinaryTree = function(nums) {\n    function findMax(arr){\n        let arrL=null,arrR=null,index,max=-1;\n        for(let i=0;i<arr.length;i++){\n            if(arr[i]>max){\n                max=arr[i]\n                index=i;\n            }\n        }\n        if(index!==0){arrL=arr.slice(0,index)}\n        if(index!==arr.length-1){arrR=arr.slice(index+1,arr.length)}\n        return {max,arrL,arrR}\n    }\n\n    function ir(arr){\n         let obj=findMax(arr)\n        let tree=new TreeNode(obj.max)\n        tree.left=obj.arrL?ir(obj.arrL):null\n        tree.right=obj.arrR?ir(obj.arrR):null\n       \n        return tree\n    }\n    return ir(nums)\n  \n  \n};"
  ],
  "titleSlug": "maximum-binary-tree",
  "content": "<p>\r\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\r\n<ol>\r\n<li>The root is the maximum number in the array. </li>\r\n<li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li>\r\n<li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li> \r\n</ol>\r\n</p>\r\n\r\n<p>\r\nConstruct the maximum tree by the given array and output the root node of this tree.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,2,1,6,0,5]\r\n<b>Output:</b> return the tree root node representing the following tree:\r\n\r\n      6\r\n    /   \\\r\n   3     5\r\n    \\    / \r\n     2  0   \r\n       \\\r\n        1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The size of the given array will be in the range [1,1000].</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p>\n\n<ol>\n\t<li>二叉树的根是数组中的最大元素。</li>\n\t<li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li>\n\t<li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li>\n</ol>\n\n<p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3,2,1,6,0,5]\n<strong>输入:</strong> 返回下面这棵树的根节点：\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的数组的大小在 [1, 1000] 之间。</li>\n</ol>\n"
}
