{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> constructMaximumBinaryTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findMax</span>(<span class=\"hljs-params\">arr</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> arrL=<span class=\"hljs-literal\">null</span>,arrR=<span class=\"hljs-literal\">null</span>,index,max=<span class=\"hljs-number\">-1</span>;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++){\n            <span class=\"hljs-keyword\">if</span>(arr[i]&gt;max){\n                max=arr[i]\n                index=i;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span>(index!==<span class=\"hljs-number\">0</span>){arrL=arr.slice(<span class=\"hljs-number\">0</span>,index)}\n        <span class=\"hljs-keyword\">if</span>(index!==arr.length<span class=\"hljs-number\">-1</span>){arrR=arr.slice(index+<span class=\"hljs-number\">1</span>,arr.length)}\n        <span class=\"hljs-keyword\">return</span> {max,arrL,arrR}\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ir</span>(<span class=\"hljs-params\">arr</span>)</span>{\n         <span class=\"hljs-keyword\">let</span> obj=findMax(arr)\n        <span class=\"hljs-keyword\">let</span> tree=<span class=\"hljs-keyword\">new</span> TreeNode(obj.max)\n        tree.left=obj.arrL?ir(obj.arrL):<span class=\"hljs-literal\">null</span>\n        tree.right=obj.arrR?ir(obj.arrR):<span class=\"hljs-literal\">null</span>\n       \n        <span class=\"hljs-keyword\">return</span> tree\n    }\n    <span class=\"hljs-keyword\">return</span> ir(nums)\n  \n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-binary-tree",
  "translatedContent": "<p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p>\n\n<ol>\n\t<li>二叉树的根是数组中的最大元素。</li>\n\t<li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li>\n\t<li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li>\n</ol>\n\n<p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [3,2,1,6,0,5]\n<strong>输入:</strong> 返回下面这棵树的根节点：\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定的数组的大小在 [1, 1000] 之间。</li>\n</ol>\n"
}
