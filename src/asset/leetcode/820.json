{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minimumLengthEncoding = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">words</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> map=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> word <span class=\"hljs-keyword\">of</span> words)map.set(word,<span class=\"hljs-literal\">true</span>)\n  words.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>b.length-a.length)\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;words.length;i++){\n    <span class=\"hljs-keyword\">if</span>(!map.has(words[i]))<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;words[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> s=words[i].substring(j)\n      <span class=\"hljs-keyword\">if</span>(map.has(s)){\n        map.delete(s)\n      }\n    }\n    len+=words[i].length+<span class=\"hljs-number\">1</span>\n    map.delete(words[i])\n  }\n  <span class=\"hljs-keyword\">return</span> len\n};\n</code></pre>\n"
  ],
  "titleSlug": "short-encoding-of-words",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>根据题意，一个单词如果是其他<strong>任何</strong>单词的后缀，那么这个单词可以忽略。</p>\n<p>使用<code>map</code>保存所有单词，然后按单词长度从长到短排序(因为长的可能包含短的)，对每个单词进行它的后缀检测，如果<code>map</code>存在这个后缀，\n从<code>map</code>中删除这个后缀，检查完毕，给当前<code>words[i]</code>添加<code>#</code>(也就是<code>len+=words[i].length+1</code>)，并且把当前单词也从<code>map</code>中删除。</p>\n",
  "content": "<p>给定一个单词列表，我们将这个列表编码成一个索引字符串&nbsp;<code>S</code>&nbsp;与一个索引列表 <code>A</code>。</p>\n\n<p>例如，如果这个列表是 <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>，我们就可以将其表示为 <code>S = &quot;time#bell#&quot;</code> 和 <code>indexes = [0, 2, 5]</code>。</p>\n\n<p>对于每一个索引，我们可以通过从字符串 <code>S</code>&nbsp;中索引的位置开始读取字符串，直到 &quot;#&quot; 结束，来恢复我们之前的单词列表。</p>\n\n<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\n<strong>输出:</strong> 10\n<strong>说明:</strong> S = <code>&quot;time#bell#&quot; ， indexes = [0, 2, 5</code>] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code></li>\n\t<li>每个单词都是小写字母 。</li>\n</ol>\n"
}
