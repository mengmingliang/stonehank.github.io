{
  "code": [
    "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimumLengthEncoding = function(words) {\n    let sum=0,curNew=null\n    let reverse=words.map(w=>{\n        sum+=w.length\n        return w.split('').reverse().join('')\n    }).sort()\n    // let reverse=[]\n    // for(let i=0;i<words.length;i++){\n    //     let newS=''\n    //     sum+=words[i].length\n    //     reverse.push(words[i].split('').reverse().join(''))\n    // }\n    // reverse.sort()\n    // console.log(reverse)\n   \n    for(let i=0;i<reverse.length;i++){\n        let cur=reverse[i]\n        if(curNew && cur.substr(0,curNew.length)===curNew){\n            sum-=curNew.length         \n        }else{\n            sum+=1\n        }\n      curNew=cur \n    }\n    return sum\n};"
  ],
  "titleSlug": "short-encoding-of-words",
  "content": "<p>Given a list of words, we may encode it by writing a reference string <code>S</code> and a list of indexes <code>A</code>.</p>\r\n\r\n<p>For example, if the list of words is <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>, we can write it as <code>S = &quot;time#bell#&quot;</code>&nbsp;and <code>indexes = [0, 2, 5]</code>.</p>\r\n\r\n<p>Then for each index, we will recover the word by reading from the reference string from that index until we reach a <code>&quot;#&quot;</code> character.</p>\r\n\r\n<p>What is the length of the shortest reference string S possible that encodes the given words?</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\r\n<strong>Output:</strong> 10\r\n<strong>Explanation:</strong> S = <code>&quot;time#bell#&quot; and indexes = [0, 2, 5</code>].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code>.</li>\r\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code>.</li>\r\n\t<li>Each word&nbsp;has only&nbsp;lowercase letters.</li>\r\n</ol>\r\n",
  "translatedContent": "<p>给定一个单词列表，我们将这个列表编码成一个索引字符串&nbsp;<code>S</code>&nbsp;与一个索引列表 <code>A</code>。</p>\n\n<p>例如，如果这个列表是 <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>，我们就可以将其表示为 <code>S = &quot;time#bell#&quot;</code> 和 <code>indexes = [0, 2, 5]</code>。</p>\n\n<p>对于每一个索引，我们可以通过从字符串 <code>S</code>&nbsp;中索引的位置开始读取字符串，直到 &quot;#&quot; 结束，来恢复我们之前的单词列表。</p>\n\n<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\n<strong>输出:</strong> 10\n<strong>说明:</strong> S = <code>&quot;time#bell#&quot; ， indexes = [0, 2, 5</code>] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code></li>\n\t<li>每个单词都是小写字母 。</li>\n</ol>\n"
}
