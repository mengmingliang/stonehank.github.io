{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(matrix.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> m=matrix.length,n=matrix[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=m*n<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">while</span>(lo&lt;=hi){\n    <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">let</span> [x,y]=to2(mid)\n    <span class=\"hljs-keyword\">let</span> midV=matrix[x][y]\n    <span class=\"hljs-keyword\">if</span>(midV===target)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(midV&lt;target)lo=mid+<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> hi=mid<span class=\"hljs-number\">-1</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">to2</span>(<span class=\"hljs-params\">x</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">Math</span>.floor(x/n),x%n]\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">to1</span>(<span class=\"hljs-params\">[x,y]</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> x*m+y\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "search-a-2d-matrix",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>方法一：<code>O(m+n)</code>，<code>m</code>为行高，<code>n</code>为列宽。</p>\n<p>根据矩阵性质，从第一行开始，检查每一行的最后一列，如果存在<code>matrix[i][n-1]&gt;=target</code>，说明<code>target</code>只有可能在当前行，再遍历检查当前行。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> searchMatrix = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix, target</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(matrix.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> m=matrix.length,n=matrix[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">let</span> searchRow=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">if</span>(matrix[i][n<span class=\"hljs-number\">-1</span>]&gt;=target){\n      searchRow=i\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(searchRow==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">if</span>(matrix[searchRow][i]===target)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n<p>方法二：<code>O(log(m*n))</code></p>\n<p>思路是将二维矩阵转化为<strong>一维数组</strong>(当然不需要真的转换，只需索引在一维和二维互相转换)，通过索引进行二分搜索。</p>\n",
  "content": "<p>编写一个高效的算法来判断&nbsp;<em>m</em> x <em>n</em>&nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\n\n<ul>\n\t<li>每行中的整数从左到右按升序排列。</li>\n\t<li>每行的第一个整数大于前一行的最后一个整数。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n<strong>输出:</strong> false</pre>\n"
}
