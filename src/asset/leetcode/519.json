{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n_rows\n * @param {number} n_cols\n */</span>\n<span class=\"hljs-keyword\">var</span> Solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n_rows, n_cols</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.map ={}\n  <span class=\"hljs-keyword\">this</span>.r = n_rows;\n  <span class=\"hljs-keyword\">this</span>.c = n_cols;\n  <span class=\"hljs-keyword\">this</span>.total = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-keyword\">this</span>.c;\n};\n\n<span class=\"hljs-comment\">/**\n * @return {number[]}\n */</span>\nSolution.prototype.flip = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*<span class=\"hljs-keyword\">this</span>.total)\n  <span class=\"hljs-keyword\">this</span>.total--\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-keyword\">this</span>.map[r]==<span class=\"hljs-literal\">null</span> ? r : <span class=\"hljs-keyword\">this</span>.map[r]\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.map[<span class=\"hljs-keyword\">this</span>.total]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">this</span>.map[<span class=\"hljs-keyword\">this</span>.total]=<span class=\"hljs-keyword\">this</span>.total\n  <span class=\"hljs-keyword\">this</span>.map[r]=<span class=\"hljs-keyword\">this</span>.map[<span class=\"hljs-keyword\">this</span>.total]\n  <span class=\"hljs-comment\">// this.map[this.total]=x</span>\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">Math</span>.floor(x / <span class=\"hljs-keyword\">this</span>.c), x % <span class=\"hljs-keyword\">this</span>.c];\n};\n\n<span class=\"hljs-comment\">/**\n * @return {void}\n */</span>\nSolution.prototype.reset = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.total = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-keyword\">this</span>.c;\n  <span class=\"hljs-keyword\">this</span>.map ={}\n};\n\n<span class=\"hljs-comment\">/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(n_rows, n_cols)\n * var param_1 = obj.flip()\n * obj.reset()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "random-flip-matrix",
  "content": "<p>题中给出一个 <code>n</code> 行 <code>n</code> 列的二维矩阵<code> (n_rows,n_cols)</code>，且所有值被初始化为 0。要求编写一个 <code>flip</code> 函数，<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\">均匀随机</a>的将矩阵中的 0 变为 1，并返回该值的位置下标 <code>[row_id,col_id]</code>；同样编写一个 <code>reset</code> 函数，将所有的值都重新置为 0。<strong>尽量最少调用随机函数 Math.random()</strong>，并且优化时间和空间复杂度。</p>\n\n<p>注意:</p>\n\n<p>1.1 &lt;= n_rows, n_cols &lt;= 10000</p>\n\n<p>2. 0 &lt;= row.id &lt; n_rows 并且 0 &lt;= col.id &lt; n_cols</p>\n\n<p>3.当矩阵中没有值为 0 时，不可以调用 flip 函数</p>\n\n<p>4.调用 flip 和 reset 函数的次数加起来不会超过 1000 次</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\n[[2,3],[],[],[],[]]\n<strong>输出: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\n[[1,2],[],[],[],[]]\n<strong>输出: </strong>[null,[0,0],[0,1],null,[0,0]]</pre>\n\n<p><strong>输入语法解释：</strong></p>\n\n<p>输入包含两个列表：被调用的子程序和他们的参数。<code>Solution</code> 的构造函数有两个参数，分别为 <code>n_rows</code> 和 <code>n_cols</code>。<code>flip</code>&nbsp;和 <code>reset</code> 没有参数，参数总会以列表形式给出，哪怕该列表为空</p>\n"
}
