{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> networkDelayTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">times, N, K</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> graph=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N+<span class=\"hljs-number\">1</span>;i++){\n      graph[i]=[]\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times.length;i++){\n        <span class=\"hljs-keyword\">let</span> v=times[i][<span class=\"hljs-number\">0</span>],\n            w=times[i][<span class=\"hljs-number\">1</span>],\n            weight=times[i][<span class=\"hljs-number\">2</span>]\n        graph[v].push([w,weight])\n    }\n    \n  <span class=\"hljs-keyword\">let</span> distTo=[]\n  <span class=\"hljs-keyword\">let</span> queue=[]\n  <span class=\"hljs-keyword\">let</span> marked=[]\n  <span class=\"hljs-keyword\">let</span> V=N+<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;V;i++){\n    distTo[i]=<span class=\"hljs-literal\">Infinity</span>\n    marked[i]=<span class=\"hljs-literal\">false</span>\n  }\n  distTo[K]=<span class=\"hljs-number\">0</span>\n\n  queue.push(K)\n  <span class=\"hljs-keyword\">while</span>(queue.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=queue.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">from</span>=queue.pop()\n      <span class=\"hljs-keyword\">if</span>(marked[<span class=\"hljs-keyword\">from</span>])<span class=\"hljs-keyword\">continue</span>\n      marked[<span class=\"hljs-keyword\">from</span>]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">let</span> adj=graph[<span class=\"hljs-keyword\">from</span>]\n      <span class=\"hljs-keyword\">if</span>(adj.length===<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">from</span>!==N &amp;&amp; <span class=\"hljs-keyword\">from</span>!==<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">continue</span>\n      }\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;adj.length;j++){\n        <span class=\"hljs-keyword\">let</span> to=adj[j][<span class=\"hljs-number\">0</span>],weight=adj[j][<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">if</span>(!queue.includes(to)){\n          queue.push(to)\n        }\n        <span class=\"hljs-keyword\">if</span>(distTo[<span class=\"hljs-keyword\">from</span>]+weight&lt;distTo[to]){\n          distTo[to]=distTo[<span class=\"hljs-keyword\">from</span>]+weight\n          <span class=\"hljs-keyword\">if</span>(marked[to])marked[to]=<span class=\"hljs-literal\">false</span>\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;distTo.length;i++){\n    <span class=\"hljs-keyword\">if</span>(i===K)<span class=\"hljs-keyword\">continue</span>\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,distTo[i])\n  }\n  <span class=\"hljs-keyword\">return</span> max===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-number\">-1</span>:max\n};\n</code></pre>\n"
  ],
  "titleSlug": "network-delay-time",
  "translatedContent": "<p>有&nbsp;<code>N</code>&nbsp;个网络节点，标记为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>。</p>\n\n<p>给定一个列表&nbsp;<code>times</code>，表示信号经过<strong>有向</strong>边的传递时间。&nbsp;<code>times[i] = (u, v, w)</code>，其中&nbsp;<code>u</code>&nbsp;是源节点，<code>v</code>&nbsp;是目标节点， <code>w</code>&nbsp;是一个信号从源节点传递到目标节点的时间。</p>\n\n<p>现在，我们向当前的节点&nbsp;<code>K</code>&nbsp;发送了一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回&nbsp;<code>-1</code>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;的范围在&nbsp;<code>[1, 100]</code>&nbsp;之间。</li>\n\t<li><code>K</code>&nbsp;的范围在&nbsp;<code>[1, N]</code>&nbsp;之间。</li>\n\t<li><code>times</code>&nbsp;的长度在&nbsp;<code>[1, 6000]</code>&nbsp;之间。</li>\n\t<li>所有的边&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;都有&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;且&nbsp;<code>1 &lt;= w &lt;= 100</code>。</li>\n</ol>\n"
}
