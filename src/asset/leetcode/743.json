{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> networkDelayTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">times, N, K</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> shortestDis=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">Infinity</span>)\n  shortestDis[K]=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> graph=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>[])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times.length;i++){\n    <span class=\"hljs-keyword\">let</span> [u,v,w]=times[i]\n    graph[u].push([v,w])\n  }\n  <span class=\"hljs-keyword\">let</span> arr=[K],visited=<span class=\"hljs-built_in\">Array</span>(N+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">from</span>=arr.shift()\n      <span class=\"hljs-keyword\">if</span>(visited[<span class=\"hljs-keyword\">from</span>])<span class=\"hljs-keyword\">continue</span>\n      visited[<span class=\"hljs-keyword\">from</span>]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">let</span> adj=graph[<span class=\"hljs-keyword\">from</span>]\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;adj.length;j++){\n        <span class=\"hljs-keyword\">let</span> [to,lag]=adj[j]\n        <span class=\"hljs-keyword\">if</span>(shortestDis[to]&gt;shortestDis[<span class=\"hljs-keyword\">from</span>]+lag){\n          shortestDis[to]=shortestDis[<span class=\"hljs-keyword\">from</span>]+lag\n          visited[to]=<span class=\"hljs-literal\">false</span>\n          arr.push(to)\n        }\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;shortestDis.length;i++){\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,shortestDis[i])\n  }\n  <span class=\"hljs-keyword\">if</span>(max===<span class=\"hljs-literal\">Infinity</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "network-delay-time",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这是一个有向加权图，题目就是求从<code>K</code>出发，到任意点的最短距离的最大值。</p>\n<p><code>Dijkstra</code>算法，通过<code>BFS</code>不断求出下一组点的最短距离，如果发现存在更短的距离，则更新并且对该点重新执行<code>BFS</code>。</p>\n<p><code>Bellman Ford</code>算法，对于每一个点的每一条边，都计算一次，筛选出最短距离。</p>\n",
  "content": "<p>有&nbsp;<code>N</code>&nbsp;个网络节点，标记为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>。</p>\n\n<p>给定一个列表&nbsp;<code>times</code>，表示信号经过<strong>有向</strong>边的传递时间。&nbsp;<code>times[i] = (u, v, w)</code>，其中&nbsp;<code>u</code>&nbsp;是源节点，<code>v</code>&nbsp;是目标节点， <code>w</code>&nbsp;是一个信号从源节点传递到目标节点的时间。</p>\n\n<p>现在，我们向当前的节点&nbsp;<code>K</code>&nbsp;发送了一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回&nbsp;<code>-1</code>。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;的范围在&nbsp;<code>[1, 100]</code>&nbsp;之间。</li>\n\t<li><code>K</code>&nbsp;的范围在&nbsp;<code>[1, N]</code>&nbsp;之间。</li>\n\t<li><code>times</code>&nbsp;的长度在&nbsp;<code>[1, 6000]</code>&nbsp;之间。</li>\n\t<li>所有的边&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;都有&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;且&nbsp;<code>0 &lt;= w &lt;= 100</code>。</li>\n</ol>\n"
}
