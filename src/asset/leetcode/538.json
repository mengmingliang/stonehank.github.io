{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> convertBST = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node,sum</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span> node\n        <span class=\"hljs-keyword\">if</span>(node.right) sum=dfs(node.right,sum)\n        node.val+=sum\n        sum=node.val\n        <span class=\"hljs-keyword\">if</span>(node.left) sum=dfs(node.left,sum)\n        <span class=\"hljs-keyword\">return</span> sum\n    }\n    dfs(root,<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "convert-bst-to-greater-tree",
  "content": "<p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n\n<p><strong>例如：</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉搜索树:\n              5\n            /   \\\n           2     13\n\n<strong>输出:</strong> 转换为累加树:\n             18\n            /   \\\n          20     13\n</pre>\n"
}
