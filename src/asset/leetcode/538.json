{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar convertBST = function(root) {\n    function dfs(node,sum){\n        if(!node)return node\n        if(node.right) sum=dfs(node.right,sum)\n        node.val+=sum\n        sum=node.val\n        if(node.left) sum=dfs(node.left,sum)\n        return sum\n    }\n    dfs(root,0)\n    return root\n};"
  ],
  "titleSlug": "convert-bst-to-greater-tree",
  "content": "<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> The root of a Binary Search Tree like this:\r\n              5\r\n            /   \\\r\n           2     13\r\n\r\n<b>Output:</b> The root of a Greater Tree like this:\r\n             18\r\n            /   \\\r\n          20     13\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n\n<p><strong>例如：</strong></p>\n\n<pre>\n<strong>输入:</strong> 二叉搜索树:\n              5\n            /   \\\n           2     13\n\n<strong>输出:</strong> 转换为累加树:\n             18\n            /   \\\n          20     13\n</pre>\n"
}
