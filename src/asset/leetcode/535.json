{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Encodes a URL to a shortened URL.\n *\n * @param {string} longUrl\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">let</span> cacheL={}\n<span class=\"hljs-keyword\">let</span> cacheS={}\n\n<span class=\"hljs-keyword\">var</span> encode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">longUrl</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> commonUrl=<span class=\"hljs-string\">\"http://tinyurl.com/\"</span>\n    <span class=\"hljs-keyword\">let</span> shortUrl\n    <span class=\"hljs-keyword\">if</span>(cacheL[longUrl]){\n        <span class=\"hljs-keyword\">return</span> cacheL[longUrl]\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">// let alphabet=\"abcdefghijklmnABCDEFGHIJKLMN1234567890\";</span>\n        <span class=\"hljs-comment\">// let s=''</span>\n        <span class=\"hljs-comment\">// for(let i=0;i&lt;6;i++){</span>\n            <span class=\"hljs-comment\">// s+=alphabet[Math.floor(Math.random()*alphabet.length)]</span>\n        <span class=\"hljs-comment\">// }</span>\n        <span class=\"hljs-comment\">// return s</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*<span class=\"hljs-built_in\">Number</span>.MAX_SAFE_INTEGER).toString(<span class=\"hljs-number\">36</span>)\n    }\n    shortUrl=commonUrl+create();\n    <span class=\"hljs-keyword\">while</span>(cacheS[shortUrl]){\n        shortUrl=commonUrl+create();  \n    }\n    cacheS[shortUrl]=longUrl\n    cacheL[longUrl]=shortUrl\n\n    <span class=\"hljs-keyword\">return</span> shortUrl\n};\n\n<span class=\"hljs-comment\">/**\n * Decodes a shortened URL to its original URL.\n *\n * @param {string} shortUrl\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> decode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">shortUrl</span>) </span>{\n    \n    <span class=\"hljs-keyword\">if</span>(cacheS[shortUrl]){\n        <span class=\"hljs-keyword\">return</span> cacheS[shortUrl]\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Your functions will be called as such:\n * decode(encode(url));\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "encode-and-decode-tinyurl",
  "translatedContent": "<p>TinyURL是一种URL简化服务， 比如：当你输入一个URL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;时，它将返回一个简化的URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p>\n\n<p>要求：设计一个 TinyURL 的加密&nbsp;<code>encode</code>&nbsp;和解密&nbsp;<code>decode</code>&nbsp;的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p>\n"
}
