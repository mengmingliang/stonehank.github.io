{
  "code": [
    "/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let helper=[],index,index2\n    for(let i=0;i<numbers.length;i++){\n        let cur=numbers[i]\n        if(helper[cur]!==undefined){\n            if(target-cur>cur){\n                index=i\n                index2=helper[cur]\n            }else{\n                index2=i\n                index=helper[cur]                \n            }\n            break\n        }\n        else helper[target-cur]=i\n    }\n   return [index+1,index2+1]\n};"
  ],
  "titleSlug": "two-sum-ii-input-array-is-sorted",
  "content": "<p>Given an array of integers that is already <strong><em>sorted in ascending order</em></strong>, find two numbers such that they add up to a specific target number.</p>\r\n\r\n<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Your returned answers (both index1 and index2) are not zero-based.</li>\r\n\t<li>You may assume that each input would have <em>exactly</em> one solution and you may not use the <em>same</em> element twice.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> numbers = [2,7,11,15], target = 9\r\n<strong>Output:</strong> [1,2]\r\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</pre>\r\n",
  "translatedContent": "<p>给定一个已按照<strong><em>升序排列</em>&nbsp;</strong>的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n\n<p>函数应该返回这两个下标值<em> </em>index1 和 index2，其中 index1&nbsp;必须小于&nbsp;index2<em>。</em></p>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n\t<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> numbers = [2, 7, 11, 15], target = 9\n<strong>输出:</strong> [1,2]\n<strong>解释:</strong> 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</pre>\n"
}
