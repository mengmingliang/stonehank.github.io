{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numDecodings = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=[]\n  dp[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>\n  dp[<span class=\"hljs-number\">1</span>]=s[<span class=\"hljs-number\">0</span>]===<span class=\"hljs-string\">\"0\"</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;s.length;i++){\n    dp[i+<span class=\"hljs-number\">1</span>]=calc1(s[i])*dp[i]+calc2(s[i<span class=\"hljs-number\">-1</span>],s[i])*dp[i<span class=\"hljs-number\">-1</span>]\n  }\n  <span class=\"hljs-keyword\">return</span> dp[dp.length<span class=\"hljs-number\">-1</span>]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calc1</span>(<span class=\"hljs-params\">s</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">\"0\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calc2</span>(<span class=\"hljs-params\">s1,s2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> n=+(s1+s2)\n    <span class=\"hljs-keyword\">if</span>(n&lt;=<span class=\"hljs-number\">26</span> &amp;&amp; n&gt;=<span class=\"hljs-number\">10</span>){\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "decode-ways",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>DP，<code>dp[i+1]</code>为当前索引<code>i</code>以及之前的字符串有多少种组合，</p>\n<p>那么，如果存在一个<code>i</code>(i&gt;0)，那么<code>dp[i+1]=s[i]的组合*dp[i] + (s[i-1],s[i])的组合*dp[i-1]</code>。</p>\n<p>例如：<code>[1,3,6,2,1,2]</code>:</p>\n<p>当<code>i</code>为<code>2</code>，对应的<code>s[i]</code>为<code>6</code>，那么<code>dp[i+1]</code>就是<code>(6的组合 * [1,3]的组合) + ([3,6]的组合 * [1]的组合)</code>。</p>\n<p>如果索引<code>i</code>为<code>1</code>，那么前面只有1位数，因此我们初始默认<code>dp[0]=1</code>。</p>\n<p>最后就是组合的算法，<strong>1位数</strong>的组合计算就是除了输入为<code>&quot;0&quot;</code>返回<code>0</code>，其他都可以返回<code>1</code>。</p>\n<p><strong>2位数</strong>的组合计算，需要判断这个2位数是否在<code>[10,26]</code>之内，在则返回<code>1</code>，不在的返回<code>0</code>；\n如果一个2位数是<code>07</code>，也是同样返回<code>0</code>，这里不能当做1位数来计算，否则会重复。</p>\n",
  "content": "<p>一条包含字母&nbsp;<code>A-Z</code> 的消息通过以下方式进行了编码：</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>给定一个只包含数字的<strong>非空</strong>字符串，请计算解码方法的总数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> &quot;12&quot;\n<strong>输出:</strong> 2\n<strong>解释:</strong>&nbsp;它可以解码为 &quot;AB&quot;（1 2）或者 &quot;L&quot;（12）。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> &quot;226&quot;\n<strong>输出:</strong> 3\n<strong>解释:</strong>&nbsp;它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) 。\n</pre>\n"
}
