{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List&lt;Node&gt; children;\n\n    public Node() {}\n\n    public Node(int _val,List&lt;Node&gt; _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxDepth</span><span class=\"hljs-params\">(Node root)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-keyword\">int</span> max = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (Node child : root.children) { <span class=\"hljs-comment\">//replace left&amp;right to for loop</span>\n            <span class=\"hljs-keyword\">int</span> value = maxDepth(child);\n            \n            <span class=\"hljs-keyword\">if</span> (value &gt; max) {\n                max = value;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> max +<span class=\"hljs-number\">1</span>;\n    }\n}\n</code></pre>\n"
  ],
  "titleSlug": "maximum-depth-of-n-ary-tree",
  "content": "<p>给定一个 N 叉树，找到其最大深度。</p>\r\n\r\n<p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>我们应返回其最大深度，3。</p>\r\n\r\n<p><strong>说明:</strong></p>\r\n\r\n<ol>\r\n\t<li>树的深度不会超过&nbsp;<code>1000</code>。</li>\r\n\t<li>树的节点总不会超过&nbsp;<code>5000</code>。</li>\r\n</ol>"
}
