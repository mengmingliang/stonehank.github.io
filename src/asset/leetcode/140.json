{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string[]} wordDict\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> wordBreak = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, wordDict</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(wordDict.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> mem={}\n  <span class=\"hljs-keyword\">return</span> dfs(s)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">s</span>)</span>{\n    <span class=\"hljs-keyword\">if</span> (mem[s]) \n        <span class=\"hljs-keyword\">return</span> mem[s]\n        \n    <span class=\"hljs-keyword\">let</span> res = []  \n    <span class=\"hljs-keyword\">if</span> (s.length == <span class=\"hljs-number\">0</span>) {\n        res.push(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-keyword\">return</span> res;\n    }               \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> word <span class=\"hljs-keyword\">of</span> wordDict) {\n        <span class=\"hljs-keyword\">if</span> (s.startsWith(word)) {\n            <span class=\"hljs-keyword\">let</span> sublist = dfs(s.substring(word.length));\n          <span class=\"hljs-comment\">// console.log(sublist)</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> sub <span class=\"hljs-keyword\">of</span> sublist) {\n              <span class=\"hljs-comment\">// console.log(sub)</span>\n                res.push(word + (sub===<span class=\"hljs-string\">\"\"</span>?<span class=\"hljs-string\">\"\"</span>: <span class=\"hljs-string\">\" \"</span>) + sub) \n            }\n                         \n        }\n    }       \n    mem[s]=res\n    <span class=\"hljs-keyword\">return</span> res;\n  }\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "word-break-ii",
  "hasThinking": false,
  "content": "<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>分隔时可以重复使用字典中的单词。</li>\n\t<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;<code>catsanddog</code>&quot;\nwordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>\n<strong>输出:\n</strong><code>[\n&nbsp; &quot;cats and dog&quot;,\n&nbsp; &quot;cat sand dog&quot;\n]</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;pineapplepenapple&quot;\nwordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]\n<strong>输出:\n</strong>[\n&nbsp; &quot;pine apple pen apple&quot;,\n&nbsp; &quot;pineapple pen apple&quot;,\n&nbsp; &quot;pine applepen apple&quot;\n]\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:\n</strong>s = &quot;catsandog&quot;\nwordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>输出:\n</strong>[]\n</pre>\n"
}
