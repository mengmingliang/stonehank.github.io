{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} start\n * @param {string} end\n * @param {string[]} bank\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minMutation = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end, bank</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> aux=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validStep</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;a.length;i++){\n      <span class=\"hljs-keyword\">let</span> s=a[i],e=b[i]\n      <span class=\"hljs-keyword\">if</span>(s!==e)count++\n    }\n    <span class=\"hljs-keyword\">return</span> count===<span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(aux.length).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">str,step</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(str===end)min=<span class=\"hljs-built_in\">Math</span>.min(min,step)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;bank.length;i++){\n      <span class=\"hljs-keyword\">if</span>(used[i])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">if</span>(!validStep(str,bank[i]))<span class=\"hljs-keyword\">continue</span>\n      used[i]=<span class=\"hljs-literal\">true</span>\n      backtrack(bank[i],step+<span class=\"hljs-number\">1</span>)\n      used[i]=<span class=\"hljs-literal\">false</span>\n    }\n  }\n  backtrack(start,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> min===<span class=\"hljs-literal\">Infinity</span>?<span class=\"hljs-number\">-1</span>:min\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-genetic-mutation",
  "content": "<p>一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>中的任意一个。</p>\n\n<p>假设我们要调查一个基因序列的变化。<strong>一次</strong>基因变化意味着这个基因序列中的<strong>一个</strong>字符发生了变化。</p>\n\n<p>例如，基因序列由<code>&quot;AACCGGTT&quot;</code>&nbsp;变化至&nbsp;<code>&quot;AACCGGTA&quot;&nbsp;</code>即发生了一次基因变化。</p>\n\n<p>与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。</p>\n\n<p>现在给定3个参数 &mdash; start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>起始基因序列默认是合法的，但是它并不一定会出现在基因库中。</li>\n\t<li>所有的目标基因序列必须是合法的。</li>\n\t<li>假定起始基因序列与目标基因序列是不一样的。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AACCGGTA&quot;\nbank: [&quot;AACCGGTA&quot;]\n\n返回值: 1\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AAACGGTA&quot;\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\n\n返回值: 2\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\nstart: &quot;AAAAACCC&quot;\nend:   &quot;AACCCCCC&quot;\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\n\n返回值: 3\n</pre>\n"
}
