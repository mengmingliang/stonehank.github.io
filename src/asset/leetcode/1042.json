{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @param {number[][]} paths\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> gardenNoAdj = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N, paths</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> graph=<span class=\"hljs-built_in\">Array</span>(N).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>[])\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [v,w] <span class=\"hljs-keyword\">of</span> paths){\n    graph[v<span class=\"hljs-number\">-1</span>].push(w<span class=\"hljs-number\">-1</span>)\n    graph[w<span class=\"hljs-number\">-1</span>].push(v<span class=\"hljs-number\">-1</span>)\n  }\n  <span class=\"hljs-keyword\">let</span> color=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    fill(i)\n  }\n  <span class=\"hljs-keyword\">return</span> color\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fill</span>(<span class=\"hljs-params\">v</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> adj=graph[v]\n    <span class=\"hljs-keyword\">let</span> noValid=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;adj.length;i++){\n      <span class=\"hljs-keyword\">if</span>(color[adj[i]]!==<span class=\"hljs-number\">0</span>)noValid[color[adj[i]]]=<span class=\"hljs-literal\">true</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">4</span>;i++){\n      <span class=\"hljs-keyword\">if</span>(noValid[i])<span class=\"hljs-keyword\">continue</span>\n      color[v]=i\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "flower-planting-with-no-adjacent",
  "hasThinking": false,
  "content": "<p>有&nbsp;<code>N</code>&nbsp;个花园，按从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>N</code>&nbsp;标记。在每个花园中，你打算种下四种花之一。</p>\n\n<p><code>paths[i] = [x, y]</code>&nbsp;描述了花园&nbsp;<code>x</code> 到花园&nbsp;<code>y</code>&nbsp;的双向路径。</p>\n\n<p>另外，没有花园有 3 条以上的路径可以进入或者离开。</p>\n\n<p>你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。</p>\n\n<p>以数组形式返回选择的方案作为答案&nbsp;<code>answer</code>，其中&nbsp;<code>answer[i]</code>&nbsp;为在第&nbsp;<code>(i+1)</code>&nbsp;个花园中种植的花的种类。花的种类用 &nbsp;1, 2, 3,&nbsp;4 表示。保证存在答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>N = 3, paths = [[1,2],[2,3],[3,1]]\n<strong>输出：</strong>[1,2,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>N = 4, paths = [[1,2],[3,4]]\n<strong>输出：</strong>[1,2,1,2]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>N = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\n<strong>输出：</strong>[1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n\t<li><code>0 &lt;= paths.size &lt;= 20000</code></li>\n\t<li>不存在花园有 4 条或者更多路径可以进入或离开。</li>\n\t<li>保证存在答案。</li>\n</ul>\n"
}
