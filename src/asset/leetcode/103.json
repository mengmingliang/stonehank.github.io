{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class=\"hljs-keyword\">var</span> zigzagLevelOrder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n    <span class=\"hljs-keyword\">let</span> res=[]\n    <span class=\"hljs-keyword\">let</span> aux=[root]\n    <span class=\"hljs-keyword\">let</span> temp=[]\n    <span class=\"hljs-keyword\">let</span> line=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(aux.length&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">let</span> len=aux.length\n      res.push(aux.map(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span>=&gt;</span>node.val))\n      <span class=\"hljs-keyword\">let</span> start=len<span class=\"hljs-number\">-1</span>,end=<span class=\"hljs-number\">-1</span>;\n      <span class=\"hljs-keyword\">while</span>(start!==end){\n        <span class=\"hljs-keyword\">let</span> cur=aux[start]\n        <span class=\"hljs-keyword\">if</span>(line%<span class=\"hljs-number\">2</span>===<span class=\"hljs-number\">0</span>){\n          <span class=\"hljs-keyword\">if</span>(cur.right)temp.push(cur.right)\n          <span class=\"hljs-keyword\">if</span>(cur.left)temp.push(cur.left)\n        }<span class=\"hljs-keyword\">else</span>{\n          <span class=\"hljs-keyword\">if</span>(cur.left)temp.push(cur.left)        \n          <span class=\"hljs-keyword\">if</span>(cur.right)temp.push(cur.right)\n        }\n        start-=<span class=\"hljs-number\">1</span>\n      }\n      aux=temp\n      temp=[]\n      line++\n    }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-zigzag-level-order-traversal",
  "content": "<p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n\n<p>例如：<br>\n给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回锯齿形层次遍历如下：</p>\n\n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n"
}
