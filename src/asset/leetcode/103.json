{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar zigzagLevelOrder = function(root) {\n    if(!root)return []\n    let res=[]\n    let aux=[root]\n    let temp=[]\n    let line=0\n    while(aux.length>0){\n      let len=aux.length\n      res.push(aux.map(node=>node.val))\n      let start=len-1,end=-1;\n      while(start!==end){\n        let cur=aux[start]\n        if(line%2===0){\n          if(cur.right)temp.push(cur.right)\n          if(cur.left)temp.push(cur.left)\n        }else{\n          if(cur.left)temp.push(cur.left)        \n          if(cur.right)temp.push(cur.right)\n        }\n        start-=1\n      }\n      aux=temp\n      temp=[]\n      line++\n    }\n  return res\n};"
  ],
  "titleSlug": "binary-tree-zigzag-level-order-traversal",
  "content": "<p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its zigzag level order traversal as:<br />\r\n<pre>\r\n[\r\n  [3],\r\n  [20,9],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n\n<p>例如：<br>\n给定二叉树&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>返回锯齿形层次遍历如下：</p>\n\n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n"
}
