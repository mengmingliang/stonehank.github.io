{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} input\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> diffWaysToCompute = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">input</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> results=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;input.length;i++){\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-regexp\">/\\d/</span>.test(input[i]))<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> lastOpe=input[i]\n    <span class=\"hljs-keyword\">let</span> pre=diffWaysToCompute(input.substring(<span class=\"hljs-number\">0</span>,i)),\n        cur=diffWaysToCompute(input.substring(i+<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pre.length;i++){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;cur.length;j++){\n        <span class=\"hljs-keyword\">if</span>(lastOpe===<span class=\"hljs-string\">\"*\"</span>)results.push(pre[i]*cur[j])\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(lastOpe===<span class=\"hljs-string\">\"+\"</span>)results.push((+pre[i])+(+cur[j]))\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(lastOpe===<span class=\"hljs-string\">\"-\"</span>)results.push(pre[i]-cur[j])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(results.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> [input]\n  <span class=\"hljs-keyword\">return</span> results\n};\n</code></pre>\n"
  ],
  "titleSlug": "different-ways-to-add-parentheses",
  "content": "<p>给定一个含有数字和运算符的字符串，为表达式添加括号，改变其运算优先级以求出不同的结果。你需要给出所有可能的组合的结果。有效的运算符号包含 <code>+</code>,&nbsp;<code>-</code>&nbsp;以及&nbsp;<code>*</code>&nbsp;。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong> <code>&quot;2-1-1&quot;</code>\n<strong>输出:</strong> <code>[0, 2]</code>\n<strong>解释: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong><code>&quot;2*3-4*5&quot;</code>\n<strong>输出:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>解释: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>\n"
}
