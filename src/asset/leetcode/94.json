{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> inorderTraversal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-comment\">// let stack=[]</span>\n    <span class=\"hljs-comment\">// let node=root</span>\n    <span class=\"hljs-comment\">// let res=[]</span>\n    <span class=\"hljs-comment\">// while(stack.length&gt;0 || node!==null){</span>\n    <span class=\"hljs-comment\">//     while(node){</span>\n    <span class=\"hljs-comment\">//         stack.push(node)</span>\n    <span class=\"hljs-comment\">//         node=node.left</span>\n    <span class=\"hljs-comment\">//     }</span>\n    <span class=\"hljs-comment\">//     node=stack.pop()</span>\n    <span class=\"hljs-comment\">//     res.push(node.val)</span>\n    <span class=\"hljs-comment\">//     node=node.right</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-comment\">// return res</span>\n    \n    \n    <span class=\"hljs-comment\">// if(!root)return []</span>\n    <span class=\"hljs-keyword\">let</span> result=[]\n    <span class=\"hljs-keyword\">let</span> node=root\n    <span class=\"hljs-keyword\">let</span> stack=[]\n    <span class=\"hljs-keyword\">while</span>(stack.length&gt;<span class=\"hljs-number\">0</span> || node!=<span class=\"hljs-literal\">null</span>){\n        <span class=\"hljs-keyword\">while</span>(node){\n            stack.push(node)\n            node=node.left\n        }\n        node=stack.pop()\n        result.push(node.val)\n        node=node.right\n    }\n    <span class=\"hljs-keyword\">return</span> result\n    \n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-tree-inorder-traversal",
  "content": "<p>给定一个二叉树，返回它的<em>中序&nbsp;</em>遍历。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n<strong>输出:</strong> [1,3,2]</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n"
}
