{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    // let stack=[]\n    // let node=root\n    // let res=[]\n    // while(stack.length>0 || node!==null){\n    //     while(node){\n    //         stack.push(node)\n    //         node=node.left\n    //     }\n    //     node=stack.pop()\n    //     res.push(node.val)\n    //     node=node.right\n    // }\n    // return res\n    \n    \n    // if(!root)return []\n    let result=[]\n    let node=root\n    let stack=[]\n    while(stack.length>0 || node!=null){\n        while(node){\n            stack.push(node)\n            node=node.left\n        }\n        node=stack.pop()\n        result.push(node.val)\n        node=node.right\n    }\n    return result\n    \n};"
  ],
  "titleSlug": "binary-tree-inorder-traversal",
  "content": "<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,null,2,3]\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong> [1,3,2]</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
  "translatedContent": "<p>给定一个二叉树，返回它的<em>中序&nbsp;</em>遍历。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n<strong>输出:</strong> [1,3,2]</pre>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n"
}
