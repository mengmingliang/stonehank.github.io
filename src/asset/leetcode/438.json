{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> findAnagrams = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s, p</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">let</span> length=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">let</span> pLen=p.length,sLen=s.length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pLen;i++){\n    <span class=\"hljs-keyword\">if</span>(!hash[p[i]]){\n      hash[p[i]]=<span class=\"hljs-number\">1</span>\n      length++\n    }<span class=\"hljs-keyword\">else</span> hash[p[i]]++\n  }\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;pLen;i++){\n    <span class=\"hljs-keyword\">let</span> cur=s[i]\n    <span class=\"hljs-keyword\">if</span>(hash[cur]!=<span class=\"hljs-literal\">null</span>){\n      hash[cur]--\n      <span class=\"hljs-keyword\">if</span>(hash[cur]===<span class=\"hljs-number\">0</span>)length--\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(length===<span class=\"hljs-number\">0</span>)result.push(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=pLen;i&lt;sLen;i++){\n    <span class=\"hljs-keyword\">let</span> pre=s[i-pLen]\n    <span class=\"hljs-keyword\">let</span> cur=s[i]\n    <span class=\"hljs-keyword\">if</span>(hash[pre]!=<span class=\"hljs-literal\">null</span>){\n      <span class=\"hljs-keyword\">if</span>(hash[pre]===<span class=\"hljs-number\">0</span>)length++\n      hash[pre]++\n    }\n    <span class=\"hljs-keyword\">if</span>(hash[cur]!=<span class=\"hljs-literal\">null</span>){\n      hash[cur]--\n      <span class=\"hljs-keyword\">if</span>(hash[cur]===<span class=\"hljs-number\">0</span>)length--\n    }\n    <span class=\"hljs-keyword\">if</span>(length===<span class=\"hljs-number\">0</span>)result.push(i-pLen+<span class=\"hljs-number\">1</span>)\n  }\n\n  <span class=\"hljs-keyword\">return</span> result\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-all-anagrams-in-a-string",
  "content": "<p>给定一个字符串&nbsp;<strong>s&nbsp;</strong>和一个非空字符串&nbsp;<strong>p</strong>，找到&nbsp;<strong>s&nbsp;</strong>中所有是&nbsp;<strong>p&nbsp;</strong>的字母异位词的子串，返回这些子串的起始索引。</p>\n\n<p>字符串只包含小写英文字母，并且字符串&nbsp;<strong>s&nbsp;</strong>和 <strong>p&nbsp;</strong>的长度都不超过 20100。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>字母异位词指字母相同，但排列不同的字符串。</li>\n\t<li>不考虑答案输出的顺序。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns: &quot;cbaebabacd&quot; p: &quot;abc&quot;\n\n<strong>输出:</strong>\n[0, 6]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的字母异位词。\n起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的字母异位词。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>\ns: &quot;abab&quot; p: &quot;ab&quot;\n\n<strong>输出:</strong>\n[0, 1, 2]\n\n<strong>解释:</strong>\n起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的字母异位词。\n起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的字母异位词。\n起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的字母异位词。\n</pre>\n"
}
