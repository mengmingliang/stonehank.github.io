{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> diameterOfBinaryTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">root</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> left=dfs(root.left),\n        right=dfs(root.right)\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,left+right)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(left,right)+<span class=\"hljs-number\">1</span>\n  }\n  dfs(root)\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n"
  ],
  "titleSlug": "diameter-of-binary-tree",
  "content": "<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p>\n\n<p><strong>示例 :</strong><br />\n给定二叉树</p>\n\n<pre>\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n\n<p>返回&nbsp;<strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者&nbsp;[5,2,1,3]。</p>\n\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n"
}
