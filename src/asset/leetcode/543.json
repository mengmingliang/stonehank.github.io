{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n    // function computeLeftH(node){\n    //     if(!node)return -1\n    //     if(node.leftH)return node.leftH\n    //     let l=Math.max(computeLeftH(node.left),computeRightH(node.left))+1\n    //     node.leftH=l\n    //     return l\n    // }\n    // function computeRightH(node){\n    //     if(!node)return -1\n    //     if(node.rightH)return node.rightH\n    //     let r=Math.max(computeLeftH(node.right),computeRightH(node.right))+1\n    //     node.rightH=r\n    //     return r\n    // }\n    // computeLeftH(root)\n    // computeRightH(root)\n    // let max=0\n    // function dsf(node){\n    //     if(!node)return\n    //     let h=node.rightH+node.leftH\n    //     if(h>max)max=h\n    //     if(node.left)dsf(node.left)\n    //     if(node.right)dsf(node.right)\n    // }\n    // dsf(root)\n    // return max\n    \n    if (root == null) {return 0}\n    let max = 0\n    dfs(root)\n    return max - 1\n    \n    function dfs (node) {\n        if (node == null) {return 0}\n        const left = dfs(node.left)\n        const right = dfs(node.right)\n        max = Math.max(max, left + right + 1)\n        return Math.max(left, right)  + 1\n    }\n};"
  ],
  "titleSlug": "diameter-of-binary-tree",
  "content": "<p>\r\nGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <b>longest</b> path between any two nodes in a tree. This path may or may not pass through the root.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b><br />\r\nGiven a binary tree <br />\r\n<pre>\r\n          1\r\n         / \\\r\n        2   3\r\n       / \\     \r\n      4   5    \r\n</pre>\r\n</p>\r\n<p>\r\nReturn <b>3</b>, which is the length of the path [4,2,1,3] or [5,2,1,3].\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of path between two nodes is represented by the number of edges between them.\r\n</p>",
  "translatedContent": "<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p>\n\n<p><strong>示例 :</strong><br />\n给定二叉树</p>\n\n<pre>\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n\n<p>返回&nbsp;<strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者&nbsp;[5,2,1,3]。</p>\n\n<p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p>\n"
}
