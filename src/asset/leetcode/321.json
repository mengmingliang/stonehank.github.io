{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxNumber = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1, nums2, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxArr=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=k;i++){\n    <span class=\"hljs-keyword\">let</span> l=i,r=k-i\n    <span class=\"hljs-keyword\">if</span>(nums1.length&lt;l || nums2.length&lt;r)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">let</span> res=mergeArr(maxInArr(nums1,l),maxInArr(nums2,r))\n    <span class=\"hljs-keyword\">if</span>(!maxArr)maxArr=res\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(compareArr(res,maxArr)){\n      maxArr=res.slice()\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> maxArr\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeArr</span>(<span class=\"hljs-params\">arr1,arr2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> result=[]\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;arr1.length || j&lt;arr2.length){\n      <span class=\"hljs-keyword\">if</span>(i===arr1.length)result.push(arr2[j++])\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j===arr2.length)result.push(arr1[i++])\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&lt;arr2[j])result.push(arr2[j++])\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&gt;arr2[j])result.push(arr1[i++])\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(compareArr(arr1.slice(i),arr2.slice(j)))result.push(arr1[i++])\n      <span class=\"hljs-keyword\">else</span> result.push(arr2[j++])\n    }\n    <span class=\"hljs-keyword\">return</span> result\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxInArr</span>(<span class=\"hljs-params\">arr,k</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> stack=[]\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,all=arr.length\n    <span class=\"hljs-keyword\">while</span>(i&lt;arr.length){\n\t  <span class=\"hljs-keyword\">let</span> rest=all-i\n      <span class=\"hljs-keyword\">while</span>(stack.length+rest&gt;k &amp;&amp; stack[stack.length<span class=\"hljs-number\">-1</span>]&lt;arr[i]){\n        stack.pop()\n      }\n      stack.push(arr[i++])\n    }\n    <span class=\"hljs-keyword\">while</span>(stack.length&gt;k){\n      stack.pop()\n    }\n    <span class=\"hljs-keyword\">return</span> stack\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compareArr</span>(<span class=\"hljs-params\">arr1,arr2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span>(i&lt;arr1.length &amp;&amp; j&lt;arr2.length){\n      <span class=\"hljs-keyword\">if</span>(arr1[i]&lt;arr2[j]){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&gt;arr2[j]){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        i++;j++\n      }\n    }   \n    <span class=\"hljs-keyword\">if</span>(i&gt;=arr1.length)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "create-maximum-number",
  "thinking": "<hr>\n<p>这道题题意很好理解，但是需要使用到2个小算法。</p>\n<p>算法一，计算一个数组中<code>k</code>位最大数数组。</p>\n<p>算法二，合并两个数组为一个最大数数组。</p>\n<hr>\n<h4>算法一</h4>\n<p>例子如下：</p>\n<pre class=\"hljs\"><code>nums=[1,3,5,4,3,1,7]\nk=3\nOutput:\n[5,4,7]\n</code></pre>\n<p>这个的算法思路是，利用<code>stack</code>，如果当前数存在比<code>stack</code>最后一位数大的情况，判断是否可以前移(清除前面)。</p>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxInArr</span>(<span class=\"hljs-params\">arr,k</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,all=arr.length\n  <span class=\"hljs-keyword\">while</span>(i&lt;arr.length){\n    <span class=\"hljs-keyword\">let</span> rest=all-i\n    <span class=\"hljs-comment\">// 当前值后面的位数 + 当前stack的位数能 大于k，说明当前stack能进行删减</span>\n    <span class=\"hljs-keyword\">while</span>(stack.length+rest&gt;k &amp;&amp; stack[stack.length<span class=\"hljs-number\">-1</span>]&lt;arr[i]){\n      stack.pop()\n    }\n    stack.push(arr[i++])\n  }\n  <span class=\"hljs-comment\">// 最后如果超过k，减为k</span>\n  <span class=\"hljs-keyword\">while</span>(stack.length&gt;k){\n    stack.pop()\n  }\n  <span class=\"hljs-keyword\">return</span> stack\n}\n</code></pre>\n<hr>\n<h4>算法二</h4>\n<p>例子如下：</p>\n<pre class=\"hljs\"><code>nums1=[5,3,8]\nnums2=[4,2,9]\nOutput:\n[5,4,3,8,2,9]\n</code></pre>\n<p>这个算法要求按照顺序合并成一个最大数的数组，思路是双指针，当遇到相同的数字时，需要去比较它们后面的数组。\n例如：</p>\n<pre class=\"hljs\"><code>[3,5,7,9]\n[6,9,3,8]\n</code></pre>\n<p>当比较到<code>i=0</code>和<code>j=2</code>的位置，两个数字都是3，这时需要比较<code>[5,7,9]</code>和<code>[8]</code>。</p>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeArr</span>(<span class=\"hljs-params\">arr1,arr2</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> result=[]\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(i&lt;arr1.length || j&lt;arr2.length){\n    <span class=\"hljs-keyword\">if</span>(i===arr1.length)result.push(arr2[j++])\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(j===arr2.length)result.push(arr1[i++])\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&lt;arr2[j])result.push(arr2[j++])\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&gt;arr2[j])result.push(arr1[i++])\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(compareArr(arr1.slice(i),arr2.slice(j)))result.push(arr1[i++])\n    <span class=\"hljs-keyword\">else</span> result.push(arr2[j++])\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compareArr</span>(<span class=\"hljs-params\">arr1,arr2</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(i&lt;arr1.length &amp;&amp; j&lt;arr2.length){\n    <span class=\"hljs-keyword\">if</span>(arr1[i]&lt;arr2[j]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr1[i]&gt;arr2[j]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">else</span>{ i++;j++ }\n  }   \n  <span class=\"hljs-keyword\">if</span>(i&gt;=arr1.length)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<hr>\n<p>但理解以上两个算法，接下来这道题就很容易了</p>\n<p>思路：</p>\n<ol>\n<li>从<code>0</code>遍历到<code>k</code>，对两个数组从<code>i</code>分割，其中一个长度为<code>i</code>，另一个则为<code>k-i</code>。</li>\n<li>对2个分割后的数组通过<code>算法1</code>分别求出最大数组。</li>\n<li>对已经求出的2个最大数组通过<code>算法2</code>合并，结果与上一次结果对比，最终取最大值。</li>\n</ol>\n",
  "content": "<p>给定长度分别为&nbsp;<code>m</code>&nbsp;和&nbsp;<code>n</code>&nbsp;的两个数组，其元素由&nbsp;<code>0-9</code>&nbsp;构成，表示两个自然数各位上的数字。现在从这两个数组中选出 <code>k (k &lt;= m + n)</code>&nbsp;个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</p>\n\n<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为&nbsp;<code>k</code>&nbsp;的数组。</p>\n\n<p><strong>说明: </strong>请尽可能地优化你算法的时间和空间复杂度。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>输出:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>输出:</strong>\n<code>[9, 8, 9]</code></pre>\n",
  "hasThinking": true
}
