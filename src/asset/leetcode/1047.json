{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeDuplicates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[S[<span class=\"hljs-number\">0</span>]],i=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">while</span>(i&lt;S.length){\n    <span class=\"hljs-keyword\">while</span>(i&lt;S.length &amp;&amp; stack.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; S[i]===stack[stack.length<span class=\"hljs-number\">-1</span>]){\n      stack.pop()\n      i++\n    }\n    stack.push(S[i++])\n  }\n  <span class=\"hljs-keyword\">return</span> stack.join(<span class=\"hljs-string\">''</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "remove-all-adjacent-duplicates-in-string",
  "hasThinking": false,
  "content": "<p>给出由小写字母组成的字符串&nbsp;<code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>\n\n<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>\n\n<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abbaca&quot;\n<strong>输出：</strong>&quot;ca&quot;\n<strong>解释：</strong>\n例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> 仅由小写英文字母组成。</li>\n</ol>\n"
}
