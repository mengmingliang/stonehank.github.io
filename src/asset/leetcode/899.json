{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> orderlyQueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, K</span>) </span>{\n  <span class=\"hljs-comment\">// if(K&gt;1){</span>\n  <span class=\"hljs-comment\">//   return S.split('').sort().join('')</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// let acode='a'.charCodeAt(0)</span>\n  <span class=\"hljs-comment\">// let sameCode=[]</span>\n  <span class=\"hljs-comment\">// let mincode=999</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;S.length;i++){</span>\n  <span class=\"hljs-comment\">//   let curcode=S.charCodeAt(i)</span>\n  <span class=\"hljs-comment\">//   if(curcode&lt;mincode){</span>\n  <span class=\"hljs-comment\">//     mincode=curcode</span>\n  <span class=\"hljs-comment\">//     sameCode=[i]</span>\n  <span class=\"hljs-comment\">//   }else if(curcode===mincode){</span>\n  <span class=\"hljs-comment\">//     sameCode.push(i)</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// let partit=null</span>\n  <span class=\"hljs-comment\">// for(let i=0;i&lt;S.length;i++){</span>\n  <span class=\"hljs-comment\">//   let temp=[],min=Infinity</span>\n  <span class=\"hljs-comment\">//   if(sameCode.length===1){</span>\n  <span class=\"hljs-comment\">//     partit=sameCode[0]-i</span>\n  <span class=\"hljs-comment\">//     break</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   for(let j=0;j&lt;sameCode.length;j++){</span>\n  <span class=\"hljs-comment\">//     if(sameCode[j]+1&gt;=S.length)continue</span>\n  <span class=\"hljs-comment\">//     let nxtcode=S.charCodeAt(sameCode[j]+1)</span>\n  <span class=\"hljs-comment\">//     if(nxtcode&lt;min){</span>\n  <span class=\"hljs-comment\">//       min=nxtcode</span>\n  <span class=\"hljs-comment\">//       temp=[sameCode[j]+1]</span>\n  <span class=\"hljs-comment\">//     }else if(nxtcode===min){</span>\n  <span class=\"hljs-comment\">//       temp.push(sameCode[j]+1)</span>\n  <span class=\"hljs-comment\">//     }</span>\n  <span class=\"hljs-comment\">//   }</span>\n  <span class=\"hljs-comment\">//   sameCode=temp</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return S.substring(partit)+S.substring(0,partit)</span>\n  \n  <span class=\"hljs-keyword\">if</span> (K &gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> S.split(<span class=\"hljs-string\">''</span>).sort().join(<span class=\"hljs-string\">''</span>);\n\n  <span class=\"hljs-keyword\">let</span> small = S.split(<span class=\"hljs-string\">''</span>).sort()[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">let</span> ops = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.length; i++) {\n      <span class=\"hljs-keyword\">if</span> (S[i] === small) ops.push(S.slice(i) + S.slice(<span class=\"hljs-number\">0</span>, i));\n  }\n  <span class=\"hljs-keyword\">return</span> ops.sort()[<span class=\"hljs-number\">0</span>];\n};\n</code></pre>\n"
  ],
  "titleSlug": "orderly-queue",
  "content": "<p>给出了一个由小写字母组成的字符串 <code>S</code>。然后，我们可以进行任意次数的<em>移动</em>。</p>\n\n<p>在每次移动中，我们选择前 <code>K</code> 个字母中的一个（从左侧开始），将其从原位置移除，并放置在字符串的末尾。</p>\n\n<p>返回我们在任意次数的移动之后可以拥有的按字典顺序排列的最小字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;cba&quot;, K = 1\n<strong>输出：</strong>&quot;acb&quot;\n<strong>解释：</strong>\n在第一步中，我们将第一个字符（&ldquo;c&rdquo;）移动到最后，获得字符串 &ldquo;bac&rdquo;。\n在第二步中，我们将第一个字符（&ldquo;b&rdquo;）移动到最后，获得最终结果 &ldquo;acb&rdquo;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;baaca&quot;, K = 3\n<strong>输出：</strong>&quot;aaabc&quot;\n<strong>解释：\n</strong>在第一步中，我们将第一个字符（&ldquo;b&rdquo;）移动到最后，获得字符串 &ldquo;aacab&rdquo;。\n在第二步中，我们将第三个字符（&ldquo;c&rdquo;）移动到最后，获得最终结果 &ldquo;aaabc&rdquo;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>S</code>&nbsp;只由小写字母组成。</li>\n</ol>\n"
}
