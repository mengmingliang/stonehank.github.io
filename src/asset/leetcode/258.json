{
  "code": [
    "/**\n * @param {number} num\n * @return {number}\n */\nvar addDigits = function(num) {\n    while(num>=10){\n        let x=parseInt(num/10,10)+num%10\n        num=x\n    }\n    return num\n};"
  ],
  "titleSlug": "add-digits",
  "content": "<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>38</code>\r\n<strong>Output:</strong> 2 \r\n<strong>Explanation: </strong>The process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. \r\n&nbsp;            Since <code>2</code> has only one digit, return it.\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without any loop/recursion in O(1) runtime?</p>",
  "translatedContent": "<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> <code>38</code>\n<strong>输出:</strong> 2 \n<strong>解释: </strong>各位相加的过程为<strong>：</strong><code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>。 由于&nbsp;<code>2</code> 是一位数，所以返回 2。\n</pre>\n\n<p><strong>进阶:</strong><br>\n你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>\n"
}
