{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar getMinimumDifference = function(root) {\n//     let arr=[root]\n//     let min=Number.MAX_SAFE_INTEGER\n\n//     function findMin(node){\n//         if(!node)return\n//         if(node.left)return findMin(node.left)\n//         return node.val\n//     }\n//     function findMax(node){\n//         if(!node)return\n//         if(node.right)return findMax(node.right)\n//         return node.val\n//     }\n    \n//     function findMinDifSuccessor(node){\n//         let leftS=findMax(node.left)\n//         let rightS=findMin(node.right)\n//         return Math.min(Math.abs(leftS-node.val)||min,Math.abs(rightS-node.val)||min)\n//     }\n//     function bsf(){\n//         let temp=[]\n//         while(arr.length>0){\n//             for(let i=0;i<arr.length;i++){\n//                 let abDif=findMinDifSuccessor(arr[i])\n//                 if(abDif<min)min=abDif\n//                 if(arr[i].left){\n//                     temp.push(arr[i].left)\n//                 }\n//                 if(arr[i].right){\n//                     temp.push(arr[i].right)\n//                 }\n//             }\n//             arr=temp\n//             temp=[]\n//         }\n//     }\n//     bsf()\n//     return min\n    \n    let min=Number.MAX_SAFE_INTEGER\n    let last\n    function dsfSort(node){\n        if(!node)return\n        if(node.left)dsfSort(node.left)\n        if(last===undefined)last=node.val\n        else{\n            let absDif=Math.abs(node.val-last)\n            if(absDif<min)min=absDif\n            last=node.val\n        }\n        if(node.right)dsfSort(node.right)\n    }\n    dsfSort(root)\n    return min\n};"
  ],
  "titleSlug": "minimum-absolute-difference-in-bst",
  "content": "<p>Given a binary search tree with non-negative values, find the minimum <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> between values of any two nodes.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n\r\n   1\r\n    \\\r\n     3\r\n    /\r\n   2\r\n\r\n<b>Output:</b>\r\n1\r\n\r\n<b>Explanation:</b>\r\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> There are at least two nodes in this BST.</p>\r\n",
  "translatedContent": "<p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>输出:</strong>\n1\n\n<strong>解释:\n</strong>最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n</pre>\n\n<p><strong>注意: </strong>树中至少有2个节点。</p>\n"
}
