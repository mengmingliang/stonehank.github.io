{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> getMinimumDifference = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n<span class=\"hljs-comment\">//     let arr=[root]</span>\n<span class=\"hljs-comment\">//     let min=Number.MAX_SAFE_INTEGER</span>\n\n<span class=\"hljs-comment\">//     function findMin(node){</span>\n<span class=\"hljs-comment\">//         if(!node)return</span>\n<span class=\"hljs-comment\">//         if(node.left)return findMin(node.left)</span>\n<span class=\"hljs-comment\">//         return node.val</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     function findMax(node){</span>\n<span class=\"hljs-comment\">//         if(!node)return</span>\n<span class=\"hljs-comment\">//         if(node.right)return findMax(node.right)</span>\n<span class=\"hljs-comment\">//         return node.val</span>\n<span class=\"hljs-comment\">//     }</span>\n    \n<span class=\"hljs-comment\">//     function findMinDifSuccessor(node){</span>\n<span class=\"hljs-comment\">//         let leftS=findMax(node.left)</span>\n<span class=\"hljs-comment\">//         let rightS=findMin(node.right)</span>\n<span class=\"hljs-comment\">//         return Math.min(Math.abs(leftS-node.val)||min,Math.abs(rightS-node.val)||min)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     function bsf(){</span>\n<span class=\"hljs-comment\">//         let temp=[]</span>\n<span class=\"hljs-comment\">//         while(arr.length&gt;0){</span>\n<span class=\"hljs-comment\">//             for(let i=0;i&lt;arr.length;i++){</span>\n<span class=\"hljs-comment\">//                 let abDif=findMinDifSuccessor(arr[i])</span>\n<span class=\"hljs-comment\">//                 if(abDif&lt;min)min=abDif</span>\n<span class=\"hljs-comment\">//                 if(arr[i].left){</span>\n<span class=\"hljs-comment\">//                     temp.push(arr[i].left)</span>\n<span class=\"hljs-comment\">//                 }</span>\n<span class=\"hljs-comment\">//                 if(arr[i].right){</span>\n<span class=\"hljs-comment\">//                     temp.push(arr[i].right)</span>\n<span class=\"hljs-comment\">//                 }</span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             arr=temp</span>\n<span class=\"hljs-comment\">//             temp=[]</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     bsf()</span>\n<span class=\"hljs-comment\">//     return min</span>\n    \n    <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-built_in\">Number</span>.MAX_SAFE_INTEGER\n    <span class=\"hljs-keyword\">let</span> last\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dsfSort</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(node.left)dsfSort(node.left)\n        <span class=\"hljs-keyword\">if</span>(last===<span class=\"hljs-literal\">undefined</span>)last=node.val\n        <span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-keyword\">let</span> absDif=<span class=\"hljs-built_in\">Math</span>.abs(node.val-last)\n            <span class=\"hljs-keyword\">if</span>(absDif&lt;min)min=absDif\n            last=node.val\n        }\n        <span class=\"hljs-keyword\">if</span>(node.right)dsfSort(node.right)\n    }\n    dsfSort(root)\n    <span class=\"hljs-keyword\">return</span> min\n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-absolute-difference-in-bst",
  "content": "<p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>输出:</strong>\n1\n\n<strong>解释:\n</strong>最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n</pre>\n\n<p><strong>注意: </strong>树中至少有2个节点。</p>\n"
}
