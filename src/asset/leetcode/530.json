{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> getMinimumDifference = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> last\n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(node.left)dfs(node.left)\n    <span class=\"hljs-keyword\">if</span>(last==<span class=\"hljs-literal\">null</span>){\n      last=node.val\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> cur=node.val-last\n      <span class=\"hljs-keyword\">if</span>(cur&lt;min)min=cur\n      last=node.val\n    }\n    <span class=\"hljs-keyword\">if</span>(node.right)dfs(node.right)\n  }\n  dfs(root)\n  <span class=\"hljs-keyword\">return</span> min     \n};\n</code></pre>\n"
  ],
  "titleSlug": "minimum-absolute-difference-in-bst",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<h2>与<code>NO.783</code>一致，根据<code>BST</code>的性质，使用中序排列(从小到大)，依次检查每一个节点值的差距。</h2>\n",
  "content": "<p>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>输出:</strong>\n1\n\n<strong>解释:\n</strong>最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n</pre>\n\n<p><strong>注意: </strong>树中至少有2个节点。</p>\n"
}
