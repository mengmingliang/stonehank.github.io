{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isPalindrome = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> fast=head,slow=head\n  <span class=\"hljs-keyword\">while</span>(fast &amp;&amp; fast.next){\n    fast=fast.next.next\n    slow=slow.next\n  }\n  <span class=\"hljs-comment\">// if(!fast)slow=slow.next</span>\n  <span class=\"hljs-keyword\">let</span> rev=reverse(slow)\n  <span class=\"hljs-keyword\">let</span> check=head\n  <span class=\"hljs-keyword\">while</span>(rev &amp;&amp; check.val===rev.val){\n    check=check.next\n    rev=rev.next\n  }\n  <span class=\"hljs-comment\">// console.log(check,rev)</span>\n  <span class=\"hljs-keyword\">return</span> !rev\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reverse</span>(<span class=\"hljs-params\">head</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">while</span> (head != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">let</span> next = head.next;\n      head.next = prev;\n      prev = head;\n      head = next;\n    }\n    <span class=\"hljs-keyword\">return</span> prev;\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "palindrome-linked-list",
  "hasThinking": false,
  "content": "<p>请判断一个链表是否为回文链表。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2\n<strong>输出:</strong> false</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> 1-&gt;2-&gt;2-&gt;1\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>进阶：</strong><br>\n你能否用&nbsp;O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>\n"
}
