{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {string} s\n * @return {NestedInteger}\n */</span>\n<span class=\"hljs-keyword\">var</span> deserialize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">new</span> NestedInteger()\n  <span class=\"hljs-keyword\">if</span>(s[<span class=\"hljs-number\">0</span>]===<span class=\"hljs-string\">\"[\"</span>){\n    <span class=\"hljs-keyword\">let</span> subs=<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;s.length<span class=\"hljs-number\">-1</span>;i++){\n      <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">'['</span>){\n        <span class=\"hljs-keyword\">let</span> tail=getTail(s,i+<span class=\"hljs-number\">1</span>)\n        res.add(deserialize(s.substring(i,tail+<span class=\"hljs-number\">1</span>)))\n        i=tail\n      }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">','</span>){\n        <span class=\"hljs-keyword\">if</span>( subs===<span class=\"hljs-string\">''</span>)<span class=\"hljs-keyword\">continue</span>\n        res.add(deserialize(subs))\n        subs=<span class=\"hljs-string\">''</span>\n      }<span class=\"hljs-keyword\">else</span>{\n        subs+=s[i]\n      }\n    }\n    <span class=\"hljs-keyword\">if</span>(subs!==<span class=\"hljs-string\">''</span>)res.add(deserialize(subs))\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">''</span>)<span class=\"hljs-keyword\">return</span> res\n    res.setInteger(+s)\n  }\n  <span class=\"hljs-keyword\">return</span> res\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTail</span>(<span class=\"hljs-params\">s,start</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> valid=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;s.length;i++){\n      <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"[\"</span>)valid++\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"]\"</span>)valid--\n      <span class=\"hljs-keyword\">if</span>(valid===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> i\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "mini-parser",
  "hasThinking": false,
  "content": "<p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p>\n\n<p>列表中的每个元素只可能是整数或整数嵌套列表</p>\n\n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p>\n\n<ul>\n\t<li>字符串非空</li>\n\t<li>字符串不包含空格</li>\n\t<li>字符串只包含数字<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n给定 s = &quot;324&quot;,\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n给定 s = &quot;[123,[456,[789]]]&quot;,\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>\n\n<p>&nbsp;</p>\n"
}
