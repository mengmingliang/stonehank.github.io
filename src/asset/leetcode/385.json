{
  "code": [
    "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */\n/**\n * @param {string} s\n * @return {NestedInteger}\n */\nvar deserialize = function(s) {\n    let root=new NestedInteger()\n    function combineList(str,start,curList){\n        let ele='',end,list\n        for(let i=start;i<str.length;i++){\n            let cur=str[i]\n            if(cur===\"[\" && i!==0) {\n                list=new NestedInteger()\n                const {curList:newList,end}=combineList(str,i+1,list)\n                curList.add(newList)\n                i=end\n            }\n            else if(cur===\"[\")continue\n            else if(cur===\",\"){\n                if(ele)curList.add(+ele)\n                ele=''\n            }\n            else if(cur===\"]\"){\n                end=i\n                if(ele)curList.add(+ele)\n                return {curList,end}\n            }\n            else ele+=cur\n        }\n        if(ele)curList.setInteger(+ele)\n        return {curList,end}\n    }\n    const {curList:result}=combineList(s,0,root)\n    return result.isInteger() ? result.getInteger() : result\n    \n};"
  ],
  "titleSlug": "mini-parser",
  "content": "<p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume that the string is well-formed:\r\n<ul>\r\n<li>String is non-empty.</li>\r\n<li>String does not contain white spaces.</li>\r\n<li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nGiven s = \"324\",\r\n\r\nYou should return a NestedInteger object which contains a single integer 324.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nGiven s = \"[123,[456,[789]]]\",\r\n\r\nReturn a NestedInteger object containing a nested list with 2 elements:\r\n\r\n1. An integer containing value 123.\r\n2. A nested list containing two elements:\r\n    i.  An integer containing value 456.\r\n    ii. A nested list with one element:\r\n         a. An integer containing value 789.\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p>\n\n<p>列表中的每个元素只可能是整数或整数嵌套列表</p>\n\n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p>\n\n<ul>\n\t<li>字符串非空</li>\n\t<li>字符串不包含空格</li>\n\t<li>字符串只包含数字<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n给定 s = &quot;324&quot;,\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n给定 s = &quot;[123,[456,[789]]]&quot;,\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>\n\n<p>&nbsp;</p>\n"
}
