{
  "code": [
    "/**\n * @param {number[][]} M\n * @return {number[][]}\n */\nvar imageSmoother = function(M) {\n    // let l=1,t=1,r=1,d=1,lt=1,ld=1,rt=1,rd=1\n    let newM=[]\n    // function getAvg(M,i,j){\n    //     let sum=0,num=0\n    //     if(l){sum+=M[i][j-1];num++}\n    //     if(t){sum+=M[i-1][j];num++}    \n    //     if(r){sum+=M[i][j+1];num++}    \n    //     if(d){sum+=M[i+1][j];num++}\n    //     if(lt){sum+=M[i-1][j-1];num++}   \n    //     if(ld){sum+=M[i+1][j-1];num++}   \n    //     if(rt){sum+=M[i-1][j+1];num++}   \n    //     if(rd){sum+=M[i+1][j+1];num++}\n    //     sum+=M[i][j];\n    //     num++\n    //     return Math.floor(sum/num)\n    // }\n    \n    for(let i=0;i<M.length;i++){\n        newM[i]=[]\n        for(let j=0;j<M[i].length;j++){       \n            // l=1,t=1,r=1,d=1,lt=1,ld=1,rt=1,rd=1\n            // if(j<=0)l=lt=ld=null\n            // if(i<=0)t=lt=rt=null\n            // if(j>=M[i].length-1)r=rt=rd=null\n            // if(i>=M.length-1)d=ld=rd=null\n            newM[i][j]=getAvg(M,i,j)\n        }\n    }\n    \n    function getAvg(M,i,j){\n        let sum=0,nums=0\n        for(let x=-1;x<2;x++){\n            for(let y=-1;y<2;y++){\n                let xi=x+i,yj=y+j\n                if(xi<0 || xi>M.length-1 || yj<0 || yj>M[i].length-1){\n                    continue\n                }\n                sum+=M[xi][yj]\n                nums++\n            }\n        }\n        return Math.floor(sum/nums)\n    }\n    \n    return newM\n};"
  ],
  "titleSlug": "image-smoother",
  "content": "<p>Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\n<b>Output:</b>\r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n<b>Explanation:</b>\r\nFor the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\r\nFor the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\r\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The value in the given matrix is in the range of [0, 255].</li>\r\n<li>The length and width of the given matrix are in the range of [1, 150].</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度&nbsp;(向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>输出:</strong>\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n<strong>解释:</strong>\n对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0\n对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0\n对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>给定矩阵中的整数范围为 [0, 255]。</li>\n\t<li>矩阵的长和宽的范围均为&nbsp;[1, 150]。</li>\n</ol>\n"
}
