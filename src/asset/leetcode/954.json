{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> canReorderDoubled = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  A.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> A){\n    <span class=\"hljs-keyword\">if</span>(hash[n]==<span class=\"hljs-literal\">null</span>)hash[n]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> hash[n]++\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n    <span class=\"hljs-keyword\">let</span> cur=A[i]\n    <span class=\"hljs-keyword\">let</span> target=cur&gt;<span class=\"hljs-number\">0</span> ? cur*<span class=\"hljs-number\">2</span> :cur/<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span>(hash[cur]===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">if</span>(hash[target]&gt;<span class=\"hljs-number\">0</span>){\n      hash[target]--\n      hash[cur]--\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "array-of-doubled-pairs",
  "thinking": "<hr>\n<p>思路：</p>\n<p>由题目可知，最终能符合要求的数组存在以下特点<code>A[0]*2=A[1],A[2]*2=A[3],A[4]*5=A[5]...</code></p>\n<p>因此只需先排序，然后从小到大寻找它的对应的值，如果不存在，因为是排好序的，后面的数也不会有与它对应的，因此直接返回<code>false</code>，\n如果存在，则减去各自的计数。</p>\n",
  "content": "<p>给定一个长度为偶数的整数数组&nbsp;<code>A</code>，只有对&nbsp;<code>A</code>&nbsp;进行重组后可以满足 &ldquo;对于每个 <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>，都有 <code>A[2 * i + 1] = 2 * A[2 * i]</code>&rdquo;&nbsp;时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[3,1,3,6]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[2,1,2,6]\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>[4,-2,2,-4]\n<strong>输出：</strong>true\n<strong>解释：</strong>我们可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>[1,2,4,16,8,4]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A.length</code>&nbsp;为偶数</li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n",
  "hasThinking": true
}
