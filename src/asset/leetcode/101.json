{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">arr</span>)</span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length/<span class=\"hljs-number\">2</span>;i++){\n    <span class=\"hljs-keyword\">let</span> cur=arr[i]\n    <span class=\"hljs-keyword\">let</span> mir=arr[arr.length<span class=\"hljs-number\">-1</span>-i]\n    <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-literal\">null</span> &amp;&amp; mir===<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-literal\">null</span> || mir===<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur.val===mir.val)<span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n<span class=\"hljs-comment\">// var isSymmetric = function(root) {</span>\n<span class=\"hljs-comment\">//     let arr=[root],aux=[]</span>\n<span class=\"hljs-comment\">//     while(arr.length&gt;0){</span>\n<span class=\"hljs-comment\">//       if(!check(arr))return false</span>\n<span class=\"hljs-comment\">//       for(let i=0;i&lt;arr.length;i++){</span>\n<span class=\"hljs-comment\">//         if(!arr[i])continue</span>\n<span class=\"hljs-comment\">//         if(arr[i].left)aux.push(arr[i].left)</span>\n<span class=\"hljs-comment\">//         else aux.push(null)</span>\n<span class=\"hljs-comment\">//         if(arr[i].right)aux.push(arr[i].right)</span>\n<span class=\"hljs-comment\">//         else aux.push(null)</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//       arr=aux;aux=[]</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return true</span>\n<span class=\"hljs-comment\">// };</span>\n\n<span class=\"hljs-keyword\">var</span> isSymmetric = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isMirror</span>(<span class=\"hljs-params\">n1,n2</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!n1 &amp;&amp; !n2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n1 &amp;&amp; n2){\n      <span class=\"hljs-keyword\">return</span> n1.val===n2.val &amp;&amp; isMirror(n1.left,n2.right) &amp;&amp; isMirror(n1.right,n2.left)\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> isMirror(root.left,root.right)\n};\n</code></pre>\n"
  ],
  "titleSlug": "symmetric-tree",
  "content": "<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n\n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p>\n"
}
