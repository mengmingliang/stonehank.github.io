{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isSymmetric = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  \n  <span class=\"hljs-comment\">// recursion</span>\n  <span class=\"hljs-comment\">// if(!root)return true</span>\n  <span class=\"hljs-comment\">// function dfs(root1,root2){</span>\n  <span class=\"hljs-comment\">//   if(!root1 &amp;&amp; !root2)return true</span>\n  <span class=\"hljs-comment\">//   if(!root1 || !root2)return false</span>\n  <span class=\"hljs-comment\">//   if(root1.val!==root2.val)return false</span>\n  <span class=\"hljs-comment\">//   return dfs(root1.left,root2.right) &amp;&amp; dfs(root1.right,root2.left)</span>\n  <span class=\"hljs-comment\">// }  </span>\n  <span class=\"hljs-comment\">// return dfs(root.left,root.right)</span>\n  \n  <span class=\"hljs-comment\">// iteration</span>\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">let</span> aux=[root]\n  <span class=\"hljs-keyword\">while</span>(aux.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=aux.length\n    <span class=\"hljs-keyword\">if</span>(!check(aux))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> node=aux.shift()\n      <span class=\"hljs-keyword\">if</span>(!node)<span class=\"hljs-keyword\">continue</span>\n      aux.push(node.left)\n      aux.push(node.right)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">arr</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> n=arr.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-built_in\">Math</span>.floor(n/<span class=\"hljs-number\">2</span>);i++){\n      <span class=\"hljs-keyword\">let</span> j=n<span class=\"hljs-number\">-1</span>-i\n      <span class=\"hljs-keyword\">if</span>(!arr[i] &amp;&amp; !arr[j])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!arr[i] || !arr[j])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr[i].val!==arr[j].val)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "symmetric-tree",
  "hasThinking": false,
  "content": "<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n\n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p>\n"
}
