{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nfunction check(arr){\n  for(let i=0;i<arr.length/2;i++){\n    let cur=arr[i]\n    let mir=arr[arr.length-1-i]\n    if(cur===null && mir===null)continue\n    else if(cur===null || mir===null)return false\n    else if(cur.val===mir.val)continue\n    else return false\n  }\n  return true\n}\n// var isSymmetric = function(root) {\n//     let arr=[root],aux=[]\n//     while(arr.length>0){\n//       if(!check(arr))return false\n//       for(let i=0;i<arr.length;i++){\n//         if(!arr[i])continue\n//         if(arr[i].left)aux.push(arr[i].left)\n//         else aux.push(null)\n//         if(arr[i].right)aux.push(arr[i].right)\n//         else aux.push(null)\n//       }\n//       arr=aux;aux=[]\n//     }\n//     return true\n// };\n\nvar isSymmetric = function(root) {\n  if(!root)return true\n  function isMirror(n1,n2){\n    if(!n1 && !n2)return true\n    else if(n1 && n2){\n      return n1.val===n2.val && isMirror(n1.left,n2.right) && isMirror(n1.right,n2.left)\n    }else return false\n  }\n  return isMirror(root.left,root.right)\n};"
  ],
  "titleSlug": "symmetric-tree",
  "content": "<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\r\n\r\n<p>\r\nFor example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n</pre>\r\n</p>\r\n<p>\r\nBut the following <code>[1,2,2,null,3,null,3]</code>  is not:<br />\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br />\r\nBonus points if you could solve it both recursively and iteratively.\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n\n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p>\n"
}
