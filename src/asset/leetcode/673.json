{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findNumberOfLIS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N=nums.length\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-built_in\">Array</span>(N).fill(<span class=\"hljs-number\">1</span>)\n  \n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">let</span> cur=nums[i]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;i;j++){\n      <span class=\"hljs-keyword\">let</span> pre=nums[j]\n      <span class=\"hljs-keyword\">if</span>(cur&gt;pre){\n        <span class=\"hljs-keyword\">if</span>(dp[j]+<span class=\"hljs-number\">1</span>&gt;dp[i]){\n          dp[i]=dp[j]+<span class=\"hljs-number\">1</span>\n          count[i]=count[j]\n        }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(dp[j]+<span class=\"hljs-number\">1</span>===dp[i]){\n          count[i]+=count[j]\n        }\n      }\n    }\n  }\n  <span class=\"hljs-comment\">// console.log(dp,count)</span>\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;dp.length;i++){\n    max=<span class=\"hljs-built_in\">Math</span>.max(max,dp[i])\n  }\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;dp.length;i++){\n    <span class=\"hljs-keyword\">if</span>(dp[i]===max){\n      res+=count[i]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "number-of-longest-increasing-subsequence",
  "content": "<p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,3,5,4,7]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [2,2,2,2,2]\n<strong>输出:</strong> 5\n<strong>解释:</strong> 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。\n</pre>\n\n<p><strong>注意:</strong>&nbsp;给定的数组长度不超过 2000 并且结果一定是32位有符号整数。</p>\n"
}
