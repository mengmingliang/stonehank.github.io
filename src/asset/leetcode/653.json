{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> findTarget = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, k</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preDSF</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">let</span> cur=node\n        <span class=\"hljs-keyword\">if</span>(search(k-cur.val,root,cur))<span class=\"hljs-keyword\">return</span> res=<span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">if</span>(!res &amp;&amp; node.left) preDSF(node.left)\n        <span class=\"hljs-keyword\">if</span>(!res &amp;&amp; node.right) preDSF(node.right)\n        <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\">n,node,cur</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(node){\n            <span class=\"hljs-keyword\">if</span>(n&gt;node.val)<span class=\"hljs-keyword\">return</span> search(n,node.right,cur)\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&lt;node.val)<span class=\"hljs-keyword\">return</span> search(n,node.left,cur)\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(node===cur) <span class=\"hljs-keyword\">return</span> search(n,node.right,cur)\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    preDSF(root)\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "two-sum-iv-input-is-a-bst",
  "content": "<p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>\n\n<p><strong>案例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<strong>输出:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>案例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<strong>输出:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n"
}
