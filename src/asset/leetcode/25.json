{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> reverseKGroup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, k</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(k===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> root\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sectionRe</span>(<span class=\"hljs-params\">root,i,j</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> first=<span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-literal\">null</span>)\n    first.next=root\n    <span class=\"hljs-keyword\">let</span> node=first\n    <span class=\"hljs-keyword\">let</span> lo=i,hi=j,time=j-i\n    <span class=\"hljs-keyword\">while</span>(lo--&gt;<span class=\"hljs-number\">0</span>)node=node.next\t\n    <span class=\"hljs-keyword\">let</span> head=node\n    <span class=\"hljs-keyword\">while</span>(time--&gt;=<span class=\"hljs-number\">0</span>)node=node.next\n    <span class=\"hljs-keyword\">let</span> tail=node\n    time=j-i\n    <span class=\"hljs-keyword\">while</span>(time--&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">let</span> next=head.next\n      head.next=next.next\n      <span class=\"hljs-keyword\">let</span> rest=tail.next\n      tail.next=next\n      next.next=rest\n    }\n    <span class=\"hljs-keyword\">return</span> first.next\n  }\n  <span class=\"hljs-keyword\">let</span> checkLen=root\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(checkLen){\n    checkLen=checkLen.next\n    len++\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">Math</span>.floor(len/k);i++){\n    root=sectionRe(root,i*k,i*k+k<span class=\"hljs-number\">-1</span>)\n  }\n  <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "reverse-nodes-in-k-group",
  "content": "<p>给出一个链表，每&nbsp;<em>k&nbsp;</em>个节点一组进行翻转，并返回翻转后的链表。</p>\n\n<p><em>k&nbsp;</em>是一个正整数，它的值小于或等于链表的长度。如果节点总数不是&nbsp;<em>k&nbsp;</em>的整数倍，那么将最后剩余节点保持原有顺序。</p>\n\n<p><strong>示例 :</strong></p>\n\n<p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n\n<p>当&nbsp;<em>k&nbsp;</em>= 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n\n<p>当&nbsp;<em>k&nbsp;</em>= 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n\n<p><strong>说明 :</strong></p>\n\n<ul>\n\t<li>你的算法只能使用常数的额外空间。</li>\n\t<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n"
}
