{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findDisappearedNumbers = function(nums) {\n//     let arr=[]\n//     for(let i=0;i<nums.length;i++){\n//         let curAbs=Math.abs(nums[i])\n//         if(nums[curAbs-1]<0)continue;\n//         else nums[curAbs-1]=-nums[curAbs-1]\n//     }\n    \n//     for(let i=0;i<nums.length;i++){\n//         if(nums[i]>0)arr.push(i+1)\n//     }\n//     return arr\n    \n    let arr=[];\n    let len=nums.length;\n    for(let i=0;i<len;i++){\n        nums[(nums[i]-1) % len]+=len\n    }\n    for(let i=0;i<len;i++){\n        if(nums[i]<=len)arr.push(i+1)\n    }\n    return arr\n};"
  ],
  "titleSlug": "find-all-numbers-disappeared-in-an-array",
  "content": "<p>Given an array of integers where 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p>\r\n\r\n<p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[5,6]\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个范围在&nbsp; 1 &le; a[i] &le; <em>n</em> (&nbsp;<em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>\n\n<p>找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。</p>\n\n<p>您能在不使用额外空间且时间复杂度为<em>O(n)</em>的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>输出:</strong>\n[5,6]\n</pre>\n"
}
