{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n    let res\n    function BFS(node){\n        let arr=[node];\n        while(arr.length>0){\n            let temp=[];\n            for(let i=0;i<arr.length;i++){\n                if(arr[i].left){temp.push(arr[i].left)}\n                if(arr[i].right){temp.push(arr[i].right)}\n            }\n            if(temp.length===0)res=arr[0]\n            arr=temp;\n            temp=[];\n        }\n    }\n    BFS(root)\n    return res.val\n};"
  ],
  "titleSlug": "find-bottom-left-tree-value",
  "content": "<p>\r\nGiven a binary tree, find the leftmost value in the last row of the tree. \r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput:\r\n\r\n    2\r\n   / \\\r\n  1   3\r\n\r\nOutput:\r\n1\r\n</pre>\r\n</p>\r\n\r\n<p> <b> Example 2: </b><br>\r\n<pre>\r\nInput:\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   5   6\r\n       /\r\n      7\r\n\r\nOutput:\r\n7\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume the tree (i.e., the given root node) is not <b>NULL</b>.\r\n</p>",
  "translatedContent": "<p>给定一个二叉树，在树的最后一行找到最左边的值。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n    2\n   / \\\n  1   3\n\n<strong>输出:</strong>\n1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2: </strong></p>\n\n<pre>\n<strong>输入:</strong>\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n<strong>输出:</strong>\n7\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong> 您可以假设树（即给定的根节点）不为 <strong>NULL</strong>。</p>\n"
}
