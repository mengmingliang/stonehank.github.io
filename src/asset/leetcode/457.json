{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> circularArrayLoop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n = nums.length;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n      <span class=\"hljs-keyword\">if</span> (nums[i] == <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-keyword\">continue</span>;\n      }\n      <span class=\"hljs-keyword\">let</span> j = i, k = getIndex(i);\n      <span class=\"hljs-keyword\">while</span> (nums[k] * nums[i] &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nums[getIndex(k)] * nums[i] &gt; <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-keyword\">if</span> (j == k) {\n            <span class=\"hljs-keyword\">if</span> (j == getIndex(j))<span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n          }\n          j = getIndex(j);\n          k = getIndex(getIndex(k));\n      }\n      j = i;\n      <span class=\"hljs-keyword\">let</span> val = nums[i];\n      <span class=\"hljs-keyword\">while</span> (nums[j] * val &gt; <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-keyword\">let</span> next = getIndex(j);\n          nums[j] = <span class=\"hljs-number\">0</span>;\n          j = next;\n      }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;    \n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getIndex</span>(<span class=\"hljs-params\">i</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> nxtI=i+nums[i]\n    <span class=\"hljs-keyword\">while</span>(nxtI&lt;<span class=\"hljs-number\">0</span>)nxtI+=n\n    <span class=\"hljs-keyword\">return</span> nxtI % n\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "circular-array-loop",
  "content": "<p>给定一个含有正整数和负整数的<strong>环形</strong>数组&nbsp;<code>nums</code>。 如果某个索引中的数 <em>k</em>&nbsp;为正数，则向前移动 <em>k</em>&nbsp;个索引。相反，如果是负数 (<em>-k</em>)，则向后移动 <em>k</em>&nbsp;个索引。因为数组是环形的，所以可以假设最后一个元素的下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。</p>\n\n<p>确定 <code>nums</code>&nbsp;中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度 &gt; 1。此外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动和向后的运动。<br>\n&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>[2,-1,1,2,2]\n<strong>输出：</strong>true\n<strong>解释：</strong>存在循环，按索引 0 -&gt; 2 -&gt; 3 -&gt; 0 。循环长度为 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>[-1,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按索引 1 -&gt; 1 -&gt; 1 ... 的运动无法构成循环，因为循环的长度为 1 。根据定义，循环的长度必须大于 1 。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入：</strong>[-2,1,-1,-2,-2]\n<strong>输出：</strong>false\n<strong>解释：</strong>按索引 1 -&gt; 2 -&gt; 1 -&gt; ... 的运动无法构成循环，因为按索引 1 -&gt; 2 的运动是向前的运动，而按索引 2 -&gt; 1 的运动是向后的运动。一个循环中的所有运动都必须沿着同一方向进行。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>\n\t<li>nums[i] &ne;&nbsp;0</li>\n\t<li>1 &le;&nbsp;nums.length &le; 5000</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<p>你能写出时间时间复杂度为 <strong>O(n)</strong>&nbsp;和额外空间复杂度为 <strong>O(1)</strong> 的算法吗？</p>\n"
}
