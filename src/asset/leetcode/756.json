{
  "code": [
    "/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n      let c={},flag=false\n      for(let i=0;i<allowed.length;i++){\n        let key=allowed[i].substr(0,2)\n        let val=allowed[i][allowed[i].length-1]\n        if(!c[key])c[key]=[val]\n        else c[key].push(val)\n      }\n      function backTrace(str,i,newStr){\n        if(flag)return\n        if(i===str.length){\n          if(str.length===1)return flag=true\n          return backTrace(newStr,1,'')\n        }\n        let key=str[i-1]+str[i]\n        if(!c[key])return\n        for(let j=0;j<c[key].length;j++){\n            backTrace(str,i+1,newStr+c[key][j])\n        }\n      }\n    backTrace(bottom,1,'')\n    return flag\n};"
  ],
  "titleSlug": "pyramid-transition-matrix",
  "content": "<p>\r\nWe are stacking blocks to form a pyramid.  Each block has a color which is a one letter string, like `'Z'`.\r\n</p><p>\r\nFor every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`.  We are allowed to place the block there only if `(A, B, C)` is an allowed triple.\r\n</p><p>\r\nWe start with a bottom row of <code>bottom</code>, represented as a single string.  We also start with a list of allowed triples <code>allowed</code>.  Each allowed triple is represented as a string of length 3.\r\n</p><p>\r\nReturn true if we can build the pyramid all the way to the top, otherwise false.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> bottom = \"XYZ\", allowed = [\"XYD\", \"YZE\", \"DEA\", \"FFF\"]\r\n<b>Output:</b> true\r\n<b>Explanation:</b>\r\nWe can stack the pyramid like this:\r\n    A\r\n   / \\\r\n  D   E\r\n / \\ / \\\r\nX   Y   Z\r\n\r\nThis works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> bottom = \"XXYX\", allowed = [\"XXX\", \"XXY\", \"XYX\", \"XYY\", \"YXZ\"]\r\n<b>Output:</b> false\r\n<b>Explanation:</b>\r\nWe can't stack the pyramid to the top.\r\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>bottom</code> will be a string with length in range <code>[2, 8]</code>.</li>\r\n<li><code>allowed</code> will have length in range <code>[0, 200]</code>.</li>\r\n<li>Letters in all strings will be chosen from the set <code>{'A', 'B', 'C', 'D', 'E', 'F', 'G'}</code>.</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示，例如 &ldquo;Z&rdquo;。</p>\n\n<p>使用三元组表示金字塔的堆砌规则如下：</p>\n\n<p>(A, B, C) 表示，&ldquo;C&rdquo;为顶层方块，方块&ldquo;A&rdquo;、&ldquo;B&rdquo;分别作为方块&ldquo;C&rdquo;下一层的的左、右子块。当且仅当(A, B, C)是被允许的三元组，我们才可以将其堆砌上。</p>\n\n<p>初始时，给定金字塔的基层&nbsp;<code>bottom</code>，用一个字符串表示。一个允许的三元组列表&nbsp;<code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p>\n\n<p>如果可以由基层一直堆到塔尖返回true，否则返回false。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XYZ&quot;, allowed = [&quot;XYD&quot;, &quot;YZE&quot;, &quot;DEA&quot;, &quot;FFF&quot;]\n<strong>输出:</strong> true\n<strong>解析:</strong>\n可以堆砌成这样的金字塔:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n\n因为符合(&#39;X&#39;, &#39;Y&#39;, &#39;D&#39;), (&#39;Y&#39;, &#39;Z&#39;, &#39;E&#39;) 和 (&#39;D&#39;, &#39;E&#39;, &#39;A&#39;) 三种规则。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XXYX&quot;, allowed = [&quot;XXX&quot;, &quot;XXY&quot;, &quot;XYX&quot;, &quot;XYY&quot;, &quot;YXZ&quot;]\n<strong>输出:</strong> false\n<strong>解析:</strong>\n无法一直堆到塔尖。\n注意, 允许存在三元组(A, B, C)和 (A, B, D) ，其中 C != D.\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>bottom</code> 的长度范围在&nbsp;<code>[2, 8]</code>。</li>\n\t<li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li>\n\t<li>方块的标记字母范围为<code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>。</li>\n</ol>\n"
}
