{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> pyramidTransition = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">bottom, allowed</span>) </span>{\n      <span class=\"hljs-keyword\">let</span> c={},flag=<span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;allowed.length;i++){\n        <span class=\"hljs-keyword\">let</span> key=allowed[i].substr(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">let</span> val=allowed[i][allowed[i].length<span class=\"hljs-number\">-1</span>]\n        <span class=\"hljs-keyword\">if</span>(!c[key])c[key]=[val]\n        <span class=\"hljs-keyword\">else</span> c[key].push(val)\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backTrace</span>(<span class=\"hljs-params\">str,i,newStr</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(flag)<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span>(i===str.length){\n          <span class=\"hljs-keyword\">if</span>(str.length===<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> flag=<span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-keyword\">return</span> backTrace(newStr,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">''</span>)\n        }\n        <span class=\"hljs-keyword\">let</span> key=str[i<span class=\"hljs-number\">-1</span>]+str[i]\n        <span class=\"hljs-keyword\">if</span>(!c[key])<span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;c[key].length;j++){\n            backTrace(str,i+<span class=\"hljs-number\">1</span>,newStr+c[key][j])\n        }\n      }\n    backTrace(bottom,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">''</span>)\n    <span class=\"hljs-keyword\">return</span> flag\n};\n</code></pre>\n"
  ],
  "titleSlug": "pyramid-transition-matrix",
  "translatedContent": "<p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示，例如 &ldquo;Z&rdquo;。</p>\n\n<p>使用三元组表示金字塔的堆砌规则如下：</p>\n\n<p>(A, B, C) 表示，&ldquo;C&rdquo;为顶层方块，方块&ldquo;A&rdquo;、&ldquo;B&rdquo;分别作为方块&ldquo;C&rdquo;下一层的的左、右子块。当且仅当(A, B, C)是被允许的三元组，我们才可以将其堆砌上。</p>\n\n<p>初始时，给定金字塔的基层&nbsp;<code>bottom</code>，用一个字符串表示。一个允许的三元组列表&nbsp;<code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p>\n\n<p>如果可以由基层一直堆到塔尖返回true，否则返回false。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XYZ&quot;, allowed = [&quot;XYD&quot;, &quot;YZE&quot;, &quot;DEA&quot;, &quot;FFF&quot;]\n<strong>输出:</strong> true\n<strong>解析:</strong>\n可以堆砌成这样的金字塔:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n\n因为符合(&#39;X&#39;, &#39;Y&#39;, &#39;D&#39;), (&#39;Y&#39;, &#39;Z&#39;, &#39;E&#39;) 和 (&#39;D&#39;, &#39;E&#39;, &#39;A&#39;) 三种规则。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> bottom = &quot;XXYX&quot;, allowed = [&quot;XXX&quot;, &quot;XXY&quot;, &quot;XYX&quot;, &quot;XYY&quot;, &quot;YXZ&quot;]\n<strong>输出:</strong> false\n<strong>解析:</strong>\n无法一直堆到塔尖。\n注意, 允许存在三元组(A, B, C)和 (A, B, D) ，其中 C != D.\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>bottom</code> 的长度范围在&nbsp;<code>[2, 8]</code>。</li>\n\t<li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li>\n\t<li>方块的标记字母范围为<code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>。</li>\n</ol>\n"
}
