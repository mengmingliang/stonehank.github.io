{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> buildTree = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">preorder, inorder</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> preIdx=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// let root=new TreeNode(preorder[0])    </span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTree</span>(<span class=\"hljs-params\">inorder,lo,hi</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(lo&gt;hi)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n        <span class=\"hljs-comment\">// console.log(lo,hi)</span>\n        <span class=\"hljs-keyword\">let</span> val=preorder[preIdx++]\n        <span class=\"hljs-keyword\">let</span> idx=inorder.indexOf(val)\n        <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">new</span> TreeNode(val)\n        <span class=\"hljs-comment\">// console.log(val)</span>\n        node.left=createTree(inorder,lo,idx<span class=\"hljs-number\">-1</span>)\n        node.right=createTree(inorder,idx+<span class=\"hljs-number\">1</span>,hi)\n        <span class=\"hljs-comment\">// console.log(node)</span>\n        <span class=\"hljs-keyword\">return</span> node\n    }\n    \n    <span class=\"hljs-keyword\">return</span> createTree(inorder,<span class=\"hljs-number\">0</span>,inorder.length<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-comment\">// console.log(root)</span>\n    <span class=\"hljs-comment\">// return root</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
  "hasThinking": false,
  "content": "<p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>\n\n<p><strong>注意:</strong><br>\n你可以假设树中没有重复的元素。</p>\n\n<p>例如，给出</p>\n\n<pre>前序遍历 preorder =&nbsp;[3,9,20,15,7]\n中序遍历 inorder = [9,3,15,20,7]</pre>\n\n<p>返回如下的二叉树：</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n"
}
