{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string[]} tokens\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> evalRPN = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tokens</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> cur <span class=\"hljs-keyword\">of</span> tokens){\n    <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\"+\"</span>) stack.push(stack.pop()+stack.pop())\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\"*\"</span>) stack.push(stack.pop()*stack.pop())\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\"-\"</span>) stack.push(-stack.pop()+stack.pop())\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(cur===<span class=\"hljs-string\">\"/\"</span>) stack.push(~~(<span class=\"hljs-number\">1</span>/stack.pop()*stack.pop()))\n    <span class=\"hljs-keyword\">else</span> stack.push(+cur)\n  }\n  <span class=\"hljs-keyword\">return</span> stack[<span class=\"hljs-number\">0</span>]\n};\n</code></pre>\n"
  ],
  "titleSlug": "evaluate-reverse-polish-notation",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>因为题目指出了表达式总是有效的，因此使用<code>stack</code>，遇到数字则<code>push</code>，遇到运算符号，则<code>pop</code>2个拿出来运算后再<code>push</code>。</p>\n<p>注意：除数取整不能使用<code>Math.floor</code>，应该使用<code>Math.trunc</code>或者<code>~~</code>。</p>\n",
  "content": "<p>根据<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\" target=\"_blank\">逆波兰表示法</a>，求表达式的值。</p>\n\n<p>有效的运算符包括&nbsp;<code>+</code>,&nbsp;<code>-</code>,&nbsp;<code>*</code>,&nbsp;<code>/</code>&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n\n<p><strong>说明：</strong></p>\n\n<ul>\n\t<li>整数除法只保留整数部分。</li>\n\t<li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>\n</ul>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]\n<strong>输出:</strong> 9\n<strong>解释:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]\n<strong>输出:</strong> 6\n<strong>解释:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>示例&nbsp;3：</strong></p>\n\n<pre><strong>输入:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]\n<strong>输出:</strong> 22\n<strong>解释:</strong> \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre>\n"
}
