{
  "code": [
    "/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} root\n * @param {number} k\n * @return {ListNode[]}\n */\nvar splitListToParts = function(root, k) {\n    function getSize(list){\n        let size=0\n        while(list){\n            list=list.next\n            size++\n        }\n        return size\n    }\n    let size=getSize(root), mod=size % k, _root=root\n    let table=new ListNode(null)\n    let next=table\n    let _len=Math.floor(size/k)\n    for(let i=0;i<k;i++){\n        let len=mod-->0?1+_len:_len\n        let childNode=new ListNode(null)\n        if(len>0)next.val=childNode\n        while(len>0){\n            childNode.val=_root.val\n            _root=_root.next\n            if(len>1){\n                childNode.next=new ListNode(null)\n                childNode=childNode.next\n            }\n            len--\n        }\n        if(i<k-1){\n            next.next=new ListNode(null)\n            next=next.next\n        }\n    }\n \n    \n    return table\n};"
  ],
  "titleSlug": "split-linked-list-in-parts",
  "content": "<p>Given a (singly) linked list with head node <code>root</code>, write a function to split the linked list into <code>k</code> consecutive linked list \"parts\".\r\n</p><p>\r\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\r\n</p><p>\r\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\r\n</p><p>\r\nReturn a List of ListNode's representing the linked list parts that are formed.\r\n</p>\r\n\r\nExamples\r\n1->2->3->4, k = 5 // 5 equal parts\r\n[ [1], \r\n[2],\r\n[3],\r\n[4],\r\nnull ]\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-line\">\r\n<b>Input:</b> \r\nroot = [1, 2, 3], k = 5\r\n<b>Output:</b> [[1],[2],[3],[],[]]\r\n<b>Explanation:</b>\r\nThe input and each element of the output are ListNodes, not arrays.\r\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\nThe first element output[0] has output[0].val = 1, output[0].next = null.\r\nThe last element output[4] is null, but it's string representation as a ListNode is [].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n<b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n<b>Explanation:</b>\r\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>root</code> will be in the range <code>[0, 1000]</code>.</li>\r\n<li>Each value of a node in the input will be an integer in the range <code>[0, 999]</code>.</li>\r\n<li><code>k</code> will be an integer in the range <code>[1, 50]</code>.</li>\r\n</p>",
  "translatedContent": "<p>给定一个头结点为 <code>root</code> 的链表, 编写一个函数以将链表分隔为 <code>k</code> 个连续的部分。</p>\n\n<p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p>\n\n<p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p>\n\n<p>返回一个符合上述规则的链表的列表。</p>\n\n<p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nroot = [1, 2, 3], k = 5\n<strong>输出:</strong> [[1],[2],[3],[],[]]\n<strong>解释:</strong>\n输入输出各部分都应该是链表，而不是数组。\n例如, 输入的结点 root 的 val= 1, root.next.val = 2, \\root.next.next.val = 3, 且 root.next.next.next = null。\n第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。\n最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>输出:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>解释:</strong>\n输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>root</code> 的长度范围：&nbsp;<code>[0, 1000]</code>.</li>\n\t<li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li>\n\t<li><code>k</code>&nbsp;的取值范围：&nbsp;<code>[1, 50]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n"
}
