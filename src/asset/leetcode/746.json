{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} cost\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minCostClimbingStairs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cost</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> cache=[]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCostSum</span>(<span class=\"hljs-params\">cost,idx</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(idx&lt;<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> cost[idx]\n        <span class=\"hljs-keyword\">if</span>(cache[idx])<span class=\"hljs-keyword\">return</span> cache[idx]\n        <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-built_in\">Math</span>.min(getCostSum(cost,idx<span class=\"hljs-number\">-1</span>)+(cost[idx+<span class=\"hljs-number\">1</span>] || <span class=\"hljs-number\">0</span>),getCostSum(cost,idx<span class=\"hljs-number\">-2</span>)+cost[idx],getCostSum(cost,idx<span class=\"hljs-number\">-1</span>)+cost[idx])\n        <span class=\"hljs-keyword\">if</span>(!cache[idx])cache[idx]=min\n        <span class=\"hljs-keyword\">return</span> min\n    }\n    <span class=\"hljs-keyword\">return</span> getCostSum(cost,cost.length<span class=\"hljs-number\">-1</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "min-cost-climbing-stairs",
  "translatedContent": "<p>数组的每个索引做为一个阶梯，第&nbsp;<code>i</code>个阶梯对应着一个非负数的体力花费值&nbsp;<code>cost[i]</code>(索引从0开始)。</p>\n\n<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>\n\n<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> cost = [10, 15, 20]\n<strong>输出:</strong> 15\n<strong>解释:</strong> 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>输出:</strong> 6\n<strong>解释:</strong> 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li><code>cost</code>&nbsp;的长度将会在&nbsp;<code>[2, 1000]</code>。</li>\n\t<li>每一个&nbsp;<code>cost[i]</code> 将会是一个Integer类型，范围为&nbsp;<code>[0, 999]</code>。</li>\n</ol>\n"
}
