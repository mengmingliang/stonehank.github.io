{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} L\n * @param {number} R\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> trimBST = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, L, R</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(root===<span class=\"hljs-literal\">null</span>){<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>}\n    <span class=\"hljs-keyword\">if</span>(root.val&lt;L){<span class=\"hljs-keyword\">return</span> trimBST(root.right,L,R)}\n    <span class=\"hljs-keyword\">if</span>(root.val&gt;R){<span class=\"hljs-keyword\">return</span> trimBST(root.left,L,R)}\n    \n    root.left=trimBST(root.left,L,R)\n    root.right=trimBST(root.right,L,R)\n    <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "trim-a-binary-search-tree",
  "translatedContent": "<p>给定一个二叉搜索树，同时给定最小边界<code>L</code>&nbsp;和最大边界&nbsp;<code>R</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[L, R]</code>中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    1\n   / \\\n  0   2\n\n  L = 1\n  R = 2\n\n<strong>输出:</strong> \n    1\n      \\\n       2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> \n    3\n   / \\\n  0   4\n   \\\n    2\n   /\n  1\n\n  L = 1\n  R = 3\n\n<strong>输出:</strong> \n      3\n     / \n   2   \n  /\n 1\n</pre>\n"
}
