{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isInterleave = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s1, s2, s3</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len1=s1.length,len2=s2.length,len3=s3.length\n  <span class=\"hljs-keyword\">if</span>(len3!==len1+len2)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(len1+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(len2+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">false</span>))\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;len2+<span class=\"hljs-number\">1</span>;i++){\n    dp[<span class=\"hljs-number\">0</span>][i]=dp[<span class=\"hljs-number\">0</span>][i<span class=\"hljs-number\">-1</span>] &amp;&amp; s2[i<span class=\"hljs-number\">-1</span>]===s3[i<span class=\"hljs-number\">-1</span>]\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;len1+<span class=\"hljs-number\">1</span>;i++){\n    dp[i][<span class=\"hljs-number\">0</span>]=dp[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>] &amp;&amp; s1[i<span class=\"hljs-number\">-1</span>]===s3[i<span class=\"hljs-number\">-1</span>]\n  }\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;dp.length;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;dp[i].length;j++){\n      <span class=\"hljs-keyword\">let</span> k=i+j<span class=\"hljs-number\">-1</span>\n      dp[i][j]=(s1[i<span class=\"hljs-number\">-1</span>]===s3[k] &amp;&amp; dp[i<span class=\"hljs-number\">-1</span>][j]) || (s2[j<span class=\"hljs-number\">-1</span>]===s3[k] &amp;&amp; dp[i][j<span class=\"hljs-number\">-1</span>])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[s1.length][s2.length]\n};\n</code></pre>\n"
  ],
  "titleSlug": "interleaving-string",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>DP，<code>dp[i][j]</code>表示<code>s1[0,i]</code>和<code>s2[0,j]</code>是否能交叉形成<code>s3[0,i+j-1]</code>。</p>\n<p>设定<code>dp</code>的行高为<code>s1.length+1</code>，多出的一行为空值。</p>\n<p>设定<code>dp</code>的列宽为<code>s2.length+1</code>，多出的一列为空值。</p>\n<p><code>dp[0][0]=true</code>。</p>\n<p>设定第一行的初始值：<code>dp[0][i]=dp[0][i-1] &amp;&amp; s2[i-1]===s3[i-1]</code>，因为是第一行，所以<code>s1[0]</code>为空值，只需要判断<code>s2</code>和<code>s3</code>；</p>\n<p>设定第一列的初始值：<code>dp[i][0]=dp[i-1][0] &amp;&amp; s1[i-1]===s3[i-1]</code>，同样<code>s2[0]</code>为空值，只需要判断<code>s1</code>和<code>s3</code>；</p>\n<p>后续的转移方程：</p>\n<p><code>dp[i][j]=(s1[i-1]===s3[k] &amp;&amp; dp[i-1][j]) || (s2[j-1]===s3[k] &amp;&amp; dp[i][j-1])</code>，其中<code>k=i+j-1</code>；</p>\n<p>后续需要判断2种情况，<code>s1</code>和<code>s3</code>或者<code>s2</code>和<code>s3</code>。</p>\n",
  "content": "<p>给定三个字符串&nbsp;<em>s1</em>, <em>s2</em>, <em>s3</em>, 验证&nbsp;<em>s3</em>&nbsp;是否是由&nbsp;<em>s1</em>&nbsp;和&nbsp;<em>s2 </em>交错组成的。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbcbcac&quot;\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbbaccc&quot;\n<strong>输出:</strong> false</pre>\n"
}
