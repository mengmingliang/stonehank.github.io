{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} num\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> readBinaryWatch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> aux=<span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">start,rest,hour,minute</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(hour&gt;=<span class=\"hljs-number\">12</span> || minute&gt;=<span class=\"hljs-number\">60</span>)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(rest===<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">return</span> res.push(hour+<span class=\"hljs-string\">':'</span>+(minute&lt;<span class=\"hljs-number\">10</span>?<span class=\"hljs-string\">'0'</span>:<span class=\"hljs-string\">''</span>)+minute)\n    }\n    <span class=\"hljs-keyword\">if</span>(start===aux.length)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=start;i&lt;aux.length;i++){\n      <span class=\"hljs-keyword\">if</span>(aux[i])<span class=\"hljs-keyword\">continue</span>\n      aux[i]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-number\">4</span>){\n        backtrack(i+<span class=\"hljs-number\">1</span>,rest<span class=\"hljs-number\">-1</span>,hour+<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,i),minute)\n      }<span class=\"hljs-keyword\">else</span>{\n        backtrack(i+<span class=\"hljs-number\">1</span>,rest<span class=\"hljs-number\">-1</span>,hour,minute+<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,i<span class=\"hljs-number\">-4</span>))\n      }\n      aux[i]=<span class=\"hljs-literal\">false</span>\n    }\n  }\n  backtrack(<span class=\"hljs-number\">0</span>,num,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "binary-watch",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>将<code>hour</code>的数组和<code>minute</code>的数组合在一起，回溯的时候比较方便，回溯的会后维护2个变量<code>hour</code>和<code>minute</code>，分别记录当前的小时和分钟总和。</p>\n<p>由于<code>hour</code>有4个数，<code>minute</code>有6个数，因此当<code>i&lt;4</code>，将当前数字添加到<code>hour</code>上，<code>i&gt;=4</code>将数字添加到<code>minute</code>上，\n根据题目要求，如果<code>hour</code>超过<code>11</code>或者<code>minute</code>超过<code>59</code>，立刻返回。</p>\n<p>最后检查如果<code>minute&lt;10</code>，需要添加<code>前导0</code>。</p>\n",
  "content": "<p>二进制手表顶部有 4 个 LED 代表<strong>小时（0-11）</strong>，底部的 6 个 LED 代表<strong>分钟（0-59）</strong>。</p>\n\n<p>每个 LED 代表一个 0 或 1，最低位在右侧。</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" style=\"height:300px\" /></p>\n\n<p>例如，上面的二进制手表读取 &ldquo;3:25&rdquo;。</p>\n\n<p>给定一个非负整数 <em>n&nbsp;</em>代表当前 LED 亮着的数量，返回所有可能的时间。</p>\n\n<p><strong>案例:</strong></p>\n\n<pre>\n输入: n = 1\n返回: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意事项:</strong></p>\n\n<ul>\n\t<li>输出的顺序没有要求。</li>\n\t<li>小时不会以零开头，比如 &ldquo;01:00&rdquo;&nbsp;是不允许的，应为 &ldquo;1:00&rdquo;。</li>\n\t<li>分钟必须由两位数组成，可能会以零开头，比如 &ldquo;10:2&rdquo;&nbsp;是无效的，应为 &ldquo;10:02&rdquo;。</li>\n</ul>\n"
}
