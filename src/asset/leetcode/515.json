{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> largestValues = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> []\n  <span class=\"hljs-keyword\">let</span> ans=[]\n  <span class=\"hljs-keyword\">let</span> arr=[root]\n  <span class=\"hljs-keyword\">while</span>(arr.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">let</span> len=arr.length\n    <span class=\"hljs-keyword\">let</span> maxV=-<span class=\"hljs-literal\">Infinity</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++){\n      <span class=\"hljs-keyword\">let</span> node=arr.shift()\n      maxV=<span class=\"hljs-built_in\">Math</span>.max(maxV,node.val)\n      <span class=\"hljs-keyword\">if</span>(node.left)arr.push(node.left)\n      <span class=\"hljs-keyword\">if</span>(node.right)arr.push(node.right)\n    }\n    ans.push(maxV)\n  }\n  <span class=\"hljs-keyword\">return</span> ans\n};\n</code></pre>\n"
  ],
  "titleSlug": "find-largest-value-in-each-tree-row",
  "hasThinking": false,
  "content": "<p>您需要在二叉树的每一行中找到最大的值。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入:</strong> \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n<strong>输出:</strong> [1, 3, 9]\n</pre>\n"
}
