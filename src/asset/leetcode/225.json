{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MyStack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.queue1=[]\n  <span class=\"hljs-keyword\">this</span>.queue2=[]\n  <span class=\"hljs-keyword\">this</span>._top=<span class=\"hljs-literal\">null</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Push element x onto stack. \n * @param {number} x\n * @return {void}\n */</span>\nMyStack.prototype.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.queue1.push(x)\n  <span class=\"hljs-keyword\">this</span>._top=x\n};\n\n<span class=\"hljs-comment\">/**\n * Removes the element on top of the stack and returns that element.\n * @return {number}\n */</span>\nMyStack.prototype.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  \n  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">this</span>.queue1.length&gt;<span class=\"hljs-number\">1</span>){\n    <span class=\"hljs-keyword\">this</span>._top=<span class=\"hljs-keyword\">this</span>.queue1.shift()\n    <span class=\"hljs-keyword\">this</span>.queue2.push(<span class=\"hljs-keyword\">this</span>._top)\n  }\n  \n  <span class=\"hljs-keyword\">let</span> res= <span class=\"hljs-keyword\">this</span>.queue1.shift()\n  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-keyword\">this</span>.queue2.length&gt;<span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-keyword\">this</span>.queue1.push(<span class=\"hljs-keyword\">this</span>.queue2.shift())\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n\n<span class=\"hljs-comment\">/**\n * Get the top element.\n * @return {number}\n */</span>\nMyStack.prototype.top = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._top\n  <span class=\"hljs-comment\">// while(this.queue1.length&gt;1){</span>\n  <span class=\"hljs-comment\">//   this.queue2.push(this.queue1.shift())</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// return this.queue1[0]</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Returns whether the stack is empty.\n * @return {boolean}\n */</span>\nMyStack.prototype.empty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue2.length===<span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.queue1.length===<span class=\"hljs-number\">0</span>\n};\n\n<span class=\"hljs-comment\">/** \n * Your MyStack object will be instantiated and called as such:\n * var obj = Object.create(MyStack).createNew()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "implement-stack-using-queues",
  "content": "<p>使用队列实现栈的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 元素 x 入栈</li>\n\t<li>pop() -- 移除栈顶元素</li>\n\t<li>top() -- 获取栈顶元素</li>\n\t<li>empty() -- 返回栈是否为空</li>\n</ul>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>你只能使用队列的基本操作-- 也就是&nbsp;<code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;这些操作是合法的。</li>\n\t<li>你所使用的语言也许不支持队列。&nbsp;你可以使用 list 或者 deque（双端队列）来模拟一个队列&nbsp;, 只要是标准的队列操作即可。</li>\n\t<li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li>\n</ul>\n"
}
