{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} key\n * @return {TreeNode}\n */\nvar deleteNode = function(root, key) {\n  if(!root)return root\n  if(key<root.val)root.left=deleteNode(root.left,key)\n  if(key>root.val)root.right=deleteNode(root.right,key)\n  if(key===root.val){\n    if(!root.left && !root.right)root=null\n    else if(!root.left)root=root.right\n    else if(!root.right)root=root.left\n    else {\n      let max=findMinInRight(root.right)\n      let val=max.val\n      root.right=deleteNode(root.right,val)\n      root.val=val\n    }\n  }\n  function findMinInRight(node){\n    if(node.left)return findMinInRight(node.left)\n    return node\n  }\n  return root\n};"
  ],
  "titleSlug": "delete-node-in-a-bst",
  "content": "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\r\n\r\n<p>Basically, the deletion can be divided into two stages:\r\n<ol>\r\n<li>Search for a node to remove.</li>\r\n<li>If the node is found, delete the node.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Note:</b> Time complexity should be O(height of tree).</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nroot = [5,3,6,2,4,null,7]\r\nkey = 3\r\n\r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nGiven key to delete is 3. So we find the node with value 3 and delete it.\r\n\r\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\r\n\r\n    5\r\n   / \\\r\n  4   6\r\n /     \\\r\n2       7\r\n\r\nAnother valid answer is [5,2,6,null,4,null,7].\r\n\r\n    5\r\n   / \\\r\n  2   6\r\n   \\   \\\r\n    4   7\r\n</pre>\r\n</p>",
  "translatedContent": "<p>给定一个二叉搜索树的根节点 <strong>root </strong>和一个值 <strong>key</strong>，删除二叉搜索树中的&nbsp;<strong>key&nbsp;</strong>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n\n<p>一般来说，删除节点可分为两个步骤：</p>\n\n<ol>\n\t<li>首先找到需要删除的节点；</li>\n\t<li>如果找到了，删除它。</li>\n</ol>\n\n<p><strong>说明：</strong> 要求算法时间复杂度为&nbsp;O(h)，h 为树的高度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n\n一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n另一个正确答案是 [5,2,6,null,4,null,7]。\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n"
}
