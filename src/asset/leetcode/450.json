{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} key\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> deleteNode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> root\n  <span class=\"hljs-keyword\">if</span>(key&lt;root.val)root.left=deleteNode(root.left,key)\n  <span class=\"hljs-keyword\">if</span>(key&gt;root.val)root.right=deleteNode(root.right,key)\n  <span class=\"hljs-keyword\">if</span>(key===root.val){\n    <span class=\"hljs-keyword\">if</span>(!root.left &amp;&amp; !root.right)root=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!root.left)root=root.right\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!root.right)root=root.left\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">let</span> max=findMinInRight(root.right)\n      <span class=\"hljs-keyword\">let</span> val=max.val\n      root.right=deleteNode(root.right,val)\n      root.val=val\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findMinInRight</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(node.left)<span class=\"hljs-keyword\">return</span> findMinInRight(node.left)\n    <span class=\"hljs-keyword\">return</span> node\n  }\n  <span class=\"hljs-keyword\">return</span> root\n};\n</code></pre>\n"
  ],
  "titleSlug": "delete-node-in-a-bst",
  "hasThinking": false,
  "content": "<p>给定一个二叉搜索树的根节点 <strong>root </strong>和一个值 <strong>key</strong>，删除二叉搜索树中的&nbsp;<strong>key&nbsp;</strong>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n\n<p>一般来说，删除节点可分为两个步骤：</p>\n\n<ol>\n\t<li>首先找到需要删除的节点；</li>\n\t<li>如果找到了，删除它。</li>\n</ol>\n\n<p><strong>说明：</strong> 要求算法时间复杂度为&nbsp;O(h)，h 为树的高度。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n\n一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n另一个正确答案是 [5,2,6,null,4,null,7]。\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n"
}
