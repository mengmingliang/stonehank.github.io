{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {character[]} chars\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> compress = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">chars</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> count=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> prevIdx=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;chars.length;i++){\n    <span class=\"hljs-keyword\">if</span>(chars[i]===chars[i<span class=\"hljs-number\">-1</span>])count++\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(count&gt;<span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">let</span> strCount=count+<span class=\"hljs-string\">''</span>\n        <span class=\"hljs-keyword\">let</span> strLen=strCount.length\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;strLen;j++){\n           chars[prevIdx+j+<span class=\"hljs-number\">1</span>]=strCount[j]\n        }\n        <span class=\"hljs-keyword\">if</span>(count<span class=\"hljs-number\">-1</span>&gt;strLen) chars.splice(prevIdx+strLen+<span class=\"hljs-number\">1</span>,count-strLen<span class=\"hljs-number\">-1</span>)\n        count=<span class=\"hljs-number\">1</span>\n        i=prevIdx+strLen+<span class=\"hljs-number\">1</span>\n        prevIdx=i    \n      }<span class=\"hljs-keyword\">else</span>{\n        prevIdx=i\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">if</span>(count&gt;<span class=\"hljs-number\">1</span>){\n    <span class=\"hljs-keyword\">let</span> strCount=count+<span class=\"hljs-string\">''</span>\n    <span class=\"hljs-keyword\">let</span> strLen=strCount.length\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;strLen;j++){\n       chars[prevIdx+j+<span class=\"hljs-number\">1</span>]=strCount[j]\n    }\n    chars.splice(prevIdx+strLen+<span class=\"hljs-number\">1</span>,count-strLen<span class=\"hljs-number\">-1</span>)\n  }\n\n};\n</code></pre>\n"
  ],
  "titleSlug": "string-compression",
  "content": "<p>给定一组字符，使用<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地算法</a>将其压缩。</p>\n\n<p>压缩后的长度必须始终小于或等于原数组长度。</p>\n\n<p>数组的每个元素应该是长度为1&nbsp;的<strong>字符</strong>（不是 int 整数类型）。</p>\n\n<p>在完成<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a><strong>修改输入数组</strong>后，返回数组的新长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong><br />\n你能否仅使用O(1) 空间解决问题？</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n\n<strong>输出：</strong>\n返回6，输入数组的前6个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n\n<strong>说明：</strong>\n&quot;aa&quot;被&quot;a2&quot;替代。&quot;bb&quot;被&quot;b2&quot;替代。&quot;ccc&quot;被&quot;c3&quot;替代。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;]\n\n<strong>输出：</strong>\n返回1，输入数组的前1个字符应该是：[&quot;a&quot;]\n\n<strong>说明：</strong>\n没有任何字符串被替代。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n\n<strong>输出：</strong>\n返回4，输入数组的前4个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。\n\n<strong>说明：</strong>\n由于字符&quot;a&quot;不重复，所以不会被压缩。&quot;bbbbbbbbbbbb&quot;被&ldquo;b12&rdquo;替代。\n注意每个数字在数组中都有它自己的位置。\n</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>所有字符都有一个ASCII值在<code>[35, 126]</code>区间内。</li>\n\t<li><code>1 &lt;= len(chars) &lt;= 1000</code>。</li>\n</ol>\n"
}
