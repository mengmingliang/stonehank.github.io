{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n */</span>\n<span class=\"hljs-keyword\">var</span> Solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.originNums=nums\n};\n\n<span class=\"hljs-comment\">/**\n * Resets the array to its original configuration and return it.\n * @return {number[]}\n */</span>\nSolution.prototype.reset = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.originNums\n};\n\n<span class=\"hljs-comment\">/**\n * Returns a random shuffling of the array.\n * @return {number[]}\n */</span>\nSolution.prototype.shuffle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">let</span> copy = <span class=\"hljs-keyword\">this</span>.originNums.slice();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; copy.length; i++) {\n        <span class=\"hljs-keyword\">let</span> rand = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * copy.length);\n        <span class=\"hljs-keyword\">let</span> temp = copy[i];\n        copy[i] = copy[rand];\n        copy[rand] = temp;\n    }\n    <span class=\"hljs-keyword\">return</span> copy;\n};\n\n<span class=\"hljs-comment\">/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "shuffle-an-array",
  "translatedContent": "<p>打乱一个没有重复元素的数组。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n</pre>\n"
}
