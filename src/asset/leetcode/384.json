{
  "code": [
    "/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n    this.originNums=nums\n};\n\n/**\n * Resets the array to its original configuration and return it.\n * @return {number[]}\n */\nSolution.prototype.reset = function() {\n    return this.originNums\n};\n\n/**\n * Returns a random shuffling of the array.\n * @return {number[]}\n */\nSolution.prototype.shuffle = function() {\n    let copy = this.originNums.slice();\n    for (let i = 0; i < copy.length; i++) {\n        let rand = Math.floor(Math.random() * copy.length);\n        let temp = copy[i];\n        copy[i] = copy[rand];\n        copy[rand] = temp;\n    }\n    return copy;\n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(nums)\n * var param_1 = obj.reset()\n * var param_2 = obj.shuffle()\n */"
  ],
  "titleSlug": "shuffle-an-array",
  "content": "<p>Shuffle a set of numbers without duplicates.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an array with set 1, 2, and 3.\r\nint[] nums = {1,2,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.\r\nsolution.shuffle();\r\n\r\n// Resets the array back to its original configuration [1,2,3].\r\nsolution.reset();\r\n\r\n// Returns the random shuffling of array [1,2,3].\r\nsolution.shuffle();\r\n</pre>\r\n</p>",
  "translatedContent": "<p>打乱一个没有重复元素的数组。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>\n// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n</pre>\n"
}
