{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> MapSum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// let map={}</span>\n    <span class=\"hljs-comment\">// this.createNew=function(){</span>\n    <span class=\"hljs-comment\">//     this.map=map</span>\n    <span class=\"hljs-comment\">// }</span>\n    <span class=\"hljs-keyword\">this</span>.map={}\n};\n\n<span class=\"hljs-comment\">/** \n * @param {string} key \n * @param {number} val\n * @return {void}\n */</span>\nMapSum.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key, val</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.map[key]=val\n};\n\n<span class=\"hljs-comment\">/** \n * @param {string} prefix\n * @return {number}\n */</span>\nMapSum.prototype.sum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prefix</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> keys=<span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-keyword\">this</span>.map)\n    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> reg=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">`^<span class=\"hljs-subst\">${prefix}</span>.*`</span>)\n    keys.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span>=&gt;</span>{\n        <span class=\"hljs-keyword\">if</span>(reg.test(n))\n        sum+=<span class=\"hljs-keyword\">this</span>.map[n]\n    })\n    <span class=\"hljs-keyword\">return</span> sum\n};\n\n<span class=\"hljs-comment\">/** \n * Your MapSum object will be instantiated and called as such:\n * var obj = Object.create(MapSum).createNew()\n * obj.insert(key,val)\n * var param_2 = obj.sum(prefix)\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "map-sum-pairs",
  "content": "<p>实现一个 MapSum 类里的两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>。</p>\n\n<p>对于方法&nbsp;<code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p>\n\n<p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: insert(&quot;apple&quot;, 3), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 3\n输入: insert(&quot;app&quot;, 2), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 5\n</pre>\n"
}
