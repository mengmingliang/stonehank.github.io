{
  "code": [
    "/**\n * Initialize your data structure here.\n */\nvar MapSum = function() {\n    // let map={}\n    // this.createNew=function(){\n    //     this.map=map\n    // }\n    this.map={}\n};\n\n/** \n * @param {string} key \n * @param {number} val\n * @return {void}\n */\nMapSum.prototype.insert = function(key, val) {\n    this.map[key]=val\n};\n\n/** \n * @param {string} prefix\n * @return {number}\n */\nMapSum.prototype.sum = function(prefix) {\n    let keys=Object.keys(this.map)\n    let sum=0\n    let reg=new RegExp(`^${prefix}.*`)\n    keys.forEach(n=>{\n        if(reg.test(n))\n        sum+=this.map[n]\n    })\n    return sum\n};\n\n/** \n * Your MapSum object will be instantiated and called as such:\n * var obj = Object.create(MapSum).createNew()\n * obj.insert(key,val)\n * var param_2 = obj.sum(prefix)\n */"
  ],
  "titleSlug": "map-sum-pairs",
  "content": "<p>\r\nImplement a MapSum class with <code>insert</code>, and <code>sum</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>insert</code>, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>sum</code>, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n</pre>\r\n</p>\r\n",
  "translatedContent": "<p>实现一个 MapSum 类里的两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>。</p>\n\n<p>对于方法&nbsp;<code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p>\n\n<p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>输入: insert(&quot;apple&quot;, 3), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 3\n输入: insert(&quot;app&quot;, 2), 输出: Null\n输入: sum(&quot;ap&quot;), 输出: 5\n</pre>\n"
}
