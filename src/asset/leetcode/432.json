{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">DoubleLink</span>(<span class=\"hljs-params\">val,count</span>)</span>{\n  <span class=\"hljs-keyword\">this</span>.val=val\n  <span class=\"hljs-keyword\">this</span>.count=count\n  <span class=\"hljs-keyword\">this</span>.next=<span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">this</span>.prev=<span class=\"hljs-literal\">null</span>\n}\n\n<span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> AllOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> head=<span class=\"hljs-keyword\">new</span> DoubleLink(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>),\n      tail=<span class=\"hljs-keyword\">new</span> DoubleLink(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>)\n  head.next=tail\n  tail.prev=head\n  <span class=\"hljs-keyword\">this</span>.insert=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node,addNode</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> nxt=node.next\n    node.next=addNode\n    addNode.prev=node\n    addNode.next=nxt\n    nxt.prev=addNode\n  }\n  <span class=\"hljs-keyword\">this</span>.remove=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> pre=node.prev,\n        nxt=node.next\n    pre.next=nxt\n    nxt.prev=pre\n    node.next=<span class=\"hljs-literal\">null</span>\n    node.prev=<span class=\"hljs-literal\">null</span>\n  }\n  <span class=\"hljs-keyword\">this</span>.addHead=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.insert(head,node)\n  }\n  <span class=\"hljs-keyword\">this</span>.addTail=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.insert(tail.prev,node)\n  }\n  <span class=\"hljs-keyword\">this</span>.head=head\n  <span class=\"hljs-keyword\">this</span>.tail=tail\n  <span class=\"hljs-keyword\">this</span>.key2Node={}\n};\n\n<span class=\"hljs-comment\">/**\n * Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.inc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.key2Node[key]==<span class=\"hljs-literal\">null</span>){\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">this</span>.head.next\n    <span class=\"hljs-keyword\">if</span>(node.count===<span class=\"hljs-number\">1</span>){\n      node.val.set(key,key)\n      <span class=\"hljs-keyword\">this</span>.key2Node[key]=node\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> DoubleLink(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(),<span class=\"hljs-number\">1</span>)\n      newNode.val.set(key,key)\n      <span class=\"hljs-keyword\">this</span>.addHead(newNode)\n      <span class=\"hljs-keyword\">this</span>.key2Node[key]=newNode\n    }\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">this</span>.key2Node[key]\n    <span class=\"hljs-keyword\">let</span> nxtNode=node.next\n    node.val.delete(key)\n    <span class=\"hljs-keyword\">if</span>(nxtNode.count===node.count+<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">let</span> nxtMap=nxtNode.val\n      nxtMap.set(key,key)\n      <span class=\"hljs-keyword\">this</span>.key2Node[key]=nxtNode\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> DoubleLink(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(),node.count+<span class=\"hljs-number\">1</span>)\n      newNode.val.set(key,key)\n      <span class=\"hljs-keyword\">this</span>.insert(node,newNode)\n      <span class=\"hljs-keyword\">this</span>.key2Node[key]=newNode\n    }\n    <span class=\"hljs-keyword\">if</span>(node.val.size===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">this</span>.remove(node)\n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.dec = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.key2Node[key]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">let</span> node=<span class=\"hljs-keyword\">this</span>.key2Node[key]\n  <span class=\"hljs-keyword\">let</span> preNode=node.prev\n  node.val.delete(key)\n  <span class=\"hljs-keyword\">if</span>(node.val.size===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">this</span>.remove(node)\n  <span class=\"hljs-keyword\">if</span>(node.count===<span class=\"hljs-number\">1</span>){\n    <span class=\"hljs-keyword\">this</span>.key2Node[key]=<span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-keyword\">if</span>(preNode.count===node.count<span class=\"hljs-number\">-1</span>){\n    preNode.val.set(key,key)\n    <span class=\"hljs-keyword\">this</span>.key2Node[key]=preNode\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">let</span> newNode=<span class=\"hljs-keyword\">new</span> DoubleLink(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(),node.count<span class=\"hljs-number\">-1</span>)\n    newNode.val.set(key,key)\n    <span class=\"hljs-keyword\">this</span>.insert(preNode,newNode)\n    <span class=\"hljs-keyword\">this</span>.key2Node[key]=newNode    \n  }\n};\n\n<span class=\"hljs-comment\">/**\n * Returns one of the keys with maximal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMaxKey = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> maxNode=<span class=\"hljs-keyword\">this</span>.tail.prev,\n      maxMap=maxNode.val\n  <span class=\"hljs-keyword\">if</span>(!maxMap)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>\n  <span class=\"hljs-keyword\">return</span> maxMap.entries().next().value[<span class=\"hljs-number\">0</span>]\n};\n\n<span class=\"hljs-comment\">/**\n * Returns one of the keys with Minimal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMinKey = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> minNode=<span class=\"hljs-keyword\">this</span>.head.next,\n      minMap=minNode.val\n  <span class=\"hljs-keyword\">if</span>(!minMap)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>\n  <span class=\"hljs-keyword\">return</span> minMap.entries().next().value[<span class=\"hljs-number\">0</span>]  \n};\n\n<span class=\"hljs-comment\">/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "all-oone-data-structure",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>这里如果不要求<code>O(1)</code>，那就很简单，用一个<code>map</code>，保存每个<code>key</code>的次数，当次数为<code>0</code>，删除。</p>\n<p><code>getMax</code>，线性查找最大的；<code>getMin</code>线性查找最小的。</p>\n<p>时间复杂度是<code>O(map.size)</code>。</p>\n<p>如果要求<code>O(1)</code>，需要维护一个数据结构，并且保证它的头部是出现次数最小的集合，尾部是出现次数最多的集合。</p>\n<p>当<code>getMax</code>的时候只需要返回最后一组的任意值，当<code>getMin</code>时，返回最前一组的任意值。</p>\n<p>如果需要保持这种结构，那么需要用到<code>查找</code>集合、<code>增加</code>集合以及<code>删除</code>集合，同时还有集合内部的<code>查找，增加，删除</code>key。</p>\n<p>集合内部使用<code>map</code>可以处理，那么这个集合需要用<code>双向链表</code>构成，并且额外一个<code>hash</code>跟踪每个<code>key</code>对应的集合(双向链表<code>node</code>)引用。</p>\n<p>这个数据结构如下：</p>\n<pre class=\"hljs\"><code>key2Node: { 'a':DoubleLink,'b':DoubleLink,... }\nDoubleLink&lt;Head&gt; &lt;===&gt; DoubleLink&lt;count:1,val:Map&gt; &lt;===&gt; ... &lt;===&gt; DoubleLink&lt;count:5,val:Map&gt; &lt;===&gt; DoubleLink&lt;Tail&gt;\n</code></pre>\n<p>此处的<code>DoubleLink</code>的<code>Head</code>和<code>Tail</code>是虚拟的一个头部和尾部，定义<code>双向链表</code>的<code>删除</code>和<code>增加</code>方法是不需要额外处理边界问题。</p>\n",
  "content": "<p>实现一个数据结构支持以下操作：</p>\n\n<ol>\n\t<li>Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li>\n\t<li>Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否者使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li>\n\t<li>GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n\t<li>GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n</ol>\n\n<p>挑战：以 O(1) 的时间复杂度实现所有操作。</p>\n"
}
