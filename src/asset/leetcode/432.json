{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Initialize your data structure here.\n */</span>\n<span class=\"hljs-keyword\">var</span> AllOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.max=-<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">this</span>.min=<span class=\"hljs-literal\">Infinity</span>\n  <span class=\"hljs-keyword\">this</span>.maxStr=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">this</span>.minStr=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">this</span>.map=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>()\n};\n\n<span class=\"hljs-comment\">/**\n * Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.inc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> curCount\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.map.has(key)){\n    curCount=<span class=\"hljs-keyword\">this</span>.map.get(key)+<span class=\"hljs-number\">1</span>\n  }<span class=\"hljs-keyword\">else</span>{\n    curCount=<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">this</span>.map.set(key,curCount)\n  <span class=\"hljs-comment\">// if(curCount&gt;this.max){</span>\n  <span class=\"hljs-comment\">//   this.max=curCount</span>\n  <span class=\"hljs-comment\">//   this.maxStr=key</span>\n  <span class=\"hljs-comment\">// }</span>\n  \n  <span class=\"hljs-comment\">// this.max=Math.max(this.max,curCount)</span>\n  <span class=\"hljs-comment\">// this.min=Math.min(this.min,curCount)</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.dec = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.map.has(key)){\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.map.get(key)&gt;<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">this</span>.map.set(key,<span class=\"hljs-keyword\">this</span>.map.get(key)<span class=\"hljs-number\">-1</span>)\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">this</span>.map.delete(key)\n  }<span class=\"hljs-keyword\">else</span>{\n    <span class=\"hljs-keyword\">return</span>\n  }\n  \n  <span class=\"hljs-comment\">// curCount=this.map.get(key)</span>\n  <span class=\"hljs-comment\">// if(curCount&lt;this.min)</span>\n  <span class=\"hljs-comment\">// this.max=Math.max(this.max,curCount)    </span>\n  <span class=\"hljs-comment\">// this.min=Math.min(this.min,curCount)</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Returns one of the keys with maximal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMaxKey = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> max=-<span class=\"hljs-literal\">Infinity</span>,maxStr=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.map){\n    <span class=\"hljs-keyword\">if</span>(k[<span class=\"hljs-number\">1</span>]&gt;max){\n      max=k[<span class=\"hljs-number\">1</span>]\n      maxStr=k[<span class=\"hljs-number\">0</span>]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> maxStr\n};\n\n<span class=\"hljs-comment\">/**\n * Returns one of the keys with Minimal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMinKey = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> min=<span class=\"hljs-literal\">Infinity</span>,minStr=<span class=\"hljs-string\">''</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.map){\n    <span class=\"hljs-keyword\">if</span>(k[<span class=\"hljs-number\">1</span>]&lt;min){\n      min=k[<span class=\"hljs-number\">1</span>]\n      minStr=k[<span class=\"hljs-number\">0</span>]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> minStr\n};\n\n<span class=\"hljs-comment\">/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = Object.create(AllOne).createNew()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "all-oone-data-structure",
  "content": "<p>实现一个数据结构支持以下操作：</p>\n\n<ol>\n\t<li>Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li>\n\t<li>Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否者使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li>\n\t<li>GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n\t<li>GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>&quot;&quot;</code>。</li>\n</ol>\n\n<p>挑战：以 O(1) 的时间复杂度实现所有操作。</p>\n"
}
