{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n */</span>\n<span class=\"hljs-keyword\">var</span> BSTIterator = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> node=root\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">while</span>(node){\n    stack.push(node)\n    node=node.left\n  }\n  <span class=\"hljs-keyword\">this</span>.stack=stack\n};\n\n<span class=\"hljs-comment\">/**\n * @return the next smallest number\n * @return {number}\n */</span>\nBSTIterator.prototype.next = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">this</span>.stack.pop()\n  <span class=\"hljs-keyword\">let</span> node=res.right\n  <span class=\"hljs-keyword\">while</span>(node){\n    <span class=\"hljs-keyword\">this</span>.stack.push(node)\n    node=node.left\n  }\n  <span class=\"hljs-keyword\">return</span> res.val\n};\n\n<span class=\"hljs-comment\">/**\n * @return whether we have a next smallest number\n * @return {boolean}\n */</span>\nBSTIterator.prototype.hasNext = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack.length&gt;<span class=\"hljs-number\">0</span>\n};\n\n<span class=\"hljs-comment\">/** \n * Your BSTIterator object will be instantiated and called as such:\n * var obj = Object.create(BSTIterator).createNew(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */</span>\n</code></pre>\n"
  ],
  "titleSlug": "binary-search-tree-iterator",
  "hasThinking": false,
  "content": "<p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p>\n\n<p>调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png\" style=\"height: 178px; width: 189px;\"></strong></p>\n\n<pre>BSTIterator iterator = new BSTIterator(root);\niterator.next();    // 返回 3\niterator.next();    // 返回 7\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 9\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 15\niterator.hasNext(); // 返回 true\niterator.next();    // 返回 20\niterator.hasNext(); // 返回 false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>&nbsp;操作的时间复杂度是&nbsp;O(1)，并使用&nbsp;O(<em>h</em>) 内存，其中&nbsp;<em>h&nbsp;</em>是树的高度。</li>\n\t<li>你可以假设&nbsp;<code>next()</code>&nbsp;调用总是有效的，也就是说，当调用 <code>next()</code>&nbsp;时，BST 中至少存在一个下一个最小的数。</li>\n</ul>\n"
}
