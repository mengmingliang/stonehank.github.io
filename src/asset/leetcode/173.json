{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for binary tree\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n\n<span class=\"hljs-comment\">/**\n * @constructor\n * @param {TreeNode} root - root of the binary search tree\n */</span>\n<span class=\"hljs-keyword\">var</span> BSTIterator = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.stack=[]\n    <span class=\"hljs-keyword\">this</span>.root=root\n    <span class=\"hljs-keyword\">this</span>.sml\n};\n\n\n<span class=\"hljs-comment\">/**\n * @this BSTIterator\n * @returns {boolean} - whether we have a next smallest number\n */</span>\nBSTIterator.prototype.hasNext = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">let</span> cur=<span class=\"hljs-keyword\">this</span>.root\n    <span class=\"hljs-keyword\">while</span>(cur){\n        <span class=\"hljs-keyword\">this</span>.stack.push(cur)\n        cur=cur.left\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.stack.length===<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    \n    <span class=\"hljs-keyword\">let</span> sml=<span class=\"hljs-keyword\">this</span>.stack.pop()\n    <span class=\"hljs-keyword\">this</span>.root=sml.right\n    <span class=\"hljs-keyword\">this</span>.sml=sml.val\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @this BSTIterator\n * @returns {number} - the next smallest number\n */</span>\nBSTIterator.prototype.next = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.sml\n};\n\n<span class=\"hljs-comment\">/**\n * Your BSTIterator will be called like this:\n * var i = new BSTIterator(root), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/</span>\n</code></pre>\n"
  ],
  "titleSlug": "binary-search-tree-iterator",
  "content": "<p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p>\n\n<p>调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。</p>\n\n<p>注意:<strong> </strong><code>next()</code> 和<code>hasNext()</code>&nbsp;操作的时间复杂度是O(1)，并使用&nbsp;<em>O(h)&nbsp;</em>内存，其中&nbsp;<em>h&nbsp;</em>是树的高度。</p>\n"
}
