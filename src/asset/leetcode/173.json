{
  "code": [
    "/**\n * Definition for binary tree\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * @constructor\n * @param {TreeNode} root - root of the binary search tree\n */\nvar BSTIterator = function(root) {\n    this.stack=[]\n    this.root=root\n    this.sml\n};\n\n\n/**\n * @this BSTIterator\n * @returns {boolean} - whether we have a next smallest number\n */\nBSTIterator.prototype.hasNext = function() {\n    let cur=this.root\n    while(cur){\n        this.stack.push(cur)\n        cur=cur.left\n    }\n    if(this.stack.length===0){\n        return false\n    }\n    \n    let sml=this.stack.pop()\n    this.root=sml.right\n    this.sml=sml.val\n    return true\n};\n\n/**\n * @this BSTIterator\n * @returns {number} - the next smallest number\n */\nBSTIterator.prototype.next = function() {\n    return this.sml\n};\n\n/**\n * Your BSTIterator will be called like this:\n * var i = new BSTIterator(root), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/"
  ],
  "titleSlug": "binary-search-tree-iterator",
  "content": "<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>\r\n\r\n<p>Calling <code>next()</code> will return the next smallest number in the BST.</p>\r\n\r\n<p><b>Note: </b><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree. </p>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>",
  "translatedContent": "<p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p>\n\n<p>调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。</p>\n\n<p>注意:<strong> </strong><code>next()</code> 和<code>hasNext()</code>&nbsp;操作的时间复杂度是O(1)，并使用&nbsp;<em>O(h)&nbsp;</em>内存，其中&nbsp;<em>h&nbsp;</em>是树的高度。</p>\n"
}
