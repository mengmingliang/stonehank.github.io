{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> isValidBST = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isValid</span>(<span class=\"hljs-params\">root,max,min</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!root)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(root.val&gt;=max || root.val&lt;=min)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> isValid(root.left,root.val,min) &amp;&amp; isValid(root.right,max,root.val)\n  }\n  <span class=\"hljs-keyword\">return</span> isValid(root,<span class=\"hljs-literal\">Infinity</span>,-<span class=\"hljs-literal\">Infinity</span>)\n};\n</code></pre>\n"
  ],
  "titleSlug": "validate-binary-search-tree",
  "content": "<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>\n\n<p>假设一个二叉搜索树具有如下特征：</p>\n\n<ul>\n\t<li>节点的左子树只包含<strong>小于</strong>当前节点的数。</li>\n\t<li>节点的右子树只包含<strong>大于</strong>当前节点的数。</li>\n\t<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入:</strong>\n    2\n   / \\\n  1   3\n<strong>输出:</strong> true\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>输出:</strong> false\n<strong>解释:</strong> 输入为: [5,1,4,null,null,3,6]。\n&nbsp;    根节点的值为 5 ，但是其右子节点值为 4 。\n</pre>\n"
}
