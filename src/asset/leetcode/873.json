{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> lenLongestFibSubseq = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n<span class=\"hljs-comment\">//     let mem={}</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;A.length;i++){</span>\n<span class=\"hljs-comment\">//         mem[A[i]]=A[i]</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     let res=0</span>\n<span class=\"hljs-comment\">//     for(let i=0;i&lt;A.length;i++){</span>\n        \n<span class=\"hljs-comment\">//         for(let j=i+1;j&lt;A.length;j++){</span>\n<span class=\"hljs-comment\">//         let a=A[i],b=A[j],len=2</span>\n<span class=\"hljs-comment\">//         // console.log(a,b)</span>\n<span class=\"hljs-comment\">//             while(mem[a+b]){</span>\n<span class=\"hljs-comment\">//                 b=a+b</span>\n<span class=\"hljs-comment\">//                 a=b-a</span>\n<span class=\"hljs-comment\">//                 len++</span>\n<span class=\"hljs-comment\">//             }</span>\n<span class=\"hljs-comment\">//             res=Math.max(len,res)</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//     return res&gt;2?res:0</span>\n   \n    <span class=\"hljs-keyword\">let</span> m=[],cac=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(),res=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n        m[i]=[]\n        cac.set(A[i],i)\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;A.length;j++){\n            m[i][j]=<span class=\"hljs-number\">2</span>\n        }\n    }\n    \n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=i<span class=\"hljs-number\">-1</span>;j&gt;=<span class=\"hljs-number\">0</span>;j--){\n            <span class=\"hljs-keyword\">let</span> next=A[i],pre=A[j]\n            <span class=\"hljs-keyword\">if</span>(next-pre&gt;=pre)<span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">if</span>(!cac.has(next-pre))<span class=\"hljs-keyword\">continue</span>\n            m[i][j]=m[j][cac.get(next-pre)]+<span class=\"hljs-number\">1</span>\n        }\n    }\n  <span class=\"hljs-comment\">// console.log(m)</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;A.length;i++){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;A.length;j++){\n            <span class=\"hljs-keyword\">if</span>(m[i][j]&gt;<span class=\"hljs-number\">2</span>)res=<span class=\"hljs-built_in\">Math</span>.max(m[i][j],res)\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "length-of-longest-fibonacci-subsequence",
  "hasThinking": false,
  "content": "<p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列，找到 <code>A</code> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p>\n\n<p><em>（回想一下，子序列是从原序列 <code>A</code>&nbsp;中派生出来的，它从 <code>A</code>&nbsp;中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释:\n</strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>:\n最长的斐波那契式子序列有：\n[1,11,12]，[3,11,14] 以及 [7,11,18] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>（对于以 Java，C，C++，以及&nbsp;C# 的提交，时间限制被减少了 50%）</em></li>\n</ul>\n"
}
