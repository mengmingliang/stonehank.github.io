{
  "code": [
    "/**\n * @param {number[]} A\n * @return {number}\n */\nvar lenLongestFibSubseq = function(A) {\n//     let mem={}\n//     for(let i=0;i<A.length;i++){\n//         mem[A[i]]=A[i]\n//     }\n//     let res=0\n//     for(let i=0;i<A.length;i++){\n        \n//         for(let j=i+1;j<A.length;j++){\n//         let a=A[i],b=A[j],len=2\n//         // console.log(a,b)\n//             while(mem[a+b]){\n//                 b=a+b\n//                 a=b-a\n//                 len++\n//             }\n//             res=Math.max(len,res)\n//         }\n//     }\n//     return res>2?res:0\n   \n    let m=[],cac=new Map(),res=0\n    for(let i=0;i<A.length;i++){\n        m[i]=[]\n        cac.set(A[i],i)\n        for(let j=0;j<A.length;j++){\n            m[i][j]=2\n        }\n    }\n    \n    for(let i=0;i<A.length;i++){\n        for(let j=i-1;j>=0;j--){\n            let next=A[i],pre=A[j]\n            if(next-pre>=pre)break\n            if(!cac.has(next-pre))continue\n            m[i][j]=m[j][cac.get(next-pre)]+1\n        }\n    }\n    for(let i=0;i<A.length;i++){\n        for(let j=0;j<A.length;j++){\n            if(m[i][j]>2)res=Math.max(m[i][j],res)\n        }\n    }\n    return res\n};"
  ],
  "titleSlug": "length-of-longest-fibonacci-subsequence",
  "content": "<p>A sequence <code>X_1, X_2, ..., X_n</code>&nbsp;is <em>fibonacci-like</em> if:</p>\r\n\r\n<ul>\r\n\t<li><code>n &gt;= 3</code></li>\r\n\t<li><code>X_i + X_{i+1} = X_{i+2}</code>&nbsp;for all&nbsp;<code>i + 2 &lt;= n</code></li>\r\n</ul>\r\n\r\n<p>Given a <b>strictly increasing</b>&nbsp;array&nbsp;<code>A</code> of positive integers forming a sequence, find the <strong>length</strong> of the longest fibonacci-like subsequence of <code>A</code>.&nbsp; If one does not exist, return 0.</p>\r\n\r\n<p>(<em>Recall that a subsequence is derived from another sequence <code>A</code> by&nbsp;deleting any number of&nbsp;elements (including none)&nbsp;from <code>A</code>, without changing the order of the remaining elements.&nbsp; For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</em>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4,5,6,7,8]\r\n<strong>Output: </strong>5\r\n<strong>Explanation:\r\n</strong>The longest subsequence that is fibonacci-like: [1,2,3,5,8].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,3,7,11,12,14,18]\r\n<strong>Output: </strong>3\r\n<strong>Explanation</strong>:\r\nThe longest subsequence that is fibonacci-like:\r\n[1,11,12], [3,11,14] or [7,11,18].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\r\n\t<li><em>(The time limit has been reduced by 50% for submissions in Java, C, and C++.)</em></li>\r\n</ul>\r\n",
  "translatedContent": "<p>如果序列&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;满足下列条件，就说它是&nbsp;<em>斐波那契式&nbsp;</em>的：</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列，找到 <code>A</code> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回&nbsp;&nbsp;0 。</p>\n\n<p><em>（回想一下，子序列是从原序列 <code>A</code>&nbsp;中派生出来的，它从 <code>A</code>&nbsp;中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如，&nbsp;<code>[3, 5, 8]</code>&nbsp;是&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;的一个子序列）</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]\n<strong>输出: </strong>5\n<strong>解释:\n</strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入: </strong>[1,3,7,11,12,14,18]\n<strong>输出: </strong>3\n<strong>解释</strong>:\n最长的斐波那契式子序列有：\n[1,11,12]，[3,11,14] 以及 [7,11,18] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>（对于以 Java，C，C++，以及&nbsp;C# 的提交，时间限制被减少了 50%）</em></li>\n</ul>\n"
}
