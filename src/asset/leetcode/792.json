{
  "code": [
    "/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar numMatchingSubseq = function(S, words) {\n  // hashTabel & linklist\n  \n//     let c=[],codeA='a'.charCodeAt(0)\n//     for(let i=0;i<S.length;i++){\n//       let cur=S.charCodeAt(i)-codeA\n//       if(!c[cur])c[cur]=[i]\n//       else c[cur].push(i)\n//     }\n//   let res=0\n//     for(let i=0;i<words.length;i++){\n//       let k=0,isSub=true\n//       for(let j=0;j<words[i].length;j++){\n//         let cur=words[i].charCodeAt(j)-codeA\n//         let curList=c[cur]\n//         if(!curList || curList[curList.length-1]<k){\n//           isSub=false\n//           break\n//         }\n//         k=curList[bs(curList,k)]+1\n//       }\n//       if(isSub)res++\n//     }\n  \n//     function bs(arr,n){\n//       let lo=0,hi=arr.length-1\n//       while(lo<hi){\n//         let mid=Math.floor((lo+hi)/2)\n//         if(arr[mid]<n)lo=mid+1\n//         else hi=mid\n//       }\n//       return hi\n//     }\n//   return res\n  \n  \n  let res=0;\n  for(let i=0;i<words.length;i++){\n    let lastIdx=-1,isSub=true\n    for(let j=0;j<words[i].length;j++){\n      let curAlp=words[i][j],\n          curIdx=S.indexOf(curAlp,lastIdx+1)\n      if(curIdx===-1){\n        isSub=false;\n        break;\n      }\n      lastIdx=curIdx\n    }\n    if(isSub)res++\n  }\n  return res\n};"
  ],
  "titleSlug": "number-of-matching-subsequences",
  "content": "<p>Given string <code>S</code> and a&nbsp;dictionary of words <code>words</code>, find the number of <code>words[i]</code> that is a subsequence of <code>S</code>.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nS = &quot;abcde&quot;\r\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three words in <code>words</code> that are a subsequence of <code>S</code>: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All words in <code>words</code> and <code>S</code> will only consists of lowercase letters.</li>\r\n\t<li>The length of <code>S</code> will be in the range of <code>[1, 50000]</code>.</li>\r\n\t<li>The length of <code>words</code> will be in the range of&nbsp;<code>[1, 5000]</code>.</li>\r\n\t<li>The length of <code>words[i]</code> will be in the range of <code>[1, 50]</code>.</li>\r\n</ul>\r\n",
  "translatedContent": "<p>给定字符串 <code>S</code> 和单词字典 <code>words</code>, 求&nbsp;<code>words[i]</code>&nbsp;中是&nbsp;<code>S</code>&nbsp;的子序列的单词个数。</p>\n\n<pre>\n<strong>示例:</strong>\n<strong>输入:</strong> \nS = &quot;abcde&quot;\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\n<strong>输出:</strong> 3\n<strong>解释:</strong> 有三个是&nbsp;S 的子序列的单词: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;。\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ul>\n\t<li>所有在<code>words</code>和&nbsp;<code>S</code>&nbsp;里的单词都只由小写字母组成。</li>\n\t<li><code>S</code> 的长度在&nbsp;<code>[1, 50000]</code>。</li>\n\t<li><code>words</code>&nbsp;的长度在&nbsp;<code>[1, 5000]</code>。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 50]</code>。</li>\n</ul>\n"
}
