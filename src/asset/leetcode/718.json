{
  "code": [
    "/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number}\n */\nvar findLength = function(A, B) {\n    let aux=[]\n    for(let i=0;i<A.length+1;i++){\n        aux[i]=Array(B.length+1).fill(0)\n        // for(let j=0;j<B.length+1;j++){\n        //     aux[i][j]=0\n        // }\n    }\n    // for(let i = 0; i < A.length+1; i++){\n    //     aux.push(new Array(B.length + 1));\n    //     aux[i].fill(0);\n    // }\n    let maxLen=0\n    for(let i=1;i<aux.length;i++){\n        for(let j=1;j<aux[i].length;j++){\n            if(A[j-1]===B[i-1]){\n                aux[i][j]=aux[i-1][j-1]+1\n                if(aux[i][j]>maxLen)maxLen=aux[i][j]\n            }\n        }\n    }\n    return maxLen\n};"
  ],
  "titleSlug": "maximum-length-of-repeated-subarray",
  "content": "<p>Given two integer arrays <code>A</code> and <code>B</code>, return the maximum length of an subarray that appears in both arrays.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nA: [1,2,3,2,1]\r\nB: [3,2,1,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe repeated subarray with maximum length is [3, 2, 1].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>1 <= len(A), len(B) <= 1000</li>\r\n<li>0 <= A[i], B[i] < 100</li>\r\n</ol>\r\n</p>",
  "translatedContent": "<p>给两个整数数组&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;，返回两个数组中公共的、长度最长的子数组的长度。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong>\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n<strong>输出:</strong> 3\n<strong>解释:</strong> \n长度最长的公共子数组是 [3, 2, 1]。\n</pre>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>1 &lt;= len(A), len(B) &lt;= 1000</li>\n\t<li>0 &lt;= A[i], B[i] &lt; 100</li>\n</ol>\n"
}
