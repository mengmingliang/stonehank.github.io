{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List&lt;Node&gt; children;\n\n    public Node() {}\n\n    public Node(int _val,List&lt;Node&gt; _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n    <span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; res = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title\">preorder</span><span class=\"hljs-params\">(Node root)</span> </span>{\n        <span class=\"hljs-keyword\">if</span>(root==<span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span> res;\n        res.add(root.val);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;root.children.size();i++){\n            preorder(root.children.get(i));\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n    \n}\n</code></pre>\n"
  ],
  "titleSlug": "n-ary-tree-preorder-traversal",
  "content": "<p>给定一个 N 叉树，返回其节点值的<em>前序遍历</em>。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回其前序遍历: <code>[1,3,5,6,2,4]</code>。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:&nbsp;</strong>递归法很简单，你可以使用迭代法完成此题吗?</p>"
}
