{
  "code": [
    "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val,List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nclass Solution {\n    public List<Integer> res = new ArrayList<>();\n    public List<Integer> preorder(Node root) {\n        if(root==null) return res;\n        res.add(root.val);\n        for(int i=0;i<root.children.size();i++){\n            preorder(root.children.get(i));\n        }\n        return res;\n    }\n    \n}"
  ],
  "titleSlug": "n-ary-tree-preorder-traversal",
  "content": "<p>Given an n-ary tree, return the <i>preorder</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p>For example, given a <code>3-ary</code> tree:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Return its preorder traversal as: <code>[1,3,5,6,2,4]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>Recursive solution is trivial, could you do it iteratively?</p>\r\n",
  "translatedContent": "<p>给定一个 N 叉树，返回其节点值的<em>前序遍历</em>。</p>\r\n\r\n<p>例如，给定一个&nbsp;<code>3叉树</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>返回其前序遍历: <code>[1,3,5,6,2,4]</code>。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>说明:&nbsp;</strong>递归法很简单，你可以使用迭代法完成此题吗?</p>"
}
