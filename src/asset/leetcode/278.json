{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for isBadVersion()\n * \n * @param {integer} version number\n * @return {boolean} whether the version is bad\n * isBadVersion = function(version) {\n *     ...\n * };\n */</span>\n\n<span class=\"hljs-comment\">/**\n * @param {function} isBadVersion()\n * @return {function}\n */</span>\n<span class=\"hljs-keyword\">var</span> solution = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">isBadVersion</span>) </span>{\n  <span class=\"hljs-comment\">/**\n   * @param {integer} n Total versions\n   * @return {integer} The first bad version\n   */</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> l=<span class=\"hljs-number\">1</span>,r=n\n    <span class=\"hljs-keyword\">while</span>(l&lt;r){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((l+r)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(isBadVersion(mid))r=mid\n      <span class=\"hljs-keyword\">else</span> l=mid+<span class=\"hljs-number\">1</span>\n    }\n    <span class=\"hljs-keyword\">return</span> l\n  };\n};\n</code></pre>\n"
  ],
  "titleSlug": "first-bad-version",
  "hasThinking": false,
  "content": "<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p>\n\n<p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p>\n\n<p>你可以通过调用&nbsp;<code>bool isBadVersion(version)</code>&nbsp;接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定 n = 5，并且 version = 4 是第一个错误的版本。\n\n<code>调用 isBadVersion(3) -&gt; false\n调用 isBadVersion(5)&nbsp;-&gt; true\n调用 isBadVersion(4)&nbsp;-&gt; true\n\n所以，4 是第一个错误的版本。&nbsp;</code></pre>\n"
}
