{
  "code": [
    "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    let aux=nums\n    \n    function getRes(node,lo,hi){\n        if(lo>hi)return node\n        // console.log(lo,hi)\n        let mid=Math.floor((hi-lo)/2)+lo\n        node=new TreeNode(aux[mid])\n        node.left=getRes(node.left,lo,mid-1)\n        node.right=getRes(node.right,mid+1,hi)\n        return node\n    }\n    return getRes(null,0,nums.length-1)\n    // return root\n};"
  ],
  "titleSlug": "convert-sorted-array-to-binary-search-tree",
  "content": "<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\r\n\r\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven the sorted array: [-10,-3,0,5,9],\r\n\r\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n</pre>\r\n",
  "translatedContent": "<p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>\n\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n"
}
