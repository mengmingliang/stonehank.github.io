{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {TreeNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> sortedArrayToBST = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> aux=nums\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRes</span>(<span class=\"hljs-params\">node,lo,hi</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(lo&gt;hi)<span class=\"hljs-keyword\">return</span> node\n        <span class=\"hljs-comment\">// console.log(lo,hi)</span>\n        <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((hi-lo)/<span class=\"hljs-number\">2</span>)+lo\n        node=<span class=\"hljs-keyword\">new</span> TreeNode(aux[mid])\n        node.left=getRes(node.left,lo,mid<span class=\"hljs-number\">-1</span>)\n        node.right=getRes(node.right,mid+<span class=\"hljs-number\">1</span>,hi)\n        <span class=\"hljs-keyword\">return</span> node\n    }\n    <span class=\"hljs-keyword\">return</span> getRes(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-number\">0</span>,nums.length<span class=\"hljs-number\">-1</span>)\n    <span class=\"hljs-comment\">// return root</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "convert-sorted-array-to-binary-search-tree",
  "content": "<p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>\n\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n"
}
