{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */</span>\n<span class=\"hljs-keyword\">var</span> decodeAtIndex = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S, K</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> idx=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> targ=K,find=<span class=\"hljs-literal\">null</span>\n  getStr(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> find\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStr</span>(<span class=\"hljs-params\">prevLen</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(prevLen&gt;=targ)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> curStr=S[idx++]\n    <span class=\"hljs-keyword\">let</span> isNum=<span class=\"hljs-regexp\">/\\d/</span>.test(curStr)\n    <span class=\"hljs-keyword\">if</span>(isNum){\n      getStr(prevLen*(+curStr))\n    }<span class=\"hljs-keyword\">else</span>{\n      getStr(prevLen+<span class=\"hljs-number\">1</span>)\n    }\n    <span class=\"hljs-keyword\">if</span>(find!=<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span>(!isNum &amp;&amp; targ===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> find=curStr[curStr.length<span class=\"hljs-number\">-1</span>]\n    <span class=\"hljs-keyword\">let</span> delt=targ-prevLen\n    <span class=\"hljs-keyword\">if</span>(!isNum &amp;&amp; delt&lt;=curStr.length &amp;&amp; delt&gt;<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">return</span> find=curStr[delt<span class=\"hljs-number\">-1</span>]\n    }\n    targ=targ % prevLen\n  }\n  \n};\n</code></pre>\n"
  ],
  "titleSlug": "decoded-string-at-index",
  "content": "<p>给定一个编码字符串 <code>S</code>。为了找出<em>解码</em>字符串并将其写入磁带，从编码字符串中<code>每次读取一个字符</code>，并采取以下步骤：</p>\n\n<ul>\n\t<li>如果所读的字符是字母，则将该字母写在磁带上。</li>\n\t<li>如果所读的字符是数字（例如 <code>d</code>），则整个当前磁带总共会被重复写&nbsp;<code>d-1</code> 次。</li>\n</ul>\n\n<p>现在，对于给定的编码字符串 <code>S</code> 和索引 <code>K</code>，查找并返回解码字符串中的第&nbsp;<code>K</code>&nbsp;个字母。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;leet2code3&quot;, K = 10\n<strong>输出：</strong>&quot;o&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;leetleetcodeleetleetcodeleetleetcode&quot;。\n字符串中的第 10 个字母是 &quot;o&quot;。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;ha22&quot;, K = 5\n<strong>输出：</strong>&quot;h&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;hahahaha&quot;。第 5 个字母是 &quot;h&quot;。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>S = &quot;a2345678999999999999999&quot;, K = 1\n<strong>输出：</strong>&quot;a&quot;\n<strong>解释：</strong>\n解码后的字符串为 &quot;a&quot; 重复 8301530446056247680 次。第 1 个字母是 &quot;a&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;只包含小写字母与数字 <code>2</code> 到 <code>9</code> 。</li>\n\t<li><code>S</code>&nbsp;以字母开头。</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>解码后的字符串保证少于&nbsp;<code>2^63</code>&nbsp;个字母。</li>\n</ol>\n"
}
