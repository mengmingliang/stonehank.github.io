{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> canTransform = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=start.length\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>,j=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span>(i&lt;len || j&lt;len){\n    <span class=\"hljs-keyword\">while</span>(start[i]===<span class=\"hljs-string\">\"X\"</span>)i++\n    <span class=\"hljs-keyword\">while</span>(end[j]===<span class=\"hljs-string\">\"X\"</span>)j++\n    <span class=\"hljs-keyword\">if</span>(i===len &amp;&amp; j===len)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(i&gt;=len || j&gt;=len)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(start[i]!==end[j])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(start[i]===<span class=\"hljs-string\">\"R\"</span> &amp;&amp; i &gt; j)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span>(start[i]===<span class=\"hljs-string\">\"L\"</span> &amp;&amp; i &lt; j)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    i++\n    j++\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "swap-adjacent-in-lr-string",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>可以看成一个滑动问题，<code>R</code>只能沿着<code>X</code>向右滑动，遇到<code>L</code>必须停；<code>L</code>只能沿着<code>X</code>向左滑动，遇到<code>R</code>必须停。</p>\n<p>使用双指针<code>i</code>，<code>j</code>，遇到<code>X</code>则跳过；</p>\n<ol>\n<li>\n<p>如果当前<code>start[i]</code>与<code>ends[j]</code>不相等，返回<code>false</code>，因为<code>X</code>都跳过了，</p>\n<p>可能是<code>i(R)</code>，<code>j(L)</code>，<code>R</code>滑块不可能在<code>L</code>滑块右边出现，因此<code>i(R)</code>丢失了；</p>\n<p>也可能是<code>i(L)</code>，<code>j(R)</code>，同样<code>L</code>滑块也丢失了。</p>\n</li>\n<li>\n<p>如果当前都是<code>R</code>滑块，如果<code>i&gt;j</code>，返回<code>false</code>，因为<code>R</code>滑块只能向右滑动，因此在<code>R</code>滑块上，<code>j</code>一定大于<code>i</code>；</p>\n</li>\n<li>\n<p>和第二相反，如果当前都是<code>L</code>滑块并且<code>j&gt;i</code>，返回<code>false</code>。</p>\n</li>\n</ol>\n",
  "content": "<p>在一个由 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> 和 <code>&#39;X&#39;</code> 三个字符组成的字符串（例如<code>&quot;RXXLRXRXL&quot;</code>）中进行移动操作。一次移动操作指用一个<code>&quot;LX&quot;</code>替换一个<code>&quot;XL&quot;</code>，或者用一个<code>&quot;XR&quot;</code>替换一个<code>&quot;RX&quot;</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>输出:</strong> True\n<strong>解释:</strong>\n我们可以通过以下几步将start转换成end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li>\n\t<li><code>start</code>和<code>end</code>中的字符串仅限于<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>和<code>&#39;X&#39;</code>。</li>\n</ol>\n"
}
