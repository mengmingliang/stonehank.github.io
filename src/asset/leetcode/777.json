{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> canTransform = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> stack=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;start.length;i++){\n    <span class=\"hljs-keyword\">let</span> s=start[i],e=end[i]\n    <span class=\"hljs-keyword\">if</span>(s!==e){\n      <span class=\"hljs-keyword\">if</span>((s===<span class=\"hljs-string\">\"R\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"L\"</span>) || (s===<span class=\"hljs-string\">\"L\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"R\"</span>))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">\"R\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"X\"</span>)stack.push(<span class=\"hljs-string\">\"R\"</span>)\n      <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">\"X\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"R\"</span>){\n        <span class=\"hljs-keyword\">let</span> last=stack.pop()\n        <span class=\"hljs-keyword\">if</span>(last!==<span class=\"hljs-string\">\"R\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">\"L\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"X\"</span>){\n        <span class=\"hljs-keyword\">let</span> last=stack.pop()\n        <span class=\"hljs-keyword\">if</span>(last!==<span class=\"hljs-string\">\"L\"</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(s===<span class=\"hljs-string\">\"X\"</span> &amp;&amp; e===<span class=\"hljs-string\">\"L\"</span>)stack.push(<span class=\"hljs-string\">\"L\"</span>)\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(stack.length===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
  ],
  "titleSlug": "swap-adjacent-in-lr-string",
  "content": "<p>在一个由 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> 和 <code>&#39;X&#39;</code> 三个字符组成的字符串（例如<code>&quot;RXXLRXRXL&quot;</code>）中进行移动操作。一次移动操作指用一个<code>&quot;LX&quot;</code>替换一个<code>&quot;XL&quot;</code>，或者用一个<code>&quot;XR&quot;</code>替换一个<code>&quot;RX&quot;</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p>\n\n<p><strong>示例 :</strong></p>\n\n<pre>\n<strong>输入:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>输出:</strong> True\n<strong>解释:</strong>\n我们可以通过以下几步将start转换成end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>。</li>\n\t<li><code>start</code>和<code>end</code>中的字符串仅限于<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>和<code>&#39;X&#39;</code>。</li>\n</ol>\n"
}
