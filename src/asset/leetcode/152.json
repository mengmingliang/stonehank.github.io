{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxProduct = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> maxProd = nums[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">let</span> currentMax = maxProd;\n    <span class=\"hljs-keyword\">let</span> currentMin = maxProd;\n    \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.length; i++) {\n        <span class=\"hljs-comment\">// if we hit a negative number, our max is now min and min is now max</span>\n        <span class=\"hljs-keyword\">if</span> (nums[i] &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">const</span> temp1 = currentMax;\n            currentMax = currentMin;\n            currentMin = temp1;\n        }\n        currentMax = <span class=\"hljs-built_in\">Math</span>.max(nums[i], nums[i] * currentMax);\n        currentMin = <span class=\"hljs-built_in\">Math</span>.min(nums[i], nums[i] * currentMin);\n        maxProd = <span class=\"hljs-built_in\">Math</span>.max(currentMax, maxProd);\n    }\n    \n    <span class=\"hljs-keyword\">return</span> maxProd;\n};\n</code></pre>\n"
  ],
  "titleSlug": "maximum-product-subarray",
  "content": "<p>给定一个整数数组 <code>nums</code>&nbsp;，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [2,3,-2,4]\n<strong>输出:</strong> <code>6</code>\n<strong>解释:</strong>&nbsp;子数组 [2,3] 有最大乘积 6。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [-2,0,-1]\n<strong>输出:</strong> 0\n<strong>解释:</strong>&nbsp;结果不能为 2, 因为 [-2,-1] 不是子数组。</pre>\n"
}
