{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {string[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> ambiguousCoordinates = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> res=[]\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillComma</span>(<span class=\"hljs-params\">str</span>)</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;str.length;i++){\n      fillPoint(str.substring(<span class=\"hljs-number\">0</span>,i),str.substring(i))\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fillPoint</span>(<span class=\"hljs-params\">str1,str2</span>)</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;=str1.length;i++){\n      <span class=\"hljs-keyword\">if</span>(i&gt;<span class=\"hljs-number\">1</span> &amp;&amp;  str1.startsWith(<span class=\"hljs-string\">'0'</span>))<span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;=str2.length;j++){\n        <span class=\"hljs-keyword\">if</span>(j&gt;<span class=\"hljs-number\">1</span> &amp;&amp;  str2.startsWith(<span class=\"hljs-string\">'0'</span>))<span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">let</span> l=str1,r=str2\n        <span class=\"hljs-keyword\">if</span>(i&lt;str1.length){\n          l=str1.substring(<span class=\"hljs-number\">0</span>,i)+<span class=\"hljs-string\">'.'</span>+str1.substring(i)\n          <span class=\"hljs-keyword\">if</span>(l.length&gt;<span class=\"hljs-number\">1</span> &amp;&amp; l.endsWith(<span class=\"hljs-string\">'0'</span>))<span class=\"hljs-keyword\">continue</span>\n        }\n        <span class=\"hljs-keyword\">if</span>(j&lt;str2.length){\n          r=str2.substring(<span class=\"hljs-number\">0</span>,j)+<span class=\"hljs-string\">'.'</span>+str2.substring(j)\n          <span class=\"hljs-keyword\">if</span>(r.length&gt;<span class=\"hljs-number\">1</span> &amp;&amp; r.endsWith(<span class=\"hljs-string\">'0'</span>))<span class=\"hljs-keyword\">continue</span>\n        }\n        res.push(<span class=\"hljs-string\">'('</span>+l+<span class=\"hljs-string\">', '</span>+r+<span class=\"hljs-string\">')'</span>)\n      }\n    }\n  }\n  fillComma(S.substring(<span class=\"hljs-number\">1</span>,S.length<span class=\"hljs-number\">-1</span>))\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
  ],
  "titleSlug": "ambiguous-coordinates",
  "hasThinking": false,
  "content": "<p>我们有一些二维坐标，如&nbsp;<code>&quot;(1, 3)&quot;</code>&nbsp;或&nbsp;<code>&quot;(2, 0.5)&quot;</code>，然后我们移除所有逗号，小数点和空格，得到一个字符串<code>S</code>。返回所有可能的原始字符串到一个列表中。</p>\n\n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于&quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现&ldquo;.1&rdquo;形式的数字。</p>\n\n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>示例 1:</strong>\n<strong>输入:</strong> &quot;(123)&quot;\n<strong>输出:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\n</pre>\n\n<pre>\n<strong>示例 2:</strong>\n<strong>输入:</strong> &quot;(00011)&quot;\n<strong>输出:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\n<strong>解释:</strong> \n0.0, 00, 0001 或 00.01 是不被允许的。\n</pre>\n\n<pre>\n<strong>示例 3:</strong>\n<strong>输入:</strong> &quot;(0123)&quot;\n<strong>输出:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\n</pre>\n\n<pre>\n<strong>示例 4:</strong>\n<strong>输入:</strong> &quot;(100)&quot;\n<strong>输出:</strong> [(10, 0)]\n<strong>解释:</strong> \n1.0 是不被允许的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示: </strong></p>\n\n<ul>\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, 且字符串&nbsp;<code>S</code>&nbsp;中的其他元素都是数字。</li>\n</ul>\n\n<p>&nbsp;</p>\n"
}
