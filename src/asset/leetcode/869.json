{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} N\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> reorderedPowerOf2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">32</span>;i++){\n    <span class=\"hljs-keyword\">let</span> num=<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,i)\n    <span class=\"hljs-keyword\">let</span> s=(num+<span class=\"hljs-string\">''</span>).split(<span class=\"hljs-string\">''</span>).sort().join(<span class=\"hljs-string\">''</span>)\n    <span class=\"hljs-keyword\">let</span> len=s.length\n    <span class=\"hljs-keyword\">if</span>(hash[len]==<span class=\"hljs-literal\">null</span>)hash[len]=[s]\n    <span class=\"hljs-keyword\">else</span> hash[len].push(s)\n  }\n  \n  <span class=\"hljs-keyword\">let</span> S=(N+<span class=\"hljs-string\">''</span>).split(<span class=\"hljs-string\">''</span>).sort().join(<span class=\"hljs-string\">''</span>)\n  <span class=\"hljs-keyword\">let</span> len=S.length\n  <span class=\"hljs-keyword\">if</span>(hash[len]==<span class=\"hljs-literal\">null</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">if</span>(hash[len].includes(S))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n\n<span class=\"hljs-comment\">/*-- 更好的解决方案 --*/</span>\n<span class=\"hljs-comment\">/**\n * @param {number} N\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> reorderedPowerOf2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">N</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> c = counter(N);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">32</span>; i++)\n    <span class=\"hljs-keyword\">if</span> (counter(<span class=\"hljs-number\">1</span> &lt;&lt; i) == c) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">counter</span>(<span class=\"hljs-params\">N</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (; N &gt; <span class=\"hljs-number\">0</span>; N = <span class=\"hljs-built_in\">Math</span>.floor(N / <span class=\"hljs-number\">10</span>)) \n      res += <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">10</span>, N % <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">return</span> res;\n  }\n};\n\n</code></pre>\n"
  ],
  "titleSlug": "reordered-power-of-2",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>自己的思路是用<code>hash</code>保存<code>10^9</code>之内所有2次幂的<strong>升序</strong>排列，以<code>长度</code>为<code>key</code></p>\n<p>保存<code>hash</code>如下：</p>\n<pre class=\"hljs\"><code>{\n  1:[1,2,4,8],\n  2:[16,23,46],\n  ...\n}\n</code></pre>\n<p>在对当前<code>N</code>升序排列，查找<code>hash</code>中是否存在此数即可。</p>\n<h2>更好的解决方案，是计算数字每一位的数量，对数字上每一位进行<code>Math.pow(10,x)</code>，最后相加得到<code>res</code>，\n无论这个数字如何排列，这个<code>res</code>都是不变的。</h2>\n",
  "content": "<p>给定正整数 <code>N</code>&nbsp;，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p>\n\n<p>如果我们可以通过上述方式得到&nbsp;2 的幂，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>1\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>10\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>16\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>24\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>46\n<strong>输出：</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n"
}
