{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} rowIndex\n * @return {number[]}\n */</span>\n<span class=\"hljs-keyword\">var</span> getRow = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">rowIndex</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> A=[]\n  A[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>; i&lt;rowIndex+<span class=\"hljs-number\">1</span>; i++)\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=i; j&gt;=<span class=\"hljs-number\">1</span>; j--)\n      A[j] =(A[j]||<span class=\"hljs-number\">0</span>)+ (A[j<span class=\"hljs-number\">-1</span>] || <span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">return</span> A;\n};\n</code></pre>\n"
  ],
  "titleSlug": "pascals-triangle-ii",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>空间<code>O(N)</code>，对于上一层<code>A</code>，倒序计算出当前层的值。</p>\n",
  "content": "<p>给定一个非负索引&nbsp;<em>k</em>，其中 <em>k</em>&nbsp;&le;&nbsp;33，返回杨辉三角的第 <em>k </em>行。</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <em>O</em>(<em>k</em>) 空间复杂度吗？</p>\n"
}
