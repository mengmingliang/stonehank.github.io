{
  "code": [
    "/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n  let A=[]\n  A[0] = 1;\n  for(let i=1; i<rowIndex+1; i++)\n    for(let j=i; j>=1; j--)\n      A[j] =(A[j]||0)+ (A[j-1] || 0);\n  return A;\n};"
  ],
  "titleSlug": "pascals-triangle-ii",
  "content": "<p>Given a non-negative&nbsp;index <em>k</em>&nbsp;where <em>k</em> &le;&nbsp;33, return the <em>k</em><sup>th</sup>&nbsp;index row of the Pascal&#39;s triangle.</p>\r\n\r\n<p>Note that the row index starts from&nbsp;0.</p>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" /><br />\r\n<small>In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> [1,3,3,1]\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p>\r\n",
  "translatedContent": "<p>给定一个非负索引&nbsp;<em>k</em>，其中 <em>k</em>&nbsp;&le;&nbsp;33，返回杨辉三角的第 <em>k </em>行。</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>在杨辉三角中，每个数是它左上方和右上方的数的和。</small></p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> 3\n<strong>输出:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>进阶：</strong></p>\n\n<p>你可以优化你的算法到 <em>O</em>(<em>k</em>) 空间复杂度吗？</p>\n"
}
