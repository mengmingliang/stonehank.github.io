{
  "code": [
    "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar judgePoint24 = function(nums) {\n  let op=['+','-','*','/'],sum=24,flag=false\n  // 括号全排列，此处使用列举\n  let brackPos=[[[0,6]],[[0,4]],[[0,4],[6,10]],[[2,8]],[[2,6]]]\n  function bt(res,op,nums,index,sum){\n    if(flag)return\n    res.push(nums[index])\n    if(index===3){\n      for(let i=0;i<brackPos.length;i++){\n        let cur=brackPos[i]\n        let delIdx=[]\n        for(let j=0;j<cur.length;j++){\n          let pos=cur[j]\n          delIdx.push(pos[0])\n          delIdx.push(pos[1])\n          res.splice(pos[0],0,'(')\n          res.splice(pos[1],0,')')\n          if(Math.abs(eval(res.join(''))-sum)<=0.0001)flag=true\n        }\n        while(delIdx.length>0){\n          res.splice(delIdx.pop(),1)\n        }\n      }\n      return\n    }\n    for(let i=0;i<op.length;i++){\n      res.push(op[i])\n\n      bt(res,op,nums,index+1,sum)\n      res.pop()\n      res.pop()\n    }\n  }\n  // 全排列\n  for(let i=0;i<nums.length;i++){\n    for(let j=0;j<nums.length;j++){\n      if(j===i)continue\n      for(let k=0;k<nums.length;k++){\n        if(k===j || k===i)continue\n        for(let l=0;l<nums.length;l++){\n          if(l===k || l===j || l===i)continue\n          let newNum=[nums[i],nums[j],nums[k],nums[l]]\n          let res=[]\n          bt(res,op,newNum,0,sum)\n        }\n      }\n    }\n  }\n  return flag\n};"
  ],
  "titleSlug": "24-game",
  "content": "<p>\r\nYou have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through <code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, <code>(</code>, <code>)</code> to get the value of 24.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [4, 1, 8, 7]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> (8-4) * (7-1) = 24\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 1, 2]\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The division operator <code>/</code> represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.</li>\r\n<li>Every operation done is between two numbers.  In particular, we cannot use <code>-</code> as a unary operator.  For example, with <code>[1, 1, 1, 1]</code> as input, the expression <code>-1 - 1 - 1 - 1</code> is not allowed.</li>\r\n<li>You cannot concatenate numbers together.  For example, if the input is <code>[1, 2, 1, 2]</code>, we cannot write this as 12 + 12.</li>\r\n</ol>\r\n</p>\r\n</p>",
  "translatedContent": "<p>你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过&nbsp;<code>*</code>，<code>/</code>，<code>+</code>，<code>-</code>，<code>(</code>，<code>)</code>&nbsp;的运算得到 24。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [4, 1, 8, 7]\n<strong>输出:</strong> True\n<strong>解释:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1, 2, 1, 2]\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>除法运算符&nbsp;<code>/</code>&nbsp;表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。</li>\n\t<li>每个运算符对两个数进行运算。特别是我们不能用&nbsp;<code>-</code>&nbsp;作为一元运算符。例如，<code>[1, 1, 1, 1]</code>&nbsp;作为输入时，表达式&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;是不允许的。</li>\n\t<li>你不能将数字连接在一起。例如，输入为&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;时，不能写成 12 + 12 。</li>\n</ol>\n"
}
