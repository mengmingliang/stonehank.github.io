{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} nums\n * @return {boolean}\n */</span>\n<span class=\"hljs-keyword\">var</span> judgePoint24 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> find=<span class=\"hljs-literal\">false</span>\n  dfs(nums)\n  <span class=\"hljs-keyword\">return</span> find\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dfs</span>(<span class=\"hljs-params\">nums</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(find)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(nums.length===<span class=\"hljs-number\">1</span>){\n      <span class=\"hljs-keyword\">if</span>(+nums[<span class=\"hljs-number\">0</span>].toFixed(<span class=\"hljs-number\">6</span>)===<span class=\"hljs-number\">24</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\n      <span class=\"hljs-keyword\">let</span> next=nums.slice(<span class=\"hljs-number\">0</span>,i).concat(nums.slice(i+<span class=\"hljs-number\">1</span>))\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;next.length;j++){\n        <span class=\"hljs-keyword\">let</span> final=next.slice(<span class=\"hljs-number\">0</span>,j).concat(next.slice(j+<span class=\"hljs-number\">1</span>))\n        <span class=\"hljs-keyword\">let</span> add=dfs(final.concat(nums[i]+next[j])),\n            minus=dfs(final.concat(nums[i]-next[j])),\n            multi=dfs(final.concat(nums[i]*next[j])),\n            divid=dfs(final.concat(nums[i]/next[j]))\n        <span class=\"hljs-keyword\">if</span>(add || minus || multi || divid)<span class=\"hljs-keyword\">return</span> find=<span class=\"hljs-literal\">true</span>\n      }\n    }\n  }\n};\n</code></pre>\n"
  ],
  "titleSlug": "24-game",
  "hasThinking": true,
  "thinking": "<hr>\n<p>思路：</p>\n<p>解法1：</p>\n<ol>\n<li>找出所有全排列。</li>\n<li>对每一种排列找出所有添加符号的表达式。</li>\n<li>对每一种表达式处理所有括号的添加方式，返回一个数组的结果，如果这个数组中存在<code>24</code>，返回<code>true</code>。</li>\n</ol>\n<p>解法2：</p>\n<p>对当前<code>nums</code>选择2个数，这两数分别通过<code>+-*/</code>处理后，和<code>nums</code>其他的数形成一个新的<code>arr</code>，然后递归执行。</p>\n<p>最后返回<code>nums[0]===24</code>。</p>\n<p>解法2代码量很少，但却包含了<code>数字全排列</code>，<code>符号全排列</code>，<code>括号全排列</code>所有的情况。</p>\n",
  "content": "<p>你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过&nbsp;<code>*</code>，<code>/</code>，<code>+</code>，<code>-</code>，<code>(</code>，<code>)</code>&nbsp;的运算得到 24。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> [4, 1, 8, 7]\n<strong>输出:</strong> True\n<strong>解释:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> [1, 2, 1, 2]\n<strong>输出:</strong> False\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>除法运算符&nbsp;<code>/</code>&nbsp;表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。</li>\n\t<li>每个运算符对两个数进行运算。特别是我们不能用&nbsp;<code>-</code>&nbsp;作为一元运算符。例如，<code>[1, 1, 1, 1]</code>&nbsp;作为输入时，表达式&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;是不允许的。</li>\n\t<li>你不能将数字连接在一起。例如，输入为&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;时，不能写成 12 + 12 。</li>\n</ol>\n"
}
