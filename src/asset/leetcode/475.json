{
  "code": [
    "<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} houses\n * @param {number[]} heaters\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> findRadius = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">houses, heaters</span>) </span>{\n  houses.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  heaters.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsFront</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.ceil((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&gt;n)hi=mid<span class=\"hljs-number\">-1</span>\n      <span class=\"hljs-keyword\">else</span> lo=mid\n    }\n    <span class=\"hljs-keyword\">return</span> lo\n  }\n\n  <span class=\"hljs-keyword\">let</span> aux=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;houses.length;i++){\n    <span class=\"hljs-keyword\">let</span> idx=bsFront(heaters,houses[i])\n    <span class=\"hljs-keyword\">let</span> leftHeater=heaters[idx],\n        rightHeater=heaters[idx+<span class=\"hljs-number\">1</span>] || <span class=\"hljs-literal\">Infinity</span>\n    aux[i]=<span class=\"hljs-built_in\">Math</span>.min(<span class=\"hljs-built_in\">Math</span>.abs(leftHeater-houses[i]),<span class=\"hljs-built_in\">Math</span>.abs(rightHeater-houses[i]))\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-built_in\">Math</span>,aux)\n};\n</code></pre>\n"
  ],
  "titleSlug": "heaters",
  "hasThinking": false,
  "content": "<p>冬季已经来临。&nbsp;你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p>\n\n<p>现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。</p>\n\n<p>所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。</p>\n\n<p><strong>说明:</strong></p>\n\n<ol>\n\t<li>给出的房屋和供暖器的数目是非负数且不会超过 25000。</li>\n\t<li>给出的房屋和供暖器的位置均是非负数且不会超过10^9。</li>\n\t<li>只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。</li>\n\t<li>所有供暖器都遵循你的半径标准，加热的半径也一样。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3],[2]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,2,3,4],[1,4]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。\n</pre>\n"
}
