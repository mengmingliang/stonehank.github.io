{
  "content": "<p>这个<code>DP</code>算法用于解决一个抽象问题，关于一个数组中至少隔一个项目相加的最大和</p>\n<p>实际能解决的问题包括</p>\n<p><code>House Rubber</code>问题，例如<a href=\"https://leetcode.com/problems/house-robber-ii/\">House RubberⅡ</a></p>\n<p><code>Sell Stock</code>问题，例如<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">Sell Stock with Cooldown</a></p>\n<p>例如：<code>House Rubber</code>问题</p>\n<p>题目要求，不能连续进入2个相邻的房子，也就是说必须隔一位</p>\n<p>例如 <code>[1,5,1,1,4,1]</code>，最大值为<code>5+4</code></p>\n<p>按照题意编写：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxProfit</span>(<span class=\"hljs-params\">prices</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> last_stole=<span class=\"hljs-number\">0</span>,last_notStole=<span class=\"hljs-number\">0</span>,\n      cur_stole=<span class=\"hljs-number\">0</span>,cur_notStole=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;prices.length;i++){\n    cur_stole=last_notStole+prices[i]\n    cur_notStole=<span class=\"hljs-built_in\">Math</span>.max(last_stole,last_notStole)\n    last_stole=cur_stole\n    last_notStole=cur_notStole\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(cur_stole,cur_notStole)\n}\n</code></pre>\n"
}
