{
  "content": "<p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p>\n<ul>\n<li>addRange(int left, int right) 添加半开区间 [left, right)，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间 [left, right) 中尚未跟踪的任何数字到该区间中。</li>\n<li>queryRange(int left, int right) 只有在当前正在跟踪区间 [left, right) 中的每一个实数时，才返回 true。</li>\n<li>removeRange(int left, int right) 停止跟踪区间 [left, right) 中当前正在跟踪的每个实数</li>\n</ul>\n<pre class=\"hljs\"><code>addRange(10, 20): null\nremoveRange(14, 16): null\nqueryRange(10, 14): true （区间 [10, 14) 中的每个数都正在被跟踪）\nqueryRange(13, 15): false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\nqueryRange(16, 17): true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\n</code></pre>\n<hr>\n<p>这道题考察的是区间的增加合并和删除拆分。</p>\n<p>区间合并拆分算法如下(当前区间列表为<code>this.range</code>，格式为<code>[[left,right],[left,right]]</code>)</p>\n<p>初始化：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> RangeModule = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.range = []\n};\n</code></pre>\n<p>增加区间：</p>\n<pre class=\"hljs\"><code>RangeModule.prototype.addRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-keyword\">this</span>.range.length\n  <span class=\"hljs-keyword\">let</span> newArr = []\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (;i&lt;len;i++) {\n    <span class=\"hljs-keyword\">let</span> itv=<span class=\"hljs-keyword\">this</span>.range[i]\n    <span class=\"hljs-keyword\">if</span> (itv[<span class=\"hljs-number\">0</span>]&gt;right) <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span> (itv[<span class=\"hljs-number\">1</span>]&lt;left) {\n      newArr.push(itv)\n    }<span class=\"hljs-keyword\">else</span>{\n      left=<span class=\"hljs-built_in\">Math</span>.min(itv[<span class=\"hljs-number\">0</span>], left)\n      right=<span class=\"hljs-built_in\">Math</span>.max(itv[<span class=\"hljs-number\">1</span>], right)\n    }\n  }\n  newArr.push([left,right])\n  <span class=\"hljs-keyword\">if</span> (i&lt;len)newArr.push(...this.range.slice(i))\n  <span class=\"hljs-keyword\">this</span>.range = newArr\n};\n</code></pre>\n<p>删除区间：</p>\n<pre class=\"hljs\"><code>RangeModule.prototype.removeRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> len=<span class=\"hljs-keyword\">this</span>.range.length\n  <span class=\"hljs-keyword\">if</span>(len===<span class=\"hljs-number\">0</span> || left&gt;<span class=\"hljs-keyword\">this</span>.range[len<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>] || right&lt;<span class=\"hljs-keyword\">this</span>.range[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">let</span> newArr=[],temp=[]\n  <span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(;i&lt;len;i++){\n    <span class=\"hljs-keyword\">let</span> itv=<span class=\"hljs-keyword\">this</span>.range[i]\n    <span class=\"hljs-keyword\">if</span>(itv[<span class=\"hljs-number\">0</span>]&gt;right)<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span>(itv[<span class=\"hljs-number\">1</span>]&lt;left){\n      newArr.push(itv)\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(left&gt;itv[<span class=\"hljs-number\">0</span>])temp.push([itv[<span class=\"hljs-number\">0</span>],left])\n      <span class=\"hljs-keyword\">if</span>(right&lt;itv[<span class=\"hljs-number\">1</span>])temp.push([right,itv[<span class=\"hljs-number\">1</span>]])\n    }\n  }\n  <span class=\"hljs-keyword\">if</span>(temp.length&gt;<span class=\"hljs-number\">0</span>)newArr.push(...temp)\n  <span class=\"hljs-keyword\">if</span>(i&lt;len)newArr.push(...this.range.slice(i))\n  <span class=\"hljs-keyword\">this</span>.range=newArr\n};\n</code></pre>\n<p>区间查询：</p>\n<pre class=\"hljs\"><code>RangeModule.prototype.queryRange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> itv <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">this</span>.range){\n    <span class=\"hljs-keyword\">if</span>(left&gt;=itv[<span class=\"hljs-number\">0</span>] &amp;&amp; right&lt;=itv[<span class=\"hljs-number\">1</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</code></pre>\n"
}
