{
  "content": "<p>给出两个整数 n 和 k，找出所有包含从 1 到 n 的数字，且恰好拥有 k 个逆序对的不同的数组的个数。</p>\n<p>逆序对的定义如下：对于数组的第i个和第 j个元素，如果满i &lt; j且 a[i] &gt; a[j]，则其为一个逆序对；否则不是。</p>\n<p>由于答案可能很大，只需要返回 答案 mod 109 + 7 的值。</p>\n<pre class=\"hljs\"><code>示例 1:\n输入: n = 3, k = 0\n输出: 1\n解释: \n只有数组 [1,2,3] 包含了从1到3的整数并且正好拥有 0 个逆序对。\n\n示例 2:\n输入: n = 3, k = 1\n输出: 2\n解释: \n数组 [1,3,2] 和 [2,1,3] 都有 1 个逆序对。\n</code></pre>\n<hr>\n<p>思路：\n考虑一个例子，当我们知道<code>n=6</code>和<code>k=(0~3)</code>时的值为<code>dp[6][0]</code>,<code>dp[6][1]</code>,<code>dp[6][2]</code>,<code>dp[6][3]</code></p>\n<p>那么如果<code>n=7</code>,<code>k=3</code>，应该如何转换？</p>\n<p>如果<code>7</code>放在第一位，则为<code>7(x*6)</code>，那么会增加6个逆序。</p>\n<p>如果<code>7</code>放在第二位，则为<code>(x)7(x*5)</code>，那么会增加5个逆序。</p>\n<p>...</p>\n<p>因此，在这里，我们能够有效转换有(不需要管具体插入哪个位置，反正插入的那个位置能达到增加逆序的要求数量)</p>\n<p><code>dp[6][0]+插入7增加3个逆序</code></p>\n<p><code>dp[6][1]+插入7增加2个逆序</code></p>\n<p><code>dp[6][2]+插入7增加1个逆序</code></p>\n<p><code>dp[6][3]+插入7增加0个逆序</code></p>\n<p>我们的转换为：</p>\n<p><code>dp[7][3] = dp[6][0]+dp[6][1]+dp[6][2]+dp[6][3]</code></p>\n<p>这种写法的时间复杂度是<code>O(n^2*k)</code>，最坏情况<code>n</code>,<code>k</code>都是1000，会TLE。</p>\n<p>因此，需要优化一下，我们以<code>dp[i][j]</code>表示 <code>n==i</code>和<code>k==0~j</code>时的总和。</p>\n<p>状态转移方程为：</p>\n<p><code>dp[i][j]=dp[i][j-1] + dp[i-1][j] - (j&gt;=i ? dp[i-1][j-i] : 0)</code></p>\n<p>其中<code>(j&gt;=i ? dp[i-1][j-i] : 0)</code>表示当超出极限时，需要减去之前的和</p>\n<p>例如<code>n=7</code>的极限就是增加逆序数为6个，可以是<code>0~6</code>或者<code>1~7</code>等等。</p>\n<hr>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> kInversePairs = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dp=<span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill().map(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span><span class=\"hljs-built_in\">Array</span>(k+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>))\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;n+<span class=\"hljs-number\">1</span>;i++){\n    dp[i][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-keyword\">let</span> MOD=<span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;n+<span class=\"hljs-number\">1</span>;i++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">1</span>;j&lt;k+<span class=\"hljs-number\">1</span>;j++){\n      <span class=\"hljs-keyword\">let</span> val=(dp[i<span class=\"hljs-number\">-1</span>][j]-(j&gt;=i ? dp[i<span class=\"hljs-number\">-1</span>][j-i] : <span class=\"hljs-number\">0</span>) + MOD) % MOD\n      dp[i][j]=(dp[i][j<span class=\"hljs-number\">-1</span>]+val) % MOD\n      \n    }\n  }\n  <span class=\"hljs-keyword\">return</span> (dp[n][k]-(dp[n][k<span class=\"hljs-number\">-1</span>] || <span class=\"hljs-number\">0</span>)+MOD) % MOD\n};\n</code></pre>\n"
}
