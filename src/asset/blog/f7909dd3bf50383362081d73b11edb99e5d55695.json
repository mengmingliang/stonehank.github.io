{
  "content": "<p>给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。</p>\n<pre class=\"hljs\"><code>示例 1:\n\n输入: \n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n输出: \n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n示例 2:\n\n输入: \n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\n输出: \n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n</code></pre>\n<p>进阶:</p>\n<ul>\n<li>一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。</li>\n<li>一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。</li>\n<li>你能想出一个常数空间的解决方案吗？</li>\n</ul>\n<hr>\n<p>思路：</p>\n<ol>\n<li>\n<p><code>O(mn)</code>空间：重新创造一个新的<code>matrix</code>即可。</p>\n</li>\n<li>\n<p><code>O(m+n)</code>空间：遍历<code>matrix</code>，发现<code>0</code>，就保存当前的行和列，最后将保存的行和列置零。</p>\n</li>\n<li>\n<p><code>O(1)</code>空间：使用一个变量记录第一行初始是否有0，然后遍历，发现<code>0</code>，将当前列的第一行设置为<code>0</code>，\n并且当前行也要重置为<code>0</code>。</p>\n<p>最后将第一行存在<code>0</code>的列全部设置为<code>0</code>，并且如果第一行初始有<code>0</code>，重置为<code>0</code>。</p>\n</li>\n</ol>\n<hr>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[][]} matrix\n * @return {void} Do not return anything, modify matrix in-place instead.\n */</span>\n<span class=\"hljs-keyword\">var</span> setZeroes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">matrix</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> topHasZero=matrix[<span class=\"hljs-number\">0</span>].includes(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">let</span> m=matrix.length,n=matrix[<span class=\"hljs-number\">0</span>].length\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&lt;m;i++){\n    <span class=\"hljs-keyword\">if</span>(matrix[i].includes(<span class=\"hljs-number\">0</span>)){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n        <span class=\"hljs-keyword\">if</span>(matrix[i][j]===<span class=\"hljs-number\">0</span>)matrix[<span class=\"hljs-number\">0</span>][j]=<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">else</span> matrix[i][j]=<span class=\"hljs-number\">0</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">if</span>(matrix[<span class=\"hljs-number\">0</span>][i]===<span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;m;j++)matrix[j][i]=<span class=\"hljs-number\">0</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">if</span>(topHasZero){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)matrix[<span class=\"hljs-number\">0</span>][i]=<span class=\"hljs-number\">0</span>\n  }\n};\n</code></pre>\n"
}
