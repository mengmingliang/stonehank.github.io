{
  "content": "<p>题目给出一个字符串只包括<code>(</code>和<code>)</code>，要求算出最大有效长度。</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code>Input: &quot;)()(()()&quot;\nOutput: 4\nExplanation: The longest valid parentheses substring is &quot;()()&quot;\n</code></pre>\n<p>思路：</p>\n<p>一般来说，遇到括号问题，首先会想到用<code>stack</code>，这道题也同样，用<code>stack</code>保存每一个括号的索引值，每次<code>pop</code>的时候，\n记录最大值。</p>\n<p>另外这道题也可以用<code>DP</code>，<code>DP</code>的思路是当存在<code>()</code>，需要<code>+2</code>，当存在<code>(()())</code>，需要<code>+2</code>后再加上第一个<code>(</code>上的值。</p>\n<p>stack代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> longestValidParentheses = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-comment\">// 设为-1是当出现一开始就是有效的 `()`情况，需要是用 索引1 - (-1)=2</span>\n  <span class=\"hljs-keyword\">let</span> stack=[<span class=\"hljs-number\">-1</span>]\n  <span class=\"hljs-keyword\">let</span> max=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;s.length;i++){\n    <span class=\"hljs-keyword\">if</span>(s[i]===<span class=\"hljs-string\">\"(\"</span>){\n      stack.push(i)\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">if</span>(stack.length&gt;<span class=\"hljs-number\">1</span>){\n        stack.pop()\n        max=<span class=\"hljs-built_in\">Math</span>.max(max,i-stack[stack.length<span class=\"hljs-number\">-1</span>])\n      }<span class=\"hljs-keyword\">else</span>{\n        stack[<span class=\"hljs-number\">0</span>]=i\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> max\n};\n</code></pre>\n<p>DP代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> longestValidParentheses = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> max = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">var</span> n = s.length;\n  <span class=\"hljs-keyword\">var</span> dp = <span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++){\n    <span class=\"hljs-keyword\">if</span> (s[i] === <span class=\"hljs-string\">')'</span> &amp;&amp; s[i - <span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'('</span>){\n        dp[i] = (dp[i - <span class=\"hljs-number\">2</span>] || <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">2</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (s[i] === <span class=\"hljs-string\">')'</span> &amp;&amp; dp[i - <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-number\">0</span> &amp;&amp; s[i - dp[i - <span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'('</span>){\n        dp[i] = <span class=\"hljs-number\">2</span> + dp[i - <span class=\"hljs-number\">1</span>];\n        dp[i] += (dp[i - dp[i]] || <span class=\"hljs-number\">0</span>)\n      }\n    }\n    max = <span class=\"hljs-built_in\">Math</span>.max(max, dp[i])\n  }\n  <span class=\"hljs-keyword\">return</span> max;\n};\n</code></pre>\n"
}
