{
  "content": "<p>题目给定一个数组<code>A</code>，并且定义从<code>i</code>点的奇数跳为<code>i</code>点之后<code>&gt;=A[i]</code>的最小值，从<code>i</code>点的偶数跳为<code>i</code>点之后的<code>&lt;=A[i]</code>的最大值。</p>\n<p>求能跳到终点的<code>i</code>的数量。</p>\n<p>思路：</p>\n<p>这道题暴力解是<code>O(N^2)</code>，从每一个点，模拟是否能跳到终点。</p>\n<p>但如果逆序遍历，则会发现当前点<code>i</code>需要找的值就在已经遍历的集合内部，因此可以使用<code>TreeMap</code>，通过查找当前点的<code>ceil</code>和<code>floor</code>，\n时间复杂度是<code>O(NlgN)</code>。</p>\n<p>代码：这里模拟了<code>TreeMap</code>的功能。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> oddEvenJumps = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> list=[],res=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> odd=<span class=\"hljs-built_in\">Array</span>(A.length).fill(<span class=\"hljs-literal\">false</span>),even=<span class=\"hljs-built_in\">Array</span>(A.length).fill(<span class=\"hljs-literal\">false</span>)\n  odd[A.length<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-literal\">true</span>\n  even[A.length<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-literal\">true</span>\n  insert(A[A.length<span class=\"hljs-number\">-1</span>],A.length<span class=\"hljs-number\">-1</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=A.length<span class=\"hljs-number\">-2</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-comment\">// 逆序很重要，能保证每次只找它之后的数据</span>\n    <span class=\"hljs-comment\">// 先找奇数跳的位置(&gt;=A[i]的最小值)和偶数跳的位置(&lt;=A[i]的最大值)</span>\n    <span class=\"hljs-keyword\">let</span> oddIdx=ceil(A[i]),\n        evenIdx=floor(A[i])\n    <span class=\"hljs-comment\">// 如果当前是奇数跳，那么判断下一个位置的偶数跳是否为true，为true，则当前奇数跳为true</span>\n    <span class=\"hljs-comment\">// 如果当前是偶数跳，那么判断下一个位置的奇数跳是否为true，为true，则当前偶数跳为true</span>\n    <span class=\"hljs-keyword\">if</span>(evenIdx!==<span class=\"hljs-number\">-1</span> &amp;&amp; odd[evenIdx])even[i]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span>(oddIdx!==<span class=\"hljs-number\">-1</span> &amp;&amp; even[oddIdx])odd[i]=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\">// 如果当前奇数跳为true，res++</span>\n    <span class=\"hljs-keyword\">if</span>(odd[i])res++\n    insert(A[i],i)\n  }\n  <span class=\"hljs-keyword\">return</span> res\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">n,id</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(list.length===<span class=\"hljs-number\">0</span> || list[list.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]&lt;=n){\n      list.push([n,id])\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> idx=bsEnd(list,n)\n      list.splice(idx,<span class=\"hljs-number\">0</span>,[n,id])\n    }\n  }\n  <span class=\"hljs-comment\">// 找到大于n的最小值在原数组的索引</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ceil</span>(<span class=\"hljs-params\">n</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(n&gt;list[list.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&lt;list[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">return</span> list[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> idx=bsEnd(list,n)\n      <span class=\"hljs-keyword\">return</span> list[idx][<span class=\"hljs-number\">1</span>]\n    }\n  }\n  <span class=\"hljs-comment\">// 找到小于n的最大值在原数组的索引</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">floor</span>(<span class=\"hljs-params\">n</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(n&lt;list[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&gt;list[list.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>])<span class=\"hljs-keyword\">return</span> list[list.length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> idx=bsEnd(list,n)\n      <span class=\"hljs-keyword\">if</span>(list[idx][<span class=\"hljs-number\">0</span>]!==n){\n        idx=bsEnd(list,list[--idx][<span class=\"hljs-number\">0</span>])\n      }\n      <span class=\"hljs-keyword\">return</span> list[idx][<span class=\"hljs-number\">1</span>]\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid][<span class=\"hljs-number\">0</span>]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }\n};\n</code></pre>\n"
}
