{
  "content": "<p>如果一个由 '0' 和 '1' 组成的字符串，是以一些 '0'（可能没有 '0'）后面跟着一些 '1'（也可能没有 '1'）的形式组成的，那么该字符串是单调递增的。</p>\n<p>我们给出一个由字符 '0' 和 '1' 组成的字符串 S，我们可以将任何 '0' 翻转为 '1' 或者将 '1' 翻转为 '0'。</p>\n<p>返回使 S 单调递增的最小翻转次数。</p>\n<pre class=\"hljs\"><code>示例 1：\n\n输入：&quot;00110&quot;\n输出：1\n解释：我们翻转最后一位得到 00111.\n示例 2：\n\n输入：&quot;010110&quot;\n输出：2\n解释：我们翻转得到 011111，或者是 000111。\n示例 3：\n\n输入：&quot;00011000&quot;\n输出：2\n解释：我们翻转得到 00000000。\n</code></pre>\n<p>提示：</p>\n<p>1 &lt;= S.length &lt;= 20000\nS 中只包含字符 '0' 和 '1'</p>\n<hr>\n<p>思路：</p>\n<p>这道题要求3种格式，分别是<code>00</code>,<code>01</code>,<code>11</code></p>\n<p>因此，数字<code>0</code>前面必须是<code>0</code>，数字<code>1</code>前面可以是<code>0</code>或者<code>1</code>。</p>\n<p>我们定义2个数组<code>beZero</code>和<code>beOne</code>，分别用来保存如果当前值要反转成<code>0</code>或者<code>1</code>需要的次数。</p>\n<p>通过上面分析，可以得到以下公式：</p>\n<pre class=\"hljs\"><code>if S[i]==&quot;0&quot;:\nbeZero[i]=beZero[i-1]\nbeOne[i]=Math.min(beZero[i-1],beOne[i-1]) + 1\n\nif S[i]==&quot;1&quot;:\nbeZero[i]=beZero[i-1] + 1\nbeOne[i]=Math.min(beZero[i-1],beOne[i-1])\n</code></pre>\n<hr>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {string} S\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> minFlipsMonoIncr = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">S</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n=S.length\n  <span class=\"hljs-keyword\">let</span> beZero=<span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>),\n      beOne=<span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">if</span>(S[i]===<span class=\"hljs-string\">'0'</span>){\n      beZero[i+<span class=\"hljs-number\">1</span>]=beZero[i]\n      beOne[i+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-built_in\">Math</span>.min(beZero[i],beOne[i])+<span class=\"hljs-number\">1</span>\n    }<span class=\"hljs-keyword\">else</span>{\n      beZero[i+<span class=\"hljs-number\">1</span>]=beZero[i]+<span class=\"hljs-number\">1</span>\n      beOne[i+<span class=\"hljs-number\">1</span>]=<span class=\"hljs-built_in\">Math</span>.min(beZero[i],beOne[i])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.min(beZero[n],beOne[n])\n};\n</code></pre>\n"
}
