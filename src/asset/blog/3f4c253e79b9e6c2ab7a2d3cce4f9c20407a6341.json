{
  "content": "<p>给定一个整数数组 A，坡是元组 (i, j)，其中  i &lt; j 且 A[i] &lt;= A[j]。这样的坡的宽度为 j - i。</p>\n<p>找出 A 中的坡的最大宽度，如果不存在，返回 0 。</p>\n<pre class=\"hljs\"><code>示例 1：\n\n输入：[6,0,8,2,1,5]\n输出：4\n解释：\n最大宽度的坡为 (i, j) = (1, 5): A[1] = 0 且 A[5] = 5.\n示例 2：\n\n输入：[9,8,1,0,1,9,4,0,4,1]\n输出：7\n解释：\n最大宽度的坡为 (i, j) = (2, 9): A[2] = 1 且 A[9] = 1.\n</code></pre>\n<p>提示：</p>\n<ol>\n<li>2 &lt;= A.length &lt;= 50000</li>\n<li>0 &lt;= A[i] &lt;= 50000</li>\n</ol>\n<hr>\n<p>思路：</p>\n<p>这道题我们需要对原数组构造出一个降序数组和升序数组，例如：<code>[6,0,8,2,1,5]</code></p>\n<p><code>[index(val)]</code></p>\n<p>降序数组为：<code>[0(6),1(0)]</code>，升序数组为<code>[5(5),2(8)]</code></p>\n<p>为什么这么做有效呢</p>\n<p>例如在最后一个元素<code>5</code>前面并且<code>&lt;=5</code>的元素，他们能获取的长度一定不会超过<code>5</code>能获取的长度。</p>\n<p>同样，在元素<code>0</code>后面并且<code>&gt;=0</code>的元素，他们对应的长度也一定不会超过<code>0</code>能获取的长度。</p>\n<p>因此，我们只需要对升序数组和降序数组进行处理即可。</p>\n<p>遍历升序数组，一旦发现匹配的降序数组，直接<code>pop</code>，因为降序数组这个匹配的值的长度一定是当前值的最大长度。</p>\n<hr>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} A\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> maxWidthRamp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n=A.length\n  <span class=\"hljs-keyword\">let</span> dec=[],inc=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">if</span>(dec.length===<span class=\"hljs-number\">0</span> || A[dec[dec.length<span class=\"hljs-number\">-1</span>]]&gt;A[i]){\n      dec.push(i)\n    }\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=n<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-keyword\">if</span>(inc.length===<span class=\"hljs-number\">0</span> || A[inc[inc.length<span class=\"hljs-number\">-1</span>]]&lt;A[i]){\n      inc.push(i)\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> maxLen=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    <span class=\"hljs-keyword\">while</span>(dec.length&gt;<span class=\"hljs-number\">0</span> &amp;&amp; A[dec[dec.length<span class=\"hljs-number\">-1</span>]]&lt;=A[inc[i]]){\n      maxLen=<span class=\"hljs-built_in\">Math</span>.max(maxLen,inc[i]-dec.pop())\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> maxLen\n};\n</code></pre>\n"
}
