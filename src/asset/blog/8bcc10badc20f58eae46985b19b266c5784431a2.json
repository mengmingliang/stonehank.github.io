{
  "content": "<p>人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，ages[i] 表示第 i 个人的年龄。</p>\n<p>当满足以下条件时，A 不能给 B（A、B不为同一人）发送好友请求：</p>\n<ul>\n<li>age[B] &lt;= 0.5 * age[A] + 7</li>\n<li>age[B] &gt; age[A]</li>\n<li>age[B] &gt; 100 &amp;&amp; age[A] &lt; 100\n否则，A 可以给 B 发送好友请求。</li>\n</ul>\n<p>注意如果 A 向 B 发出了请求，不等于 B 接受了 A 的请求。而且，人们不会给自己发送好友请求。</p>\n<p>求总共会发出多少份好友请求?</p>\n<pre class=\"hljs\"><code>示例 1:\n\n输入: [16,16]\n输出: 2\n解释: 二人可以互发好友申请。\n示例 2:\n\n输入: [16,17,18]\n输出: 2\n解释: 好友请求可产生于 17 -&gt; 16, 18 -&gt; 17.\n示例 3:\n\n输入: [20,30,100,110,120]\n输出: 3\n解释: 好友请求可产生于 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n\n</code></pre>\n<p>说明:</p>\n<p>1 &lt;= ages.length &lt;= 20000.\n1 &lt;= ages[i] &lt;= 120.</p>\n<hr>\n<p>思路：</p>\n<p>首先，这第三个条件是重复的，可以无视，接着一个很自然的想法就是排序后，按从大到小的顺序(可以避免判断条件2)，\n检测每一个人能发多少请求。</p>\n<p>当然这么做是<code>O(N^2)</code>，显然不符合要求。</p>\n<p>因为是已经排序了，我们可以只找出某个人发出请求的极限年龄(条件1)，然后用二分法搜索到这个极限年龄的索引，\n在这索引和当前索引之内的值都可以作为此人发出的请求。</p>\n<p>另外还有2个注意点，<strong>相同年龄</strong>的人和<strong>14岁以下</strong>的人，我们用一个<code>hash</code>保存每个年龄的请求数，如果存在相同年龄，\n直接返回<code>hash</code>值即可，14岁是一个分界点，在此之下不会发出任何请求。</p>\n<hr>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * @param {number[]} ages\n * @return {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> numFriendRequests = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ages</span>) </span>{\n  ages.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bsEnd</span>(<span class=\"hljs-params\">arr,n</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> lo=<span class=\"hljs-number\">0</span>,hi=arr.length<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-keyword\">while</span>(lo&lt;hi){\n      <span class=\"hljs-keyword\">let</span> mid=<span class=\"hljs-built_in\">Math</span>.floor((lo+hi)/<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">else</span> hi=mid\n    }\n    <span class=\"hljs-keyword\">return</span> hi\n  }  \n  <span class=\"hljs-keyword\">let</span> hash={}\n  <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=ages.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n    <span class=\"hljs-keyword\">let</span> cur=ages[i]\n    <span class=\"hljs-keyword\">if</span>(cur&lt;=<span class=\"hljs-number\">14</span>)<span class=\"hljs-keyword\">return</span> res\n    <span class=\"hljs-keyword\">if</span>(hash[cur]!=<span class=\"hljs-literal\">null</span>)res+=hash[cur]\n    <span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">let</span> targ=<span class=\"hljs-built_in\">Math</span>.floor(cur/<span class=\"hljs-number\">2</span>)+<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">let</span> add=i-bsEnd(ages,targ)\n      hash[cur]=add\n      res+=add\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> res\n};\n</code></pre>\n"
}
