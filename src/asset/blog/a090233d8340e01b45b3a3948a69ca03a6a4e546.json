{
  "content": "<p>题目给定一个网格，遇见<code>1</code>表示能摘取1个樱桃，遇到<code>0</code>表示空地，遇到<code>-1</code>表示荆棘不能走。</p>\n<p>要求从左上走到右下，再从右下走回左上，樱桃摘掉就会从<code>1</code>变<code>0</code>，问能摘取的最大樱桃数。</p>\n<p>这道题初一看有点像<code>路径最大和</code>问题，但细想不能这么做，因为走完第一次，摘取的樱桃会消失，\n因此子问题互相有影响。</p>\n<p>思路：</p>\n<ol>\n<li>走2次，由于走完第一次，摘取的樱桃会消失，因此不能使用单程DP*2，因为子问题互相有影响。</li>\n<li>可以看成是2个人一起从左上走到右下，或者从右下走到左上。</li>\n<li>由于2个人是同步行走，因此任何一方超出规则，都视为无效路径。</li>\n<li>当他们走到同一格，只能摘取1个樱桃。</li>\n<li>使用mem记录他们走过的格子不必重复计算，复杂度从指数降到3次方</li>\n</ol>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> cherryPickup = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grid</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> n=grid.length\n  <span class=\"hljs-keyword\">let</span> mem=[]\n  <span class=\"hljs-comment\">// 创建mem，记录x1,y1和x2,y2的行走记录</span>\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++){\n    mem[i]=[]\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j=<span class=\"hljs-number\">0</span>;j&lt;n;j++){\n      mem[i][j]=[]\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;n;k++){\n        mem[i][j][k]=-<span class=\"hljs-literal\">Infinity</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">0</span>,dp(n<span class=\"hljs-number\">-1</span>,n<span class=\"hljs-number\">-1</span>,n<span class=\"hljs-number\">-1</span>))\n  <span class=\"hljs-comment\">// 返回从x1,y1 和 从x2,y2一起走到 0,0能最多摘到樱桃数</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dp</span>(<span class=\"hljs-params\">x1,y1,x2</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> y2=x1+y1-x2\n    <span class=\"hljs-comment\">// 任意一个超出边界 返回</span>\n    <span class=\"hljs-keyword\">if</span>(x1&lt;<span class=\"hljs-number\">0</span>||x2&lt;<span class=\"hljs-number\">0</span>||y1&lt;<span class=\"hljs-number\">0</span>||y2&lt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-comment\">// 任意一个进入荆棘，返回</span>\n    <span class=\"hljs-keyword\">if</span>(grid[x1][y1]&lt;<span class=\"hljs-number\">0</span> || grid[x2][y2]&lt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-comment\">// 到达终点，返回</span>\n    <span class=\"hljs-keyword\">if</span>(x1===<span class=\"hljs-number\">0</span> &amp;&amp; y1===<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> grid[x1][y1]\n    <span class=\"hljs-comment\">// 存在记录，直接返回记录</span>\n    <span class=\"hljs-keyword\">if</span>(mem[x1][y1][x2]!==-<span class=\"hljs-literal\">Infinity</span>)<span class=\"hljs-keyword\">return</span> mem[x1][y1][x2]\n    <span class=\"hljs-comment\">// 子问题，分别计算x1,y1 和 x2,y2的所有能走的情况(4种)</span>\n    <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-built_in\">Math</span>.max(dp(x1<span class=\"hljs-number\">-1</span>,y1,x2<span class=\"hljs-number\">-1</span>),dp(x1<span class=\"hljs-number\">-1</span>,y1,x2),dp(x1,y1<span class=\"hljs-number\">-1</span>,x2<span class=\"hljs-number\">-1</span>),dp(x1,y1<span class=\"hljs-number\">-1</span>,x2))\n    <span class=\"hljs-comment\">// 子问题无解，返回并且记录-1</span>\n    <span class=\"hljs-keyword\">if</span>(res&lt;<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> mem[x1][y1][x2]=<span class=\"hljs-number\">-1</span>\n    <span class=\"hljs-comment\">// 获取x1,y1摘得樱桃数</span>\n    res+=grid[x1][y1]\n    <span class=\"hljs-comment\">// 如果x1,y1和x2,y2不在同一个位置，加上x2,y2摘的樱桃数</span>\n    <span class=\"hljs-keyword\">if</span>(x1!==x2 &amp;&amp; y1!==y2)res+=grid[x2][y2]\n    <span class=\"hljs-comment\">// 记录</span>\n    mem[x1][y1][x2]=res\n    <span class=\"hljs-keyword\">return</span> res\n  }\n};\n</code></pre>\n"
}
