{
  "content": "<p>两个玩家可以轮流从公共整数池中抽取从<code>1</code>到<code>M</code>的整数（不放回），直到累计整数和&gt;=<code>T</code>。</p>\n<p>思路：</p>\n<ol>\n<li>由于双方都是最佳表现，因此可以使用同一个递归公式。</li>\n<li>当前玩家获胜的前提有2个：一是当前回合我能凑齐整数<code>T</code>，二是下一回合对手会输。</li>\n<li>如果当前玩家未获胜，到了下一回合对手玩家的胜利也同样是以上两点。</li>\n</ol>\n<p>根据以上可以轻松写出递归思路：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> canIWin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">maxChoosableInteger, desiredTotal</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&lt;=maxChoosableInteger)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&gt;maxChoosableInteger*(maxChoosableInteger+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(maxChoosableInteger).fill(<span class=\"hljs-literal\">false</span>)\n  <span class=\"hljs-keyword\">return</span> canWin(desiredTotal,used)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">canWin</span>(<span class=\"hljs-params\">total</span>)</span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;maxChoosableInteger;++i){\n      <span class=\"hljs-keyword\">if</span>(used[i])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-comment\">// 当总数小于选中的数 或者 对方输了，就能判定为胜利</span>\n      used[i]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">if</span>(total&lt;=i+<span class=\"hljs-number\">1</span> || !canWin(total-(i+<span class=\"hljs-number\">1</span>))){\n        used[i]=<span class=\"hljs-literal\">false</span>; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }<span class=\"hljs-keyword\">else</span> used[i]=<span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n};\n</code></pre>\n<p>这一段代码思路很清楚，但是<code>TLE</code>，因为全部完成是一个阶乘的数量级，考虑两个状态，</p>\n<ol>\n<li>A先选3，B选1</li>\n<li>A先选1，B选3</li>\n</ol>\n<p>这两个状态选的顺序不同，但是结果是完全一致的，因此我们减少对状态的保存。</p>\n<p>我们使用<code>[]</code>保存状态，使用<code>JSON.stringify</code>获取状态属性。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> canIWin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">maxChoosableInteger, desiredTotal</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&lt;=maxChoosableInteger)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&gt;maxChoosableInteger*(maxChoosableInteger+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> m={}\n  <span class=\"hljs-keyword\">let</span> used=<span class=\"hljs-built_in\">Array</span>(maxChoosableInteger).fill(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> canWin(desiredTotal,used)\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">canWin</span>(<span class=\"hljs-params\">total</span>)</span>{\n    <span class=\"hljs-comment\">// 存在状态直接读取</span>\n    <span class=\"hljs-keyword\">if</span> (m[<span class=\"hljs-built_in\">JSON</span>.stringify(used)]!=<span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> m[<span class=\"hljs-built_in\">JSON</span>.stringify(used)];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;maxChoosableInteger;++i){\n      <span class=\"hljs-keyword\">if</span>(used[i])<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-comment\">// 当总数小于选中的数 或者 对方输了，就能判定为胜利</span>\n      used[i]=<span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">if</span>(total&lt;=i+<span class=\"hljs-number\">1</span> || !canWin(total-(i+<span class=\"hljs-number\">1</span>))){\n        used[i]=<span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-comment\">// 保存获胜状态</span>\n        m[<span class=\"hljs-built_in\">JSON</span>.stringify(used)] = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n      used[i]=<span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-comment\">// 保存失败状态</span>\n    m[<span class=\"hljs-built_in\">JSON</span>.stringify(used)] = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n};\n</code></pre>\n<p>这一段代码能通过，但也可以视为<code>TLE</code>，因为耗时<code>2500~3000ms</code>，原因是使用<code>JSON.stringify</code>太消耗资源。</p>\n<p>我们需要一个更简洁有效的保存方式——<code>位</code>。</p>\n<p>使用位来保存当前状态的好处：</p>\n<ol>\n<li>不用考虑顺序，只要存在就可以跳过</li>\n<li>节省空间</li>\n<li>整体可以作为一个数字，也可以作为一个状态属性，例如<code>00011111</code>既可以表示后5位使用了，也可以用数字<code>31</code>保存这个状态。</li>\n</ol>\n<p>最终代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> canIWin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">maxChoosableInteger, desiredTotal</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&lt;=maxChoosableInteger)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">if</span>(desiredTotal&gt;maxChoosableInteger*(maxChoosableInteger+<span class=\"hljs-number\">1</span>)/<span class=\"hljs-number\">2</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> m={}\n  <span class=\"hljs-keyword\">return</span> canWin(desiredTotal,<span class=\"hljs-number\">0</span>)\n  \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">canWin</span>(<span class=\"hljs-params\">total,used</span>)</span>{\n    <span class=\"hljs-keyword\">if</span> (m[used]!=<span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> m[used];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;maxChoosableInteger;++i){\n      <span class=\"hljs-comment\">// 使用位来保存当前状态</span>\n      <span class=\"hljs-comment\">// 左移i表示当前第i位为1(已经使用)</span>\n      <span class=\"hljs-keyword\">let</span> cur=(<span class=\"hljs-number\">1</span> &lt;&lt; i);\n      <span class=\"hljs-comment\">// &amp; 能检测之前是否存在1，如果之前存在1，那么continue</span>\n      <span class=\"hljs-keyword\">if</span>((cur &amp; used)!==<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">continue</span>\n      <span class=\"hljs-comment\">// | 能更新状态，使最新状态当前第i位为1</span>\n      <span class=\"hljs-keyword\">if</span>(total&lt;=i+<span class=\"hljs-number\">1</span> || !canWin(total-(i+<span class=\"hljs-number\">1</span>),cur | used)){\n        m[used] = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n    m[used] = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n};\n</code></pre>\n<p>时间降低10倍，最终完成时间<code>180ms</code>。</p>\n"
}
