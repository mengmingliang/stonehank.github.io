{
  "content": "<p>给定一个已排序的正整数数组 <code>nums</code>，和一个正整数 <code>n</code> 。</p>\n<p>从<code>[1, n]</code>区间内选取任意个数字补充到 <code>nums</code> 中，使得<code>[1, n]</code>区间内的任何数字都可以用<code>nums</code>中某几个数字的和来表示。</p>\n<p>请输出满足上述要求的最少需要补充的数字个数。</p>\n<pre class=\"hljs\"><code>输入: nums = [1,3], n = 6\n输出: 1 \n解释:\n根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。\n现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。\n其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。\n所以我们最少需要添加一个数字。\n</code></pre>\n<hr>\n<blockquote>\n<p>学习点：如果<code>sum(0...i) &gt;= nums[i+1]</code>，说明在<code>sum</code>之内都存在组合，执行<code>sum+=nums[i+1]</code>，否则需要补充<code>sum(0...i)+1</code></p>\n</blockquote>\n<p>例如：<code>1,3,7,10</code></p>\n<p>当<code>i</code>为1，<code>sum(0..i)</code>为4，<code>nums[i+1]</code>为7，因为<code>4&lt;7</code>，因此需要补充<code>5</code>。</p>\n<p>补充完5后，当<code>i</code>为2，<code>sum(0..i)</code>为<code>1+3+5+7=</code>16，<code>nums[i+1]</code>为10，因为<code>16&gt;=10</code>，因此不需要补充，<code>sum+=nums[i+1]</code></p>\n<p>最终，只需要补充5，这段数组<code>[1,3,5,7,10]</code>就可以表示26以内的所有数字。</p>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> minPatches = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> miss = <span class=\"hljs-number\">1</span>, added = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (miss &lt;= n) {\n    <span class=\"hljs-comment\">// 只要sum(0...i) &gt;= nums[next]，说明在sum之内都存在组合。</span>\n    <span class=\"hljs-keyword\">if</span> (i &lt; nums.length &amp;&amp; nums[i] &lt;= miss) {\n        miss += nums[i++];\n    } <span class=\"hljs-keyword\">else</span> {\n        miss += miss;\n        added++;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> added;\n};\n</code></pre>\n"
}
