{
  "content": "<h2>css3种赋值方式</h2>\n<ol>\n<li><code>element.style.name=value</code></li>\n<li><code>element.style.setProperty('name','value')</code></li>\n<li><code>element.style.cssText=&quot;name:value&quot;</code></li>\n</ol>\n<p>1和2一次都只能对单个属性赋值，只对name属性赋值，2性能稍微好些</p>\n<p>3一次可赋值多个属性（减少重排），但注意会先清除内联中其他非赋值属性</p>\n<h2>动态更新事件函数</h2>\n<ul>\n<li>通常写法</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> someEle=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"id\"</span>)\n<span class=\"hljs-comment\">// 绑定</span>\nsomeEle.addEventListener(eventName,eventFunc)\n<span class=\"hljs-comment\">// 替换</span>\nsomeEle.removeEventListener(eventName,eventFunc)\nsomeEle.addEventListener(eventName,newEventFunc)\n<span class=\"hljs-comment\">// 解绑</span>\nsomeEle.removeEventListener(eventName,newEventFunc)\n</code></pre>\n<p>这只是一个元素的事件，当元素或者事件多了，会写很多绑定和解绑代码，\n而且每次解绑都要去查询之前绑定的函数</p>\n<ul>\n<li>动态更新写法</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 定义动态事件</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eventListener</span>(<span class=\"hljs-params\">event</span>) </span>{\n<span class=\"hljs-keyword\">return</span> event.currentTarget.events[event.type](event)\n}\n<span class=\"hljs-comment\">// 初始化  </span>\n<span class=\"hljs-keyword\">var</span> someEle=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"id\"</span>)\n<span class=\"hljs-keyword\">if</span>(!someEle.events){\n someEle.events={}\n}\n\n<span class=\"hljs-comment\">// 绑定</span>\nsomeEle.events[eventName]=eventFunc\nsomeEle.addEventListener(eventName,eventListener)\n<span class=\"hljs-comment\">// 替换</span>\nsomeEle.events[eventName]=newEventFunc\n<span class=\"hljs-comment\">// 解绑</span>\nsomeEle.removeEventListener(eventName,eventListener)\n</code></pre>\n<p>可以看到，当绑定成功后，每次更新只需要改变数据便可，不需要重新绑定</p>\n<ul>\n<li>注意：addEventListener绑定可以同时绑定多个事件函数，而动态绑定单个事件名称只能绑定1个事件函数</li>\n</ul>\n"
}
