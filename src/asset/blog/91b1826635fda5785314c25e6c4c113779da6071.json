{
  "content": "<p>题目给出一个<code>N*N</code>矩阵，要求计算出转换为棋盘的最小步数，每次转换只能交换两行或者两列，不能转换则输出<code>-1</code></p>\n<p>棋盘格式：</p>\n<pre class=\"hljs\"><code>1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n</code></pre>\n<p>思路：</p>\n<ol>\n<li>\n<p>能转换为棋盘的矩阵符合2个特征：</p>\n<ol>\n<li>\n<p>抽取某一行(列)，其他行(列)一定与这一行相同或者相反。</p>\n<p>例如某一行为<code>11001</code>，那么其他行只可能是<code>11001</code>或者<code>00110</code>。</p>\n</li>\n<li>\n<p>每一行中<code>1</code>和<code>0</code>的数量必须不小于<code>Math.floor(N/2)</code>。</p>\n</li>\n</ol>\n<p>例如这行<code>100010</code>，是不符合规则的直接返回<code>-1</code>。</p>\n</li>\n<li>\n<p>当判断完有效棋盘后，需要计算转换步数，由于奇数棋盘只存在唯一的解，而偶数存在两个解(取最小)。</p>\n<ol>\n<li>\n<p>这里使用一个假设结果，<code>0101010...</code>，也就是说，当检测到<code>row[0]</code>为<code>0</code>时，<code>rowMove++</code>，<code>row[1]</code>为<code>1</code>时，<code>rowMove++</code>...</p>\n</li>\n<li>\n<p>当行列都检测完毕，如果<code>N</code>是偶数，我们取最小值<code>Math.min(rowMove,N-rowMove)</code>，如果<code>N</code>是奇数，<code>rowMove</code>必须为偶数\n(<code>rowMove</code>为奇数是不可能排列成的)，因此<code>rowMove</code>为奇数时，使用<code>N-rowMove</code>。</p>\n</li>\n</ol>\n<p>由于上面的<code>rowMove</code>是整行检查，而一行中每次交换是交换2列，因此最终结果<code>/2</code>。</p>\n</li>\n</ol>\n<p>代码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> movesToChessboard = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">board</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> N = board.length, colToMove = <span class=\"hljs-number\">0</span>, rowToMove = <span class=\"hljs-number\">0</span>, rowOneCnt = <span class=\"hljs-number\">0</span>, colOneCnt = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-comment\">// 一种更有效的检查每一行为相同或相反的方式</span>\n<span class=\"hljs-comment\">//   for (let i = 0; i &lt; N; i++) {</span>\n<span class=\"hljs-comment\">//     for (let j = 0; j &lt; N; j++) {</span>\n<span class=\"hljs-comment\">//       if (((board[0][0] ^ board[i][0]) ^ (board[i][j] ^ board[0][j])) == 1) {</span>\n<span class=\"hljs-comment\">//         return -1;</span>\n<span class=\"hljs-comment\">//       }</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//   }</span>\n\n  <span class=\"hljs-keyword\">let</span> firstRow=board[<span class=\"hljs-number\">0</span>], firstReversRow=[]\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;firstRow.length;i++){\n    <span class=\"hljs-keyword\">if</span>(firstRow[i]===<span class=\"hljs-number\">0</span>)firstReversRow[i]=<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span> firstReversRow[i]=<span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkValid</span>(<span class=\"hljs-params\">row</span>)</span>{\n    <span class=\"hljs-keyword\">let</span> v1=<span class=\"hljs-literal\">true</span>,v2=<span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;board[row].length;i++){\n      <span class=\"hljs-keyword\">if</span>(firstRow[i]!==board[row][i]){\n        <span class=\"hljs-keyword\">if</span>(!v2 || firstReversRow[i]!==board[row][i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        v1=<span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">if</span>(firstReversRow[i]!==board[row][i]){\n        <span class=\"hljs-keyword\">if</span>(!v1 || firstRow[i]!==board[row][i])<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        v2=<span class=\"hljs-literal\">false</span>\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;N;i++){\n    <span class=\"hljs-keyword\">if</span>(!checkValid(i))<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n    rowOneCnt += board[<span class=\"hljs-number\">0</span>][i];\n    colOneCnt += board[i][<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">if</span> (board[i][<span class=\"hljs-number\">0</span>] === i % <span class=\"hljs-number\">2</span>) rowToMove++;\n    <span class=\"hljs-keyword\">if</span> (board[<span class=\"hljs-number\">0</span>][i] === i % <span class=\"hljs-number\">2</span>) colToMove++;\n  }\n  <span class=\"hljs-keyword\">let</span> halfLimit=<span class=\"hljs-built_in\">Math</span>.floor( N / <span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">if</span> (rowOneCnt&lt;halfLimit || (N-rowOneCnt)&lt;halfLimit ||\n    colOneCnt&lt;halfLimit || (N-colOneCnt)&lt;halfLimit) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n  }\n<span class=\"hljs-comment\">// 当为奇数时，只有一种情况（move为偶数的情况）</span>\n  <span class=\"hljs-keyword\">if</span> (N % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (colToMove % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">1</span>) colToMove = N - colToMove;\n    <span class=\"hljs-keyword\">if</span> (rowToMove % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">1</span>) rowToMove = N - rowToMove;\n  } <span class=\"hljs-keyword\">else</span> {\n    colToMove = <span class=\"hljs-built_in\">Math</span>.min(colToMove, N - colToMove);\n    rowToMove = <span class=\"hljs-built_in\">Math</span>.min(rowToMove, N - rowToMove);\n  }\n  <span class=\"hljs-keyword\">return</span> (colToMove + rowToMove) / <span class=\"hljs-number\">2</span>;\n};\n</code></pre>\n"
}
