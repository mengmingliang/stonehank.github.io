{
  "content": "## css3种赋值方式\n\n1. `element.style.name=value`\n2. `element.style.setProperty('name','value')`\n3. `element.style.cssText=\"name:value\"`\n\n1和2一次都只能对单个属性赋值，只对name属性赋值，2性能稍微好些\n\n3一次可赋值多个属性（减少重排），但注意会先清除内联中其他非赋值属性\n\n## 动态更新事件函数\n\n* 通常写法\n```js\nvar someEle=document.getElementById(\"id\")\n// 绑定\nsomeEle.addEventListener(eventName,eventFunc)\n// 替换\nsomeEle.removeEventListener(eventName,eventFunc)\nsomeEle.addEventListener(eventName,newEventFunc)\n// 解绑\nsomeEle.removeEventListener(eventName,newEventFunc)\n```\n这只是一个元素的事件，当元素或者事件多了，会写很多绑定和解绑代码，\n而且每次解绑都要去查询之前绑定的函数\n\n\n* 动态更新写法\n```js\n// 定义动态事件\nfunction eventListener(event) {\nreturn event.currentTarget.events[event.type](event)\n}\n// 初始化  \nvar someEle=document.getElementById(\"id\")\nif(!someEle.events){\n someEle.events={}\n}\n\n// 绑定\nsomeEle.events[eventName]=eventFunc\nsomeEle.addEventListener(eventName,eventListener)\n// 替换\nsomeEle.events[eventName]=newEventFunc\n// 解绑\nsomeEle.removeEventListener(eventName,eventListener)\n```\n可以看到，当绑定成功后，每次更新只需要改变数据便可，不需要重新绑定\n\n* 注意：addEventListener绑定可以同时绑定多个事件函数，而动态绑定单个事件名称只能绑定1个事件函数"
}
