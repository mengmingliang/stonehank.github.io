{
  "content": "使用4种方式：props传递，父组件公用，hoc，render-prop\n\n定义需求，cur符合auth才能查看组件内容，否则进入NotAccess\n```\nconst cur = \"a\";\nconst auth = {\n  com1: [\"a\", \"b\"],\n  com2: [\"b\", \"c\"],\n  com3: [\"c\", \"d\"]\n};\nconst NotAccess = () => <div>Not Access</div>;\n```\n\n## props传递\n\n```jsx harmony\nconst Component1 = props => {\n  const { comId } = props;\n  const isValid = auth[comId].includes(cur);\n  return isValid ? <div>Component1</div> : <NotAccess />;\n};\nconst Component2 = props => {\n  const { comId } = props;\n  const isValid = auth[comId].includes(cur);\n  return isValid ? <div>Component2</div> : <NotAccess />;\n};\nconst Component3 = props => {\n  const { comId } = props;\n  const isValid = auth[comId].includes(cur);\n  return isValid ? <div>Component3</div> : <NotAccess />;\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Component1 comId={\"com1\"} />\n        <Component2 comId={\"com2\"} />\n        <Component3 comId={\"com3\"} />\n      </div>\n    );\n  }\n}\n```\n[在线例子](https://codesandbox.io/s/04nxrzzm1v)\n\n\n## 组件复用+Children\n\n```jsx harmony\nconst Component1 = () => <div>Component1</div>;\nconst Component2 = () => <div>Component2</div>;\nconst Component3 = () => <div>Component3</div>;\n\nclass AuthComponent extends React.Component {\n  render() {\n    const { comId } = this.props;\n    const isValid = auth[comId].includes(cur);\n    return isValid ? this.props.children : <NotAccess />;\n  }\n}\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <AuthComponent comId={\"com1\"}>\n          <Component1 />\n        </AuthComponent>\n        <AuthComponent comId={\"com2\"}>\n          <Component2 />\n        </AuthComponent>\n        <AuthComponent comId={\"com3\"}>\n          <Component3 />\n        </AuthComponent>\n      </div>\n    );\n  }\n}\n```\n[在线例子](https://codesandbox.io/s/zvo23629m)\n\n## 高阶组件 HOC\n\n```jsx harmony\nconst Component1 = () => <div>Component1</div>;\nconst Component2 = () => <div>Component2</div>;\nconst Component3 = () => <div>Component3</div>;\n\nconst Auth = (Component, comId) => {\n  return class extends React.Component {\n    render() {\n      const isValid = auth[comId].includes(cur);\n      return isValid ? <Component /> : <NotAccess />;\n    }\n  };\n};\n\nlet AuthCom1 = Auth(Component1, \"com1\");\nlet AuthCom2 = Auth(Component2, \"com2\");\nlet AuthCom3 = Auth(Component3, \"com3\");\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <AuthCom1 />\n        <AuthCom2 />\n        <AuthCom3 />\n      </div>\n    );\n  }\n}\n```\n\n[在线例子](https://codesandbox.io/s/9oz40znmvy)\n\n\n## render-prop\n\nApp组件可以轻松的获取任何子组件里的参数\n```jsx harmony\nconst Component1 = () => <div>Component1</div>;\nconst Component2 = () => <div>Component2</div>;\nconst Component3 = () => <div>Component3</div>;\n\nconst AuthCom = props => {\n  const validEles = React.Children.map(props.children, e => {\n    const { comId } = e.props;\n    return auth[comId].includes(cur) ? e : <NotAccess />;\n  });\n  return props.render(validEles);\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <AuthCom\n        render={validEles => {\n          return validEles.map(e => e);\n        }}\n      >\n        <Component1 comId=\"com1\" />\n        <Component2 comId=\"com2\" />\n        <Component3 comId=\"com3\" />\n      </AuthCom>\n    );\n  }\n}\n```\n\n[在线例子](https://codesandbox.io/s/l27ljm781q)"
}
