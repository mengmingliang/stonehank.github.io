{
  "content": "题目位置：https://leetcode.com/problems/nth-magical-number/description/\n\n题目：\n\n如果正整数 可被A  或B整除，则它是神奇的。\n\n返回第N个魔法数字。由于答案可能非常大，因此返回值需要模(%)10^9 + 7。\n\n例1：\n```\n输入： N = 1，A = 2，B = 3\n输出：2\n```\n例2：\n```\n输入： N = 4，A = 2，B = 3\n输出：6\n```\n例3：\n```\n输入： N = 5，A = 2，B = 4\n输出：10\n```\n例4：\n```\n输入： N = 3，A = 6，B = 4\n输出：8\n```\n----------\n要点；\n1. 如果知道在N次内，a出现的次数i，b出现的次数j，那么就可以通过Math.max(a*i,b*j)求出结果\n    ```\n    例如: N为5, a为3, b为4\n    如果我们知道a出现了3次，b出现了2次，那么就可算出 9\n    ```\n\n2. N是由a出现的次数i，b出现的次数j，和他们最小公倍数出现的次数k计算而得(N=i+j-k)\n    ```\n    例如 N为5, a为2, b为3\n    a出现4次，b出现2次，最小公倍数出现1次，那么N=4+2-1\n    ```\n\n3. 假设某个数x，a出现的次数是Math.floor(x/a)，b出现的次数是Math.floor(x/b)，最小公倍数出现的次数是Math.floor(x/lcm)，因此我们要找出这个数，使得i+j-k===N\n----------------------\n* 最大公约数 Lowest Common Multiple\n```js\nfunction GCD(a,b){\n    while(a % b!==0){\n        let temp=a\n        a=b;\n        b=temp % b\n    }\n    return b\n}\n```\n\n* 最小公倍数 greatest common divisor\n```js\nfunction LCM(a,b){\n    return a*b/GCD(a,b)\n}\n```\n--------\n* 完整代码\n```js\n/**\n * @param {number} N\n * @param {number} A\n * @param {number} B\n * @return {number}\n */\nvar nthMagicalNumber = function(N, A, B) {\n    let lo=0,hi=Number.MAX_SAFE_INTEGER,m=0;\n    let aCount,bCount;\n    while(lo<hi){\n        let mid=Math.floor((lo+hi)/2);\n        aCount=Math.floor(mid/A);\n        bCount=Math.floor(mid/B);\n        let LCMCount=Math.floor(mid/LCM(A,B));\n        m=aCount+bCount-LCMCount;\n        if(m===N)break;\n        else if(m>N)hi=mid;\n        else lo=mid+1;\n    }\n    function GCD(a,b){\n        while(a % b!==0){\n            let temp=a;\n            a=b;\n            b=temp % b\n        }\n        return b\n    }\n    function LCM(a,b){\n        return a*b/GCD(a,b)\n    }\n    return Math.max(A*aCount,B*bCount) % 1000000007\n};\n```"
}
