{
  "content": "<p>使用4种方式：props传递，父组件公用，hoc，render-prop</p>\n<p>定义需求，cur符合auth才能查看组件内容，否则进入NotAccess</p>\n<pre class=\"hljs\"><code>const cur = &quot;a&quot;;\nconst auth = {\n  com1: [&quot;a&quot;, &quot;b&quot;],\n  com2: [&quot;b&quot;, &quot;c&quot;],\n  com3: [&quot;c&quot;, &quot;d&quot;]\n};\nconst NotAccess = () =&gt; &lt;div&gt;Not Access&lt;/div&gt;;\n</code></pre>\n<h2>props传递</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Component1 = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> { comId } = props;\n  <span class=\"hljs-keyword\">const</span> isValid = auth[comId].includes(cur);\n  <span class=\"hljs-keyword\">return</span> isValid ? &lt;div&gt;Component1&lt;/div&gt; : &lt;NotAccess /&gt;;\n};\nconst Component2 = props =&gt; {\n  const { comId } = props;\n  const isValid = auth[comId].includes(cur);\n  return isValid ? &lt;div&gt;Component2&lt;/div&gt; : &lt;NotAccess /&gt;;\n};\nconst Component3 = props =&gt; {\n  const { comId } = props;\n  const isValid = auth[comId].includes(cur);\n  return isValid ? &lt;div&gt;Component3&lt;/div&gt; : &lt;NotAccess /&gt;;\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Component1 comId={\"com1\"} /&gt;\n        &lt;Component2 comId={\"com2\"} /&gt;\n        &lt;Component3 comId={\"com3\"} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/04nxrzzm1v\">在线例子</a></p>\n<h2>组件复用+Children</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Component1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component1&lt;<span class=\"hljs-regexp\">/div&gt;;\nconst Component2 = () =&gt; &lt;div&gt;Component2&lt;/</span>div&gt;;\n<span class=\"hljs-keyword\">const</span> Component3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component3&lt;<span class=\"hljs-regexp\">/div&gt;;\n\nclass AuthComponent extends React.Component {\n  render() {\n    const { comId } = this.props;\n    const isValid = auth[comId].includes(cur);\n    return isValid ? this.props.children : &lt;NotAccess /</span>&gt;;\n  }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;div&gt;\n        &lt;AuthComponent comId={\"com1\"}&gt;\n          &lt;Component1 /&gt;\n        &lt;/AuthComponent&gt;\n        &lt;AuthComponent comId={\"com2\"}&gt;\n          &lt;Component2 /&gt;\n        &lt;/AuthComponent&gt;\n        &lt;AuthComponent comId={\"com3\"}&gt;\n          &lt;Component3 /&gt;\n        &lt;/AuthComponent&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/zvo23629m\">在线例子</a></p>\n<h2>高阶组件 HOC</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Component1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component1&lt;<span class=\"hljs-regexp\">/div&gt;;\nconst Component2 = () =&gt; &lt;div&gt;Component2&lt;/</span>div&gt;;\n<span class=\"hljs-keyword\">const</span> Component3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component3&lt;<span class=\"hljs-regexp\">/div&gt;;\n\nconst Auth = (Component, comId) =&gt; {\n  return class extends React.Component {\n    render() {\n      const isValid = auth[comId].includes(cur);\n      return isValid ? &lt;Component /</span>&gt; : &lt;NotAccess /&gt;;\n    }\n  };\n};\n\nlet AuthCom1 = Auth(Component1, \"com1\");\nlet AuthCom2 = Auth(Component2, \"com2\");\nlet AuthCom3 = Auth(Component3, \"com3\");\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;AuthCom1 /&gt;\n        &lt;AuthCom2 /&gt;\n        &lt;AuthCom3 /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/9oz40znmvy\">在线例子</a></p>\n<h2>render-prop</h2>\n<p>App组件可以轻松的获取任何子组件里的参数</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> Component1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component1&lt;<span class=\"hljs-regexp\">/div&gt;;\nconst Component2 = () =&gt; &lt;div&gt;Component2&lt;/</span>div&gt;;\n<span class=\"hljs-keyword\">const</span> Component3 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;div&gt;Component3&lt;<span class=\"hljs-regexp\">/div&gt;;\n\nconst AuthCom = props =&gt; {\n  const validEles = React.Children.map(props.children, e =&gt; {\n    const { comId } = e.props;\n    return auth[comId].includes(cur) ? e : &lt;NotAccess /</span>&gt;;\n  });\n  <span class=\"hljs-keyword\">return</span> props.render(validEles);\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;AuthCom\n        render={validEles =&gt; {\n          return validEles.map(e =&gt; e);\n        }}\n      &gt;\n        &lt;Component1 comId=\"com1\" /&gt;\n        &lt;Component2 comId=\"com2\" /&gt;\n        &lt;Component3 comId=\"com3\" /&gt;\n      &lt;/AuthCom&gt;\n    );\n  }\n}\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/l27ljm781q\">在线例子</a></p>\n"
}
