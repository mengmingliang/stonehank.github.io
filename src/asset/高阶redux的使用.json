{
  "content": "###3 Redux的复用\n\n因为每一次dispatch都是遍历所有reducer寻找type，因此每一个action的type不能一致，\n当需要复用reducer时，可以使用prefix\n```js\nfunction generateReducer(prefix,state){\n  const SOMETYPE=prefix+'SOMETYPE';\n  const initialState={...state}\n  return function reducer(state=initialState,action){\n    //...\n  }\n}\n```\n\n###3 Redux的增强\n\n增强redux通过3点进行\n* 处理额外的action\n* 维护更多state\n* action能传递给原始reducer处理\n\n```js\nfunction HOCReducer(reducer){\n  // 此处可以配置更多state\n  const initialState={}\n  return function(state=initialState,action){\n    // 此处处理额外的action\n    switch(action.type){\n      case 'additionalType':\n        /*do something*/\n        return  /*{...}*/;\n      default:\n        // 遇到无匹配的action，返回给原始reducer处理\n        const newState=reducer(initialState,action)\n        return /*{...}*/\n    }\n  }\n}\n```\n调用：\n```js\nimport {createStroe} from 'redux';\n\nfunction reducer(state={},action){\n  switch(action.type){\n    /* 初始的reducer*/\n  }\n}\nconst hocReducer=HOCReducer(reducer);\nconst store=createStroe(hocReducer);\n\n/* dispatch后就会从hocReducer开始执行遍历*/\n```"
}
