{
  "content": "## 正则 exec和match\n\n* 都是返回数组，包括小括号内部\n* 非全局 一致\n* match全局，匹配多个值\n* exec全局，匹配单个值，但每次执行会继续从上一次匹配数据之后开始\n```js\nlet str='this is a stick'\n\nlet reg=/.is/\nreg.exec(str)   // [\"his\", index: 1, input: \"this is a stick\", groups: undefined]\nreg.exec(str)   // [\"his\", index: 1, input: \"this is a stick\", groups: undefined]\n\nlet regG=/.is/g\nregG.exec(str)  // [\"his\", index: 1, input: \"this is a stick\", groups: undefined]\nregG.exec(str)  // [\" is\", index: 4, input: \"this is a stick\", groups: undefined]\nregG.exec(str)  // null\n```\n\n## 正则的静态属性\n\n| 长属性名 | 短属性名 | 说明 |\n| :------| :---: | :---- |\n| input | $_ | 最近一次要匹配的字符串 |\n| lastMatch | $& | 最近一次匹配项 |\n| lastParen | $+ | 最近一次匹配的捕获组 |\n| leftContext | $` | input字符串中lastMatch之前的文本 |\n| rightContext | $' | input字符串中lastMatch之后的文本 |\n| multiline | $* | 布尔值，表示是否所有表达式都使用多行模式|\n\n```js\nlet str=\"short stick\"\nlet pattern=/s/g\n\n// 第一次执行(也可以用exec)\npattern.test(str)\nRegExp.rightContext   // \"hort stick\"\nRegExp[\"$'\"]          // \"hort stick\"\n\n// 第二次执行\npattern.test(str)\nRegExp.rightContext   // \"tick\"\nRegExp[\"$'\"]          // \"tick\"\n```\n"
}
