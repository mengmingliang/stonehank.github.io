{
  "content": "useReducer\n\n模拟reducer\n\n`const [state, dispatch] = useReducer(reducer, initialState, initialAction);`\n\n* 参数1`reducer` \n\n与`redux`写法相比，不需要默认返回值\n\n```js\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n  }\n}\n```\n\n* 参数2 `initialState`\n\n默认渲染后的初始值，有点类似`componentDidMount`，第一次执行的时候触发\n\n* 参数3 `initialAction`\n\n当执行触发后，会立刻执行这个action。\n\n官网例子：\n\n```jsx\nimport { render } from \"react-dom\";\nimport React, { Component, useState,useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'reset':\n      return { count: action.payload };\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n  }\n}\nfunction Counter({ initialCount }) {\n  const [state, dispatch] = useReducer(\n    reducer,\n    initialState,\n    { type: 'reset', payload: initialCount },\n  );\n  return (\n    <React.Fragment>\n      Count: {state.count}\n      <button\n        onClick={() => dispatch({ type: 'reset', payload: initialCount||initialState.count })}>\n        Reset\n      </button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </React.Fragment>\n  );\n}\nrender(<Counter initialCount={5} />, document.getElementById(\"root\"));\n```\n\n1. 这里`Counter`接受一个`initialCount`的prop，此处设定为5。\n2. 这里第2个参数`initialState`设置为`{ count: 0 }`，说明初始加载后，显示为0。\n3. 这里第3个参数`initialAction`是`{ type: 'reset', payload: initialCount }`，说明当组件加载完毕，会立刻执行这个action，也就是执行`reset`，然后显示会变为5。\n4. 因此组件加载，显示5。\n\n[以上代码在线](https://codesandbox.io/s/48pn6o407)\n\n> 可以搭配`useContext`来传递到深层子组件(传递`dispatch`)。\n\n[官网例子:https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down)\n"
}
