(window.webpackJsonp=window.webpackJsonp||[]).push([[766],{801:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} expression\n * @param {string[]} evalvars\n * @param {number[]} evalints\n * @return {string[]}\n */</span>\n<span class="hljs-keyword">var</span> basicCalculatorIV = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">expression, evalvars, evalints</span>) </span>{ \n  <span class="hljs-keyword">let</span> varsHash={},uiq=<span class="hljs-number">1</span>\n  <span class="hljs-keyword">let</span> intHash={}\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;evalvars.length;i++){\n    intHash[evalvars[i]]=evalints[i]\n  }\n\n  \n  <span class="hljs-keyword">let</span> result=resolveStr(expression)\n  <span class="hljs-keyword">let</span> keys=<span class="hljs-built_in">Object</span>.keys(result)\n  <span class="hljs-comment">// \u6309\u7167\u53d8\u91cf\u7684\u6570\u91cf\u964d\u5e8f\uff0c\u5982\u679c\u6570\u91cf\u76f8\u540c\uff0c\u6309\u7167\u53d8\u91cf\u5927\u5c0f\u5347\u5e8f</span>\n  keys.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>{\n    <span class="hljs-keyword">let</span> asp=a.split(<span class="hljs-string">\'*\'</span>),\n        bsp=b.split(<span class="hljs-string">\'*\'</span>)\n    <span class="hljs-keyword">if</span>(a===<span class="hljs-string">\'\'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>\n    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b===<span class="hljs-string">\'\'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(asp.length&lt;bsp.length)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>\n    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(asp.length&gt;bsp.length)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n    <span class="hljs-keyword">else</span>{\n        <span class="hljs-keyword">if</span>(a&lt;b)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>        \n    }\n  })\n\n  <span class="hljs-keyword">let</span> finalRes=[]\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;keys.length;i++){\n    <span class="hljs-keyword">let</span> k=keys[i],num=result[k]\n    <span class="hljs-keyword">if</span>(num===<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>\n    <span class="hljs-keyword">if</span>(k!==<span class="hljs-string">\'\'</span>)k=<span class="hljs-string">\'*\'</span>+k\n    finalRes.push(num+k)\n  }\n  <span class="hljs-keyword">return</span> finalRes\n\n  \n  <span class="hljs-comment">// \u89e3\u6790\u5b57\u7b26\u4e32</span>\n  <span class="hljs-comment">// \u9996\u5148\u53bb\u62ec\u53f7\uff0c\u7136\u540estack \u6309\u987a\u5e8f\u89e3\u6790</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolveStr</span>(<span class="hljs-params">str</span>)</span>{\n    <span class="hljs-comment">// \u53bb\u62ec\u53f7</span>\n    <span class="hljs-keyword">let</span> valid=<span class="hljs-number">-1</span>,mem=[],k=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;str.length;i++){\n      <span class="hljs-keyword">if</span>(str[i]===<span class="hljs-string">"("</span>){\n        <span class="hljs-keyword">if</span>(valid===<span class="hljs-number">-1</span>){\n\t\t      k=i\n          valid=<span class="hljs-number">0</span>\n        }\n        valid++\n      }\n      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i]===<span class="hljs-string">")"</span>)valid--\n      <span class="hljs-keyword">if</span>(valid===<span class="hljs-number">0</span>){\n        mem.push(str.substring(k,i+<span class="hljs-number">1</span>))\n        valid=<span class="hljs-number">-1</span>\n        k=i+<span class="hljs-number">1</span>\n      }\n    }\n    <span class="hljs-comment">// \u4ee5\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32 __uiq \u4ee3\u66ff\u62ec\u53f7\u5185\u7684\u5185\u5bb9</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;mem.length;i++){\n      <span class="hljs-keyword">let</span> k=<span class="hljs-string">\'__uiq\'</span>+uiq++\n      varsHash[k]=mem[i]\n      str=str.replace(mem[i],k)\n    }    \n    \n    <span class="hljs-comment">// \u6309\u8fd0\u7b97\u987a\u5e8f\u89e3\u6790</span>\n    <span class="hljs-keyword">let</span> stack=[]\n    <span class="hljs-keyword">let</span> arr=str.split(<span class="hljs-string">\' \'</span>), sign=<span class="hljs-string">\'+\'</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++){\n      <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/[\\+\\-\\*]/</span>.test(arr[i])){\n        sign=arr[i]\n      }<span class="hljs-keyword">else</span>{\n        <span class="hljs-keyword">if</span>(sign===<span class="hljs-string">"*"</span>){\n          <span class="hljs-keyword">let</span> last=stack.pop()\n          stack.push(multi(parse(arr[i]),last))\n        }<span class="hljs-keyword">else</span> \n          stack.push(parse(arr[i],sign===<span class="hljs-string">\'-\'</span>))\n      }\n    }\n    <span class="hljs-keyword">let</span> result=stack[<span class="hljs-number">0</span>]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;stack.length;i++){\n      result=add(result,stack[i])\n    }\n    <span class="hljs-keyword">return</span> result\n  }\n\n  <span class="hljs-comment">// \u5c06\u4efb\u610f \u53d8\u91cf\uff0c\u6570\u503c\uff0c\u81ea\u5b9a\u4e49__uiq \u8f6c\u5316\u4e3a \u683c\u5f0f{String:Int}</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse</span>(<span class="hljs-params">s,neg</span>)</span>{\n    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Object</span>.prototype.toString.call(s)===<span class="hljs-string">"[object Object]"</span>){\n      <span class="hljs-keyword">if</span>(neg){\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> s)s[k]=-s[k]\n      }\n      <span class="hljs-keyword">return</span> s\n    }\n    <span class="hljs-keyword">if</span>(varsHash[s]!=<span class="hljs-literal">null</span>){\n      <span class="hljs-keyword">let</span> cst=varsHash[s]\n      <span class="hljs-comment">// \u53bb\u9664\u62ec\u53f7</span>\n      cst=cst.substring(<span class="hljs-number">1</span>,cst.length<span class="hljs-number">-1</span>)\n      <span class="hljs-keyword">return</span> parse(resolveStr(cst),neg)\n    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-built_in">Number</span>(s)))\n      <span class="hljs-keyword">return</span> {<span class="hljs-string">""</span>:neg?-s:+s}\n    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(intHash[s]!=<span class="hljs-literal">null</span>)\n      <span class="hljs-keyword">return</span> {<span class="hljs-string">""</span>:neg?-intHash[s]:intHash[s]}\n    <span class="hljs-keyword">else</span> \n      <span class="hljs-keyword">return</span> {[s]:neg?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>}\n  }\n  \n  <span class="hljs-comment">// \u5b9a\u4e49\u683c\u5f0f{String:Int}\u7684\u4e58\u6cd5</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multi</span>(<span class="hljs-params">a,b</span>)</span>{\n    <span class="hljs-keyword">let</span> keya=<span class="hljs-built_in">Object</span>.keys(a),\n        keyb=<span class="hljs-built_in">Object</span>.keys(b)\n    <span class="hljs-keyword">let</span> result={}\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;keya.length;i++){\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;keyb.length;j++){\n        <span class="hljs-keyword">let</span> combine\n        <span class="hljs-keyword">if</span>(keya[i]!==<span class="hljs-string">\'\'</span> &amp;&amp; keyb[j]!==<span class="hljs-string">\'\'</span>)combine=keya[i]+<span class="hljs-string">\'*\'</span>+keyb[j]\n        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keyb[j]===<span class="hljs-string">\'\'</span>)combine=keya[i]\n        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keya[i]===<span class="hljs-string">\'\'</span>)combine=keyb[j]\n        <span class="hljs-keyword">let</span> cur=combine.split(<span class="hljs-string">\'*\'</span>).sort().join(<span class="hljs-string">\'*\'</span>)\n        <span class="hljs-keyword">let</span> num=a[keya[i]]*b[keyb[j]]\n        <span class="hljs-keyword">if</span>(result[cur]==<span class="hljs-literal">null</span>)result[cur]=num\n        <span class="hljs-keyword">else</span> result[cur]+=num\n      }\n    }\n\t  <span class="hljs-keyword">return</span> result\n  }\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>)</span>{\n    <span class="hljs-keyword">return</span> _add(a,b,<span class="hljs-number">1</span>)    \n  }\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minus</span>(<span class="hljs-params">a,b</span>)</span>{\n    <span class="hljs-keyword">return</span> _add(a,b,<span class="hljs-number">-1</span>)      \n  }\n  <span class="hljs-comment">// \u5b9a\u4e49\u683c\u5f0f{String:Int}\u7684\u52a0\u51cf\u6cd5</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_add</span>(<span class="hljs-params">a,b,coeff</span>)</span>{\n    <span class="hljs-keyword">let</span> keya=<span class="hljs-built_in">Object</span>.keys(a),\n        keyb=<span class="hljs-built_in">Object</span>.keys(b)\n    <span class="hljs-keyword">let</span> result={}\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;keya.length;i++){\n      <span class="hljs-keyword">let</span> cur=keya[i],num=a[keya[i]]\n      <span class="hljs-keyword">if</span>(result[cur]==<span class="hljs-literal">null</span>)result[cur]=num\n      <span class="hljs-keyword">else</span> result[cur]+=num\n    }\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;keyb.length;i++){\n      <span class="hljs-keyword">let</span> cur=keyb[i],num=b[keyb[i]]*coeff\n      <span class="hljs-keyword">if</span>(result[cur]==<span class="hljs-literal">null</span>)result[cur]=num\n      <span class="hljs-keyword">else</span> result[cur]+=num\n    }\n\t  <span class="hljs-keyword">return</span> result        \n  }\n};\n</code></pre>\n'],titleSlug:"basic-calculator-iv",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u4f8b\u5982 <code>(a-b)*(a+b)</code>\uff0c<code>a</code>\u53ef\u4ee5\u5199\u6210<code>{a:1}</code>\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u6210<code>{a:1,b:-1} * {a:1,b:1}</code>\uff0c\u7136\u540e<code>key</code>\u76f8\u52a0\uff0c<code>val</code>\u76f8\u4e58 \uff0c\u5f97\u5230 <code>{a*a:1,a*b:0,b*b:-1}\uff0c\u6700\u540e\u8f6c\u5316\u6210</code>['1<em>a</em>a','-1<em>b</em>b']`\uff0c</p>\n<p>\u9996\u5148\u8981\u53bb\u62ec\u53f7\uff0c\u62ec\u53f7\u5185\u7684\u53ef\u4ee5\u9012\u5f52\u5904\u7406\uff0c\u5728\u65e0\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u6ce8\u610f*\u4f18\u5148\uff0c\u53ef\u4ee5\u53c2\u8003<code>227. Basic Calculator II</code></p>\n<p>\u6700\u540e\u5c31\u662f\u8f93\u51fa\u6392\u5e8f\uff0c\u88ab\u5751\u4e86\u597d\u591a\u6b21\uff0c\u81ea\u5df1\u5199\u7684\u67093\u6761\u89c4\u5219\uff1a</p>\n<ol>\n<li>\u65e0\u53d8\u91cf\u7684\u653e\u6700\u540e</li>\n<li>\u6709\u53d8\u91cf\u7684\u6309\u53d8\u91cf\u6570\u91cf\u964d\u5e8f</li>\n<li>\u53d8\u91cf\u6570\u91cf\u76f8\u540c\u6309\u7167\u5b57\u7b26\u4e32\u5927\u5c0f\u5347\u5e8f</li>\n</ol>\n",content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f&nbsp;<code>expression</code>&nbsp;\u5982&nbsp;<code>expression = &quot;e + 8 - a + 5&quot;</code>&nbsp;\u548c\u4e00\u4e2a\u6c42\u503c\u6620\u5c04\uff0c\u5982&nbsp;<code>{&quot;e&quot;: 1}</code>\uff08\u7ed9\u5b9a\u7684\u5f62\u5f0f\u4e3a&nbsp;<code>evalvars = [&quot;e&quot;]</code> \u548c&nbsp;<code>evalints = [1]</code>\uff09\uff0c\u8fd4\u56de\u8868\u793a\u7b80\u5316\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0\u5217\u8868\uff0c\u4f8b\u5982 <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u4ea4\u66ff\u4f7f\u7528\u5757\u548c\u7b26\u53f7\uff0c\u6bcf\u4e2a\u5757\u548c\u7b26\u53f7\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li>\u5757\u8981\u4e48\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u8981\u4e48\u662f\u53d8\u91cf\uff0c\u8981\u4e48\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u5757\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u53d8\u91cf\u6216\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u53d8\u91cf\u662f\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4e0d\u5305\u62ec\u6570\u5b57\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u53ef\u4ee5\u662f\u591a\u4e2a\u5b57\u6bcd\uff0c\u5e76\u6ce8\u610f\u53d8\u91cf\u4ece\u4e0d\u5177\u6709\u50cf&nbsp;<code>&quot;2x&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;-x&quot;</code>&nbsp;\u8fd9\u6837\u7684\u524d\u5bfc\u7cfb\u6570\u6216\u4e00\u5143\u8fd0\u7b97\u7b26&nbsp;\u3002</li>\n</ul>\n\n<p>\u8868\u8fbe\u5f0f\u6309\u901a\u5e38\u987a\u5e8f\u8fdb\u884c\u6c42\u503c\uff1a\u5148\u662f\u62ec\u53f7\uff0c\u7136\u540e\u6c42\u4e58\u6cd5\uff0c\u518d\u8ba1\u7b97\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u4f8b\u5982\uff0c<code>expression = &quot;1 + 2 * 3&quot;</code>&nbsp;\u7684\u7b54\u6848\u662f <code>[&quot;7&quot;]</code>\u3002</p>\n\n<p>\u8f93\u51fa\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5bf9\u4e8e\u7cfb\u6570\u975e\u96f6\u7684\u6bcf\u4e2a\u81ea\u53d8\u91cf\u9879\uff0c\u6211\u4eec\u6309\u5b57\u5178\u6392\u5e8f\u7684\u987a\u5e8f\u5c06\u81ea\u53d8\u91cf\u5199\u5728\u4e00\u4e2a\u9879\u4e2d\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5199\u50cf <code>&ldquo;b*a*c&rdquo;</code> \u8fd9\u6837\u7684\u9879\uff0c\u53ea\u5199 <code>&ldquo;a*b*c&rdquo;</code>\u3002</li>\n\t<li>\u9879\u7684\u6b21\u6570\u7b49\u4e8e\u88ab\u4e58\u7684\u81ea\u53d8\u91cf\u7684\u6570\u76ee\uff0c\u5e76\u8ba1\u7b97\u91cd\u590d\u9879\u3002(\u4f8b\u5982\uff0c<code>&quot;a*a*b*c&quot;</code> \u7684\u6b21\u6570\u4e3a 4\u3002)\u3002\u6211\u4eec\u5148\u5199\u51fa\u7b54\u6848\u7684\u6700\u5927\u6b21\u6570\u9879\uff0c\u7528\u5b57\u5178\u987a\u5e8f\u6253\u7834\u5173\u7cfb\uff0c\u6b64\u65f6\u5ffd\u7565\u8bcd\u7684\u524d\u5bfc\u7cfb\u6570\u3002</li>\n\t<li>\u9879\u7684\u524d\u5bfc\u7cfb\u6570\u76f4\u63a5\u653e\u5728\u5de6\u8fb9\uff0c\u7528\u661f\u53f7\u5c06\u5b83\u4e0e\u53d8\u91cf\u5206\u9694\u5f00(\u5982\u679c\u5b58\u5728\u7684\u8bdd)\u3002\u524d\u5bfc\u7cfb\u6570 1 \u4ecd\u7136\u8981\u6253\u5370\u51fa\u6765\u3002</li>\n\t<li>\u683c\u5f0f\u826f\u597d\u7684\u4e00\u4e2a\u793a\u4f8b\u7b54\u6848\u662f&nbsp;<code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;\u3002</li>\n\t<li>\u7cfb\u6570\u4e3a 0 \u7684\u9879\uff08\u5305\u62ec\u5e38\u6570\u9879\uff09\u4e0d\u5305\u62ec\u5728\u5185\u3002\u4f8b\u5982\uff0c&ldquo;0&rdquo; \u7684\u8868\u8fbe\u5f0f\u8f93\u51fa\u4e3a []\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a&quot;,&quot;14&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;e - 8 + temperature - pressure&quot;,\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;5*a*b*c&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\nevalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>expression</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 250]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li><code>evalvars, evalints</code> \u5728\u8303\u56f4&nbsp;<code>[0, 100]</code>&nbsp;\u5185\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content766.2330b69d.chunk.js.map