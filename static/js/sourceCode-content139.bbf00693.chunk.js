(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{174:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {number[]} preorder\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> bstFromPreorder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preorder</span>) </span>{\n  <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">new</span> TreeNode(preorder[<span class="hljs-number">0</span>])\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;preorder.length;i++){\n    root=insert(root,preorder[i])\n  }\n  <span class="hljs-keyword">return</span> root\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">root,v</span>)</span>{\n    <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(v)\n    <span class="hljs-keyword">let</span> rv=root.val\n    <span class="hljs-keyword">if</span>(rv&lt;v){\n      root.right=insert(root.right,v)\n    }<span class="hljs-keyword">else</span>{\n      root.left=insert(root.left,v)\n    }\n    <span class="hljs-keyword">return</span> root\n  }\n};\n</code></pre>\n'],titleSlug:"construct-binary-search-tree-from-preorder-traversal",hasThinking:!1,content:'<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u5148\u5e8f\u904d\u5386&nbsp;<code>preorder</code> \u76f8\u5339\u914d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08binary <strong>search</strong> tree\uff09\u7684\u6839\u7ed3\u70b9\u3002</p>\n\n<p><em>(\u56de\u60f3\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff0c\u5bf9\u4e8e&nbsp;<code>node.left</code>&nbsp;\u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b <code>&lt;</code> <code>node.val</code>\uff0c\u800c <code>node.right</code> \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b <code>&gt;</code> <code>node.val</code>\u3002\u6b64\u5916\uff0c\u5148\u5e8f\u904d\u5386\u9996\u5148\u663e\u793a\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u904d\u5386 <code>node.left</code>\uff0c\u63a5\u7740\u904d\u5386 <code>node.right</code>\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[8,5,1,7,10,12]\n<strong>\u8f93\u51fa\uff1a</strong>[8,5,10,1,7,null,12]\n<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/1266.png" style="height: 200px; width: 306px;">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\n\t<li>\u5148\u5e8f&nbsp;<code>preorder</code>&nbsp;\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002</li>\n</ol>\n'}}}]);
//# sourceMappingURL=sourceCode-content139.bbf00693.chunk.js.map