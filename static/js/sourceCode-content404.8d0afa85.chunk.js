(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{439:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number} num\n * @return {number[]}\n */</span>\n<span class="hljs-keyword">var</span> countBits = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{\n  <span class="hljs-keyword">let</span> dp=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]\n  <span class="hljs-keyword">let</span> p=<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.log2(num))\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=p;i++){\n    fillpow(i)\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fillpow</span>(<span class="hljs-params">p</span>)</span>{\n    <span class="hljs-keyword">let</span> prev=<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,p<span class="hljs-number">-1</span>)\n    <span class="hljs-keyword">let</span> cur=<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,p)\n    <span class="hljs-keyword">let</span> next=<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,p+<span class="hljs-number">1</span>)\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=prev;i&lt;cur;i++){\n      dp[i+prev]=dp[i]\n    }\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=cur+prev;i&lt;next;i++){\n      dp[i]=dp[i-cur]+<span class="hljs-number">1</span>\n    }\n  }\n  <span class="hljs-keyword">return</span> dp.slice(<span class="hljs-number">0</span>,num+<span class="hljs-number">1</span>)\n};\n</code></pre>\n'],titleSlug:"counting-bits",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<strong>num</strong>\u3002\u5bf9\u4e8e&nbsp;<strong>0 &le; i &le; num </strong>\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57&nbsp;<strong>i&nbsp;</strong>\uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 1 \u7684\u6570\u76ee\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u6570\u7ec4\u8fd4\u56de\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>[0,1,1]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong><code>[0,1,1,2,1,2]</code></pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n*sizeof(integer))</strong>\u7684\u89e3\u7b54\u975e\u5e38\u5bb9\u6613\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4<strong>O(n)</strong>\u5185\u7528\u4e00\u8d9f\u626b\u63cf\u505a\u5230\u5417\uff1f</li>\n\t<li>\u8981\u6c42\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n)</strong>\u3002</li>\n\t<li>\u4f60\u80fd\u8fdb\u4e00\u6b65\u5b8c\u5584\u89e3\u6cd5\u5417\uff1f\u8981\u6c42\u5728C++\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\uff08\u5982 C++ \u4e2d\u7684&nbsp;<strong>__builtin_popcount</strong>\uff09\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content404.8d0afa85.chunk.js.map