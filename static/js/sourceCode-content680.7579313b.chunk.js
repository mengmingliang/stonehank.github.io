(window.webpackJsonp=window.webpackJsonp||[]).push([[671],{715:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> MagicDictionary = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.dictArr=[]\n  <span class="hljs-keyword">this</span>.check=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dictWord,word</span>)</span>{\n    <span class="hljs-keyword">let</span> count=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;dictWord.length;i++){\n      <span class="hljs-keyword">if</span>(dictWord[i]!==word[i]){\n        <span class="hljs-keyword">if</span>(count===<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n        <span class="hljs-keyword">else</span> count++\n      }\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  }\n};\n\n<span class="hljs-comment">/**\n * Build a dictionary through a list of words \n * @param {string[]} dict\n * @return {void}\n */</span>\nMagicDictionary.prototype.buildDict = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dict</span>) </span>{\n  <span class="hljs-keyword">this</span>.dictArr=dict\n};\n\n<span class="hljs-comment">/**\n * Returns if there is any word in the trie that equals to the given word after modifying exactly one character \n * @param {string} word\n * @return {boolean}\n */</span>\nMagicDictionary.prototype.search = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>.dictArr.length;i++){\n    <span class="hljs-keyword">let</span> dictWord=<span class="hljs-keyword">this</span>.dictArr[i]\n    <span class="hljs-keyword">if</span>(dictWord.length!==word.length || dictWord===word)<span class="hljs-keyword">continue</span>\n    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.check(dictWord,word))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n};\n\n<span class="hljs-comment">/** \n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = Object.create(MagicDictionary).createNew()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)\n */</span>\n</code></pre>\n'],titleSlug:"implement-magic-dictionary",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u8fd9\u9053\u9898\u672c\u8eab\u5728\u6d4b\u8bd5\u91cf\u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c<code>search</code>\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u662f<code>O(n)</code>\uff0c<code>n</code>\u4e3a<code>dict</code>\u7684\u957f\u5ea6\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f<code>O(n)</code></p>\n<p>\u6bcf\u6b21<code>search</code>\uff0c\u68c0\u67e5\u6bcf\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684<code>dict[i]</code>\uff0c\u5982\u679c\u53d1\u73b0\u4e0d\u540c\u7684<code>diff</code>\u53ea\u67091\u5904\uff0c\u5219\u8fd4\u56de<code>true</code>\u3002</p>\n<ul>\n<li>\u8fdb\u9636</li>\n</ul>\n<p>\u5982\u679c\u5728\u6d4b\u8bd5\u91cf\u66f4\u5927\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u9700\u8981\u6784\u5efa\u4e00\u4e2a<code>hash</code>\uff0c\u8fd9\u4e2a<code>hash</code>\u4fdd\u5b58\u4e86<code>dict</code>\u4e2d\u6240\u6709\u53ef\u80fd\u7684\u503c\uff1b</p>\n<p>\u4f8b\u5982\uff1a<code>bass</code>\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u7684\u4e0d\u662f<code>bass</code>\uff0c\u800c\u662f<code>*ass</code>\uff0c<code>b*ss</code>\uff0c<code>ba*s</code>\uff0c<code>bas*</code>\u8fd94\u4e2a\u3002</p>\n<p>\u800c\u5728<code>search</code>\u4e2d\uff0c\u5bf9\u4e8e<code>word</code>\uff0c\u6211\u4eec\u5148\u5c06\u5b83\u7684\u53ef\u80fd\u503c\u7b97\u51fa<code>candidates</code>\uff0c\u7136\u540e\u904d\u5386<code>candidates</code>\uff0c\u5982\u679c<code>hash[candidates[i]]</code>\u5b58\u5728\uff0c\u8fd4\u56de<code>true</code>\u3002</p>\n<p>\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>search</code>\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>O(m)</code>\uff0c<code>m</code>\u662f<code>dict[i]</code>\u7684\u957f\u5ea6\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f<code>O(mn)</code>\uff0c<code>n</code>\u662f<code>dict</code>\u7684\u957f\u5ea6\u3002</p>\n",content:'<p>\u5b9e\u73b0\u4e00\u4e2a\u5e26\u6709<code>buildDict</code>, \u4ee5\u53ca&nbsp;<code>search</code>\u65b9\u6cd5\u7684\u9b54\u6cd5\u5b57\u5178\u3002</p>\n\n<p>\u5bf9\u4e8e<code>buildDict</code>\u65b9\u6cd5\uff0c\u4f60\u5c06\u88ab\u7ed9\u5b9a\u4e00\u4e32\u4e0d\u91cd\u590d\u7684\u5355\u8bcd\u6765\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\u3002</p>\n\n<p>\u5bf9\u4e8e<code>search</code>\u65b9\u6cd5\uff0c\u4f60\u5c06\u88ab\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u8fd9\u4e2a\u5355\u8bcd\u4e2d<strong>\u4e00\u4e2a</strong>\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5355\u8bcd\u5b58\u5728\u4e8e\u4f60\u6784\u5efa\u7684\u5b57\u5178\u4e2d\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>\u3002</li>\n\t<li>\u4e3a\u4e86\u4fbf\u4e8e\u7ade\u8d5b\uff0c\u6d4b\u8bd5\u6240\u7528\u7684\u6570\u636e\u91cf\u5f88\u5c0f\u3002\u4f60\u53ef\u4ee5\u5728\u7ade\u8d5b\u7ed3\u675f\u540e\uff0c\u8003\u8651\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\u3002</li>\n\t<li>\u8bf7\u8bb0\u4f4f<strong>\u91cd\u7f6e</strong>MagicDictionary\u7c7b\u4e2d\u58f0\u660e\u7684\u7c7b\u53d8\u91cf\uff0c\u56e0\u4e3a\u9759\u6001/\u7c7b\u53d8\u91cf\u4f1a\u5728\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4fdd\u7559\u3002 \u8bf7\u53c2\u9605<a href="http://leetcode.com/faq/#different-output">\u8fd9\u91cc</a>\u4e86\u89e3\u66f4\u591a\u8be6\u60c5\u3002</li>\n</ol>\n'}}}]);
//# sourceMappingURL=sourceCode-content680.7579313b.chunk.js.map