(window.webpackJsonp=window.webpackJsonp||[]).push([[694],{735:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> canPartitionKSubsets = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, k</span>) </span>{\n  <span class="hljs-keyword">let</span> mem={}\n  <span class="hljs-keyword">let</span> sum=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++){\n    sum+=nums[i]\n    <span class="hljs-keyword">if</span>(mem[nums[i]]==<span class="hljs-literal">null</span>)mem[nums[i]]=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">else</span> mem[nums[i]]++\n  }\n  <span class="hljs-keyword">if</span>(sum%k!==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  <span class="hljs-keyword">let</span> initTarget=sum/k\n\n  <span class="hljs-keyword">let</span> marked=<span class="hljs-built_in">Array</span>(nums.length).fill(<span class="hljs-literal">false</span>)\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">target,k,start,marked</span>)</span>{\n    <span class="hljs-keyword">if</span>(k===<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    <span class="hljs-keyword">if</span>(target===<span class="hljs-number">0</span>){\n      <span class="hljs-keyword">return</span> check(initTarget,k<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,marked)\n    }\n    <span class="hljs-keyword">if</span>(target&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=start;i&lt;nums.length;i++){\n      <span class="hljs-keyword">if</span>(marked[i])<span class="hljs-keyword">continue</span>\n      <span class="hljs-keyword">let</span> cur=nums[i]\n      marked[i]=<span class="hljs-literal">true</span>\n      <span class="hljs-keyword">if</span>(check(target-cur,k,i+<span class="hljs-number">1</span>,marked))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n      marked[i]=<span class="hljs-literal">false</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  }\n\n  <span class="hljs-keyword">return</span> check(initTarget,k,<span class="hljs-number">0</span>,marked)\n};\n</code></pre>\n'],titleSlug:"partition-to-k-equal-sum-subsets",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;&nbsp;<code>nums</code> \u548c\u4e00\u4e2a\u6b63\u6574\u6570 <code>k</code>\uff0c\u627e\u51fa\u662f\u5426\u6709\u53ef\u80fd\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210 <code>k</code> \u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u5176\u603b\u548c\u90fd\u76f8\u7b49\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>\u8f93\u51fa\uff1a</strong> True\n<strong>\u8bf4\u660e\uff1a</strong> \u6709\u53ef\u80fd\u5c06\u5176\u5206\u6210 4 \u4e2a\u5b50\u96c6\uff085\uff09\uff0c\uff081,4\uff09\uff0c\uff082,3\uff09\uff0c\uff082,3\uff09\u7b49\u4e8e\u603b\u548c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content700.75af1c67.chunk.js.map