(window.webpackJsonp=window.webpackJsonp||[]).push([[641],{688:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} s\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> countSubstrings = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>{\n    <span class="hljs-comment">// let count=0</span>\n    <span class="hljs-comment">// function checkIs(str,lo,hi){</span>\n    <span class="hljs-comment">//     while(lo&gt;=0 &amp;&amp; hi&lt;s.length &amp;&amp; str[lo--]===str[hi++] ){</span>\n    <span class="hljs-comment">//         count++;</span>\n    <span class="hljs-comment">//     }</span>\n    <span class="hljs-comment">// }</span>\n    <span class="hljs-comment">// for(let i=0;i&lt;s.length;i++){</span>\n    <span class="hljs-comment">//     // \u68c0\u67e5\u5947\u6570</span>\n    <span class="hljs-comment">//     checkIs(s,i,i) </span>\n    <span class="hljs-comment">//     // \u5076\u6570</span>\n    <span class="hljs-comment">//     checkIs(s,i,i+1)</span>\n    <span class="hljs-comment">// }</span>\n    <span class="hljs-comment">// return count;</span>\n  \n  <span class="hljs-keyword">let</span> n=s.length\n  <span class="hljs-keyword">let</span> aux=<span class="hljs-built_in">Array</span>(n).fill().map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-literal">false</span>))\n  <span class="hljs-keyword">let</span> dp=<span class="hljs-built_in">Array</span>(n).fill().map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>))\n  \n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;n;i++){\n    aux[i][i]=<span class="hljs-literal">true</span>\n    dp[i][i]=<span class="hljs-number">1</span>\n  }\n  \n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;n;i++){\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;n-i;j++){\n      <span class="hljs-keyword">let</span> k=j+i\n      dp[j][k]=dp[j+<span class="hljs-number">1</span>][k]+dp[j][k<span class="hljs-number">-1</span>]-dp[j+<span class="hljs-number">1</span>][k<span class="hljs-number">-1</span>]\n      <span class="hljs-keyword">if</span>(s[j]===s[k]){\n        <span class="hljs-keyword">if</span> (aux[j+<span class="hljs-number">1</span>][k<span class="hljs-number">-1</span>] || j+<span class="hljs-number">1</span>&gt;k<span class="hljs-number">-1</span>){\n          dp[j][k]+=<span class="hljs-number">1</span>\n          aux[j][k]=<span class="hljs-literal">true</span>\n        }\n      }\n    }\n  }\n  <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>]\n};\n</code></pre>\n'],titleSlug:"palindromic-substrings",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002</p>\n\n<p>\u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u8ba1\u4e3a\u662f\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abc&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u4e09\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aaa&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u8bf4\u660e:</strong> 6\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc71000\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content653.f23fd68e.chunk.js.map