(window.webpackJsonp=window.webpackJsonp||[]).push([[649],{695:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {number[]} nums\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> constructMaximumBinaryTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) </span>{\n  <span class="hljs-keyword">if</span>(nums.length===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n  <span class="hljs-keyword">let</span> max=-<span class="hljs-literal">Infinity</span>,maxID=<span class="hljs-literal">null</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++){\n    <span class="hljs-keyword">if</span>(nums[i]&gt;max){\n      max=nums[i]\n      maxID=i\n    }\n  }\n  <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">new</span> TreeNode(max)\n  root.left=constructMaximumBinaryTree(nums.slice(<span class="hljs-number">0</span>,maxID))\n  root.right=constructMaximumBinaryTree(nums.slice(maxID+<span class="hljs-number">1</span>))\n  <span class="hljs-keyword">return</span> root\n};\n</code></pre>\n'],titleSlug:"maximum-binary-tree",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002</li>\n\t<li>\u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n\t<li>\u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n</ol>\n\n<p>\u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,2,1,6,0,5]\n<strong>\u8f93\u5165:</strong> \u8fd4\u56de\u4e0b\u9762\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\uff1a\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u7ec4\u7684\u5927\u5c0f\u5728 [1, 1000] \u4e4b\u95f4\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content660.6c870fcc.chunk.js.map