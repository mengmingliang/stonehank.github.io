(window.webpackJsonp=window.webpackJsonp||[]).push([[367],{441:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */</span>\n<span class="hljs-comment">/**\n * @constructor\n * @param {NestedInteger[]} nestedList\n */</span>\n<span class="hljs-keyword">var</span> NestedIterator = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nestedList</span>) </span>{\n  <span class="hljs-keyword">let</span> stack=[],res=[]\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;nestedList.length;i++){\n    stack.push(nestedList[i])\n  }\n  <span class="hljs-keyword">let</span> nestedNode=stack.pop()\n  <span class="hljs-keyword">while</span>(nestedNode){\n    <span class="hljs-keyword">if</span>(nestedNode.isInteger()){\n      res.push(nestedNode.getInteger())\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> list=nestedNode.getList()\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;list.length;i++){\n        stack.push(list[i])\n      }      \n    }\n    nestedNode=stack.pop()\n  }\n  <span class="hljs-keyword">this</span>.res=res.reverse()\n  <span class="hljs-keyword">this</span>.id=<span class="hljs-number">0</span>\n};\n\n\n<span class="hljs-comment">/**\n * @this NestedIterator\n * @returns {boolean}\n */</span>\nNestedIterator.prototype.hasNext = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.id&lt;<span class="hljs-keyword">this</span>.res.length\n};\n\n<span class="hljs-comment">/**\n * @this NestedIterator\n * @returns {integer}\n */</span>\nNestedIterator.prototype.next = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.res[<span class="hljs-keyword">this</span>.id++]\n};\n\n<span class="hljs-comment">/**\n * Your NestedIterator will be called like this:\n * var i = new NestedIterator(nestedList), a = [];\n * while (i.hasNext()) a.push(i.next());\n*/</span>\n</code></pre>\n'],titleSlug:"flatten-nested-list-iterator",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u53ea\u9700\u8981\u5c06<code>nestedList</code>\u8f6c\u6362\u6210<code>Array&lt;number&gt;</code>\u540e\uff0c<code>hasNext</code>\u548c<code>next</code>\u5bf9\u6570\u7ec4\u6765\u8bf4\u90fd\u662f\u5f88\u7b80\u5355\u7684\u3002</p>\n<p>\u8f6c\u6362\u65b9\u5f0f\u53ef\u4ee5\u9009\u62e92\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u6216\u8005\u5faa\u73af\u3002</p>\n<p>\u9012\u5f52\u5f88\u597d\u7406\u89e3\uff0c\u9047\u5230\u662f\u6574\u6570\uff0c\u6dfb\u52a0\u5230<code>arr</code>\uff0c\u975e\u6570\u5b57\uff0c\u7ee7\u7eed\u9012\u5f52\u3002</p>\n<p>\u904d\u5386\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a<code>stack</code>\uff0c\u5148\u5c06<code>nestedList</code>\u6240\u6709\u5185\u5bb9\u538b\u6808\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u51fa\u6808\u5e76\u4e14\u5224\u65ad\uff0c\u5982\u679c\u662f\u6574\u6570\uff0c\u653e\u8fdb<code>arr</code>\uff0c\u5982\u679c\u662f\u5217\u8868\uff0c\u7ee7\u7eed\u538b\u6808\u3002</p>\n",content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[1,1],2,[1,1]]\n<strong>\u8f93\u51fa: </strong>[1,1,2,1,1]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next </em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56defalse\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,1,2,1,1]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,[4,[6]]]\n<strong>\u8f93\u51fa: </strong>[1,4,6]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next&nbsp;</em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56defalse\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,4,6]</code>\u3002\n</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content406.e00c8982.chunk.js.map