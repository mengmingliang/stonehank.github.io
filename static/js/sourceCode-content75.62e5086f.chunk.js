(window.webpackJsonp=window.webpackJsonp||[]).push([[748],{1126:function(s){s.exports={content:'<ul>\n<li>\n<p>\u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0\u4e00\u4e2a<code>GraphQL</code>\u670d\u52a1\u5668</p>\n<p>\u901a\u8fc7\u81ea\u5df1\u5b9e\u73b0\uff0c\u66f4\u6df1\u5165\u4e86\u89e3<code>GraphQL</code>\u600e\u4e48\u6784\u9020\uff0c\u600e\u4e48\u83b7\u53d6\uff0c\u4e00\u4e9b\u672f\u8bed</p>\n</li>\n<li>\n<p>\u76f4\u63a5\u5165\u6b63\u9898\uff0c\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a<code>GraphQL</code>\u670d\u52a1\u5668</p>\n<p>\u4e86\u89e34\u79cd\u7c7b\u578b</p>\n<ul>\n<li>\n<p>Query</p>\n<p>\u6267\u884c\u5185\u5bb9\u67e5\u8be2</p>\n</li>\n<li>\n<p>Mutation</p>\n<p>\u6267\u884c\u5185\u5bb9\u53d8\u66f4</p>\n</li>\n<li>\n<p>Schema</p>\n<p>\u6a21\u5f0f\uff0c\u5b9a\u4e49\u5185\u5bb9\u7ed3\u6784\u53ca\u7c7b\u578b</p>\n</li>\n<li>\n<p>Resolvers</p>\n<p>\u8fde\u63a5<code>Schema</code>\u548c<code>Query</code>\uff0c\u4e5f\u5c31\u662f\u5177\u4f53\u5185\u5bb9\u3002</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p>\u5b9a\u4e49Schema</p>\n<pre class="hljs"><code><span class="hljs-keyword">import</span> { gql } <span class="hljs-keyword">from</span> <span class="hljs-string">\'apollo-server-express\'</span>;\n\n<span class="hljs-keyword">const</span> typeDefs = gql<span class="hljs-string">`\n    type Person {\n        id: Int\n        name: String\n        gender: String\n        homeworld: String\n    }\n    input DataInput {\t\t\n        id: Int!\n        name: String\n        gender: String\n        homeworld: String\n    }\n    type Mutation {\n        setPerson(input:DataInput!):Person\n    }\n    type Query {\n        allPeople: [Person]\n        person(id: Int!): Person\n    }\n`</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> typeDefs;\n</code></pre>\n<p>\u8fd9\u91cc\u5b9a\u4e49\u4e861\u4e2a\u81ea\u5b9a\u4e49\u67e5\u8be2\u7c7b<code>Person</code>\uff0c1\u4e2a\u81ea\u5b9a\u4e49\u4fee\u6539\u7c7b<code>DataInput</code>\uff0c1\u4e2a<code>Mutation</code>\u65b9\u6cd5\uff0c2\u4e2a<code>Query</code>\u65b9\u6cd5\uff0c\u5176\u4e2d\u52a0<code>!</code>\u8868\u793a\u8fd9\u4e2a\u5b57\u6bb5\u4e0d\u53ef\u7f3a\u5c11\u3002</p>\n</li>\n<li>\n<p>\u5b9a\u4e49<code>Resolvers</code></p>\n<pre class="hljs"><code><span class="hljs-keyword">const</span> defaultData = [\n  {\n    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,\n    <span class="hljs-attr">name</span>: <span class="hljs-string">\'Luke SkyWaler\'</span>,\n    <span class="hljs-attr">gender</span>: <span class="hljs-string">\'male\'</span>,\n    <span class="hljs-attr">homeworld</span>: <span class="hljs-string">\'Tattoine\'</span>\n  },\n  {\n    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,\n    <span class="hljs-attr">name</span>: <span class="hljs-string">\'C-3PO\'</span>,\n    <span class="hljs-attr">gender</span>: <span class="hljs-string">\'bot\'</span>,\n    <span class="hljs-attr">homeworld</span>: <span class="hljs-string">\'Tattoine\'</span>\n  }\n];\n\n<span class="hljs-keyword">const</span> resolvers = {\n  <span class="hljs-attr">Mutation</span>: {\n    <span class="hljs-attr">setPerson</span>: <span class="hljs-function">(<span class="hljs-params">firstParam, {input}</span>) =&gt;</span> {\n      <span class="hljs-keyword">let</span> matchIdx = defaultData.length\n      <span class="hljs-keyword">const</span> {id} = input\n      <span class="hljs-keyword">let</span> matchObj = defaultData.find(<span class="hljs-function">(<span class="hljs-params">obj, i</span>) =&gt;</span> {\n        <span class="hljs-keyword">if</span> (obj.id === id) {\n          matchIdx = i\n          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n        }\n      })\n      <span class="hljs-keyword">let</span> defaultObj\n      <span class="hljs-keyword">if</span> (matchObj) defaultObj = matchObj\n      <span class="hljs-keyword">else</span> defaultObj = {<span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">\'\'</span>, <span class="hljs-attr">homeworld</span>: <span class="hljs-string">\'\'</span>}\n      <span class="hljs-keyword">let</span> newObj = <span class="hljs-built_in">Object</span>.assign(defaultObj, input)\n      defaultData[matchIdx] = newObj\n      <span class="hljs-keyword">return</span> newObj\n    }\n  },\n  <span class="hljs-attr">Query</span>: {\n    <span class="hljs-attr">allPeople</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n      <span class="hljs-keyword">return</span> defaultData;\n    },\n    <span class="hljs-attr">person</span>: <span class="hljs-function">(<span class="hljs-params">root, {id}</span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> defaultData.filter(<span class="hljs-function"><span class="hljs-params">character</span> =&gt;</span> {\n        <span class="hljs-keyword">return</span> (character.id === id);\n      })[<span class="hljs-number">0</span>];\n    }\n  }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> resolvers;\n</code></pre>\n<p>\u8fd9\u91cc\u5b9a\u4e49\u4e86\u5bf9<code>Query</code>\u548c<code>Mutation</code>\u7684\u5177\u4f53\u6267\u884c\u65b9\u6cd5\uff0c\u6ce8\u610f\uff0c\u5b83\u4eec\u7684\u503c\u5fc5\u987b\u662f<code>Object</code>\u6216\u8005<code>Function</code>\u3002</p>\n<blockquote>\n<p>PS: \u8fd9\u91cc\u6211\u6ca1\u641e\u6e05\u695a <code>Mutation</code> \u7b2c\u4e00\u4e2a\u53c2\u6570<code>firstParam</code>\u7684\u4f5c\u7528\uff0c\u4e00\u76f4\u90fd\u662f<code>undefined</code></p>\n</blockquote>\n</li>\n<li>\n<p>\u521b\u5efa\u670d\u52a1\u5668</p>\n<pre class="hljs"><code><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> {ApolloServer, gql } <span class="hljs-keyword">from</span> <span class="hljs-string">\'apollo-server-express\'</span>;\n<span class="hljs-keyword">import</span> typeDefs <span class="hljs-keyword">from</span> <span class="hljs-string">\'./api/schema\'</span>;\n<span class="hljs-keyword">import</span> resolvers <span class="hljs-keyword">from</span> <span class="hljs-string">\'./api/resolvers\'</span>;\n\n<span class="hljs-keyword">const</span> server = <span class="hljs-keyword">new</span> ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\n<span class="hljs-keyword">const</span> app = express();\nserver.applyMiddleware({ app });\n\napp.get(<span class="hljs-string">\'/\'</span>, (req, res) =&gt; res.send(<span class="hljs-string">\'Babel Working!\'</span>));\n\napp.listen({ <span class="hljs-attr">port</span>: <span class="hljs-number">4000</span> }, () =&gt;\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`\ud83d\ude80 Server ready at http://localhost:4000<span class="hljs-subst">${server.graphqlPath}</span>`</span>)\n);\n</code></pre>\n</li>\n<li>\n<p>package.json</p>\n<pre class="hljs"><code>{\n  &quot;name&quot;: &quot;gh-demo&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n  &quot;dev&quot;: &quot;babel-watch index.js&quot;\n},\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;apollo-server-express&quot;: &quot;^2.2.1&quot;,\n    &quot;express&quot;: &quot;^4.16.4&quot;,\n    &quot;graphql&quot;: &quot;^14.0.2&quot;\n},\n  &quot;devDependencies&quot;: {\n  &quot;babel-cli&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.7.0&quot;,\n    &quot;babel-watch&quot;: &quot;^2.0.7&quot;\n}\n}\n</code></pre>\n</li>\n</ol>\n<p>\u53c2\u8003\uff1a<a href="https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6">Creating a GraphQL server with NodeJS</a></p>\n'}}}]);
//# sourceMappingURL=sourceCode-content75.62e5086f.chunk.js.map