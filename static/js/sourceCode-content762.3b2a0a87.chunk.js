(window.webpackJsonp=window.webpackJsonp||[]).push([[762],{797:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} S\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> reorganizeString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">S</span>) </span>{\n  <span class="hljs-keyword">let</span> pq=[]\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bsEnd</span>(<span class="hljs-params">arr,n</span>)</span>{\n    <span class="hljs-keyword">let</span> lo=<span class="hljs-number">0</span>,hi=arr.length<span class="hljs-number">-1</span>\n    <span class="hljs-keyword">while</span>(lo&lt;hi){\n      <span class="hljs-keyword">let</span> mid=<span class="hljs-built_in">Math</span>.floor((lo+hi)/<span class="hljs-number">2</span>)\n      <span class="hljs-keyword">if</span>(arr[mid][<span class="hljs-number">0</span>]&lt;n)lo=mid+<span class="hljs-number">1</span>\n      <span class="hljs-keyword">else</span> hi=mid\n    }\n    <span class="hljs-keyword">return</span> hi\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">n</span>)</span>{\n    <span class="hljs-keyword">if</span>(pq.length===<span class="hljs-number">0</span> || pq[pq.length<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]&lt;=n[<span class="hljs-number">0</span>])pq.push(n)\n    <span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> idx=bsEnd(pq,n[<span class="hljs-number">0</span>])\n      pq.splice(idx,<span class="hljs-number">0</span>,n)\n    }\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delMax</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">return</span> pq.pop()\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMax</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">if</span>(pq.length===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>\n    <span class="hljs-keyword">return</span> pq[pq.length<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]\n  }\n  <span class="hljs-keyword">let</span> hash={}\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;S.length;i++){\n    <span class="hljs-keyword">if</span>(hash[S[i]]==<span class="hljs-literal">null</span>)hash[S[i]]=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">else</span> hash[S[i]]++\n  }\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> hash){\n    insert([hash[k],k])\n  }\n  <span class="hljs-keyword">let</span> str=<span class="hljs-string">\'\'</span>\n  <span class="hljs-keyword">while</span>(pq.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">if</span>(pq.length===<span class="hljs-number">1</span>){\n      <span class="hljs-keyword">let</span> [m,s]=delMax()\n      <span class="hljs-keyword">if</span>(m&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n      <span class="hljs-keyword">return</span> str+s\n    }\n    <span class="hljs-keyword">let</span> [m1,s1]=delMax(),\n        [m2,s2]=delMax()\n    <span class="hljs-keyword">let</span> n=getMax()\n    <span class="hljs-keyword">while</span>(m1&gt;=n &amp;&amp; m2&gt;=n){\n      m1--\n      m2--\n      str+=s1+s2\n    }\n    <span class="hljs-keyword">if</span>(m1&gt;<span class="hljs-number">0</span>)insert([m1,s1])\n    <span class="hljs-keyword">if</span>(m2&gt;<span class="hljs-number">0</span>)insert([m2,s2])\n  }\n  <span class="hljs-keyword">return</span> str\n};\n</code></pre>\n'],titleSlug:"reorganize-string",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002</p>\n\n<p>\u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aaab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728<code>[1, 500]</code>\u533a\u95f4\u5185\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content762.3b2a0a87.chunk.js.map