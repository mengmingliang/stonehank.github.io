(window.webpackJsonp=window.webpackJsonp||[]).push([[705],{745:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LinkList</span>(<span class="hljs-params">val</span>)</span>{\n  <span class="hljs-keyword">this</span>.val=val\n  <span class="hljs-keyword">this</span>.next=<span class="hljs-literal">null</span>\n}\n<span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> MyLinkedList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.head=<span class="hljs-keyword">new</span> LinkList(<span class="hljs-literal">null</span>)\n  <span class="hljs-keyword">this</span>.tail=<span class="hljs-keyword">new</span> LinkList(<span class="hljs-literal">null</span>)\n  <span class="hljs-keyword">this</span>.head.next=<span class="hljs-keyword">this</span>.tail\n  <span class="hljs-keyword">this</span>.size=<span class="hljs-number">0</span>\n};\n\n<span class="hljs-comment">/**\n * Get the value of the index-th node in the linked list. If the index is invalid, return -1. \n * @param {number} index\n * @return {number}\n */</span>\nMyLinkedList.prototype.get = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{\n  <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span> || index&gt;=<span class="hljs-keyword">this</span>.size)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n  <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">this</span>.head.next\n  <span class="hljs-keyword">while</span>(index--&gt;<span class="hljs-number">0</span>){\n    node=node.next\n  }\n  <span class="hljs-keyword">return</span> node.val\n};\n\n<span class="hljs-comment">/**\n * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. \n * @param {number} val\n * @return {void}\n */</span>\nMyLinkedList.prototype.addAtHead = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>{\n  <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">new</span> LinkList(val)\n  <span class="hljs-keyword">let</span> nxt=<span class="hljs-keyword">this</span>.head.next\n  <span class="hljs-keyword">this</span>.head.next=node\n  node.next=nxt\n  <span class="hljs-keyword">this</span>.size++\n};\n\n<span class="hljs-comment">/**\n * Append a node of value val to the last element of the linked list. \n * @param {number} val\n * @return {void}\n */</span>\nMyLinkedList.prototype.addAtTail = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>{\n  <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">new</span> LinkList(val)\n  <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">this</span>.head\n  <span class="hljs-keyword">while</span>(root.next!==<span class="hljs-keyword">this</span>.tail){\n    root=root.next\n  }\n  root.next=node\n  node.next=<span class="hljs-keyword">this</span>.tail\n  <span class="hljs-keyword">this</span>.size++\n};\n\n<span class="hljs-comment">/**\n * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. \n * @param {number} index \n * @param {number} val\n * @return {void}\n */</span>\nMyLinkedList.prototype.addAtIndex = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, val</span>) </span>{\n  <span class="hljs-comment">// console.log(this.size,index)</span>\n  <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-keyword">this</span>.size)<span class="hljs-keyword">return</span>\n  <span class="hljs-keyword">if</span>(index&lt;=<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">this</span>.addAtHead(val)\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">this</span>.head\n    <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">new</span> LinkList(val)\n    <span class="hljs-keyword">while</span>(index--&gt;<span class="hljs-number">0</span>){\n      root=root.next\n    }\n    <span class="hljs-keyword">let</span> nxt=root.next\n    root.next=node\n    node.next=nxt\n    <span class="hljs-keyword">this</span>.size++\n  }\n\n};\n\n<span class="hljs-comment">/**\n * Delete the index-th node in the linked list, if the index is valid. \n * @param {number} index\n * @return {void}\n */</span>\nMyLinkedList.prototype.deleteAtIndex = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{\n  <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span> || index&gt;=<span class="hljs-keyword">this</span>.size)<span class="hljs-keyword">return</span>\n  <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">this</span>.head\n  <span class="hljs-keyword">while</span>(index--&gt;<span class="hljs-number">0</span>){\n    root=root.next\n  }\n  <span class="hljs-keyword">let</span> nxt=root.next.next\n  root.next=nxt\n  <span class="hljs-keyword">this</span>.size--\n};\n\n<span class="hljs-comment">/** \n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = Object.create(MyLinkedList).createNew()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */</span>\n</code></pre>\n'],titleSlug:"design-linked-list",hasThinking:!1,content:"<p>\u8bbe\u8ba1\u94fe\u8868\u7684\u5b9e\u73b0\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u94fe\u8868\u6216\u53cc\u94fe\u8868\u3002\u5355\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5e94\u8be5\u5177\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a<code>val</code>&nbsp;\u548c&nbsp;<code>next</code>\u3002<code>val</code>&nbsp;\u662f\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c<code>next</code>&nbsp;\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488/\u5f15\u7528\u3002\u5982\u679c\u8981\u4f7f\u7528\u53cc\u5411\u94fe\u8868\uff0c\u5219\u8fd8\u9700\u8981\u4e00\u4e2a\u5c5e\u6027&nbsp;<code>prev</code>&nbsp;\u4ee5\u6307\u793a\u94fe\u8868\u4e2d\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u94fe\u8868\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f 0-index \u7684\u3002</p>\n\n<p>\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a</p>\n\n<ul>\n\t<li>get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de<code>-1</code>\u3002</li>\n\t<li>addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a&nbsp;<code>val</code>&nbsp;\u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002</li>\n\t<li>addAtTail(val)\uff1a\u5c06\u503c\u4e3a&nbsp;<code>val</code> \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</li>\n\t<li>addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a&nbsp;<code>val</code>&nbsp; \u7684\u8282\u70b9\u3002\u5982\u679c&nbsp;<code>index</code>&nbsp;\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c <code>index</code> \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002</li>\n\t<li>deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15&nbsp;<code>index</code> \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code> \u4e2a\u8282\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //\u94fe\u8868\u53d8\u4e3a1-&gt; 2-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de2\nlinkedList.deleteAtIndex(1);  //\u73b0\u5728\u94fe\u8868\u662f1-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u503c\u90fd\u5728&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u6b21\u6570\u5c06\u5728&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684 LinkedList \u5e93\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content710.25fb9a4d.chunk.js.map