(window.webpackJsonp=window.webpackJsonp||[]).push([[447],{514:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * // Definition for a QuadTree node.\n * function Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */</span>\n<span class="hljs-comment">/**\n * @param {number[][]} grid\n * @return {Node}\n */</span>\n<span class="hljs-keyword">var</span> construct = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">grid</span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBol</span>(<span class="hljs-params">xs,xe,ys,ye</span>)</span>{\n    <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">new</span> Node()\n    <span class="hljs-keyword">if</span>(xs===xe &amp;&amp; ys===ye){\n      root.isLeaf=<span class="hljs-literal">true</span>\n      root.val=grid[ye][xe]\n      <span class="hljs-keyword">return</span> root\n    }\n    <span class="hljs-keyword">let</span> halfX=<span class="hljs-built_in">Math</span>.floor((xe-xs)/<span class="hljs-number">2</span>),\n        halfY=<span class="hljs-built_in">Math</span>.floor((ye-ys)/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">let</span> topLeft=getBol(xs,xs+halfX,ys,ys+halfY)\n    <span class="hljs-keyword">let</span> topRight=getBol(xs+halfX+<span class="hljs-number">1</span>,xe,ys,ys+halfY)\n    <span class="hljs-keyword">let</span> bottomLeft=getBol(xs,xs+halfX,ys+halfY+<span class="hljs-number">1</span>,ye)\n    <span class="hljs-keyword">let</span> bottomRight=getBol(xs+halfX+<span class="hljs-number">1</span>,xe,ys+halfY+<span class="hljs-number">1</span>,ye)\n    <span class="hljs-keyword">if</span>((topLeft.val===<span class="hljs-number">1</span> &amp;&amp; topRight.val===<span class="hljs-number">1</span> &amp;&amp; bottomLeft.val===<span class="hljs-number">1</span> &amp;&amp; bottomRight.val===<span class="hljs-number">1</span>) || \n       (topLeft.val===<span class="hljs-number">0</span> &amp;&amp; topRight.val===<span class="hljs-number">0</span> &amp;&amp; bottomLeft.val===<span class="hljs-number">0</span> &amp;&amp; bottomRight.val===<span class="hljs-number">0</span>)){\n      root.val=topLeft.val\n      root.isLeaf=<span class="hljs-literal">true</span>\n      <span class="hljs-keyword">return</span> root\n    }<span class="hljs-keyword">else</span>{\n      root.val=<span class="hljs-string">\'*\'</span>\n      root.isLeaf=<span class="hljs-literal">false</span>\n      root.topLeft=topLeft\n      root.topRight=topRight\n      root.bottomLeft=bottomLeft\n      root.bottomRight=bottomRight\n    }\n    <span class="hljs-keyword">return</span> root\n  }\n  <span class="hljs-keyword">return</span> getBol(<span class="hljs-number">0</span>,grid.length<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,grid[<span class="hljs-number">0</span>].length<span class="hljs-number">-1</span>)\n};\n</code></pre>\n'],titleSlug:"construct-quad-tree",hasThinking:!1,content:'<p>\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u4e00\u68f5\u56db\u53c9\u6811\u6765\u50a8\u5b58\u4e00\u4e2a&nbsp;<code>N x N</code> \u7684\u5e03\u5c14\u503c\u7f51\u7edc\u3002\u7f51\u7edc\u4e2d\u6bcf\u4e00\u683c\u7684\u503c\u53ea\u4f1a\u662f\u771f\u6216\u5047\u3002\u6811\u7684\u6839\u7ed3\u70b9\u4ee3\u8868\u6574\u4e2a\u7f51\u7edc\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9, \u5b83\u5c06\u88ab\u5206\u7b49\u6210\u56db\u4e2a\u5b69\u5b50\u7ed3\u70b9<strong>\u76f4\u5230\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u503c\u90fd\u662f\u76f8\u540c\u7684.</strong></p>\n\n<p>\u6bcf\u4e2a\u7ed3\u70b9\u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u5e03\u5c14\u53d8\u91cf:&nbsp;<code>isLeaf</code> \u548c&nbsp;<code>val</code>\u3002<code>isLeaf</code> \u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6\u4e3a\u771f\u3002<code>val</code>&nbsp;\u53d8\u91cf\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u3002</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u4e00\u4e2a\u56db\u53c9\u6811\u8868\u793a\u7ed9\u5b9a\u7684\u7f51\u7edc\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c06\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\uff1a</p>\n\n<p>\u7ed9\u5b9a\u4e0b\u9762\u8fd9\u4e2a<code>8 x 8</code>&nbsp;\u7f51\u7edc\uff0c\u6211\u4eec\u5c06\u8fd9\u6837\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u7684\u56db\u53c9\u6811\uff1a</p>\n\n<p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png" style="height:27%; width:27%" /></p>\n\n<p>\u7531\u4e0a\u6587\u7684\u5b9a\u4e49\uff0c\u5b83\u80fd\u88ab\u8fd9\u6837\u5206\u5272\uff1a</p>\n\n<p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png" style="height:100%; width:100%" /></p>\n\n<p>&nbsp;</p>\n\n<p>\u5bf9\u5e94\u7684\u56db\u53c9\u6811\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7531\u4e00\u5bf9&nbsp;<code>(isLeaf, val)</code>&nbsp;\u6240\u4ee3\u8868.</p>\n\n<p>\u5bf9\u4e8e\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c<code>val</code>&nbsp;\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u6240\u4ee5\u4f7f\u7528&nbsp;<code>*</code>&nbsp;\u4ee3\u66ff\u3002</p>\n\n<p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png" style="height:100%; width:100%" /></p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u5c06\u5c0f\u4e8e&nbsp;<code>1000</code>&nbsp;\u4e14\u786e\u4fdd\u662f 2 \u7684\u6574\u6b21\u5e42\u3002</li>\n\t<li>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a&nbsp;<a href="https://en.wikipedia.org/wiki/Quadtree">wiki</a>&nbsp;\u9875\u9762\u3002</li>\n</ol>\n'}}}]);
//# sourceMappingURL=sourceCode-content479.12638088.chunk.js.map