(window.webpackJsonp=window.webpackJsonp||[]).push([[898],{921:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} edges\n * @param {number} M\n * @param {number} N\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> reachableNodes = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">edges, M, N</span>) </span>{\n  <span class="hljs-keyword">let</span> graph=<span class="hljs-built_in">Array</span>(N).fill().map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>[])\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [v,w,dis] <span class="hljs-keyword">of</span> edges){\n    graph[v].push([w,dis+<span class="hljs-number">1</span>])\n    graph[w].push([v,dis+<span class="hljs-number">1</span>])\n  }\n  <span class="hljs-keyword">let</span> minDist=<span class="hljs-built_in">Array</span>(N).fill(<span class="hljs-literal">Infinity</span>)\n  minDist[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> arr=[<span class="hljs-number">0</span>]\n  <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> len=arr.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> v=arr.shift()\n      <span class="hljs-keyword">let</span> adj=graph[v]\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [w,dis] <span class="hljs-keyword">of</span> adj){\n        <span class="hljs-keyword">if</span>(minDist[w]&gt;minDist[v]+dis){\n          minDist[w]=minDist[v]+dis\n          arr.push(w)\n        }\n      }\n    }\n  }\n  <span class="hljs-keyword">let</span> result=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [v,w,dis] <span class="hljs-keyword">of</span> edges){\n    <span class="hljs-keyword">let</span> left=<span class="hljs-built_in">Math</span>.min(<span class="hljs-built_in">Math</span>.max(M-minDist[v],<span class="hljs-number">0</span>),dis),\n        right=<span class="hljs-built_in">Math</span>.min(<span class="hljs-built_in">Math</span>.max(M-minDist[w],<span class="hljs-number">0</span>),dis)\n    result+=<span class="hljs-built_in">Math</span>.min(left+right,dis)\n  }\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> dis <span class="hljs-keyword">of</span> minDist){\n    <span class="hljs-keyword">if</span>(M&gt;=dis)result++\n  }\n  <span class="hljs-keyword">return</span> result \n};\n</code></pre>\n'],titleSlug:"reachable-nodes-in-subdivided-graph",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u9996\u5148\u6784\u5efa<code>graph</code>\uff0c\u7136\u540e\u6784\u5efa<code>minDis</code>\uff0c\u6307\u7684\u662f\u4ece<code>0</code>\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684<strong>\u6700\u77ed</strong>\u8ddd\u79bb\uff0c\u8ba1\u7b97<code>minDis</code>\u53ef\u4ee5\u4f7f\u7528<code>Dijkstra</code>\u7b97\u6cd5\u3002</p>\n<p>\u5f53\u7b97\u51fa\u6240\u6709\u6700\u77ed\u8ddd\u79bb\u540e\uff0c\u8981\u8ba1\u7b97\u67d0\u4e00\u6761\u8fb9\u4e0a\u7684\u70b9\u54ea\u4e9b\u80fd\u901a\u8fc7\uff0c\u800c\u4e00\u6761\u8fb9\u6709\u4e24\u4e2a\u9876\u70b9<code>v</code>\u548c<code>w</code>\uff1b</p>\n<p>\u56e0\u6b64\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u6761\u8fb9\u88ab\u8d70\u8fc7\u7684\u8ddd\u79bb\u5c31\u662f<code>\u5230v\u7684\u6700\u77ed\u8ddd\u79bb\u540e\u8fd8\u5269\u4e0b\u7684\u6b65\u6570 + \u5230w\u6700\u77ed\u8ddd\u79bb\u540e\u8fd8\u5269\u4e0b\u7684\u6b65\u6570</code>\uff0c\u5f53\u7136\u8fd9\u4e2a\u6570\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u3002</p>\n<p>\u6700\u540e\uff0c\u5728\u8ba1\u7b97\u54ea\u4e9b\u9876\u70b9\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\uff0c\u53ea\u8981<code>\u5230\u5f53\u524d\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb&lt;=M</code>\uff0c\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7\u3002</p>\n",content:'<p>\u4ece\u5177\u6709&nbsp;<code>0</code> \u5230 <code>N-1</code> \u7684\u7ed3\u70b9\u7684<strong>\u65e0\u5411</strong>\u56fe\uff08&ldquo;\u539f\u59cb\u56fe&rdquo;\uff09\u5f00\u59cb\uff0c\u5bf9\u4e00\u4e9b\u8fb9\u8fdb\u884c\u7ec6\u5206\u3002</p>\n\n<p>\u8be5\u56fe\u7ed9\u51fa\u5982\u4e0b\uff1a<code>edges[k]</code>&nbsp;\u662f\u6574\u6570\u5bf9&nbsp;<code>(i, j, n)</code>&nbsp;\u7ec4\u6210\u7684\u5217\u8868\uff0c\u4f7f&nbsp;<code>(i, j)</code> \u662f\u539f\u59cb\u56fe\u7684\u8fb9\u3002</p>\n\n<p><code>n</code> \u662f\u8be5\u8fb9\u4e0a<strong>\u65b0</strong>\u7ed3\u70b9\u7684\u603b\u6570</p>\n\n<p>\u7136\u540e\uff0c\u5c06\u8fb9&nbsp;<code>(i, j)</code>&nbsp;\u4ece\u539f\u59cb\u56fe\u4e2d\u5220\u9664\uff0c\u5c06&nbsp;<code>n</code>&nbsp;\u4e2a\u65b0\u7ed3\u70b9&nbsp;<code>(x_1, x_2, ..., x_n)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\uff0c</p>\n\n<p>\u5c06&nbsp;<code>n+1</code>&nbsp;\u6761\u65b0\u8fb9&nbsp;<code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u4f60\u5c06\u4ece\u539f\u59cb\u56fe\u4e2d\u7684\u7ed3\u70b9&nbsp;<code>0</code>&nbsp;\u5904\u51fa\u53d1\uff0c\u5e76\u4e14\u6bcf\u6b21\u79fb\u52a8\uff0c\u4f60\u90fd\u5c06\u6cbf\u7740\u4e00\u6761\u8fb9\u884c\u8fdb\u3002</p>\n\n<p>\u8fd4\u56de\u6700\u591a <code>M</code> \u6b21\u79fb\u52a8\u53ef\u4ee5\u8fbe\u5230\u7684\u7ed3\u70b9\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\n<strong>\u8f93\u51fa\uff1a</strong>13\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728 M = 6 \u6b21\u79fb\u52a8\u4e4b\u540e\u5728\u6700\u7ec8\u56fe\u4e2d\u53ef\u5230\u8fbe\u7684\u7ed3\u70b9\u5982\u4e0b\u6240\u793a\u3002\n<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png" style="height: 200px; width: 487px;">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\n<strong>\u8f93\u51fa\uff1a</strong>23</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\n\t<li>\u4e0d\u5b58\u5728\u4efb\u4f55&nbsp;<code>i != j</code>&nbsp;\u60c5\u51b5\u4e0b&nbsp;<code>edges[i][0] == edges[j][0]</code>&nbsp;\u4e14&nbsp;<code>edges[i][1] == edges[j][1]</code>.</li>\n\t<li>\u539f\u59cb\u56fe\u6ca1\u6709\u5e73\u884c\u7684\u8fb9\u3002</li>\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= N &lt;= 3000</code></li>\n\t<li>\u53ef\u5230\u8fbe\u7ed3\u70b9\u662f\u53ef\u4ee5\u4ece\u7ed3\u70b9 <code>0</code> \u5f00\u59cb\u4f7f\u7528\u6700\u591a <code>M</code> \u6b21\u79fb\u52a8\u5230\u8fbe\u7684\u7ed3\u70b9\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n'}}}]);
//# sourceMappingURL=sourceCode-content886.95a882e7.chunk.js.map