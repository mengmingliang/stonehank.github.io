(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{362:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */</span>\n<span class="hljs-comment">// var invertTree = function(root) {</span>\n<span class="hljs-comment">//     function DFS(node){</span>\n<span class="hljs-comment">//         if(!node) return node</span>\n<span class="hljs-comment">//         if(node.left)node.left=DFS(node.left)</span>\n<span class="hljs-comment">//         if(node.right)node.right=DFS(node.right)</span>\n<span class="hljs-comment">//         node=swapNode(node)</span>\n<span class="hljs-comment">//         return node</span>\n<span class="hljs-comment">//     }</span>\n<span class="hljs-comment">//     root=DFS(root)</span>\n<span class="hljs-comment">//     return root</span>\n<span class="hljs-comment">// };</span>\n\n<span class="hljs-comment">// function swapNode(node){</span>\n<span class="hljs-comment">//     let temp</span>\n<span class="hljs-comment">//     if(node.left===null &amp;&amp; node.right===null){</span>\n<span class="hljs-comment">//     }else{</span>\n<span class="hljs-comment">//         temp=node.right;</span>\n<span class="hljs-comment">//         node.right=node.left;</span>\n<span class="hljs-comment">//         node.left=temp;</span>\n<span class="hljs-comment">//     }</span>\n<span class="hljs-comment">//     return node</span>\n<span class="hljs-comment">// }</span>\n<span class="hljs-keyword">var</span> invertTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n    <span class="hljs-keyword">if</span>(root===<span class="hljs-literal">null</span>){<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>}\n    <span class="hljs-keyword">let</span> arr=[root]\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BFS</span>(<span class="hljs-params">arr</span>)</span>{\n        <span class="hljs-keyword">let</span> tempNode\n        <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n            <span class="hljs-keyword">let</span> temp=[]\n            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++){\n                tempNode=arr[i].left\n                arr[i].left=arr[i].right\n                arr[i].right=tempNode\n                <span class="hljs-keyword">if</span>(arr[i].left)temp.push(arr[i].left)\n                <span class="hljs-keyword">if</span>(arr[i].right)temp.push(arr[i].right)\n            }\n            arr=temp;\n        }\n    }\n    BFS(arr)\n    <span class="hljs-keyword">return</span> root\n}\n</code></pre>\n'],titleSlug:"invert-binary-tree",hasThinking:!1,content:'<p>\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n<p><strong>\u5907\u6ce8:</strong><br>\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 <a href="https://twitter.com/mxcl" target="_blank">Max Howell </a>\u7684 <a href="https://twitter.com/mxcl/status/608682016205344768" target="_blank">\u539f\u95ee\u9898</a> \u542f\u53d1\u7684 \uff1a</p>\n\n<blockquote>\u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002</blockquote>\n'}}}]);
//# sourceMappingURL=sourceCode-content327.1ec87461.chunk.js.map