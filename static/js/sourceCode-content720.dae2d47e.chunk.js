(window.webpackJsonp=window.webpackJsonp||[]).push([[716],{755:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> smallestDistancePair = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, k</span>) </span>{\n  nums.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b)\n\n  <span class="hljs-keyword">let</span> lo = <span class="hljs-number">0</span>,hi=nums[nums.length<span class="hljs-number">-1</span>]-nums[<span class="hljs-number">0</span>]\n\n  <span class="hljs-keyword">while</span>(lo&lt;hi){\n    <span class="hljs-keyword">let</span> mid=<span class="hljs-built_in">Math</span>.floor((lo+hi)/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">let</span> counts=getLessEqualCounts(mid)\n    <span class="hljs-keyword">if</span>(counts&gt;=k)hi=mid\n    <span class="hljs-keyword">else</span> lo=mid+<span class="hljs-number">1</span>\n  }\n  <span class="hljs-keyword">return</span> lo\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLessEqualCounts</span>(<span class="hljs-params">target</span>)</span>{\n    <span class="hljs-keyword">let</span> counts=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">for</span>(;i&lt;nums.length;i++){\n      <span class="hljs-keyword">while</span>(j&lt;nums.length &amp;&amp; (nums[j]-nums[i])&lt;=target)j++\n      counts+=j-i<span class="hljs-number">-1</span>\n    }\n    <span class="hljs-keyword">return</span> counts\n  }\n};\n</code></pre>\n'],titleSlug:"find-k-th-smallest-pair-distance",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u6240\u6709\u6570\u5bf9\u4e4b\u95f4\u7684\u7b2c k \u4e2a\u6700\u5c0f<strong>\u8ddd\u79bb</strong>\u3002\u4e00\u5bf9 (A, B) \u7684\u8ddd\u79bb\u88ab\u5b9a\u4e49\u4e3a A \u548c B \u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\nnums = [1,3,1]\nk = 1\n<strong>\u8f93\u51fa\uff1a0</strong> \n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709\u6570\u5bf9\u5982\u4e0b\uff1a\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n\u56e0\u6b64\u7b2c 1 \u4e2a\u6700\u5c0f\u8ddd\u79bb\u7684\u6570\u5bf9\u662f (1,1)\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 0\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content720.dae2d47e.chunk.js.map