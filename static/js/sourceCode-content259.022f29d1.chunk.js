(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{294:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */</span>\n<span class="hljs-keyword">var</span> reorderList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>{\n  <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n  <span class="hljs-keyword">if</span>(!head.next)<span class="hljs-keyword">return</span> head\n\n  <span class="hljs-keyword">let</span> slow=head,\n      fast=head.next.next\n  <span class="hljs-keyword">while</span>(fast &amp;&amp; fast.next){\n    slow=slow.next\n    fast=fast.next.next\n  }\n  \n  <span class="hljs-keyword">let</span> startNode=slow, node=startNode.next\n  <span class="hljs-keyword">while</span>(node.next){\n    <span class="hljs-keyword">let</span> nxt=node.next\n    node.next=nxt.next\n    nxt.next=startNode.next\n    startNode.next=nxt\n  }\n  <span class="hljs-keyword">let</span> p1=head,\n      p2=startNode.next;\n  <span class="hljs-keyword">while</span>(p1!=startNode){\n    startNode.next=p2.next\n    p2.next=p1.next\n    p1.next=p2\n    p1=p2.next\n    p2=startNode.next\n  }\n};\n</code></pre>\n'],titleSlug:"reorder-list",hasThinking:!0,thinking:'<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u4e24\u79cd\u65b9\u6cd5\uff1a</p>\n<ol>\n<li>\u8ba1\u7b97\u51fa<code>head</code>\u7684\u957f\u5ea6<code>len</code>\u548c\u5c06\u8981\u79fb\u52a8\u7684\u8282\u70b9\u7684\u6570\u91cf\uff0c<code>t=Math.floor((len-1)/2)</code>\uff0c\u4f7f\u7528<code>stack</code>\u4fdd\u5b58<code>next</code>\u4f1a\u53d1\u751f\u6539\u53d8\u7684\u8282\u70b9\u3002</li>\n</ol>\n<p>\u5728\u904d\u5386\u5230\u5c06\u8981\u79fb\u52a8\u7684\u8282\u70b9\u4e0a\uff0c\u6267\u884c<code>stack.pop</code>\u53d6\u51fa\u7684\u8282\u70b9\u4f5c\u4e3a\u5934\u90e8\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u63d2\u5165\u5230\u5934\u90e8\u7684<code>next</code>\u4e2d\u3002</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {ListNode} head\n * @return {void} Do not return anything, modify head in-place instead.\n */</span>\n<span class="hljs-keyword">var</span> reorderList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>{\n  <span class="hljs-keyword">if</span>(!head)<span class="hljs-keyword">return</span>\n  <span class="hljs-keyword">let</span> len=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> node=head\n  <span class="hljs-keyword">while</span>(node){\n    node=node.next\n    len++\n  }\n  <span class="hljs-keyword">let</span> t=<span class="hljs-built_in">Math</span>.floor((len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>),k=len-t\n  <span class="hljs-keyword">let</span> stack=[],lastNode=<span class="hljs-literal">null</span>\n  node=head\n  <span class="hljs-keyword">while</span>(node){\n    <span class="hljs-keyword">if</span>(t--&gt;<span class="hljs-number">0</span>)stack.push(node)\n    <span class="hljs-keyword">if</span>(k--&lt;=0){\n      let startNode=stack.pop(),\n          secondNode=startNode.next,\n          nxt=node.next\n      startNode.next=node\n      node.next=secondNode\n      lastNode.next=nxt\n      node=nxt\n    }else{\n      if(k===0)lastNode=node\n      node=node.next\n    }\n  }\n};\n</code></pre>\n<ol start="2">\n<li>\u4f7f\u7528\u5feb\u6162\u8282\u70b9\u627e\u51fa\u5f53\u524d<code>head</code>\u7684\u540e\u534a\u6bb5\uff0c\u4f8b\u5982<code>[1,2,3,4,5]</code>\u540e\u534a\u6bb5\u5c31\u662f<code>[3,4,5]</code>\uff0c<code>[1,2,3,4]</code>\u540e\u534a\u6bb5\u5c31\u662f<code>[3,4]</code>\u3002</li>\n</ol>\n<p>\u5bf9\u540e\u534a\u6bb5\u8fdb\u884c\u53cd\u8f6c\uff0c\u7136\u540e\u4f9d\u6b21\u63d2\u5165\u5230\u524d\u534a\u6bb5\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684<code>next</code>\u4e2d\u3002</p>\n<p>\u4f8b\u5982\uff1a<code>[1,2,3,4,5,6,7]</code>\uff0c\u540e\u534a\u6bb5\u662f<code>[4,5,6,7]</code>\uff0c\u53cd\u8f6c\u540e\u662f<code>[7,6,5,4]</code>\uff0c\u4f9d\u6b21\u63d2\u5165\u5230<code>[1,2,3]</code>\u4e2d\uff0c\u5f97\u5230<code>[1,7,2,6,3,5,4]</code>\u3002</p>\n',content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868&nbsp;<em>L</em>\uff1a<em>L</em><sub>0</sub>&rarr;<em>L</em><sub>1</sub>&rarr;&hellip;&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>n \uff0c</sub><br>\n\u5c06\u5176\u91cd\u65b0\u6392\u5217\u540e\u53d8\u4e3a\uff1a <em>L</em><sub>0</sub>&rarr;<em>L</em><sub><em>n</em></sub>&rarr;<em>L</em><sub>1</sub>&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>2</sub>&rarr;<em>L</em><sub><em>n</em>-2</sub>&rarr;&hellip;</p>\n\n<p>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u7ed9\u5b9a\u94fe\u8868 1-&gt;2-&gt;3-&gt;4, \u91cd\u65b0\u6392\u5217\u4e3a 1-&gt;4-&gt;2-&gt;3.</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u7ed9\u5b9a\u94fe\u8868 1-&gt;2-&gt;3-&gt;4-&gt;5, \u91cd\u65b0\u6392\u5217\u4e3a 1-&gt;5-&gt;2-&gt;4-&gt;3.</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content259.022f29d1.chunk.js.map