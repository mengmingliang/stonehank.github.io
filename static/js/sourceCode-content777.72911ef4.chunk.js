(window.webpackJsonp=window.webpackJsonp||[]).push([[778],{812:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> minDiffInBST = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> last=<span class="hljs-literal">null</span>\n  <span class="hljs-keyword">let</span> min=<span class="hljs-literal">Infinity</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">if</span>(!node)<span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">if</span>(node.left)dfs(node.left)\n    <span class="hljs-keyword">if</span>(last==<span class="hljs-literal">null</span>){\n      last=node.val\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> cur=node.val-last\n      <span class="hljs-keyword">if</span>(cur&lt;min)min=cur\n      last=node.val\n    }\n    <span class="hljs-keyword">if</span>(node.right)dfs(node.right)\n  }\n  dfs(root)\n  <span class="hljs-keyword">return</span> min     \n};\n</code></pre>\n'],titleSlug:"minimum-distance-between-bst-nodes",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u4e0e<code>NO.530</code>\u4e00\u81f4\uff0c\u6839\u636e<code>BST</code>\u7684\u6027\u8d28\uff0c\u4f7f\u7528\u4e2d\u5e8f\u6392\u5217(\u4ece\u5c0f\u5230\u5927)\uff0c\u4f9d\u6b21\u68c0\u67e5\u6bcf\u4e00\u4e2a\u8282\u70b9\u503c\u7684\u5dee\u8ddd\u3002</p>\n",content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9&nbsp;<code>root</code>, \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> root = [4,2,6,1,3,null,null]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\n\u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n\u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 <code>2</code> \u5230&nbsp;<code>100</code>\u3002</li>\n\t<li>\u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content777.72911ef4.chunk.js.map