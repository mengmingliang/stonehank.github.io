(window.webpackJsonp=window.webpackJsonp||[]).push([[469],{534:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n\n<span class="hljs-comment">/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> serialize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> res=<span class="hljs-string">\'\'</span>\n  <span class="hljs-keyword">let</span> arr=[root]\n  <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> len=arr.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> node=arr.shift()\n      <span class="hljs-keyword">if</span>(node){\n        <span class="hljs-keyword">if</span>(res===<span class="hljs-string">\'\'</span>)res+=node.val\n        <span class="hljs-keyword">else</span> res+=<span class="hljs-string">\',\'</span>+node.val\n        arr.push(node.left)\n        arr.push(node.right)\n      }\n    }\n  }\n  <span class="hljs-keyword">return</span> res\n};\n\n<span class="hljs-comment">/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> deserialize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{\n  <span class="hljs-keyword">if</span>(!data)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n  <span class="hljs-keyword">let</span> arr=data.split(<span class="hljs-string">\',\'</span>)\n  <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">new</span> TreeNode(+arr[<span class="hljs-number">0</span>])\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++){\n    <span class="hljs-keyword">let</span> n=+arr[i]\n    root=insert(root,n)\n  }\n  <span class="hljs-keyword">return</span> root\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">root,n</span>)</span>{\n    <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(n)\n    <span class="hljs-keyword">if</span>(root.val&lt;=n){\n      root.right=insert(root.right,n)\n    }<span class="hljs-keyword">else</span>{\n      root.left=insert(root.left,n)\n    }\n    <span class="hljs-keyword">return</span> root\n  }\n};\n\n<span class="hljs-comment">/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */</span>\n</code></pre>\n'],titleSlug:"serialize-and-deserialize-bst",hasThinking:!1,content:"<p>\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u7cfb\u5217\u4f4d\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u94fe\u8def\u4f20\u8f93\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u540c\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\u4e2d\u91cd\u5efa\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316<strong>\u4e8c\u53c9\u641c\u7d22\u6811</strong>\u3002 \u5bf9\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u7684\u5de5\u4f5c\u65b9\u5f0f\u6ca1\u6709\u9650\u5236\u3002 \u60a8\u53ea\u9700\u786e\u4fdd\u4e8c\u53c9\u641c\u7d22\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u8be5\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u6700\u521d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p><strong>\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u7d27\u51d1\u3002</strong></p>\n\n<p><strong>\u6ce8\u610f</strong>\uff1a\u4e0d\u8981\u4f7f\u7528\u7c7b\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u3002 \u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content499.c5ad3a3b.chunk.js.map