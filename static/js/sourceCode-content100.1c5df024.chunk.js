(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{1150:function(n){n.exports={content:'<p><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/">\u539f\u9898\u76ee</a>\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u627e\u5230\u957f\u5ea6\u7684\u6700\u5927\u503c<code>length(word[i]) * length(word[j])</code>\uff0c\u5176\u4e2d\u4e24\u4e2a\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u65e0\u76f8\u540c\u3002\u60a8\u53ef\u4ee5\u5047\u5b9a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e24\u4e2a\u8bcd\uff0c\u8fd4\u56de0\u3002</p>\n<p>\u4f8b\uff1a</p>\n<pre class="hljs"><code>Input: [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]\nOutput: 16 \nExplanation: The two words can be &quot;abcw&quot;, &quot;xtfn&quot;.\n</code></pre>\n<p>\u89e3\u6790\uff1a\n\u8fd9\u9898\u80af\u5b9a\u8981\u8fdb\u884c\u4ea4\u53c9\u5bf9\u6bd4(2\u4e2afor\u5faa\u73af)\uff0c\u4f46\u6700\u5173\u952e\u7684\u5c31\u662f\u5bf9\u6bd4\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u5224\u65ad2\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\u76f8\u540c\u7684\u5b57\u7b26\u3002</p>\n<p>\u5982\u679c\u4f7f\u7528<code>indexOf</code>\u6216\u8005\u6570\u7ec4\u4e0b\u6807\u8bb0\u5f55\u90fd\u4f1a\u9020\u6210\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u5e45\u63d0\u5347\uff0c\u770b\u4e86\u4ed6\u4eba\u7684\u7b54\u6848\u53d1\u73b0\u4f7f\u7528\u7684\u662f\u4f4d\u64cd\u4f5c\u7b26<code>&lt;&lt;</code>\uff0c<code>|</code>\u548c<code>&amp;</code>\uff0c\u800c\u4e14\u662f\u5728\u4ea4\u53c9\u5bf9\u6bd4\u4e4b\u524d\u8fdb\u884c\u9884\u5904\u7406\uff0c\u4ea4\u53c9\u5bf9\u6bd4\u7684\u65f6\u5019\u53ea\u9700\u8981\u7b80\u5355\u7684\u5224\u65ad<code>pretreate[i] &amp; pretreate[j]===0</code>\u4fbf\u53ef\uff0c</p>\n<p>\u56e0\u4e3a\u4f7f\u7528\u540e\u6548\u7387\u63d0\u5347\u592a\u591a\uff0c\u89e3\u6790\u5e76\u4e14\u8bb0\u5f55\u4e00\u4e0b\u3002</p>\n<p>\u5148\u89e3\u91ca<code>val |= (1 &lt;&lt; (word.charCodeAt(i)-aCode))</code>\uff1a</p>\n<ul>\n<li>\n<p><code>word.charCodeAt(i)-aCode</code>\u8fd9\u4e2a\u5f88\u597d\u61c2\uff0c\u4e5f\u5c31\u662fa\u5bf9\u5e940\uff0cb\u5bf9\u5e941...\u8fd9\u91cc\u76840,1\u6570\u5b57\u4ee3\u8868\u7684\u662f<br>\n\u4e8c\u8fdb\u52361\u540e\u9762\u7684\u4f4d\u6570\u3002</p>\n</li>\n<li>\n<p><code>1&lt;&lt;0</code>\uff0c<code>1&lt;&lt;1</code>\u662f\u4ec0\u4e48\u5462\uff1f</p>\n<p>1\u5728\u4e8c\u8fdb\u5236\u4e2d(32\u4f4d)\u5c31\u662f<code>00000000000000000000000000000001</code>\uff0c<code>&lt;&lt;</code>\u662f\u5de6\u79fb1\u4f4d\uff0c</p>\n<p>\u90a3\u4e48<code>1&lt;&lt;0</code>\u8fd8\u662f<code>1</code>\uff0c<code>1&lt;&lt;1</code>\u5c31\u662f(\u524d\u9762\u7684\u96f6\u7701\u7565)<code>10</code>\uff0c<code>1&lt;&lt;2</code>\u5c31\u662f<code>100</code>\uff0c<code>1&lt;&lt;3</code>\u5c31\u662f<code>1000</code>\uff0c</p>\n<p>\u4e8e\u662f\u53ef\u77e5</p>\n<p><code>a</code>\u5c31\u662f<code>1</code>\uff0c</p>\n<p><code>b</code>\u662f<code>10</code>\uff0c</p>\n<p><code>c</code>\u662f<code>100</code>...</p>\n<p><code>z</code>\u662f<code>10000000000000000000000000</code>(25\u4e2a0)\u3002</p>\n</li>\n<li>\n<p><code>|</code>\u662f\u6309\u4f4d\u6216\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d\uff0c\u6bcf\u4e00\u4f4d\u4e24\u8005\u5176\u4e2d\u4e00\u4e2a\u4e3a1\uff0c\u5219\u4e3a1\uff0c\u5426\u5219\uff0c\u5219\u4e3a0\uff0c</p>\n<p>\u56e0\u6b64 <code>val |=</code>\u5c31\u662f\u5bf9\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5408\u5e76\uff0c\u4f8b\u5982</p>\n<p><code>ab</code> \u662f <code>00010|00001</code>=&gt;<code>00011</code>\uff0c</p>\n<p><code>f</code> \u662f <code>100000</code>\uff0c</p>\n<p><code>ffff</code> \u4e5f\u662f <code>100000</code>\uff0c</p>\n<p><code>big</code>\u662f <code>101000010</code>\uff0c</p>\n<p><code>axdg</code>\u662f<code>100000000000000001001001</code>\u3002</p>\n</li>\n<li>\n<p><code>&amp;</code>\uff0c\u6309\u4f4d\u4e0e\uff0c\u4e8c\u8fdb\u5236\u7f16\u7801\u4e2d\uff0c\u6bcf\u4e00\u4f4d\u4e24\u8005\u90fd\u4e3a1\uff0c\u5219\u4e3a1\uff0c\u5426\u5219\uff0c\u5219\u4e3a0\uff0c</p>\n<p>\u4f8b1\uff1a<code>axdg</code>\u548c<code>oigd</code>\u8981\u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\uff1a</p>\n<pre class="hljs"><code>axdg\u662f\uff1a100000000000000001001001\n\noifd\u662f\uff1a         100000100101000\n\n&amp; \u540e\uff1a  000000000000000000001000  \n</code></pre>\n<p>\u56e0\u4e3a\u7b2c4\u4f4d\u90fd\u4e3a1\uff0c\u6240\u4ee5\u6700\u540e\u4e0d\u4e3a0\uff0c\u4e5f\u53ef\u5f97\u77e5\u91cd\u590d\u7684\u5c31\u662f\u5b57\u6bcd\u8868\u7b2c4\u4f4d\uff1a<code>d</code>\u3002</p>\n<p>\xa0</p>\n<p>\u4f8b2\uff1a<code>axdg</code>\u548c<code>lkmk</code>\u8981\u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\uff1a</p>\n<p>\u7ed3\u679c\u4e3a0\uff0c\u8bf4\u660e\u65e0\u91cd\u590d\u3002</p>\n<pre class="hljs"><code>axdg\u662f\uff1a100000000000000001001001\n\nlkmk\u662f\uff1a           1110000000000\n\n&amp; \u540e\uff1a  000000000000000000000000  \n</code></pre>\n</li>\n</ul>\n<p>\u603b\u7ed3\uff1a\u8fd9\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e8c\u8fdb\u5236\u6570\u5b57\u7684\u4f4d\u6570\u4f5c\u4e3a\u4fdd\u5b58\u5b57\u7b26\u7684\u624b\u6bb5\uff0c\u76f8\u6bd4\u8d77\u6570\u7ec4\uff0c\u6563\u5217\u8868\u7b49\uff0c\u901f\u5ea6\u66f4\u5feb\uff0c\u5728\u4fdd\u5b58\u91cf\u8f83\u5c0f(&lt;=32)\u4f18\u52bf\u975e\u5e38\u660e\u663e\u3002</p>\n<p>\u4ee3\u7801\uff1a</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string[]} words\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> maxProduct = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">words</span>) </span>{\n    <span class="hljs-keyword">let</span> aCode=<span class="hljs-string">\'a\'</span>.charCodeAt(<span class="hljs-number">0</span>)\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compute</span>(<span class="hljs-params">word</span>)</span>{\n        <span class="hljs-keyword">let</span> val=<span class="hljs-number">0</span>\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;word.length;i++){\n            val |= (<span class="hljs-number">1</span> &lt;&lt; (word.charCodeAt(i)-aCode))\n        }\n        <span class="hljs-keyword">return</span> val\n    }\n    <span class="hljs-keyword">let</span> pretreatment=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;words.length;i++){\n        pretreatment[i]=compute(words[i])\n    }\n    <span class="hljs-keyword">let</span> maxSum=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;words.length<span class="hljs-number">-1</span>;i++){\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=i+<span class="hljs-number">1</span>;j&lt;words.length;j++){\n            <span class="hljs-keyword">let</span> len1=words[i].length,len2=words[j].length\n            <span class="hljs-keyword">if</span>(len1*len2&gt;maxSum &amp;&amp; (pretreatment[i] &amp; pretreatment[j])===<span class="hljs-number">0</span>){\n                 maxSum=len1*len2\n            }\n        }\n    }\n    <span class="hljs-keyword">return</span> maxSum\n};\n</code></pre>\n'}}}]);
//# sourceMappingURL=sourceCode-content100.1c5df024.chunk.js.map