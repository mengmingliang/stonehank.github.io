(window.webpackJsonp=window.webpackJsonp||[]).push([[433],{501:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> splitArray = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, m</span>) </span>{\n  <span class="hljs-comment">//DP</span>\n  <span class="hljs-comment">// let dp=[]</span>\n  <span class="hljs-comment">// for(let i=0;i&lt;m;i++){</span>\n  <span class="hljs-comment">//   dp[i]=[]</span>\n  <span class="hljs-comment">//   for(let j=0;j&lt;nums.length;j++){</span>\n  <span class="hljs-comment">//     if(i===0 &amp;&amp; j===0)dp[i][j]=nums[0]</span>\n  <span class="hljs-comment">//     else if(i===0)dp[i][j]=dp[i][j-1]+nums[j]</span>\n  <span class="hljs-comment">//     else dp[i][j]=Infinity</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// for(let i=1;i&lt;dp.length;i++){</span>\n  <span class="hljs-comment">//   for(let j=i;j&lt;dp[0].length;j++){</span>\n  <span class="hljs-comment">//     for(let k=0;k&lt;j;k++){</span>\n  <span class="hljs-comment">//       let kSum=dp[0][j]-dp[0][k]</span>\n  <span class="hljs-comment">//       dp[i][j]=Math.min(Math.max(dp[i-1][k],kSum),dp[i][j])</span>\n  <span class="hljs-comment">//     }</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return dp[dp.length-1][dp[0].length-1]</span>\n  \n  <span class="hljs-comment">// BS</span>\n  \n  <span class="hljs-keyword">let</span> sum=<span class="hljs-number">0</span>,max=-<span class="hljs-literal">Infinity</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++){\n    sum+=nums[i]\n    max=<span class="hljs-built_in">Math</span>.max(max,nums[i])\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">splitGroupNum</span>(<span class="hljs-params">pivot</span>)</span>{\n    <span class="hljs-keyword">let</span> splitNum=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">let</span> tempSum=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++){\n      tempSum+=nums[i]\n      <span class="hljs-keyword">if</span>(tempSum&gt;pivot){\n        <span class="hljs-comment">// tempSum-=nums[i]</span>\n        splitNum++\n        tempSum=nums[i]\n      }\n    }\n    <span class="hljs-keyword">return</span> splitNum+<span class="hljs-number">1</span>\n  }\n  <span class="hljs-keyword">let</span> lo=max,hi=sum\n  <span class="hljs-keyword">while</span>(lo&lt;=hi){\n    <span class="hljs-keyword">let</span> pivot=<span class="hljs-built_in">Math</span>.floor((lo+hi)/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">let</span> count=splitGroupNum(pivot)\n    <span class="hljs-keyword">if</span>(count&gt;m){\n      lo=pivot+<span class="hljs-number">1</span>\n    }<span class="hljs-keyword">else</span>{\n      hi=pivot<span class="hljs-number">-1</span>\n    }\n  }\n  <span class="hljs-keyword">return</span> lo\n};\n</code></pre>\n'],titleSlug:"split-array-largest-sum",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<em>m</em>\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210&nbsp;<em>m&nbsp;</em>\u4e2a\u975e\u7a7a\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4f7f\u5f97\u8fd9&nbsp;<em>m&nbsp;</em>\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u6570\u7ec4\u957f\u5ea6&nbsp;<em>n&nbsp;</em>\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:</p>\n\n<ul>\n\t<li>1 &le; <em>n</em> &le; 1000</li>\n\t<li>1 &le; <em>m</em> &le; min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>\u793a\u4f8b: </strong></p>\n\n<pre>\n\u8f93\u5165:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n\u8f93\u51fa:\n18\n\n\u89e3\u91ca:\n\u4e00\u5171\u6709\u56db\u79cd\u65b9\u6cd5\u5c06<strong>nums</strong>\u5206\u5272\u4e3a2\u4e2a\u5b50\u6570\u7ec4\u3002\n\u5176\u4e2d\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u5206\u4e3a<strong>[7,2,5]</strong> \u548c <strong>[10,8]</strong>\uff0c\n\u56e0\u4e3a\u6b64\u65f6\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u7684\u548c\u7684\u6700\u5927\u503c\u4e3a18\uff0c\u5728\u6240\u6709\u60c5\u51b5\u4e2d\u6700\u5c0f\u3002\n</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content466.d76c310c.chunk.js.map