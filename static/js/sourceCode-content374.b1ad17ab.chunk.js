(window.webpackJsonp=window.webpackJsonp||[]).push([[331],{409:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} s\n * @return {string[]}\n */</span>\n<span class="hljs-keyword">var</span> removeInvalidParentheses = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>{\n<span class="hljs-comment">//   let counter=0,problemLeft=[],problemRight=[]</span>\n<span class="hljs-comment">//   // \u5206\u5272\u5de6\u53f3</span>\n<span class="hljs-comment">//   for(let i=0;i&lt;s.length;i++){</span>\n<span class="hljs-comment">//     if(s[i]==="(") { problemLeft.push(i); counter++}</span>\n<span class="hljs-comment">//     if(s[i]===")"){ problemLeft.pop(); counter--}</span>\n<span class="hljs-comment">//     if(counter&lt;0){ problemRight.push(i); counter=0}</span>\n<span class="hljs-comment">//   }</span>\n  \n<span class="hljs-comment">//   let marked={},resultL=[],resultR=[]</span>\n<span class="hljs-comment">//   let pRLen=problemRight.length,pLLen=problemLeft.length</span>\n<span class="hljs-comment">//   // \u83b7\u53d6\u5269\u4f59\u503c</span>\n<span class="hljs-comment">//   let res=""</span>\n<span class="hljs-comment">//   if(pLLen===0) res=s.substring(problemRight[pRLen-1]+1)</span>\n<span class="hljs-comment">//   if(pRLen===0) res=s.substring(0,problemLeft[0])</span>\n<span class="hljs-comment">//   if(pRLen&gt;0 &amp;&amp; pRLen&gt;0) res=s.substring(problemRight[pRLen-1]+1,problemLeft[0])</span>\n  \n<span class="hljs-comment">//   // \u91cd\u8bbe\u5de6\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14backtrack</span>\n<span class="hljs-comment">//   if(pLLen&gt;0){</span>\n<span class="hljs-comment">//     let problemLS=s.substring(problemLeft[0])</span>\n<span class="hljs-comment">//     let newProblemLeft=problemLeft.map(n=&gt;n-problemLeft[0])</span>\n<span class="hljs-comment">//     backtrack(problemLS,resultL,[],newProblemLeft,0,0,false)</span>\n<span class="hljs-comment">//   }</span>\n<span class="hljs-comment">//   // backtrack\u53f3\u4fa7</span>\n<span class="hljs-comment">//   if(pRLen&gt;0){</span>\n<span class="hljs-comment">//     let problemRS=s.substring(0,problemRight[pRLen-1]+1)</span>\n<span class="hljs-comment">//     backtrack(problemRS,resultR,[],problemRight,0,0,true)</span>\n<span class="hljs-comment">//   }</span>\n\n<span class="hljs-comment">//   function backtrack(allStr,result,temp,problemIdx,start,loopStart,isRight){</span>\n<span class="hljs-comment">//     if(start===problemIdx.length){</span>\n<span class="hljs-comment">//       let str=\'\',idx=0</span>\n<span class="hljs-comment">//       for(let i=0;i&lt;allStr.length;i++){</span>\n<span class="hljs-comment">//         if(i===temp[idx]){idx++;continue}</span>\n<span class="hljs-comment">//         str+=allStr[i]</span>\n<span class="hljs-comment">//       }</span>\n<span class="hljs-comment">//       if(!marked[str]){</span>\n<span class="hljs-comment">//         marked[str]=true</span>\n<span class="hljs-comment">//         result.push(str)</span>\n<span class="hljs-comment">//         return</span>\n<span class="hljs-comment">//       }</span>\n<span class="hljs-comment">//     }</span>\n<span class="hljs-comment">//     for(let i=loopStart;i&lt;allStr.length;i++){</span>\n<span class="hljs-comment">//       if(isRight &amp;&amp; i&lt;=problemIdx[start] &amp;&amp; allStr[i]===")"){</span>\n<span class="hljs-comment">//         temp.push(i)</span>\n<span class="hljs-comment">//         backtrack(allStr,result,temp,problemIdx,start+1,i+1,isRight)</span>\n<span class="hljs-comment">//         temp.pop()</span>\n<span class="hljs-comment">//       }</span>\n<span class="hljs-comment">//       if(!isRight &amp;&amp; i&gt;=problemIdx[start] &amp;&amp; allStr[i]==="("){</span>\n<span class="hljs-comment">//         temp.push(i)</span>\n<span class="hljs-comment">//         backtrack(allStr,result,temp,problemIdx,start+1,i+1,isRight)</span>\n<span class="hljs-comment">//         temp.pop()</span>\n<span class="hljs-comment">//       }</span>\n<span class="hljs-comment">//     }</span>\n<span class="hljs-comment">//   }</span>\n\n\n<span class="hljs-comment">//   function isEmpty(arr){</span>\n<span class="hljs-comment">//     if(arr.length===0 || (arr.length===1 &amp;&amp; arr[0]===""))return true</span>\n<span class="hljs-comment">//     return false</span>\n<span class="hljs-comment">//   }</span>\n<span class="hljs-comment">//   // \u5de6\u53f3\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\u5269\u4f59\u503c</span>\n<span class="hljs-comment">//   if(isEmpty(resultR) &amp;&amp; isEmpty(resultL))return [res]</span>\n<span class="hljs-comment">//   // \u5de6\u6216\u53f3\u4e3a\u7a7a\uff0c\u8fd4\u56de\u7ed3\u679c+\u5269\u4f59\u503c</span>\n<span class="hljs-comment">//   if(isEmpty(resultR))return resultL.map(n=&gt;res+n)</span>\n<span class="hljs-comment">//   if(isEmpty(resultL))return resultR.map(n=&gt;n+res)</span>\n  \n<span class="hljs-comment">//   let finalRes=[]</span>\n<span class="hljs-comment">//   // \u5de6\u53f3\u5747\u4e0d\u7a7a\uff0c\u7ec4\u5408</span>\n<span class="hljs-comment">//   for(let i=0;i&lt;resultR.length;i++){</span>\n<span class="hljs-comment">//     for(let j=0;j&lt;resultL.length;j++){</span>\n<span class="hljs-comment">//       let str=resultR[i]+res+resultL[j]</span>\n<span class="hljs-comment">//       finalRes.push(str)</span>\n<span class="hljs-comment">//     }</span>\n<span class="hljs-comment">//   }</span>\n<span class="hljs-comment">//   return finalRes</span>\n  \n  \n  <span class="hljs-comment">// most vote solution</span>\n  <span class="hljs-keyword">let</span> ans = [];\n  remove(s, ans, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">\'(\'</span>, <span class="hljs-string">\')\'</span>]);\n  <span class="hljs-keyword">return</span> ans;\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remove</span>(<span class="hljs-params"> s,  ans, last_i,  last_j,  par</span>) </span>{\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> stack = <span class="hljs-number">0</span>, i = last_i; i &lt; s.length; ++i) {\n        <span class="hljs-keyword">if</span> (s.charAt(i) == par[<span class="hljs-number">0</span>]) stack++;\n        <span class="hljs-keyword">if</span> (s.charAt(i) == par[<span class="hljs-number">1</span>]) stack--;\n        <span class="hljs-keyword">if</span> (stack &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;\n        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = last_j; j &lt;= i; ++j)\n            <span class="hljs-keyword">if</span> (s[j] == par[<span class="hljs-number">1</span>] &amp;&amp; (j == last_j || s[j<span class="hljs-number">-1</span>] != par[<span class="hljs-number">1</span>]))\n                remove(s.substring(<span class="hljs-number">0</span>, j) + s.substring(j + <span class="hljs-number">1</span>, s.length), ans, i, j, par);\n        <span class="hljs-keyword">return</span>;\n    }\n    <span class="hljs-comment">// console.log(s)</span>\n    <span class="hljs-keyword">let</span> reversed = s.split(<span class="hljs-string">\'\'</span>).reverse().join(<span class="hljs-string">\'\'</span>);\n    <span class="hljs-keyword">if</span> (par[<span class="hljs-number">0</span>] == <span class="hljs-string">\'(\'</span>) <span class="hljs-comment">// finished left to right</span>\n        remove(reversed, ans, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">\')\'</span>, <span class="hljs-string">\'(\'</span>]);\n    <span class="hljs-keyword">else</span> <span class="hljs-comment">// finished right to left</span>\n        ans.push(reversed);\n  }\n};\n</code></pre>\n'],titleSlug:"remove-invalid-parentheses",hasThinking:!1,content:"<p>\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong> \u8f93\u5165\u53ef\u80fd\u5305\u542b\u4e86\u9664&nbsp;<code>(</code>&nbsp;\u548c&nbsp;<code>)</code>&nbsp;\u4ee5\u5916\u7684\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;()()()&quot;, &quot;(())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(a)())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;)(&quot;\n<strong>\u8f93\u51fa: </strong>[&quot;&quot;]</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content374.b1ad17ab.chunk.js.map