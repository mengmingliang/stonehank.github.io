(window.webpackJsonp=window.webpackJsonp||[]).push([[944],{962:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n */</span>\n<span class="hljs-keyword">var</span> CBTInserter = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> stack=[root]\n  <span class="hljs-keyword">let</span> next=<span class="hljs-literal">null</span>\n  <span class="hljs-keyword">while</span>(!next){\n    <span class="hljs-keyword">let</span> len=stack.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> node=stack.shift()\n      <span class="hljs-keyword">if</span>(node.left)stack.push(node.left)\n      <span class="hljs-keyword">else</span>{next=node; <span class="hljs-keyword">break</span>}\n      <span class="hljs-keyword">if</span>(node.right)stack.push(node.right)\n      <span class="hljs-keyword">else</span>{next=node; <span class="hljs-keyword">break</span>}\n    }\n  }\n  <span class="hljs-keyword">this</span>.stack=stack\n  <span class="hljs-keyword">this</span>.root=root\n  <span class="hljs-keyword">this</span>.next=next\n};\n\n<span class="hljs-comment">/** \n * @param {number} v\n * @return {number}\n */</span>\nCBTInserter.prototype.insert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) </span>{\n  <span class="hljs-keyword">let</span> newNode=<span class="hljs-keyword">new</span> TreeNode(v)\n  <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">this</span>.next.val\n  <span class="hljs-keyword">this</span>.stack.push(newNode)\n  <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.next.left){\n    <span class="hljs-keyword">this</span>.next.left=newNode\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">this</span>.next.right=newNode\n    <span class="hljs-keyword">this</span>.next=<span class="hljs-keyword">this</span>.stack.shift()\n  }\n  <span class="hljs-keyword">return</span> res\n};\n\n<span class="hljs-comment">/**\n * @return {TreeNode}\n */</span>\nCBTInserter.prototype.get_root = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root\n};\n\n<span class="hljs-comment">/** \n * Your CBTInserter object will be instantiated and called as such:\n * var obj = Object.create(CBTInserter).createNew(root)\n * var param_1 = obj.insert(v)\n * var param_2 = obj.get_root()\n */</span>\n</code></pre>\n'],titleSlug:"complete-binary-tree-inserter",hasThinking:!1,content:"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u6bcf\u4e00\u5c42\uff08\u9664\u6700\u540e\u4e00\u5c42\u5916\uff09\u90fd\u662f\u5b8c\u5168\u586b\u5145\uff08\u5373\uff0c\u7ed3\u70b9\u6570\u8fbe\u5230\u6700\u5927\uff09\u7684\uff0c\u5e76\u4e14\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u5c3d\u53ef\u80fd\u5730\u96c6\u4e2d\u5728\u5de6\u4fa7\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784&nbsp;<code>CBTInserter</code>\uff0c\u5b83\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;\u4f7f\u7528\u5934\u7ed3\u70b9\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u7ed9\u5b9a\u6811\u521d\u59cb\u5316\u8be5\u6570\u636e\u7ed3\u6784\uff1b</li>\n\t<li><code>CBTInserter.insert(int v)</code> \u5c06&nbsp;<code>TreeNode</code>&nbsp;\u63d2\u5165\u5230\u5b58\u5728\u503c\u4e3a&nbsp;<code>node.val =&nbsp;v</code>&nbsp; \u7684\u6811\u4e2d\u4ee5\u4f7f\u5176\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u72b6\u6001\uff0c<strong>\u5e76\u8fd4\u56de\u63d2\u5165\u7684 <code>TreeNode</code>&nbsp;\u7684\u7236\u7ed3\u70b9\u7684\u503c</strong>\uff1b</li>\n\t<li><code>CBTInserter.get_root()</code> \u5c06\u8fd4\u56de\u6811\u7684\u5934\u7ed3\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,[1,2]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6700\u521d\u7ed9\u5b9a\u7684\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4e14\u5305\u542b&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>1000</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>CBTInserter.insert</code>&nbsp; \u64cd\u4f5c&nbsp;<code>10000</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u7ed9\u5b9a\u7ed3\u70b9\u6216\u63d2\u5165\u7ed3\u70b9\u7684\u6bcf\u4e2a\u503c\u90fd\u5728&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>5000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content927.2a3bf9b9.chunk.js.map