(window.webpackJsonp=window.webpackJsonp||[]).push([[686],{729:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string[]} stickers\n * @param {string} target\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> minStickers = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">stickers, target</span>) </span>{\n  <span class="hljs-keyword">let</span> all=[],\n      acode=<span class="hljs-string">\'a\'</span>.charCodeAt(<span class="hljs-number">0</span>)\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;stickers.length;i++){\n    all[i]=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++){\n      all[i][j]=<span class="hljs-number">0</span>\n    }\n  }\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;stickers.length;i++){\n    <span class="hljs-keyword">let</span> word=stickers[i]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;word.length;j++){\n      <span class="hljs-keyword">let</span> curcode=word.charCodeAt(j)-acode\n      all[i][curcode]++\n    }\n  }\n  <span class="hljs-keyword">let</span> mem={}\n  <span class="hljs-keyword">let</span> result= dfs(target)\n  <span class="hljs-keyword">if</span>(result===<span class="hljs-literal">Infinity</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n  <span class="hljs-keyword">return</span> result\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">target</span>)</span>{\n    <span class="hljs-keyword">if</span>(target===<span class="hljs-string">""</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>\n    <span class="hljs-keyword">if</span>(mem[target])<span class="hljs-keyword">return</span> mem[target]\n    <span class="hljs-keyword">let</span> minStep=<span class="hljs-literal">Infinity</span>\n    <span class="hljs-keyword">let</span> tars=<span class="hljs-built_in">Array</span>(<span class="hljs-number">26</span>).fill(<span class="hljs-number">0</span>)\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;target.length;i++){\n      <span class="hljs-keyword">let</span> curcode=target.charCodeAt(i)-acode\n      tars[curcode]++\n    }\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;all.length;i++){\n      <span class="hljs-keyword">let</span> newtarget=<span class="hljs-string">\'\'</span>,find=<span class="hljs-literal">false</span>\n      <span class="hljs-keyword">let</span> keyletter=target.charCodeAt(<span class="hljs-number">0</span>)-acode\n      <span class="hljs-keyword">if</span>(all[i][keyletter]===<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>\n      find=<span class="hljs-literal">true</span>\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++){\n        <span class="hljs-keyword">let</span> gap=<span class="hljs-built_in">Math</span>.max(tars[j]-all[i][j],<span class="hljs-number">0</span>)\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k=<span class="hljs-number">0</span>;k&lt;gap;k++){\n          newtarget+=<span class="hljs-built_in">String</span>.fromCharCode(j+acode)\n        }\n      }\n      <span class="hljs-keyword">if</span>(!find)<span class="hljs-keyword">return</span> <span class="hljs-literal">Infinity</span>\n      <span class="hljs-keyword">let</span> res=dfs(newtarget)\n      minStep=<span class="hljs-built_in">Math</span>.min(minStep,res+<span class="hljs-number">1</span>)\n    }\n    mem[target]=minStep\n    <span class="hljs-keyword">return</span> minStep\n  }\n};\n</code></pre>\n'],titleSlug:"stickers-to-spell-word",hasThinking:!1,content:"<p>\u6211\u4eec\u7ed9\u51fa\u4e86 N \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8d34\u7eb8\u3002\u6bcf\u4e2a\u8d34\u7eb8\u4e0a\u90fd\u6709\u4e00\u4e2a\u5c0f\u5199\u7684\u82f1\u6587\u5355\u8bcd\u3002</p>\n\n<p>\u4f60\u5e0c\u671b\u4ece\u81ea\u5df1\u7684\u8d34\u7eb8\u96c6\u5408\u4e2d\u88c1\u526a\u5355\u4e2a\u5b57\u6bcd\u5e76\u91cd\u65b0\u6392\u5217\u5b83\u4eec\uff0c\u4ece\u800c\u62fc\u5199\u51fa\u7ed9\u5b9a\u7684\u76ee\u6807\u5b57\u7b26\u4e32 <code>target</code>\u3002</p>\n\n<p>\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4e0d\u6b62\u4e00\u6b21\u5730\u4f7f\u7528\u6bcf\u4e00\u5f20\u8d34\u7eb8\uff0c\u800c\u4e14\u6bcf\u4e00\u5f20\u8d34\u7eb8\u7684\u6570\u91cf\u90fd\u662f\u65e0\u9650\u7684\u3002</p>\n\n<p>\u62fc\u51fa\u76ee\u6807&nbsp;<code>target</code> \u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u662f\u591a\u5c11\uff1f\u5982\u679c\u4efb\u52a1\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>3\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 2 \u4e2a &quot;with&quot; \u8d34\u7eb8\uff0c\u548c 1 \u4e2a &quot;example&quot; \u8d34\u7eb8\u3002\n\u628a\u8d34\u7eb8\u4e0a\u7684\u5b57\u6bcd\u526a\u4e0b\u6765\u5e76\u91cd\u65b0\u6392\u5217\u540e\uff0c\u5c31\u53ef\u4ee5\u5f62\u6210\u76ee\u6807 &ldquo;thehat&ldquo; \u4e86\u3002\n\u6b64\u5916\uff0c\u8fd9\u662f\u5f62\u6210\u76ee\u6807\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>-1\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u526a\u5207\u7ed9\u5b9a\u8d34\u7eb8\u7684\u5b57\u6bcd\u6765\u5f62\u6210\u76ee\u6807&ldquo;basicbasic&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>stickers</code> \u957f\u5ea6\u8303\u56f4\u662f&nbsp;<code>[1, 50]</code>\u3002</li>\n\t<li><code>stickers</code> \u7531\u5c0f\u5199\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff08\u4e0d\u5e26\u6487\u53f7\uff09\u3002</li>\n\t<li><code>target</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 15]</code>&nbsp;\u8303\u56f4\u5185\uff0c\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u6848\u4f8b\u4e2d\uff0c\u6240\u6709\u7684\u5355\u8bcd\u90fd\u662f\u4ece 1000 \u4e2a\u6700\u5e38\u89c1\u7684\u7f8e\u56fd\u82f1\u8bed\u5355\u8bcd\u4e2d\u968f\u673a\u9009\u53d6\u7684\uff0c\u76ee\u6807\u662f\u4e24\u4e2a\u968f\u673a\u5355\u8bcd\u7684\u4e32\u8054\u3002</li>\n\t<li>\u65f6\u95f4\u9650\u5236\u53ef\u80fd\u6bd4\u5e73\u65f6\u66f4\u5177\u6311\u6218\u6027\u3002\u9884\u8ba1 50 \u4e2a\u8d34\u7eb8\u7684\u6d4b\u8bd5\u6848\u4f8b\u5e73\u5747\u53ef\u572835ms\u5185\u89e3\u51b3\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content694.8e917c09.chunk.js.map