(window.webpackJsonp=window.webpackJsonp||[]).push([[906],{928:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {number[]} pre\n * @param {number[]} post\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> constructFromPrePost = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pre, post</span>) </span>{\n    <span class="hljs-keyword">let</span> root=<span class="hljs-keyword">new</span> TreeNode(pre[<span class="hljs-number">0</span>])\n    <span class="hljs-keyword">let</span> stack=[root]\n    <span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;pre.length;i++){\n        <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">new</span> TreeNode(pre[i])\n        <span class="hljs-keyword">while</span>(stack[stack.length<span class="hljs-number">-1</span>].val===post[j]){\n            j++\n            stack.pop()\n        }\n        <span class="hljs-keyword">if</span>(!stack[stack.length<span class="hljs-number">-1</span>].left){\n            stack[stack.length<span class="hljs-number">-1</span>].left=node\n        }<span class="hljs-keyword">else</span>{\n            stack[stack.length<span class="hljs-number">-1</span>].right=node\n        }\n        stack.push(node)\n    }\n    <span class="hljs-keyword">return</span> stack[<span class="hljs-number">0</span>]\n};\n</code></pre>\n'],titleSlug:"construct-binary-tree-from-preorder-and-postorder-traversal",hasThinking:!1,content:"<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5339\u914d\u7684\u4efb\u4f55\u4e8c\u53c9\u6811\u3002</p>\n\n<p>&nbsp;<code>pre</code>&nbsp;\u548c&nbsp;<code>post</code>&nbsp;\u904d\u5386\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\n\t<li><code>pre[]</code>&nbsp;\u548c&nbsp;<code>post[]</code>&nbsp;\u90fd\u662f&nbsp;<code>1, 2, ..., pre.length</code>&nbsp;\u7684\u6392\u5217</li>\n\t<li>\u6bcf\u4e2a\u8f93\u5165\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u7b54\u6848\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u53ef\u4ee5\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content893.270b9d86.chunk.js.map