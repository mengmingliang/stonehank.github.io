(window.webpackJsonp=window.webpackJsonp||[]).push([[321],{400:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> divide = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dividend, divisor</span>) </span>{\n  <span class="hljs-keyword">let</span> negative=(dividend ^ divisor)&lt;<span class="hljs-number">0</span>,\n      limit=<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)\n  dividend=<span class="hljs-built_in">Math</span>.abs(dividend)\n  divisor=<span class="hljs-built_in">Math</span>.abs(divisor)\n  <span class="hljs-keyword">if</span>(dividend&lt;divisor)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>\n  \n  <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>,idx=<span class="hljs-number">32</span>\n  <span class="hljs-keyword">while</span>(idx&gt;=<span class="hljs-number">0</span>){\n    <span class="hljs-comment">// JS\u907f\u514d\u4f4d\u6ea2\u51fa</span>\n    <span class="hljs-keyword">let</span> absBit=<span class="hljs-built_in">Math</span>.abs((dividend &gt;&gt; idx))\n    <span class="hljs-keyword">if</span>(absBit &gt;= divisor){\n      res+=(<span class="hljs-number">1</span> &lt;&lt; idx)\n      dividend-=(divisor &lt;&lt; idx)\n    }\n    idx--\n  }\n  <span class="hljs-keyword">if</span>(negative){\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(-res,-limit)\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min(res,limit<span class="hljs-number">-1</span>)\n  }\n};\n</code></pre>\n'],titleSlug:"divide-two-integers",hasThinking:!0,thinking:'<hr>\n<p>\u601d\u8def\uff1a</p>\n<ul>\n<li>\n<p>\u4f7f\u7528\u51cf\u6cd5\uff0c\u6700\u76f4\u89c2\u7684\u5c31\u662f\u6bcf\u6b21\u4ece\u88ab\u9664\u6570<code>dividend</code>\u4e2d\u51cf\u53bb\u9664\u6570<code>divisor</code>\uff0c\u76f4\u5230<code>dividend&lt;divisor</code>\uff0c\u4f46\u662f\u6548\u7387\u592a\u4f4e\uff0c\u56e0\u4e3a\u6570\u503c\u662f<code>32</code>\u4f4d\u7684\u6570\u503c\uff0c\u5f88\u5bb9\u6613<code>TLE</code>\u3002</p>\n</li>\n<li>\n<p>\u4f7f\u7528\u53e0\u52a0\u51cf\u6cd5\uff0c\u548c\u4e0a\u9762\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4f46\u5e76\u4e0d\u662f\u6bcf\u4e00\u6b21\u90fd\u53ea\u51cf\u53bb<code>divisor</code>\uff0c\u8bbe\u5b9a\u53d8\u91cf<code>m</code>\uff0c<code>n</code>\u5206\u522b\u4e3a<code>dividend</code>\u8fd8\u5269\u4e0b\u7684\u503c\uff0c\u548c\u5f53\u524d\u88ab\u51cf\u7684\u503c\u3002</p>\n<p>\u6bcf\u4e00\u6b21\u90fd\u51cf\u53bb<code>divisor*i</code>\uff0c\u76f4\u5230<code>m&lt;0</code>\uff0c\u91cd\u7f6e<code>n</code>\uff0c\u7ee7\u7eed\u91cd\u590d\u3002</p>\n</li>\n</ul>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number} dividend\n * @param {number} divisor\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> divide = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">dividend, divisor</span>) </span>{\n  <span class="hljs-keyword">let</span> negative=(dividend ^ divisor)&lt;<span class="hljs-number">0</span>,\n      limit=<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)\n  \n  <span class="hljs-keyword">if</span>(dividend&lt;divisor)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>\n  \n  <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>,count=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> n=<span class="hljs-number">0</span>, m=dividend\n  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>){\n    n+=divisor\n    <span class="hljs-keyword">if</span>(m-n&gt;<span class="hljs-number">0</span>){\n      count+=<span class="hljs-number">1</span>\n      m=m-n\n      res+=count\n    }<span class="hljs-keyword">else</span> {\n      <span class="hljs-comment">// \u5df2\u7ecf\u51cf\u52300\u4e86</span>\n      <span class="hljs-keyword">if</span>(n===divisor){\n        <span class="hljs-keyword">if</span>(m-n===<span class="hljs-number">0</span>)res++\n        <span class="hljs-keyword">break</span>\n      }\n      <span class="hljs-comment">// \u91cd\u7f6e</span>\n      count=<span class="hljs-number">0</span>\n      n=<span class="hljs-number">0</span>\n    }\n  }\n  <span class="hljs-keyword">if</span>(negative){\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(-res,-limit)\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min(res,limit<span class="hljs-number">-1</span>)\n  }\n};\n</code></pre>\n<ul>\n<li>\n<p>\u4f7f\u7528\u4f4d\u64cd\u4f5c\uff0c\u4f4d\u64cd\u4f5c\u4e2d<code>&gt;&gt;</code>\u76f8\u5f53\u4e8e<code>/2</code>\uff0c<code>&lt;&lt;</code>\u76f8\u5f53\u4e8e<code>*2</code>\uff0c\u56e0\u6b64\u5bf9\u4e8e<code>dividend</code>\uff0c\u627e\u51fa\u4e00\u4e2a<code>idx</code>\uff0c\u4f7f\u5f97<code>dividend&gt;&gt;idx</code>\u540e\uff0c\u521a\u597d\u8fd8\u6bd4<code>divisor</code>\u5927\u3002</p>\n<p>\u8fd9\u8bf4\u660e<code>idx</code>\u5bf9\u5e94\u7684\u9664\u6570\u662f\u6709\u6548\u7684\uff0c\u8fd9\u4e2a\u9664\u6570\u5c31\u662f<code>1&lt;&lt;idx</code>\uff0c\u518d\u5c06<code>dividend</code>\u51cf\u53bb\u5f53\u524d\u9664\u6570<code>divisor * ((1 &lt;&lt; idx))</code>\uff0c\u4e5f\u5c31\u662f<code>(divisor &lt;&lt; idx)</code>\u3002</p>\n<p>\u53e6\u5916\uff0c\u7531\u4e8e<code>js</code>\u5b58\u5728\u4f4d\u6ea2\u51fa\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u6267\u884c\u4f4d\u8fd0\u7b97\u65f6\uff0c\u8ba1\u7b97\u7edd\u5bf9\u503c<code>let absBit=Math.abs((dividend &gt;&gt; idx))</code>\u3002</p>\n</li>\n</ul>\n',content:"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u548c\u9664\u6570&nbsp;<code>divisor</code>\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002</p>\n\n<p>\u8fd4\u56de\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u9664\u4ee5\u9664\u6570&nbsp;<code>divisor</code>&nbsp;\u5f97\u5230\u7684\u5546\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 10, divisor = 3\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 7, divisor = -3\n<strong>\u8f93\u51fa:</strong> -2</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</li>\n\t<li>\u9664\u6570\u4e0d\u4e3a&nbsp;0\u3002</li>\n\t<li>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2<sup>31&nbsp;</sup>&minus; 1\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content365.0e7f80a4.chunk.js.map