(window.webpackJsonp=window.webpackJsonp||[]).push([[929],{948:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} L\n * @param {string} R\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> superpalindromesInRange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">L, R</span>) </span>{\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">next</span>(<span class="hljs-params">s</span>)</span>{\n    <span class="hljs-keyword">let</span> m1=<span class="hljs-built_in">Math</span>.floor(s.length/<span class="hljs-number">2</span>),m2=<span class="hljs-built_in">Math</span>.ceil(s.length/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">let</span> left=s.substring(<span class="hljs-number">0</span>,m1),mid=s.substring(m1,m2),right=s.substring(m2)\n    <span class="hljs-keyword">let</span> nxtL,nxtR\n    <span class="hljs-keyword">if</span>(+reverse(left)&lt;=+right) nxtL=+(left+mid)+<span class="hljs-number">1</span> + <span class="hljs-string">\'\'</span>\n    <span class="hljs-keyword">else</span> nxtL=left+mid\n    nxtR=reverse(nxtL.substring(<span class="hljs-number">0</span>,m1))\n    <span class="hljs-keyword">return</span> nxtL+nxtR\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">s</span>)</span>{\n    <span class="hljs-keyword">return</span> s.split(<span class="hljs-string">\'\'</span>).reverse().join(<span class="hljs-string">\'\'</span>)\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiString</span>(<span class="hljs-params">num1, num2</span>) </span>{\n    <span class="hljs-keyword">if</span>(num1 === <span class="hljs-string">\'0\'</span> || num2 === <span class="hljs-string">\'0\'</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'0\'</span>;\n    <span class="hljs-keyword">let</span> pos = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(num1.length + num2.length).fill(<span class="hljs-number">0</span>);\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = num1.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) {\n      <span class="hljs-keyword">let</span> n = +(num1[i]);\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = num2.length - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j --) {\n        <span class="hljs-keyword">let</span> m = +(num2[j]);\n        <span class="hljs-keyword">let</span> mul = m * n;\n        <span class="hljs-keyword">let</span> p1 = i + j;\n        <span class="hljs-keyword">let</span> p2 = i + j + <span class="hljs-number">1</span>;\n        <span class="hljs-keyword">let</span> sum = mul + pos[p2];\n        pos[p1] += <span class="hljs-built_in">Math</span>.floor(sum / <span class="hljs-number">10</span>);\n        pos[p2] = (sum) % <span class="hljs-number">10</span>;\n      }\n    }\n    <span class="hljs-keyword">let</span> res = pos.join(<span class="hljs-string">\'\'</span>);\n    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>] === <span class="hljs-string">\'0\'</span> ? res.slice(<span class="hljs-number">1</span>) : res\n  }\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isP</span>(<span class="hljs-params">s</span>)</span>{\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;s.length/<span class="hljs-number">2</span>;i++){\n      <span class="hljs-keyword">if</span>(s[i]!==s[s.length<span class="hljs-number">-1</span>-i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  }\n\n  <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> start=<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.sqrt(L))\n  <span class="hljs-keyword">let</span> end=<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.sqrt(R))\n  <span class="hljs-keyword">let</span> str=next(start<span class="hljs-number">-1</span>+<span class="hljs-string">\'\'</span>)\n  \n  <span class="hljs-keyword">while</span>(+str&lt;=end){\n    <span class="hljs-keyword">let</span> pow=multiString(str,str)\n    <span class="hljs-keyword">if</span>(isP(pow))res++   \n    str=next(str)\n  }\n  \n  <span class="hljs-keyword">return</span> res\n};\n</code></pre>\n'],titleSlug:"super-palindromes",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u8fd9\u9053\u9898\u7528<code>js</code>\u89e3\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\u5c31\u662f<code>js</code>\u6ca1\u6709<code>long</code>\u7c7b\u578b\u6570\u5b57\uff0c\u5f53\u8d85\u8fc7\u4e00\u5b9a\u4f4d\u6570\uff0c<code>number</code>\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p>\n<p>\u4f8b\u5982\uff1a\n<code>console.log(123456789123456789===123456789123456781) // true</code></p>\n<p>\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7f16\u5199\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e58\u6cd5\u5373\u53ef\uff0c\u53c2\u8003<code>Leetcode NO.43</code>\u3002</p>\n<p>\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f\uff0c\u5728<code>sqrt(L)</code>\u548c<code>sqrt(R)</code>\u8303\u56f4\u5185\u67e5\u627e\u6240\u6709\u7684\u56de\u6587\u5b57\u7b26\u4e32(<code>next</code>\u51fd\u6570)\uff0c\u518d\u68c0\u67e5\u5b83\u7684<code>pow(2)</code>\u662f\u5426\u4e5f\u662f\u56de\u6587\u5b57\u7b26\u4e32\u3002</p>\n",content:"<p>\u5982\u679c\u4e00\u4e2a\u6b63\u6574\u6570\u81ea\u8eab\u662f\u56de\u6587\u6570\uff0c\u800c\u4e14\u5b83\u4e5f\u662f\u4e00\u4e2a\u56de\u6587\u6570\u7684\u5e73\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u6570\u4e3a\u8d85\u7ea7\u56de\u6587\u6570\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570&nbsp;<code>L</code> \u548c&nbsp;<code>R</code> \uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\uff09\uff0c\u8fd4\u56de\u5305\u542b\u5728\u8303\u56f4 <code>[L, R]</code> \u4e2d\u7684\u8d85\u7ea7\u56de\u6587\u6570\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>L = &quot;4&quot;, R = &quot;1000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a\n</strong>4\uff0c9\uff0c121\uff0c\u4ee5\u53ca 484 \u662f\u8d85\u7ea7\u56de\u6587\u6570\u3002\n\u6ce8\u610f 676 \u4e0d\u662f\u4e00\u4e2a\u8d85\u7ea7\u56de\u6587\u6570\uff1a 26 * 26 = 676\uff0c\u4f46\u662f 26 \u4e0d\u662f\u56de\u6587\u6570\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\n\t<li><code>L</code> \u548c&nbsp;<code>R</code>&nbsp;\u662f\u8868\u793a&nbsp;<code>[1, 10^18)</code>&nbsp;\u8303\u56f4\u7684\u6574\u6570\u7684\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>int(L) &lt;= int(R)</code></li>\n</ol>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content913.6f190a07.chunk.js.map