(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{190:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> sumRootToLeaf = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>,MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calc</span>(<span class="hljs-params">root,sum</span>)</span>{\n    sum=(sum+root.val) % MOD\n    <span class="hljs-keyword">if</span>(root.left)calc(root.left,sum*<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span>(root.right)calc(root.right,sum*<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span>(!root.left &amp;&amp; !root.right){\n      res=(res+sum) % MOD\n    }\n  }\n  calc(root,<span class="hljs-number">0</span>)\n  <span class="hljs-keyword">return</span> res\n};\n</code></pre>\n'],titleSlug:"sum-of-root-to-leaf-binary-numbers",hasThinking:!1,content:'<p>\u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u662f&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002\u6bcf\u4e00\u6761\u4ece\u6839\u5230\u53f6\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u4ece\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb\u7684\u4e8c\u8fdb\u5236\u6570\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8def\u5f84\u4e3a&nbsp;<code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>\uff0c\u90a3\u4e48\u5b83\u8868\u793a\u4e8c\u8fdb\u5236\u6570&nbsp;<code>01101</code>\uff0c\u4e5f\u5c31\u662f&nbsp;<code>13</code>&nbsp;\u3002</p>\n\n<p>\u5bf9\u6811\u4e0a\u7684\u6bcf\u4e00\u7247\u53f6\u5b50\uff0c\u6211\u4eec\u90fd\u8981\u627e\u51fa\u4ece\u6839\u5230\u8be5\u53f6\u5b50\u7684\u8def\u5f84\u6240\u8868\u793a\u7684\u6570\u5b57\u3002</p>\n\n<p>\u4ee5<strong>&nbsp;<code>10^9 + 7</code></strong>&nbsp;\u4e3a<strong>\u6a21</strong>\uff0c\u8fd4\u56de\u8fd9\u4e9b\u6570\u5b57\u4e4b\u548c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/05/sum-of-root-to-leaf-binary-numbers.png" style="height: 200px; width: 304px;"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,1,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>22\n<strong>\u89e3\u91ca\uff1a</strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e <code>1</code> \u548c <code>1000</code> \u4e4b\u95f4\u3002</li>\n\t<li>node.val \u4e3a&nbsp;<code>0</code> \u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n</ol>\n'}}}]);
//# sourceMappingURL=sourceCode-content155.62195d5e.chunk.js.map