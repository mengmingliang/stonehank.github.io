(window.webpackJsonp=window.webpackJsonp||[]).push([[855],{882:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} graph\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> shortestPathLength = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">graph</span>) </span>{\n  <span class="hljs-keyword">let</span> starts=[]\n  <span class="hljs-keyword">let</span> minLen=<span class="hljs-number">13</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;graph.length;i++){\n    <span class="hljs-keyword">if</span>(graph[i].length===<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>\n    <span class="hljs-keyword">if</span>(graph[i].length&lt;minLen){\n      minLen=graph[i].length\n      starts=[i]\n    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(graph[i].length===minLen){\n      starts.push(i)\n    }\n  }\n\n  <span class="hljs-keyword">let</span> res=<span class="hljs-literal">Infinity</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> s <span class="hljs-keyword">of</span> starts){\n    <span class="hljs-keyword">if</span>(graph[s].length===graph.length<span class="hljs-number">-1</span>)res=graph.length<span class="hljs-number">-1</span>\n    <span class="hljs-keyword">else</span> res=<span class="hljs-built_in">Math</span>.min(res,bfs(s))\n  }\n  <span class="hljs-keyword">return</span> res===<span class="hljs-literal">Infinity</span>?<span class="hljs-number">0</span>:res\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bfs</span>(<span class="hljs-params">start</span>)</span>{\n    <span class="hljs-keyword">let</span> visited=<span class="hljs-built_in">Array</span>(graph.length).fill(<span class="hljs-number">0</span>)\n    visited[start]=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">let</span> step=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">let</span> arr=[[start,visited,<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>]]\n    <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n      <span class="hljs-keyword">let</span> len=arr.length\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n        <span class="hljs-keyword">let</span> [v,visited,count,parent]=arr.shift()\n        <span class="hljs-keyword">let</span> adj=graph[v]\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;adj.length;j++){\n          <span class="hljs-keyword">let</span> newVisited=visited.slice()\n          <span class="hljs-keyword">let</span> newCount=count\n          <span class="hljs-keyword">if</span>(!newVisited[adj[j]]){\n            newCount++\n            newVisited[adj[j]]=<span class="hljs-number">1</span>\n          }<span class="hljs-keyword">else</span>{\n            <span class="hljs-keyword">if</span>(adj.length&gt;<span class="hljs-number">1</span> &amp;&amp; parent===adj[j])<span class="hljs-keyword">continue</span>\n            newVisited[adj[j]]++\n          }\n          <span class="hljs-keyword">if</span>(newCount===visited.length)<span class="hljs-keyword">return</span> step+<span class="hljs-number">1</span>\n          <span class="hljs-keyword">if</span>(newVisited[adj[j]]&gt;graph[adj[j]].length)<span class="hljs-keyword">continue</span>\n          arr.push([adj[j],newVisited,newCount,v])\n        }\n      }\n      step++\n    }    \n  }\n  \n};\n</code></pre>\n'],titleSlug:"shortest-path-visiting-all-nodes",hasThinking:!1,content:"<p>\u7ed9\u51fa&nbsp;<code>graph</code>&nbsp;\u4e3a\u6709 N \u4e2a\u8282\u70b9\uff08\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>\uff09\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002&nbsp;</p>\n\n<p><code>graph.length = N</code>\uff0c\u4e14\u53ea\u6709\u8282\u70b9 <code>i</code>&nbsp;\u548c <code>j</code>&nbsp;\u8fde\u901a\u65f6\uff0c<code>j != i</code>&nbsp;\u5728\u5217\u8868&nbsp;<code>graph[i]</code>&nbsp;\u4e2d\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u4f60\u53ef\u4ee5\u5728\u4efb\u4e00\u8282\u70b9\u5f00\u59cb\u548c\u505c\u6b62\uff0c\u4e5f\u53ef\u4ee5\u591a\u6b21\u91cd\u8bbf\u8282\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u7528\u8fb9\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[0],[0],[0]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [1,0,2,0,3]</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content847.267e3191.chunk.js.map