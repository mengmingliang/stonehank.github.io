(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{176:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> isSymmetric = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  <span class="hljs-keyword">let</span> aux=[root]\n  <span class="hljs-keyword">while</span>(aux.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> len=aux.length\n    <span class="hljs-keyword">if</span>(!check(aux))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> node=aux.shift()\n      <span class="hljs-keyword">if</span>(!node)<span class="hljs-keyword">continue</span>\n      aux.push(node.left)\n      aux.push(node.right)\n    }\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">arr</span>)</span>{\n    <span class="hljs-keyword">let</span> n=arr.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-built_in">Math</span>.floor(n/<span class="hljs-number">2</span>);i++){\n      <span class="hljs-keyword">let</span> j=n<span class="hljs-number">-1</span>-i\n      <span class="hljs-keyword">if</span>(!arr[i] &amp;&amp; !arr[j])<span class="hljs-keyword">continue</span>\n      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!arr[i] || !arr[j])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i].val!==arr[j].val)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  }\n};\n</code></pre>\n'],titleSlug:"symmetric-tree",hasThinking:!0,thinking:'<hr>\n<p>\u9012\u5f52(<code>dfs</code>)\uff1a</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> isSymmetric = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root1,root2</span>)</span>{\n    <span class="hljs-keyword">if</span>(!root1 &amp;&amp; !root2)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    <span class="hljs-keyword">if</span>(!root1 || !root2)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">if</span>(root1.val!==root2.val)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">return</span> dfs(root1.left,root2.right) &amp;&amp; dfs(root1.right,root2.left)\n  }  \n  <span class="hljs-keyword">return</span> dfs(root.left,root.right)\n};\n</code></pre>\n<p>\u8fed\u4ee3(<code>bfs</code>)\uff1a</p>\n',content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4e8c\u53c9\u6811&nbsp;<code>[1,2,2,3,4,4,3]</code> \u662f\u5bf9\u79f0\u7684\u3002</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>\u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a&nbsp;<code>[1,2,2,null,3,null,3]</code> \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f1a\u5f88\u52a0\u5206\u3002</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content141.44a2c0df.chunk.js.map