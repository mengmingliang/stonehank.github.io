(window.webpackJsonp=window.webpackJsonp||[]).push([[640],{687:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} pairs\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> findLongestChain = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pairs</span>) </span>{\n\n  pairs.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>]));\n  <span class="hljs-comment">// let dp =Array(pairs.length).fill(1);</span>\n  <span class="hljs-comment">// for (let i = 0; i &lt; dp.length; i++) {</span>\n  <span class="hljs-comment">//     for (let j = 0; j &lt; i; j++) {</span>\n  <span class="hljs-comment">//         dp[i] = Math.max(dp[i], pairs[i][0] &gt; pairs[j][1]? dp[j] + 1 : dp[j]);</span>\n  <span class="hljs-comment">//     }</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return dp[pairs.length - 1];</span>\n  <span class="hljs-keyword">let</span> count=<span class="hljs-number">1</span>\n  <span class="hljs-keyword">let</span> head=pairs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pairs.length; i++) {\n    <span class="hljs-keyword">if</span>(pairs[i][<span class="hljs-number">0</span>]&gt;head){\n      count++\n      head=pairs[i][<span class="hljs-number">1</span>]\n    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pairs[i][<span class="hljs-number">1</span>]&lt;head){\n       head=pairs[i][<span class="hljs-number">1</span>]\n    }\n  }\n  <span class="hljs-keyword">return</span> count\n};\n</code></pre>\n'],titleSlug:"maximum-length-of-pair-chain",hasThinking:!1,content:"<p>\u7ed9\u51fa&nbsp;<code>n</code>&nbsp;\u4e2a\u6570\u5bf9\u3002&nbsp;\u5728\u6bcf\u4e00\u4e2a\u6570\u5bf9\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6bd4\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5c0f\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u8ddf\u968f\u5173\u7cfb\uff0c\u5f53\u4e14\u4ec5\u5f53&nbsp;<code>b &lt; c</code>&nbsp;\u65f6\uff0c\u6570\u5bf9<code>(c, d)</code>&nbsp;\u624d\u53ef\u4ee5\u8ddf\u5728&nbsp;<code>(a, b)</code>&nbsp;\u540e\u9762\u3002\u6211\u4eec\u7528\u8fd9\u79cd\u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u6570\u5bf9\u94fe\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5bf9\u6570\u96c6\u5408\uff0c\u627e\u51fa\u80fd\u591f\u5f62\u6210\u7684\u6700\u957f\u6570\u5bf9\u94fe\u7684\u957f\u5ea6\u3002\u4f60\u4e0d\u9700\u8981\u7528\u5230\u6240\u6709\u7684\u6570\u5bf9\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e9b\u6570\u5bf9\u6765\u6784\u9020\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u7684\u6570\u5bf9\u94fe\u662f [1,2] -&gt; [3,4]\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u51fa\u6570\u5bf9\u7684\u4e2a\u6570\u5728&nbsp;[1, 1000] \u8303\u56f4\u5185\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content652.62f22835.chunk.js.map