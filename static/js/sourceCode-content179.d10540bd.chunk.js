(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{214:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} S\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> longestDupSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">S</span>) </span>{\n  <span class="hljs-keyword">let</span> R=<span class="hljs-number">26</span>,MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>\n  <span class="hljs-keyword">let</span> lo=<span class="hljs-number">0</span>,hi=S.length<span class="hljs-number">-1</span>,res=<span class="hljs-string">\'\'</span>\n  <span class="hljs-keyword">while</span>(lo&lt;hi){\n    <span class="hljs-keyword">let</span> len=<span class="hljs-built_in">Math</span>.ceil((lo+hi)/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">let</span> sub=rabinKarp(S,len)\n    <span class="hljs-keyword">if</span>(sub!==<span class="hljs-string">\'\'</span>){\n      lo=len\n      res=sub\n    }<span class="hljs-keyword">else</span>{\n      hi=len<span class="hljs-number">-1</span>\n    }\n  }\n  <span class="hljs-keyword">return</span> res\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rabinKarp</span>(<span class="hljs-params">str,len</span>)</span>{\n    <span class="hljs-keyword">let</span> RM=<span class="hljs-number">1</span>\n    <span class="hljs-comment">// \u7b49\u4ef7\u4e8eRM=Math.pow(R,M-1) % MOD</span>\n    <span class="hljs-comment">// \u7531\u4e8eJS\u7cbe\u5ea6\u95ee\u9898\u62c6\u89e3\u8ba1\u7b97</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;len;i++){\n      RM=(RM*R) % MOD\n    }\n    <span class="hljs-keyword">let</span> map=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()\n    <span class="hljs-keyword">let</span> num=<span class="hljs-number">0</span>\n    <span class="hljs-comment">// \u8ba1\u7b97\u524dlen\u4e2a\u5b57\u7b26\u4e32\u7684\u6563\u5217\u503c</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> code=str.charCodeAt(i)<span class="hljs-number">-97</span>\n      num=(num*R + code) % MOD\n    }\n    map.set(num,<span class="hljs-number">0</span>)\n    <span class="hljs-comment">// \u540e\u7eed\u8ba1\u7b97\u6563\u5217\u503c</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;str.length-len;i++){\n      <span class="hljs-keyword">let</span> preCode=str.charCodeAt(i)<span class="hljs-number">-97</span>,\n          curCode=str.charCodeAt(i+len)<span class="hljs-number">-97</span>\n      num=(num+MOD-(preCode*RM % MOD)) % MOD\n      num=(num*R + curCode) % MOD\n      <span class="hljs-keyword">if</span>(map.has(num)){\n        <span class="hljs-keyword">let</span> sub=str.substring(i+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>+len)\n        <span class="hljs-keyword">let</span> preId=map.get(num),\n            preSub=str.substring(preId,preId+len)\n        <span class="hljs-keyword">if</span>(sub===preSub)<span class="hljs-keyword">return</span> sub\n      }\n      map.set(num,i+<span class="hljs-number">1</span>)\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n  }\n};\n</code></pre>\n'],titleSlug:"longest-duplicate-substring",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p><code>\u4e8c\u5206+rabin-Karp</code></p>\n<p>\u5047\u8bbe\u7b54\u6848\u662f\u957f\u5ea6\u4e3a<code>55</code>\u7684\u5b50\u4e32\uff0c\u90a3\u4e48\u957f\u5ea6\u4e3a<code>54</code>\u7684\u5b50\u4e32\u5c31\u4e00\u5b9a\u5b58\u5728\u5e76\u4e14\u957f\u5ea6\u4e3a<code>56</code>\u7684\u5b50\u4e32\u4e00\u5b9a\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\uff0c\u9010\u6b65\u7f29\u5c0f\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u7b54\u6848\u3002</p>\n<p>\u5bf9\u4e8e\u957f\u5ea6<code>len</code>\uff0c\u4f7f\u7528<code>rabin-Karp</code>\u53bb\u8ba1\u7b97\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002</p>\n<p>\u5177\u4f53<code>rabin-Karp</code>\u7b97\u6cd5\uff0c\u5c31\u662f\u5b57\u7b26\u4e32\u7684\u68c0\u7d22\u65b9\u6cd5\uff0c</p>\n<p>\u4f8b\u5982\uff1a'abcbc'\uff0c\u73b0\u5728\u9700\u8981\u627e\u5230<code>len</code>\u4e3a<code>2</code>\u662f\u5426\u5b58\u5728\u91cd\u590d\u5b50\u4e32\uff0c</p>\n<ol>\n<li>\u524d<code>2</code>\u4e2a\u5b50\u4e32\u4e3a<code>ab</code></li>\n<li>\u4ece\u7b2c<code>3</code>\u4e2a\u5f00\u59cb\uff0c\u589e\u52a0<code>c</code>\uff0c\u51cf\u53bb<code>a</code>\uff0c\u5b50\u4e32\u4e3a<code>bc</code></li>\n<li>\u589e\u52a0<code>d</code>\u51cf\u53bb<code>b</code>\uff0c\u5b50\u4e32\u4e3a<code>cb</code></li>\n<li>\u589e\u52a0<code>c</code>\u51cf\u53bb<code>c</code>\uff0c\u5b50\u4e32\u4e3a<code>bc</code>\uff0c\u5b58\u5728\u91cd\u590d\uff0c\u8fd4\u56de<code>true</code>\u3002</li>\n</ol>\n<p>\u539f\u7406\u5c31\u662f\u5982\u6b64\uff0c\u4e0d\u8fc7\u5b83\u4f7f\u7528\u4e86\u6563\u5217\u503c\u7684\u6570\u5b66\u8ba1\u7b97\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u5c06\u6574\u4e2a\u5b50\u4e32\u4e32\u4fdd\u5b58\u8fdb<code>hash</code>(\u5426\u5219\u9047\u5230\u5f88\u957f\u7684\u5b50\u4e32\u6548\u7387\u4f1a\u6781\u4f4e)\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u4e32\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u4e2a\u6570\u5b57\u3002</p>\n",content:"<p>\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8003\u8651\u5176\u6240\u6709<strong>\u91cd\u590d\u5b50\u4e32</strong>\uff08<code>S</code> \u7684\u8fde\u7eed\u5b50\u4e32\uff0c\u51fa\u73b0\u4e24\u6b21\u6216\u591a\u6b21\uff0c\u53ef\u80fd\u4f1a\u6709\u91cd\u53e0\uff09\u3002</p>\n\n<p>\u8fd4\u56de<strong>\u4efb\u4f55</strong>\u5177\u6709\u6700\u957f\u53ef\u80fd\u957f\u5ea6\u7684\u91cd\u590d\u5b50\u4e32\u3002\uff08\u5982\u679c <code>S</code>&nbsp;\u4e0d\u542b\u91cd\u590d\u5b50\u4e32\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a&nbsp;<code>&quot;&quot;</code>\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;banana&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;ana&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abcd&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 10^5</code></li>\n\t<li><code>S</code> \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content179.d10540bd.chunk.js.map