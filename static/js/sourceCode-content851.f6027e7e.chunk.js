(window.webpackJsonp=window.webpackJsonp||[]).push([[860],{886:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} rectangles\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> rectangleArea = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">rectangles</span>) </span>{\n  <span class="hljs-keyword">let</span> aux=[]\n  <span class="hljs-keyword">let</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>\n  <span class="hljs-comment">// \u5206\u5272\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u5f00\u59cb\u70b9\u548c\u7ed3\u675f\u70b9</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [a,b,c,d] <span class="hljs-keyword">of</span> rectangles){\n    aux.push([b,[a,c],<span class="hljs-string">\'s\'</span>],[d,[a,c],<span class="hljs-string">\'e\'</span>])\n  }\n  <span class="hljs-comment">// \u6309y\u8f74\u6392\u5e8f\uff0c\u7528\u4e8e\u7ebf\u6bb5\u626b\u63cf</span>\n  aux.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>])\n  \n  <span class="hljs-keyword">if</span>(aux.length===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> area=<span class="hljs-number">0</span>,stack=[],last=aux[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]\n  <span class="hljs-comment">// \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u6839\u636e\u5f53\u524d\u662f\u7ed3\u675f\u8fd8\u662f\u5f00\u59cb\uff0c\u66f4\u65b0stack</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;aux.length;i++){\n    <span class="hljs-keyword">let</span> [h,range,state]=aux[i]\n    <span class="hljs-keyword">let</span> curArea=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">if</span>(stack.length!==<span class="hljs-number">0</span>){\n      <span class="hljs-comment">// \u8fd4\u56destack\u7684\u5e76\u96c6</span>\n      <span class="hljs-keyword">let</span> res=merge(stack)\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [x,y] <span class="hljs-keyword">of</span> res){\n        <span class="hljs-keyword">let</span> m1=(y-x) % mod, m2=(h-last) % mod\n        <span class="hljs-comment">// js\u4e0d\u652f\u6301\u7cbe\u786e\u5927\u4f4d\u6570\u6570\u5b57\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6267\u884c\u5927\u4f4d\u6570\u6570\u5b57\u4e58\u6cd5</span>\n        curArea=(curArea+multi(m1,m2,mod)) % mod\n      } \n    }\n    last=h\n    area=(area+curArea) % mod\n    <span class="hljs-keyword">if</span>(state===<span class="hljs-string">"s"</span>){\n      stack.push(range)\n    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state===<span class="hljs-string">\'e\'</span>){\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k=<span class="hljs-number">0</span>;k&lt;stack.length;k++){\n        <span class="hljs-keyword">let</span> [x,y]=stack[k]\n        <span class="hljs-keyword">if</span>(x===range[<span class="hljs-number">0</span>] &amp;&amp; y===range[<span class="hljs-number">1</span>]){\n          stack.splice(k,<span class="hljs-number">1</span>)\n          <span class="hljs-keyword">break</span>\n        }\n      }\n    }\n  }\n  <span class="hljs-keyword">return</span> area\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multi</span>(<span class="hljs-params">a,b,mod</span>)</span>{\n    <span class="hljs-keyword">let</span> t=<span class="hljs-built_in">Math</span>.floor(b/<span class="hljs-number">1000000</span>),\n        t2=b % <span class="hljs-number">1000000</span>\n    <span class="hljs-keyword">let</span> sum=<span class="hljs-number">0</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;t;i++){\n      sum=(sum+<span class="hljs-number">1000000</span>*a) % mod\n    }\n    sum=(sum+t2*a)%mod\n    <span class="hljs-keyword">return</span> sum\n  }\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span>(<span class="hljs-params">intervals</span>) </span>{\n    intervals.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a[<span class="hljs-number">0</span>]===b[<span class="hljs-number">0</span>]?a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]:a[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>])\n    <span class="hljs-keyword">let</span> result=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [x,y] <span class="hljs-keyword">of</span> intervals){\n      <span class="hljs-keyword">if</span>(result.length===<span class="hljs-number">0</span>){\n        result.push([x,y])\n      }<span class="hljs-keyword">else</span>{\n        <span class="hljs-keyword">let</span> last=result[result.length<span class="hljs-number">-1</span>]\n        <span class="hljs-keyword">if</span>(x&gt;last[<span class="hljs-number">1</span>]){\n          result.push([x,y])\n        }<span class="hljs-keyword">else</span>{\n          last[<span class="hljs-number">1</span>]=<span class="hljs-built_in">Math</span>.max(last[<span class="hljs-number">1</span>],y)\n        }\n      }\n    }\n    <span class="hljs-keyword">return</span> result\n  }\n};\n</code></pre>\n'],titleSlug:"rectangle-area-ii",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u626b\u63cf\u7ebf\u6bb5\uff0c\u601d\u8def\u8ddf<code>NO.218</code>\u5f88\u50cf\uff0c\u5bf9\u5f53\u524d<code>rectangles</code>\u5185\u7684\u6240\u6709\u70b9\uff0c\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u6bcf\u4e2a\u70b9\u7684<code>y</code>\u8f74\u4e0a\u7684\u5f53\u524d\u77e9\u5f62\u7684\u5f00\u59cb\u7684<code>x</code>\u8303\u56f4\u548c\u7ed3\u675f\u7684<code>x</code>\u8303\u56f4\u7684\u6570\u7ec4<code>aux</code>\u3002</p>\n<p>\u4f8b\u5982<code>[0,0,2,2]</code>\uff0c\u8fd9\u4e2a\u77e9\u5f62\u7684<code>y</code>\u8f74\u5f00\u59cb\u5c31\u662f\u5728<code>y=0</code>\u7684\u4f4d\u7f6e\uff0c<code>x</code>\u7684\u8303\u56f4\u662f<code>[0,2]</code>\uff0c\u5728<code>y</code>\u8f74\u7ed3\u675f\u7684\u4f4d\u7f6e\u662f<code>y=2</code>\u7684\u4f4d\u7f6e\uff0c<code>x</code>\u8303\u56f4\u4e5f\u662f<code>[0,2]</code>\u3002</p>\n<p>\u8fd9\u4e2a\u6784\u5efa\u7684\u6570\u7ec4<code>aux</code>\u5185\u90e8\u4e3a<code>[y,[x1,x2],state]</code>\uff0c\u5176\u4e2d<code>y</code>\u5c31\u662f<code>y</code>\u8f74\u7684\u4f4d\u7f6e\uff0c<code>[x1,x2]</code>\u5c31\u662f<code>x</code>\u8f74\u8de8\u8d8a\u7684\u8303\u56f4\uff0c<code>state</code>\u5c31\u662f<code>s</code>\u6307\u5f00\u59cb\uff0c<code>e</code>\u6307\u7ed3\u675f\u3002</p>\n<p>\u7136\u540e\u6309<code>y</code>\u6392\u5e8f\uff0c\u5b9a\u4e49\u4e00\u4e2a<code>stack</code>\uff0c\u7528\u4e8e\u4fdd\u5b58\u5728\u5f53\u524d<code>y</code>\u7684\u4f4d\u7f6e\u6709\u6548\u7684\u77e9\u5f62<code>x</code>\u8f74\u8303\u56f4\uff0c\u4ece<code>y</code>\u6700\u5c0f\u5f00\u59cb\uff0c\u9010\u6b65\u68c0\u67e5\uff0c\u6bcf\u4e00\u6b21\u904d\u5386\u4e4b\u524d\uff0c\n\u5148\u5c06<code>stack</code>\u5185\u6240\u6709\u70b9\u6c42\u5e76\u96c6(\u53c2\u8003<code>NO.56</code>)\uff0c\u5e76\u96c6\u7684\u8303\u56f4\u5728\u4e0e\u5f53\u524d<code>y</code>\u8f74\u548c\u4e0a\u4e00\u6b21<code>y</code>\u8f74\u7684\u5dee\u8ddd\u76f8\u4e58\u3002</p>\n<p>\u5982\u679c\u5f53\u524d<code>aux[i]</code>\u5bf9\u5e94\u7684\u662f<code>s</code>(\u5f00\u59cb\u70b9)\uff0c\u6dfb\u52a0\u5230<code>stack</code>\uff1b\u5982\u679c\u662f<code>e</code>(\u7ed3\u675f\u70b9)\uff0c\u8bf4\u660e\u8fd9\u4e2a\u77e9\u5f62\u5230\u6b64\u4e3a\u6b62\uff0c\u4ece<code>stack</code>\u5220\u9664\u8fd9\u4e2a\u77e9\u5f62\u7684<code>x</code>\u8303\u56f4\u3002</p>\n",content:'<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\uff08\u8f74\u5bf9\u9f50\u7684\uff09\u77e9\u5f62\u5217\u8868&nbsp;<code>rectangles</code>&nbsp;\u3002 \u5bf9\u4e8e&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]</code>\uff0c\u5176\u4e2d\uff08x1\uff0cy1\uff09\u662f\u77e9\u5f62&nbsp;<code>i</code>&nbsp;\u5de6\u4e0b\u89d2\u7684\u5750\u6807\uff0c\uff08x2\uff0cy2\uff09\u662f\u8be5\u77e9\u5f62\u53f3\u4e0a\u89d2\u7684\u5750\u6807\u3002</p>\n\n<p>\u627e\u51fa\u5e73\u9762\u4e2d\u6240\u6709\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u3002 \u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u592a\u5927\uff0c<strong>\u8bf7\u8fd4\u56de\u5b83\u5bf9 10 ^ 9 + 7 \u53d6\u6a21\u7684\u7ed3\u679c</strong>\u3002</p>\n\n<p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png" style="height: 360px; width: 480px;"></p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,1000000000,1000000000]]\n<strong>\u8f93\u51fa\uff1a</strong>49\n<strong>\u89e3\u91ca\uff1a</strong>\u7b54\u6848\u662f 10^18 \u5bf9 (10^9 + 7) \u53d6\u6a21\u7684\u7ed3\u679c\uff0c \u5373 (10^9)^2 &rarr; (-7)^2 = 49 \u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code>rectanges[i].length = 4</code></li>\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\n\t<li>\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u4e0d\u4f1a\u8d85\u8d8a&nbsp;<code>2^63 - 1</code>&nbsp;\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u7528\u4e00\u4e2a&nbsp;64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u6765\u4fdd\u5b58\u9762\u79ef\u7ed3\u679c\u3002</li>\n</ul>\n'}}}]);
//# sourceMappingURL=sourceCode-content851.f6027e7e.chunk.js.map