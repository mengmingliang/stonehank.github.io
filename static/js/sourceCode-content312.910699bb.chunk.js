(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{347:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {character[][]} board\n * @param {string[]} words\n * @return {string[]}\n */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findWords</span>(<span class="hljs-params">board, words</span>) </span>{\n  <span class="hljs-keyword">let</span> tire={}\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;words.length;i++){\n    <span class="hljs-keyword">let</span> t=tire\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;words[i].length;j++){\n      <span class="hljs-keyword">let</span> l=words[i][j]\n      <span class="hljs-keyword">if</span>(t[l]==<span class="hljs-literal">null</span>)t[l]={}\n      <span class="hljs-keyword">if</span>(j===words[i].length<span class="hljs-number">-1</span>){\n        t[l].word=words[i]\n      }\n      t=t[l]\n    }\n  }\n  <span class="hljs-keyword">let</span> res=[]\n  <span class="hljs-keyword">let</span> m=board.length,n=board[<span class="hljs-number">0</span>].length\n  <span class="hljs-keyword">let</span> moves=[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>]]\n  <span class="hljs-keyword">let</span> used=<span class="hljs-built_in">Array</span>(m).fill().map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">Array</span>(n).fill(<span class="hljs-number">0</span>)),uniq=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; board.length; i++) {\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++) {\n      <span class="hljs-keyword">if</span>(tire[board[i][j]]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">continue</span>\n      uniq++\n      dfs([i,j],tire[board[i][j]])\n    }\n  }\n\n  <span class="hljs-keyword">return</span> res\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">[x,y],tire</span>)</span>{\n    <span class="hljs-keyword">if</span>(tire.word){\n      res.push(tire.word)    \n      tire.word=<span class="hljs-literal">null</span>\n    }\n    used[x][y]=uniq\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [dX,dY] <span class="hljs-keyword">of</span> moves){\n      <span class="hljs-keyword">let</span> nX=x+dX,nY=y+dY\n      <span class="hljs-keyword">if</span>(nX&lt;<span class="hljs-number">0</span> || nY&lt;<span class="hljs-number">0</span> || nX&gt;=m || nY&gt;=n)<span class="hljs-keyword">continue</span>\n      <span class="hljs-keyword">if</span>(used[nX][nY]===uniq)<span class="hljs-keyword">continue</span>\n      <span class="hljs-keyword">if</span>(tire[board[nX][nY]]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">continue</span>\n      dfs([nX,nY],tire[board[nX][nY]])\n    }\n    used[x][y]=uniq<span class="hljs-number">-1</span>\n  }\n};\n</code></pre>\n'],titleSlug:"word-search-ii",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u5148\u5bf9<code>words</code>\u6784\u5efa<code>Tire</code>\u6811\uff0c\u63a5\u7740\u5bf9<code>board</code>\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c<code>dfs</code>\u904d\u5386\u67e5\u627e\u662f\u5426\u5b58\u5728<code>tire.word</code>\uff0c<code>tire.word</code>\u610f\u5473\u7740\u5355\u8bcd\u80cc\u67e5\u627e\u5230\uff0c\n\u5982\u679c\u5b58\u5728\uff0c\u5c06<code>tire.word</code>\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\u5e76\u4e14\u8bbe\u7f6e\u4e3a<code>null</code>(\u907f\u514d\u91cd\u590d\u67e5\u627e)\u3002</p>\n",content:'<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c&nbsp;<strong>board&nbsp;</strong>\u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 <strong>words</strong>\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d&ldquo;\u76f8\u90bb&rdquo;\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n<strong>words</strong> = <code>[&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</code> and <strong>board </strong>=\n[\n  [&#39;<strong>o</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;a&#39;,&#39;n&#39;],\n  [&#39;e&#39;,&#39;<strong>t</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;<strong>e</strong>&#39;],\n  [&#39;i&#39;,&#39;<strong>h</strong>&#39;,&#39;k&#39;,&#39;r&#39;],\n  [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]\n]\n\n<strong>\u8f93\u51fa:&nbsp;</strong><code>[&quot;eat&quot;,&quot;oath&quot;]</code></pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd <code>a-z</code>&nbsp;\u7ec4\u6210\u3002</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li>\u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f</li>\n\t<li>\u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a <a href="/problems/implement-trie-prefix-tree/description/">\u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09</a>\u3002</li>\n</ul>\n'}}}]);
//# sourceMappingURL=sourceCode-content312.910699bb.chunk.js.map