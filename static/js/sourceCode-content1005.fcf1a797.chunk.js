(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1040:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */</span>\n<span class="hljs-keyword">var</span> recoverTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> s1=<span class="hljs-literal">null</span>,s2=<span class="hljs-literal">null</span>,prev=<span class="hljs-literal">null</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root</span>)</span>{\n    <span class="hljs-keyword">if</span>(root.left)dfs(root.left)\n    <span class="hljs-keyword">if</span>(prev &amp;&amp; root.val&lt;=prev.val){\n      <span class="hljs-keyword">if</span>(!s1)s1=prev\n      <span class="hljs-keyword">if</span>(s1)s2=root\n    }\n    prev=root\n    <span class="hljs-keyword">if</span>(root.right)dfs(root.right)\n  }\n  dfs(root)\n  <span class="hljs-keyword">let</span> t=s1.val\n  s1.val=s2.val\n  s2.val=t\n};\n</code></pre>\n'],titleSlug:"recover-binary-search-tree",hasThinking:!0,thinking:'<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u8fd9\u9053\u9898\u5173\u952e\u5c31\u662f\u5229\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u627e\u51fa\u4e0d\u7b26\u5408\u8981\u6c42\u76842\u4e2a\u8282\u70b9\u3002</p>\n<p>\u5176\u4e2d<code>O(n)</code>\u7684\u601d\u8def\u662f\uff0c\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u7136\u540e\u627e\u51fa\u9519\u8bef\u6392\u5e8f\u76842\u4e2a\u8282\u70b9\uff0c\u901a\u8fc7\u4ea4\u6362\u5373\u53ef\u3002</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */</span>\n<span class="hljs-keyword">var</span> recoverTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> aux=[]\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root</span>)</span>{\n    <span class="hljs-keyword">if</span>(root.left)dfs(root.left)\n    aux.push(root)\n    <span class="hljs-keyword">if</span>(root.right)dfs(root.right)\n  }\n  dfs(root)\n  <span class="hljs-keyword">let</span> s1,s2\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;aux.length<span class="hljs-number">-1</span>;i++){\n    <span class="hljs-keyword">if</span>(aux[i].val&gt;aux[i+<span class="hljs-number">1</span>].val){\n      <span class="hljs-keyword">if</span>(s1==<span class="hljs-literal">null</span>)s1=aux[i]\n      <span class="hljs-keyword">if</span>(s1!=<span class="hljs-literal">null</span>)s2=aux[i+<span class="hljs-number">1</span>]\n    }\n  }\n  <span class="hljs-keyword">let</span> t=s1.val\n  s1.val=s2.val\n  s2.val=t\n};\n</code></pre>\n<p><code>O(1)</code>\u7684\u601d\u8def\u4e5f\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u4e0d\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\uff0c\u800c\u662f3\u4e2a\u53d8\u91cf<code>prevNode,s1,s2</code>\uff0c\u5176\u4e2d<code>s1</code>\u548c<code>s2</code>\u4e3a\u6700\u7ec8\u4ea4\u6362\u7684\u8282\u70b9\u3002</p>\n<p><code>prevNode</code>\u4e3a\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u5f53\u53d1\u73b0\u987a\u5e8f\u4e0d\u5bf9\u65f6\uff0c\u8ba9<code>s1=prevNode, s2=root</code>\uff0c\u63a5\u7740\u904d\u5386\uff0c\u5982\u679c\u8fd8\u5b58\u5728\u987a\u5e8f\n\u4e0d\u5bf9\uff0c\u53ea\u9700\u8981\u66f4\u65b0<code>s2</code>\u5373\u53ef\u3002</p>\n',content:"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e24\u4e2a\u8282\u70b9\u88ab\u9519\u8bef\u5730\u4ea4\u6362\u3002</p>\n\n<p>\u8bf7\u5728\u4e0d\u6539\u53d8\u5176\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6062\u590d\u8fd9\u68f5\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,null,null,2]\n\n&nbsp;  1\n&nbsp; /\n&nbsp;3\n&nbsp; \\\n&nbsp;  2\n\n<strong>\u8f93\u51fa:</strong> [3,1,null,null,2]\n\n&nbsp;  3\n&nbsp; /\n&nbsp;1\n&nbsp; \\\n&nbsp;  2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n&nbsp;  /\n&nbsp; 2\n\n<strong>\u8f93\u51fa:</strong> [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n&nbsp;  /\n &nbsp;3</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u4f7f\u7528 O(<em>n</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content1005.fcf1a797.chunk.js.map