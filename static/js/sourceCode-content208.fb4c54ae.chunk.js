(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{243:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[]} values\n * @param {number[]} labels\n * @param {number} num_wanted\n * @param {number} use_limit\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> largestValsFromLabels = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">values, labels, num_wanted, use_limit</span>) </span>{\n  <span class="hljs-keyword">let</span> labelCount=<span class="hljs-built_in">Array</span>(<span class="hljs-number">20001</span>).fill(<span class="hljs-number">0</span>)\n  <span class="hljs-keyword">let</span> aux=[],res=<span class="hljs-number">0</span>\n  \n  <span class="hljs-keyword">let</span> pq=<span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b[<span class="hljs-number">0</span>]-a[<span class="hljs-number">0</span>])\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;values.length;i++){\n    aux[i]=[values[i],labels[i]]\n    pq.insert(aux[i])\n  }\n  <span class="hljs-keyword">while</span>(!pq.isEmpty() &amp;&amp; num_wanted&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> [maxV,lab]=pq.pop()\n    <span class="hljs-keyword">if</span>(labelCount[lab]&gt;=use_limit){\n      <span class="hljs-keyword">continue</span>\n    }<span class="hljs-keyword">else</span>{\n      labelCount[lab]++\n      res+=maxV\n      num_wanted--\n    }\n  }\n  <span class="hljs-keyword">return</span> res\n};\n\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PriorityQueue</span>(<span class="hljs-params">compareFunction</span>) </span>{\n  <span class="hljs-keyword">if</span> (!compareFunction) {\n    compareFunction = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b\n  }\n  <span class="hljs-keyword">let</span> heap = [<span class="hljs-literal">null</span>]\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swim</span>(<span class="hljs-params">idx</span>) </span>{\n    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">let</span> k = <span class="hljs-built_in">Math</span>.floor(idx / <span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span> (compareFunction(heap[idx], heap[k]) &lt; <span class="hljs-number">0</span>) {\n      swap(heap, idx, k)\n      idx = k\n      swim(idx)\n    }\n  }\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sink</span>(<span class="hljs-params">idx</span>) </span>{\n    <span class="hljs-keyword">let</span> k = <span class="hljs-built_in">Math</span>.floor(idx * <span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span> (k &gt;= heap.length) <span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">if</span> (k &lt; heap.length &amp;&amp; heap[k + <span class="hljs-number">1</span>] &amp;&amp; compareFunction(heap[k + <span class="hljs-number">1</span>], heap[k]) &lt; <span class="hljs-number">0</span>) k++\n    <span class="hljs-keyword">if</span> (compareFunction(heap[k], heap[idx]) &lt; <span class="hljs-number">0</span>) {\n      swap(heap, idx, k)\n      idx = k\n      sink(idx)\n    }\n  }\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span>(<span class="hljs-params">arr, i, j</span>) </span>{\n    <span class="hljs-keyword">let</span> temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  <span class="hljs-keyword">this</span>.insert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{\n    heap.push(v)\n    swim(heap.length - <span class="hljs-number">1</span>)\n  }\n  <span class="hljs-keyword">this</span>.pop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    swap(heap, <span class="hljs-number">1</span>, heap.length - <span class="hljs-number">1</span>)\n    <span class="hljs-keyword">let</span> v = heap.pop()\n    sink(<span class="hljs-number">1</span>)\n    <span class="hljs-keyword">return</span> v\n  }\n  <span class="hljs-keyword">this</span>.peek = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> heap[<span class="hljs-number">1</span>]\n  }\n  <span class="hljs-keyword">this</span>.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> heap.length - <span class="hljs-number">1</span>\n  }\n  <span class="hljs-keyword">this</span>.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> heap.length === <span class="hljs-number">1</span>\n  }\n}\n\n\n\n</code></pre>\n'],titleSlug:"largest-values-from-labels",hasThinking:!1,content:"<p>\u6211\u4eec\u6709\u4e00\u4e2a\u9879\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c&nbsp;<code>i</code>&nbsp;\u9879\u7684\u503c\u4e3a&nbsp;<code>values[i]</code>\uff0c\u6807\u7b7e\u4e3a&nbsp;<code>labels[i]</code>\u3002</p>\n\n<p>\u6211\u4eec\u4ece\u8fd9\u4e9b\u9879\u4e2d\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6&nbsp;<code>S</code>\uff0c\u8fd9\u6837\u4e00\u6765\uff1a</p>\n\n<ul>\n\t<li><code>|S| &lt;= num_wanted</code></li>\n\t<li>\u5bf9\u4e8e\u4efb\u610f\u7684\u6807\u7b7e <code>L</code>\uff0c\u5b50\u96c6 <code>S</code> \u4e2d\u6807\u7b7e\u4e3a <code>L</code>&nbsp;\u7684\u9879\u7684\u6570\u76ee\u603b\u6ee1\u8db3&nbsp;<code>&lt;= use_limit</code>\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u5b50\u96c6&nbsp;<code>S</code>&nbsp;\u7684\u6700\u5927\u53ef\u80fd\u7684&nbsp;<strong>\u548c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>values = [5,4,3,2,1], labels = [1,1,2,2,3], <code>num_wanted </code>= 3, use_limit = 1\n<strong>\u8f93\u51fa\uff1a</strong>9\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e09\u9879\u548c\u7b2c\u4e94\u9879\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>values = [5,4,3,2,1], labels = [1,3,3,3,2], <code>num_wanted </code>= 3, use_limit = 2\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u4e09\u9879\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 1\n<strong>\u8f93\u51fa\uff1a</strong>16\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\u548c\u7b2c\u56db\u9879\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 2\n<strong>\u8f93\u51fa\uff1a</strong>24\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u56db\u9879\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= values.length == labels.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= values[i], labels[i]&nbsp;&lt;= 20000</code></li>\n\t<li><code>1 &lt;= num_wanted, use_limit&nbsp;&lt;= values.length</code></li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content208.fb4c54ae.chunk.js.map