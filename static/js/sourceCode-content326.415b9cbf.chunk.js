(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{361:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> MyStack = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.queue1=[]\n  <span class="hljs-keyword">this</span>.queue2=[]\n  <span class="hljs-keyword">this</span>._top=<span class="hljs-literal">null</span>\n};\n\n<span class="hljs-comment">/**\n * Push element x onto stack. \n * @param {number} x\n * @return {void}\n */</span>\nMyStack.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>{\n  <span class="hljs-keyword">this</span>.queue1.push(x)\n  <span class="hljs-keyword">this</span>._top=x\n};\n\n<span class="hljs-comment">/**\n * Removes the element on top of the stack and returns that element.\n * @return {number}\n */</span>\nMyStack.prototype.pop = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  \n  <span class="hljs-keyword">while</span>(<span class="hljs-keyword">this</span>.queue1.length&gt;<span class="hljs-number">1</span>){\n    <span class="hljs-keyword">this</span>._top=<span class="hljs-keyword">this</span>.queue1.shift()\n    <span class="hljs-keyword">this</span>.queue2.push(<span class="hljs-keyword">this</span>._top)\n  }\n  \n  <span class="hljs-keyword">let</span> res= <span class="hljs-keyword">this</span>.queue1.shift()\n  <span class="hljs-keyword">while</span>(<span class="hljs-keyword">this</span>.queue2.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">this</span>.queue1.push(<span class="hljs-keyword">this</span>.queue2.shift())\n  }\n  <span class="hljs-keyword">return</span> res\n};\n\n<span class="hljs-comment">/**\n * Get the top element.\n * @return {number}\n */</span>\nMyStack.prototype.top = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>._top\n  <span class="hljs-comment">// while(this.queue1.length&gt;1){</span>\n  <span class="hljs-comment">//   this.queue2.push(this.queue1.shift())</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return this.queue1[0]</span>\n};\n\n<span class="hljs-comment">/**\n * Returns whether the stack is empty.\n * @return {boolean}\n */</span>\nMyStack.prototype.empty = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.queue2.length===<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.queue1.length===<span class="hljs-number">0</span>\n};\n\n<span class="hljs-comment">/** \n * Your MyStack object will be instantiated and called as such:\n * var obj = Object.create(MyStack).createNew()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */</span>\n</code></pre>\n'],titleSlug:"implement-stack-using-queues",hasThinking:!1,content:"<p>\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>push(x) -- \u5143\u7d20 x \u5165\u6808</li>\n\t<li>pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20</li>\n\t<li>top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20</li>\n\t<li>empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a</li>\n</ul>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f&nbsp;<code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, \u548c&nbsp;<code>is empty</code>&nbsp;\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002&nbsp;\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217&nbsp;, \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content326.415b9cbf.chunk.js.map