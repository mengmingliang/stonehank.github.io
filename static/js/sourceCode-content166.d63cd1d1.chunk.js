(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{201:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string[]} words\n */</span>\n<span class="hljs-keyword">var</span> StreamChecker = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">words</span>) </span>{\n  <span class="hljs-keyword">let</span> tire={}\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> word <span class="hljs-keyword">of</span> words){\n    <span class="hljs-keyword">let</span> t=tire\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;word.length;i++){\n      <span class="hljs-keyword">if</span>(t[word[i]]==<span class="hljs-literal">null</span>)t[word[i]]={}\n      <span class="hljs-keyword">if</span>(i===word.length<span class="hljs-number">-1</span>)t[word[i]].exact=<span class="hljs-literal">true</span>\n      t[word[i]].has=<span class="hljs-literal">false</span>\n      t=t[word[i]]\n    }\n  }\n  <span class="hljs-keyword">this</span>.tire=tire\n  <span class="hljs-keyword">this</span>.waiting=[]\n};\n\n<span class="hljs-comment">/** \n * @param {character} letter\n * @return {boolean}\n */</span>\nStreamChecker.prototype.query = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">letter</span>) </span>{\n  <span class="hljs-keyword">let</span> res=<span class="hljs-literal">false</span>,aux=[]\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">this</span>.waiting.length;i++){\n    <span class="hljs-keyword">let</span> t=<span class="hljs-keyword">this</span>.waiting[i]\n    <span class="hljs-keyword">if</span>(t[letter]!=<span class="hljs-literal">null</span>){\n      <span class="hljs-keyword">if</span>(t[letter].exact)res=<span class="hljs-literal">true</span>\n      aux.push(t[letter])\n    }\n  }\n  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.tire[letter]!=<span class="hljs-literal">null</span>){\n    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.tire[letter].exact)res=<span class="hljs-literal">true</span> \n    aux.push(<span class="hljs-keyword">this</span>.tire[letter])\n  }\n  <span class="hljs-keyword">this</span>.waiting=aux\n  <span class="hljs-keyword">return</span> res\n};\n\n<span class="hljs-comment">/** \n * Your StreamChecker object will be instantiated and called as such:\n * var obj = new StreamChecker(words)\n * var param_1 = obj.query(letter)\n */</span>\n</code></pre>\n'],titleSlug:"stream-of-characters",hasThinking:!1,content:"<p>\u6309\u4e0b\u8ff0\u8981\u6c42\u5b9e\u73b0 <code>StreamChecker</code> \u7c7b\uff1a</p>\n\n<ul>\n\t<li><code>StreamChecker(words)</code>\uff1a\u6784\u9020\u51fd\u6570\uff0c\u7528\u7ed9\u5b9a\u7684\u5b57\u8bcd\u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\u3002</li>\n\t<li><code>query(letter)</code>\uff1a\u5982\u679c\u5b58\u5728\u67d0\u4e9b <code>k &gt;= 1</code>\uff0c\u53ef\u4ee5\u7528\u67e5\u8be2\u7684\u6700\u540e <code>k</code>\u4e2a\u5b57\u7b26\uff08\u6309\u4ece\u65e7\u5230\u65b0\u987a\u5e8f\uff0c\u5305\u62ec\u521a\u521a\u67e5\u8be2\u7684\u5b57\u6bcd\uff09\u62fc\u5199\u51fa\u7ed9\u5b9a\u5b57\u8bcd\u8868\u4e2d\u7684\u67d0\u4e00\u5b57\u8bcd\u65f6\uff0c\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>StreamChecker streamChecker = new StreamChecker([&quot;cd&quot;,&quot;f&quot;,&quot;kl&quot;]); // \u521d\u59cb\u5316\u5b57\u5178\nstreamChecker.query(&#39;a&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;b&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;c&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;d&#39;);          // \u8fd4\u56de true\uff0c\u56e0\u4e3a &#39;cd&#39; \u5728\u5b57\u8bcd\u8868\u4e2d\nstreamChecker.query(&#39;e&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;f&#39;);          // \u8fd4\u56de true\uff0c\u56e0\u4e3a &#39;f&#39; \u5728\u5b57\u8bcd\u8868\u4e2d\nstreamChecker.query(&#39;g&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;h&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;i&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;j&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;k&#39;);          // \u8fd4\u56de false\nstreamChecker.query(&#39;l&#39;);          // \u8fd4\u56de true\uff0c\u56e0\u4e3a &#39;kl&#39; \u5728\u5b57\u8bcd\u8868\u4e2d\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 2000</code></li>\n\t<li>\u5b57\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u5f85\u67e5\u9879\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u5f85\u67e5\u9879\u6700\u591a 40000 \u4e2a\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content166.d63cd1d1.chunk.js.map