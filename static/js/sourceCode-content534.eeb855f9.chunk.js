(window.webpackJsonp=window.webpackJsonp||[]).push([[509],{569:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} n\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> smallestGoodBase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) </span>{\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBaseStr</span>(<span class="hljs-params">n,base</span>)</span>{\n      <span class="hljs-keyword">let</span> m=+n, x=+base, baseStr=<span class="hljs-string">\'\'</span>\n      <span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">0</span>){\n         baseStr=m%x+baseStr\n         m=<span class="hljs-built_in">Math</span>.floor(m/x)\n      }\n      <span class="hljs-keyword">return</span> baseStr      \n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOriFrombase</span>(<span class="hljs-params">base,l</span>)</span>{\n      <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=l<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--){\n        res+=<span class="hljs-built_in">Math</span>.pow(base,i)\n      }\n      <span class="hljs-keyword">return</span> res\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValid</span>(<span class="hljs-params">baseStr</span>)</span>{\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> baseStr){\n        <span class="hljs-keyword">if</span>(n!==<span class="hljs-string">"1"</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n      }\n      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createValidStr</span>(<span class="hljs-params">len</span>)</span>{\n      <span class="hljs-keyword">return</span> <span class="hljs-string">\'1\'</span>.repeat(len)\n    }\n\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">10</span>;i++){\n      <span class="hljs-keyword">let</span> baseStr=getBaseStr(n,i),\n          isGood=isValid(baseStr)\n      <span class="hljs-keyword">if</span>(isGood)<span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>+i\n    }\n    <span class="hljs-keyword">let</span> nn=+n,\n        len=n.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=len;i&gt;=<span class="hljs-number">2</span>;i--){\n      <span class="hljs-keyword">let</span> curStr=createValidStr(i)\n      <span class="hljs-keyword">let</span> lo=<span class="hljs-number">11</span>,hi=nn<span class="hljs-number">-1</span>\n      <span class="hljs-keyword">while</span>(lo&lt;hi){\n        <span class="hljs-keyword">let</span> mid=<span class="hljs-built_in">Math</span>.floor((lo+hi)/<span class="hljs-number">2</span>)\n        <span class="hljs-keyword">let</span> s=getOriFrombase(mid,i)\n        <span class="hljs-keyword">if</span>(s&lt;nn)lo=mid+<span class="hljs-number">1</span>\n        <span class="hljs-keyword">else</span> hi=mid\n      }\n      <span class="hljs-keyword">let</span> finalS=getBaseStr(n,lo)\n      <span class="hljs-keyword">if</span>(isValid(finalS))<span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>+lo\n    }\n};\n</code></pre>\n'],titleSlug:"smallest-good-base",hasThinking:!1,content:"<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6574\u6570 n, \u5982\u679cn\u7684k\uff08k&gt;=2\uff09\u8fdb\u5236\u6570\u7684\u6240\u6709\u6570\u4f4d\u5168\u4e3a1\uff0c\u5219\u79f0&nbsp;k\uff08k&gt;=2\uff09\u662f n \u7684\u4e00\u4e2a<em><strong>\u597d\u8fdb\u5236</strong></em>\u3002</p>\n\n<p>\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7ed9\u51fa n, \u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de n \u7684\u6700\u5c0f\u597d\u8fdb\u5236\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;13&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;3&quot;\n<strong>\u89e3\u91ca\uff1a</strong>13 \u7684 3 \u8fdb\u5236\u662f 111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;4681&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;8&quot;\n<strong>\u89e3\u91ca\uff1a</strong>4681 \u7684 8 \u8fdb\u5236\u662f 11111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;1000000000000000000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;999999999999999999&quot;\n<strong>\u89e3\u91ca\uff1a</strong>1000000000000000000 \u7684 999999999999999999 \u8fdb\u5236\u662f 11\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>n\u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;[3, 10^18]\u3002</li>\n\t<li>\u8f93\u5165\u603b\u662f\u6709\u6548\u4e14\u6ca1\u6709\u524d\u5bfc 0\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content534.eeb855f9.chunk.js.map