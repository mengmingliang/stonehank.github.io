(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{342:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> Trie = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.tire={}\n};\n\n<span class="hljs-comment">/**\n * Inserts a word into the trie. \n * @param {string} word\n * @return {void}\n */</span>\nTrie.prototype.insert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{\n  _insert(<span class="hljs-number">0</span>,<span class="hljs-keyword">this</span>.tire)\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_insert</span>(<span class="hljs-params">id,t</span>)</span>{\n    <span class="hljs-keyword">if</span>(id===word.length)<span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">if</span>(t[word[id]]==<span class="hljs-literal">null</span>){\n      t[word[id]]={}\n    }\n    <span class="hljs-keyword">if</span>(id===word.length<span class="hljs-number">-1</span>){\n      t[word[id]].exact=<span class="hljs-literal">true</span>\n    }\n    _insert(id+<span class="hljs-number">1</span>,t[word[id]])\n  }\n};\n\n<span class="hljs-comment">/**\n * Returns if the word is in the trie. \n * @param {string} word\n * @return {boolean}\n */</span>\nTrie.prototype.search = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{\n  <span class="hljs-keyword">return</span> _search(<span class="hljs-number">0</span>,<span class="hljs-keyword">this</span>.tire)\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_search</span>(<span class="hljs-params">id,t</span>)</span>{\n    <span class="hljs-keyword">if</span>(id===word.length)<span class="hljs-keyword">return</span> !!t.exact\n    <span class="hljs-keyword">if</span>(t[word[id]]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">return</span> _search(id+<span class="hljs-number">1</span>,t[word[id]])\n  }\n};\n\n<span class="hljs-comment">/**\n * Returns if there is any word in the trie that starts with the given prefix. \n * @param {string} prefix\n * @return {boolean}\n */</span>\nTrie.prototype.startsWith = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prefix</span>) </span>{\n  <span class="hljs-keyword">return</span> _startsWith(<span class="hljs-number">0</span>,<span class="hljs-keyword">this</span>.tire)\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_startsWith</span>(<span class="hljs-params">id,t</span>)</span>{\n    <span class="hljs-keyword">if</span>(id===prefix.length)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    <span class="hljs-keyword">if</span>(t[prefix[id]]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">return</span> _startsWith(id+<span class="hljs-number">1</span>,t[prefix[id]])\n  }  \n};\n\n<span class="hljs-comment">/** \n * Your Trie object will be instantiated and called as such:\n * var obj = Object.create(Trie).createNew()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */</span>\n</code></pre>\n'],titleSlug:"implement-trie-prefix-tree",hasThinking:!1,content:"<p>\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b&nbsp;<code>insert</code>,&nbsp;<code>search</code>, \u548c&nbsp;<code>startsWith</code>&nbsp;\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // \u8fd4\u56de true\ntrie.search(&quot;app&quot;);     // \u8fd4\u56de false\ntrie.startsWith(&quot;app&quot;); // \u8fd4\u56de true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // \u8fd4\u56de true</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>&nbsp;\u6784\u6210\u7684\u3002</li>\n\t<li>\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n"}}}]);
//# sourceMappingURL=sourceCode-content307.e026aecc.chunk.js.map