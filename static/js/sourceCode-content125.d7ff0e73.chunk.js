(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{1175:function(s){s.exports={content:'<p>useReducer</p>\n<p>\u6a21\u62dfreducer</p>\n<p><code>const [state, dispatch] = useReducer(reducer, initialState, initialAction);</code></p>\n<ul>\n<li>\u53c2\u65701<code>reducer</code></li>\n</ul>\n<p>\u4e0e<code>redux</code>\u5199\u6cd5\u76f8\u6bd4\uff0c\u4e0d\u9700\u8981\u9ed8\u8ba4\u8fd4\u56de\u503c</p>\n<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'reset\'</span>:\n      <span class="hljs-keyword">return</span> initialState;\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'increment\'</span>:\n      <span class="hljs-keyword">return</span> {<span class="hljs-attr">count</span>: state.count + <span class="hljs-number">1</span>};\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'decrement\'</span>:\n      <span class="hljs-keyword">return</span> {<span class="hljs-attr">count</span>: state.count - <span class="hljs-number">1</span>};\n  }\n}\n</code></pre>\n<ul>\n<li>\u53c2\u65702 <code>initialState</code></li>\n</ul>\n<p>\u9ed8\u8ba4\u6e32\u67d3\u540e\u7684\u521d\u59cb\u503c\uff0c\u6709\u70b9\u7c7b\u4f3c<code>componentDidMount</code>\uff0c\u7b2c\u4e00\u6b21\u6267\u884c\u7684\u65f6\u5019\u89e6\u53d1</p>\n<ul>\n<li>\u53c2\u65703 <code>initialAction</code></li>\n</ul>\n<p>\u5f53\u6267\u884c\u89e6\u53d1\u540e\uff0c\u4f1a\u7acb\u523b\u6267\u884c\u8fd9\u4e2aaction\u3002</p>\n<p>\u5b98\u7f51\u4f8b\u5b50\uff1a</p>\n<pre class="hljs"><code><span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;\n<span class="hljs-keyword">import</span> React, { Component, useState,useReducer } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n\n<span class="hljs-keyword">const</span> initialState = { <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> };\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reducer</span>(<span class="hljs-params">state, action</span>) </span>{\n  <span class="hljs-keyword">switch</span> (action.type) {\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'reset\'</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">count</span>: action.payload };\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'increment\'</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">count</span>: state.count + <span class="hljs-number">1</span> };\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'decrement\'</span>:\n      <span class="hljs-keyword">return</span> { <span class="hljs-attr">count</span>: state.count - <span class="hljs-number">1</span> };\n  }\n}\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params">{ initialCount }</span>) </span>{\n  <span class="hljs-keyword">const</span> [state, dispatch] = useReducer(\n    reducer,\n    initialState,\n    { <span class="hljs-attr">type</span>: <span class="hljs-string">\'reset\'</span>, <span class="hljs-attr">payload</span>: initialCount },\n  );\n  <span class="hljs-keyword">return</span> (\n    &lt;React.Fragment&gt;\n      Count: {state.count}\n      &lt;button\n        onClick={() =&gt; dispatch({ type: \'reset\', payload: initialCount||initialState.count })}&gt;\n        Reset\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \'increment\' })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \'decrement\' })}&gt;-&lt;/button&gt;\n    &lt;/React.Fragment&gt;\n  );\n}\nrender(&lt;Counter initialCount={5} /&gt;, document.getElementById("root"));\n</code></pre>\n<ol>\n<li>\u8fd9\u91cc<code>Counter</code>\u63a5\u53d7\u4e00\u4e2a<code>initialCount</code>\u7684prop\uff0c\u6b64\u5904\u8bbe\u5b9a\u4e3a5\u3002</li>\n<li>\u8fd9\u91cc\u7b2c2\u4e2a\u53c2\u6570<code>initialState</code>\u8bbe\u7f6e\u4e3a<code>{ count: 0 }</code>\uff0c\u8bf4\u660e\u521d\u59cb\u52a0\u8f7d\u540e\uff0c\u663e\u793a\u4e3a0\u3002</li>\n<li>\u8fd9\u91cc\u7b2c3\u4e2a\u53c2\u6570<code>initialAction</code>\u662f<code>{ type: \'reset\', payload: initialCount }</code>\uff0c\u8bf4\u660e\u5f53\u7ec4\u4ef6\u52a0\u8f7d\u5b8c\u6bd5\uff0c\u4f1a\u7acb\u523b\u6267\u884c\u8fd9\u4e2aaction\uff0c\u4e5f\u5c31\u662f\u6267\u884c<code>reset</code>\uff0c\u7136\u540e\u663e\u793a\u4f1a\u53d8\u4e3a5\u3002</li>\n<li>\u56e0\u6b64\u7ec4\u4ef6\u52a0\u8f7d\uff0c\u663e\u793a5\u3002</li>\n</ol>\n<p><a href="https://codesandbox.io/s/48pn6o407">\u4ee5\u4e0a\u4ee3\u7801\u5728\u7ebf</a></p>\n<blockquote>\n<p>\u53ef\u4ee5\u642d\u914d<code>useContext</code>\u6765\u4f20\u9012\u5230\u6df1\u5c42\u5b50\u7ec4\u4ef6(\u4f20\u9012<code>dispatch</code>)\u3002</p>\n</blockquote>\n<p><a href="https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down">\u5b98\u7f51\u4f8b\u5b50:https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down</a></p>\n'}}}]);
//# sourceMappingURL=sourceCode-content125.d7ff0e73.chunk.js.map