(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{340:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {ListNode} head\n * @return {ListNode}\n */</span>\n<span class="hljs-keyword">var</span> reverseList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iteratively</span> (<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">let</span> prev=<span class="hljs-literal">null</span>\n    <span class="hljs-keyword">while</span>(node){\n      <span class="hljs-keyword">let</span> next=node.next\n      node.next=prev\n      prev=node\n      node=next\n    }\n    <span class="hljs-keyword">return</span> prev\n  }\n\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursively</span> (<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">if</span>(!node || !node.next)<span class="hljs-keyword">return</span> node\n    <span class="hljs-keyword">let</span> r=recursively(node.next)\n    node.next.next=node\n    node.next=<span class="hljs-literal">null</span>\n    <span class="hljs-keyword">return</span> r\n  }\n\n  <span class="hljs-keyword">return</span> recursively(head)\n};\n</code></pre>\n'],titleSlug:"reverse-linked-list",hasThinking:!1,content:"<p>\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>\u8f93\u51fa:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content305.77fc3551.chunk.js.map