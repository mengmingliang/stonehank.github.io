(window.webpackJsonp=window.webpackJsonp||[]).push([[452],{518:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DoubleLink</span>(<span class="hljs-params">val,count</span>)</span>{\n  <span class="hljs-keyword">this</span>.val=val\n  <span class="hljs-keyword">this</span>.count=count\n  <span class="hljs-keyword">this</span>.next=<span class="hljs-literal">null</span>\n  <span class="hljs-keyword">this</span>.prev=<span class="hljs-literal">null</span>\n}\n\n<span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> AllOne = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">let</span> head=<span class="hljs-keyword">new</span> DoubleLink(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>),\n      tail=<span class="hljs-keyword">new</span> DoubleLink(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)\n  head.next=tail\n  tail.prev=head\n  <span class="hljs-keyword">this</span>.insert=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node,addNode</span>)</span>{\n    <span class="hljs-keyword">let</span> nxt=node.next\n    node.next=addNode\n    addNode.prev=node\n    addNode.next=nxt\n    nxt.prev=addNode\n  }\n  <span class="hljs-keyword">this</span>.remove=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">let</span> pre=node.prev,\n        nxt=node.next\n    pre.next=nxt\n    nxt.prev=pre\n    node.next=<span class="hljs-literal">null</span>\n    node.prev=<span class="hljs-literal">null</span>\n  }\n  <span class="hljs-keyword">this</span>.addHead=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">this</span>.insert(head,node)\n  }\n  <span class="hljs-keyword">this</span>.addTail=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)</span>{\n    <span class="hljs-keyword">this</span>.insert(tail.prev,node)\n  }\n  <span class="hljs-keyword">this</span>.head=head\n  <span class="hljs-keyword">this</span>.tail=tail\n  <span class="hljs-keyword">this</span>.key2Node={}\n};\n\n<span class="hljs-comment">/**\n * Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.inc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>{\n  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.key2Node[key]==<span class="hljs-literal">null</span>){\n    <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">this</span>.head.next\n    <span class="hljs-keyword">if</span>(node.count===<span class="hljs-number">1</span>){\n      node.val.set(key,key)\n      <span class="hljs-keyword">this</span>.key2Node[key]=node\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> newNode=<span class="hljs-keyword">new</span> DoubleLink(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(),<span class="hljs-number">1</span>)\n      newNode.val.set(key,key)\n      <span class="hljs-keyword">this</span>.addHead(newNode)\n      <span class="hljs-keyword">this</span>.key2Node[key]=newNode\n    }\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">this</span>.key2Node[key]\n    <span class="hljs-keyword">let</span> nxtNode=node.next\n    node.val.delete(key)\n    <span class="hljs-keyword">if</span>(nxtNode.count===node.count+<span class="hljs-number">1</span>){\n      <span class="hljs-keyword">let</span> nxtMap=nxtNode.val\n      nxtMap.set(key,key)\n      <span class="hljs-keyword">this</span>.key2Node[key]=nxtNode\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> newNode=<span class="hljs-keyword">new</span> DoubleLink(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(),node.count+<span class="hljs-number">1</span>)\n      newNode.val.set(key,key)\n      <span class="hljs-keyword">this</span>.insert(node,newNode)\n      <span class="hljs-keyword">this</span>.key2Node[key]=newNode\n    }\n    <span class="hljs-keyword">if</span>(node.val.size===<span class="hljs-number">0</span>)<span class="hljs-keyword">this</span>.remove(node)\n  }\n};\n\n<span class="hljs-comment">/**\n * Decrements an existing key by 1. If Key\'s value is 1, remove it from the data structure. \n * @param {string} key\n * @return {void}\n */</span>\nAllOne.prototype.dec = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>{\n  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.key2Node[key]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span>\n  <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">this</span>.key2Node[key]\n  <span class="hljs-keyword">let</span> preNode=node.prev\n  node.val.delete(key)\n  <span class="hljs-keyword">if</span>(node.val.size===<span class="hljs-number">0</span>)<span class="hljs-keyword">this</span>.remove(node)\n  <span class="hljs-keyword">if</span>(node.count===<span class="hljs-number">1</span>){\n    <span class="hljs-keyword">this</span>.key2Node[key]=<span class="hljs-literal">null</span>\n    <span class="hljs-keyword">return</span>\n  }\n  <span class="hljs-keyword">if</span>(preNode.count===node.count<span class="hljs-number">-1</span>){\n    preNode.val.set(key,key)\n    <span class="hljs-keyword">this</span>.key2Node[key]=preNode\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">let</span> newNode=<span class="hljs-keyword">new</span> DoubleLink(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(),node.count<span class="hljs-number">-1</span>)\n    newNode.val.set(key,key)\n    <span class="hljs-keyword">this</span>.insert(preNode,newNode)\n    <span class="hljs-keyword">this</span>.key2Node[key]=newNode    \n  }\n};\n\n<span class="hljs-comment">/**\n * Returns one of the keys with maximal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMaxKey = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">let</span> maxNode=<span class="hljs-keyword">this</span>.tail.prev,\n      maxMap=maxNode.val\n  <span class="hljs-keyword">if</span>(!maxMap)<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>\n  <span class="hljs-keyword">return</span> maxMap.entries().next().value[<span class="hljs-number">0</span>]\n};\n\n<span class="hljs-comment">/**\n * Returns one of the keys with Minimal value.\n * @return {string}\n */</span>\nAllOne.prototype.getMinKey = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">let</span> minNode=<span class="hljs-keyword">this</span>.head.next,\n      minMap=minNode.val\n  <span class="hljs-keyword">if</span>(!minMap)<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>\n  <span class="hljs-keyword">return</span> minMap.entries().next().value[<span class="hljs-number">0</span>]  \n};\n\n<span class="hljs-comment">/** \n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */</span>\n</code></pre>\n'],titleSlug:"all-oone-data-structure",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u8fd9\u91cc\u5982\u679c\u4e0d\u8981\u6c42<code>O(1)</code>\uff0c\u90a3\u5c31\u5f88\u7b80\u5355\uff0c\u7528\u4e00\u4e2a<code>map</code>\uff0c\u4fdd\u5b58\u6bcf\u4e2a<code>key</code>\u7684\u6b21\u6570\uff0c\u5f53\u6b21\u6570\u4e3a<code>0</code>\uff0c\u5220\u9664\u3002</p>\n<p><code>getMax</code>\uff0c\u7ebf\u6027\u67e5\u627e\u6700\u5927\u7684\uff1b<code>getMin</code>\u7ebf\u6027\u67e5\u627e\u6700\u5c0f\u7684\u3002</p>\n<p>\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>O(map.size)</code>\u3002</p>\n<p>\u5982\u679c\u8981\u6c42<code>O(1)</code>\uff0c\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4fdd\u8bc1\u5b83\u7684\u5934\u90e8\u662f\u51fa\u73b0\u6b21\u6570\u6700\u5c0f\u7684\u96c6\u5408\uff0c\u5c3e\u90e8\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u96c6\u5408\u3002</p>\n<p>\u5f53<code>getMax</code>\u7684\u65f6\u5019\u53ea\u9700\u8981\u8fd4\u56de\u6700\u540e\u4e00\u7ec4\u7684\u4efb\u610f\u503c\uff0c\u5f53<code>getMin</code>\u65f6\uff0c\u8fd4\u56de\u6700\u524d\u4e00\u7ec4\u7684\u4efb\u610f\u503c\u3002</p>\n<p>\u5982\u679c\u9700\u8981\u4fdd\u6301\u8fd9\u79cd\u7ed3\u6784\uff0c\u90a3\u4e48\u9700\u8981\u7528\u5230<code>\u67e5\u627e</code>\u96c6\u5408\u3001<code>\u589e\u52a0</code>\u96c6\u5408\u4ee5\u53ca<code>\u5220\u9664</code>\u96c6\u5408\uff0c\u540c\u65f6\u8fd8\u6709\u96c6\u5408\u5185\u90e8\u7684<code>\u67e5\u627e\uff0c\u589e\u52a0\uff0c\u5220\u9664</code>key\u3002</p>\n<p>\u96c6\u5408\u5185\u90e8\u4f7f\u7528<code>map</code>\u53ef\u4ee5\u5904\u7406\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u9700\u8981\u7528<code>\u53cc\u5411\u94fe\u8868</code>\u6784\u6210\uff0c\u5e76\u4e14\u989d\u5916\u4e00\u4e2a<code>hash</code>\u8ddf\u8e2a\u6bcf\u4e2a<code>key</code>\u5bf9\u5e94\u7684\u96c6\u5408(\u53cc\u5411\u94fe\u8868<code>node</code>)\u5f15\u7528\u3002</p>\n<p>\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a</p>\n<pre class=\"hljs\"><code>key2Node: { 'a':DoubleLink,'b':DoubleLink,... }\nDoubleLink&lt;Head&gt; &lt;===&gt; DoubleLink&lt;count:1,val:Map&gt; &lt;===&gt; ... &lt;===&gt; DoubleLink&lt;count:5,val:Map&gt; &lt;===&gt; DoubleLink&lt;Tail&gt;\n</code></pre>\n<p>\u6b64\u5904\u7684<code>DoubleLink</code>\u7684<code>Head</code>\u548c<code>Tail</code>\u662f\u865a\u62df\u7684\u4e00\u4e2a\u5934\u90e8\u548c\u5c3e\u90e8\uff0c\u5b9a\u4e49<code>\u53cc\u5411\u94fe\u8868</code>\u7684<code>\u5220\u9664</code>\u548c<code>\u589e\u52a0</code>\u65b9\u6cd5\u662f\u4e0d\u9700\u8981\u989d\u5916\u5904\u7406\u8fb9\u754c\u95ee\u9898\u3002</p>\n",content:"<p>\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>Inc(key) - \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u503c\u4e3a 1 \u7684 key\u3002\u6216\u8005\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u589e\u52a0\u4e00\uff0c\u4fdd\u8bc1 key \u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>Dec(key) - \u5982\u679c\u8fd9\u4e2a key \u7684\u503c\u662f 1\uff0c\u90a3\u4e48\u628a\u4ed6\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u79fb\u9664\u6389\u3002\u5426\u8005\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u503c\u51cf\u4e00\u3002\u5982\u679c\u8fd9\u4e2a key \u4e0d\u5b58\u5728\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002key \u4fdd\u8bc1\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>GetMaxKey() - \u8fd4\u56de key \u4e2d\u503c\u6700\u5927\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n\t<li>GetMinKey() - \u8fd4\u56de key \u4e2d\u503c\u6700\u5c0f\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n</ol>\n\n<p>\u6311\u6218\uff1a\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\u6240\u6709\u64cd\u4f5c\u3002</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content483.60e7a81d.chunk.js.map