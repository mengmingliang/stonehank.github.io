(window.webpackJsonp=window.webpackJsonp||[]).push([[613],{663:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} t\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> tree2str = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) </span>{\n  <span class="hljs-keyword">if</span>(!t)<span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n  <span class="hljs-keyword">let</span> str=t.val+<span class="hljs-string">\'\'</span>\n  <span class="hljs-keyword">if</span>(!t.left &amp;&amp; !t.right)<span class="hljs-keyword">return</span> str\n  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!t.left &amp;&amp; t.right)str+=<span class="hljs-string">"()"</span>+<span class="hljs-string">"("</span>+tree2str(t.right)+<span class="hljs-string">")"</span>\n  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!t.right &amp;&amp; t.left)str+=<span class="hljs-string">"("</span>+tree2str(t.left)+<span class="hljs-string">")"</span>\n  <span class="hljs-keyword">else</span> str+=<span class="hljs-string">"("</span>+tree2str(t.left)+<span class="hljs-string">")"</span>+<span class="hljs-string">"("</span>+tree2str(t.right)+<span class="hljs-string">")"</span>\n  <span class="hljs-keyword">return</span> str\n};\n</code></pre>\n'],titleSlug:"construct-string-from-binary-tree",hasThinking:!1,content:"<p>\u4f60\u9700\u8981\u91c7\u7528\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u5c06\u4e00\u4e2a\u4e8c\u53c9\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u7531\u62ec\u53f7\u548c\u6574\u6570\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7a7a\u8282\u70b9\u5219\u7528\u4e00\u5bf9\u7a7a\u62ec\u53f7 &quot;()&quot; \u8868\u793a\u3002\u800c\u4e14\u4f60\u9700\u8981\u7701\u7565\u6240\u6709\u4e0d\u5f71\u54cd\u5b57\u7b26\u4e32\u4e0e\u539f\u59cb\u4e8c\u53c9\u6811\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u7684\u7a7a\u62ec\u53f7\u5bf9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u539f\u672c\u5c06\u662f&ldquo;1(2(4)())(3())&rdquo;\uff0c\n\u5728\u4f60\u7701\u7565\u6240\u6709\u4e0d\u5fc5\u8981\u7684\u7a7a\u62ec\u53f7\u5bf9\u4e4b\u540e\uff0c\n\u5b83\u5c06\u662f&ldquo;1(2(4))(3)&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2()(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u548c\u7b2c\u4e00\u4e2a\u793a\u4f8b\u76f8\u4f3c\uff0c\n\u9664\u4e86\u6211\u4eec\u4e0d\u80fd\u7701\u7565\u7b2c\u4e00\u4e2a\u5bf9\u62ec\u53f7\u6765\u4e2d\u65ad\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u3002\n</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content628.c3aaee52.chunk.js.map