(window.webpackJsonp=window.webpackJsonp||[]).push([[594],{645:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number} m\n * @param {number} n\n * @param {number} N\n * @param {number} i\n * @param {number} j\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> findPaths = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">m, n, N, x,y</span>) </span>{\n  <span class="hljs-keyword">let</span> dp=[]\n  <span class="hljs-keyword">let</span> MOD=<span class="hljs-number">1000000007</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;m;i++){\n    dp[i]=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;n;j++){\n      <span class="hljs-keyword">if</span>(i===x &amp;&amp; j===y)dp[i][j]=<span class="hljs-number">1</span>\n      <span class="hljs-keyword">else</span> dp[i][j]=<span class="hljs-number">0</span>\n    }\n  }\n  <span class="hljs-keyword">let</span> temp\n  <span class="hljs-keyword">let</span> moves=[[<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]\n  <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k=<span class="hljs-number">0</span>;k&lt;N;k++){\n    <span class="hljs-keyword">let</span> check=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;dp.length;i++){\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;dp[i].length;j++){\n        <span class="hljs-keyword">if</span>(dp[i][j]&gt;<span class="hljs-number">0</span>)check.push([i,j])\n      }\n    }\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> s=<span class="hljs-number">0</span>;s&lt;check.length;s++){\n      <span class="hljs-keyword">let</span> [i,j]=check[s]\n      <span class="hljs-keyword">let</span> count=dp[i][j]\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> m <span class="hljs-keyword">of</span> moves){\n        <span class="hljs-keyword">let</span> [deX,deY]=m\n        <span class="hljs-keyword">let</span> newX=i+deX,newY=j+deY\n        <span class="hljs-keyword">if</span>(newX&lt;<span class="hljs-number">0</span> || newX&gt;=dp.length)res+=count % MOD\n        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newY&lt;<span class="hljs-number">0</span> || newY&gt;=dp[i].length)res+=count % MOD\n        <span class="hljs-keyword">else</span> {\n          dp[newX][newY]+=count % MOD\n        }\n      }\n      dp[i][j]=<span class="hljs-number">0</span>\n    }\n  }\n  <span class="hljs-keyword">return</span> res  % MOD\n};\n</code></pre>\n'],titleSlug:"out-of-boundary-paths",hasThinking:!1,content:'<p>\u7ed9\u5b9a\u4e00\u4e2a <strong>m &times; n </strong>\u7684\u7f51\u683c\u548c\u4e00\u4e2a\u7403\u3002\u7403\u7684\u8d77\u59cb\u5750\u6807\u4e3a&nbsp;<strong>(i,j)</strong>&nbsp;\uff0c\u4f60\u53ef\u4ee5\u5c06\u7403\u79fb\u5230<strong>\u76f8\u90bb</strong>\u7684\u5355\u5143\u683c\u5185\uff0c\u6216\u8005\u5f80\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u79fb\u52a8\u4f7f\u7403\u7a7f\u8fc7\u7f51\u683c\u8fb9\u754c\u3002\u4f46\u662f\uff0c\u4f60<strong>\u6700\u591a</strong>\u53ef\u4ee5\u79fb\u52a8&nbsp;<strong>N&nbsp;</strong>\u6b21\u3002\u627e\u51fa\u53ef\u4ee5\u5c06\u7403\u79fb\u51fa\u8fb9\u754c\u7684\u8def\u5f84\u6570\u91cf\u3002\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8fd4\u56de \u7ed3\u679c mod 10<sup>9</sup>&nbsp;+ 7 \u7684\u503c\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<strong>\u8f93\u51fa:</strong> 6\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_1.png" style="width: 100%; max-width: 400px">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<strong>\u8f93\u51fa:</strong> 12\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_2.png" style="width: 100%; max-width: 400px">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u7403\u4e00\u65e6\u51fa\u754c\uff0c\u5c31\u4e0d\u80fd\u518d\u88ab\u79fb\u52a8\u56de\u7f51\u683c\u5185\u3002</li>\r\n\t<li>\u7f51\u683c\u7684\u957f\u5ea6\u548c\u9ad8\u5ea6\u5728 [1,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n\t<li>N \u5728 [0,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n</ol>'}}}]);
//# sourceMappingURL=sourceCode-content610.131469eb.chunk.js.map