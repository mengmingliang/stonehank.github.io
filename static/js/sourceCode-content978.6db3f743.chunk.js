(window.webpackJsonp=window.webpackJsonp||[]).push([[1e3],{1013:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> isUnivalTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n    <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">let</span> val=root.val\n    <span class="hljs-keyword">let</span> flag=<span class="hljs-literal">true</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">node</span>)</span>{\n        <span class="hljs-keyword">if</span>(!flag)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n        <span class="hljs-keyword">if</span>(node.val!==val)<span class="hljs-keyword">return</span> flag=<span class="hljs-literal">false</span>\n        <span class="hljs-keyword">if</span>(node.left)dfs(node.left)\n        <span class="hljs-keyword">if</span>(node.right)dfs(node.right)\n    }\n    dfs(root)\n    <span class="hljs-keyword">return</span> flag\n};\n</code></pre>\n'],titleSlug:"univalued-binary-tree",hasThinking:!1,content:'<p>\u5982\u679c\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u4e48\u8be5\u4e8c\u53c9\u6811\u5c31\u662f<em>\u5355\u503c</em>\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u53ea\u6709\u7ed9\u5b9a\u7684\u6811\u662f\u5355\u503c\u4e8c\u53c9\u6811\u65f6\uff0c\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png" style="height: 159px; width: 200px;"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,1,1,null,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png" style="height: 158px; width: 200px;"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2,5,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u8282\u70b9\u6570\u8303\u56f4\u662f&nbsp;<code>[1, 100]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u8303\u56f4\u4e3a&nbsp;<code>[0, 99]</code>&nbsp;\u3002</li>\n</ol>\n'}}}]);
//# sourceMappingURL=sourceCode-content978.6db3f743.chunk.js.map