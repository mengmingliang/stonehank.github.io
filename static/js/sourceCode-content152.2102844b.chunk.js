(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{187:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class="hljs-keyword">var</span> levelOrder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> res=[]\n  dfs(root,<span class="hljs-number">0</span>)\n  <span class="hljs-keyword">return</span> res\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">root,level</span>)</span>{\n    <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">if</span>(level===res.length){\n      res.push([])\n    }\n    res[level].push(root.val)\n    <span class="hljs-keyword">if</span>(root.left)dfs(root.left,level+<span class="hljs-number">1</span>)\n    <span class="hljs-keyword">if</span>(root.right)dfs(root.right,level+<span class="hljs-number">1</span>)\n  }\n};\n</code></pre>\n'],titleSlug:"binary-tree-level-order-traversal",hasThinking:!0,thinking:'<hr>\n<p>\u8fed\u4ee3(<code>bfs</code>)\uff1a</p>\n<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {number[][]}\n */</span>\n<span class="hljs-keyword">var</span> levelOrder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> []\n  <span class="hljs-keyword">let</span> res=[]\n  <span class="hljs-keyword">let</span> aux=[root]\n  <span class="hljs-keyword">while</span>(aux.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> len=aux.length\n    <span class="hljs-keyword">let</span> vals=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> node=aux.shift()\n      vals.push(node.val)\n      <span class="hljs-keyword">if</span>(node.left)aux.push(node.left)\n      <span class="hljs-keyword">if</span>(node.right)aux.push(node.right)\n    }\n    res.push(vals)\n  }\n  <span class="hljs-keyword">return</span> res\n};\n</code></pre>\n<p>\u9012\u5f52(<code>dfs</code>)\uff1a</p>\n',content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002</p>\n\n<p>\u4f8b\u5982:<br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>\u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a</p>\n\n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content152.2102844b.chunk.js.map