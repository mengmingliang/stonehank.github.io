(window.webpackJsonp=window.webpackJsonp||[]).push([[740],{777:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> networkDelayTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">times, N, K</span>) </span>{\n  <span class="hljs-keyword">let</span> shortestDis=<span class="hljs-built_in">Array</span>(N+<span class="hljs-number">1</span>).fill(<span class="hljs-literal">Infinity</span>)\n  shortestDis[K]=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> graph=<span class="hljs-built_in">Array</span>(N+<span class="hljs-number">1</span>).fill().map(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>[])\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;times.length;i++){\n    <span class="hljs-keyword">let</span> [u,v,w]=times[i]\n    graph[u].push([v,w])\n  }\n  <span class="hljs-keyword">let</span> arr=[K],visited=<span class="hljs-built_in">Array</span>(N+<span class="hljs-number">1</span>).fill(<span class="hljs-literal">false</span>)\n  <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">let</span> len=arr.length\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n      <span class="hljs-keyword">let</span> <span class="hljs-keyword">from</span>=arr.shift()\n      <span class="hljs-keyword">if</span>(visited[<span class="hljs-keyword">from</span>])<span class="hljs-keyword">continue</span>\n      visited[<span class="hljs-keyword">from</span>]=<span class="hljs-literal">true</span>\n      <span class="hljs-keyword">let</span> adj=graph[<span class="hljs-keyword">from</span>]\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;adj.length;j++){\n        <span class="hljs-keyword">let</span> [to,lag]=adj[j]\n        <span class="hljs-keyword">if</span>(shortestDis[to]&gt;shortestDis[<span class="hljs-keyword">from</span>]+lag){\n          shortestDis[to]=shortestDis[<span class="hljs-keyword">from</span>]+lag\n          visited[to]=<span class="hljs-literal">false</span>\n          arr.push(to)\n        }\n      }\n    }\n  }\n  <span class="hljs-keyword">let</span> max=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;shortestDis.length;i++){\n    max=<span class="hljs-built_in">Math</span>.max(max,shortestDis[i])\n  }\n  <span class="hljs-keyword">if</span>(max===<span class="hljs-literal">Infinity</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>\n  <span class="hljs-keyword">return</span> max\n};\n</code></pre>\n'],titleSlug:"network-delay-time",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u8fd9\u662f\u4e00\u4e2a\u6709\u5411\u52a0\u6743\u56fe\uff0c\u9898\u76ee\u5c31\u662f\u6c42\u4ece<code>K</code>\u51fa\u53d1\uff0c\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002</p>\n<p><code>Dijkstra</code>\u7b97\u6cd5\uff0c\u901a\u8fc7<code>BFS</code>\u4e0d\u65ad\u6c42\u51fa\u4e0b\u4e00\u7ec4\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u66f4\u77ed\u7684\u8ddd\u79bb\uff0c\u5219\u66f4\u65b0\u5e76\u4e14\u5bf9\u8be5\u70b9\u91cd\u65b0\u6267\u884c<code>BFS</code>\u3002</p>\n<p><code>Bellman Ford</code>\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u90fd\u8ba1\u7b97\u4e00\u6b21\uff0c\u7b5b\u9009\u51fa\u6700\u77ed\u8ddd\u79bb\u3002</p>\n",content:"<p>\u6709&nbsp;<code>N</code>&nbsp;\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>N</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868&nbsp;<code>times</code>\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7<strong>\u6709\u5411</strong>\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002&nbsp;<code>times[i] = (u, v, w)</code>\uff0c\u5176\u4e2d&nbsp;<code>u</code>&nbsp;\u662f\u6e90\u8282\u70b9\uff0c<code>v</code>&nbsp;\u662f\u76ee\u6807\u8282\u70b9\uff0c <code>w</code>&nbsp;\u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u5411\u5f53\u524d\u7684\u8282\u70b9&nbsp;<code>K</code>&nbsp;\u53d1\u9001\u4e86\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, 100]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>K</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, N]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>times</code>&nbsp;\u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 6000]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6240\u6709\u7684\u8fb9&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;\u4e14&nbsp;<code>0 &lt;= w &lt;= 100</code>\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content742.375a1367.chunk.js.map