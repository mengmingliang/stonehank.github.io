(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{404:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n\n<span class="hljs-comment">/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */</span>\n<span class="hljs-keyword">var</span> serialize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ser</span>(<span class="hljs-params">root</span>)</span>{\n    <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> <span class="hljs-string">"#"</span>\n    <span class="hljs-keyword">return</span> root.val+<span class="hljs-string">"#"</span>+ser(root.left)+ser(root.right)    \n  }\n  <span class="hljs-keyword">let</span> res=ser(root)\n  <span class="hljs-keyword">return</span> res.split(<span class="hljs-string">\'#\'</span>).reverse().join(<span class="hljs-string">"#"</span>)\n};\n\n<span class="hljs-comment">/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> deserialize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{\n  <span class="hljs-keyword">let</span> nodes=data.split(<span class="hljs-string">"#"</span>)\n  <span class="hljs-keyword">return</span> buildTree()\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildTree</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">if</span>(nodes.length===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n    <span class="hljs-keyword">let</span> curVal=nodes.pop()\n    <span class="hljs-keyword">let</span> node=<span class="hljs-literal">null</span>\n    <span class="hljs-keyword">if</span>(curVal!==<span class="hljs-string">""</span>){\n      node=<span class="hljs-keyword">new</span> TreeNode(+curVal)\n      node.left=buildTree()\n      node.right=buildTree()\n    }\n    <span class="hljs-keyword">return</span> node\n  }\n};\n\n<span class="hljs-comment">/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */</span>\n</code></pre>\n'],titleSlug:"serialize-and-deserialize-binary-tree",hasThinking:!1,content:'<p>\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002</p>\n\n<p>\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002</p>\n\n<p><strong>\u793a\u4f8b:&nbsp;</strong></p>\n\n<pre>\u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n\u5e8f\u5217\u5316\u4e3a <code>&quot;[1,2,3,null,null,4,5]&quot;</code></pre>\n\n<p><strong>\u63d0\u793a:&nbsp;</strong>\u8fd9\u4e0e LeetCode \u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605&nbsp;<a href="/faq/#binary-tree">LeetCode \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u683c\u5f0f</a>\u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u91c7\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458 / \u5168\u5c40 / \u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n'}}}]);
//# sourceMappingURL=sourceCode-content369.4211cb26.chunk.js.map