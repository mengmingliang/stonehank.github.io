(window.webpackJsonp=window.webpackJsonp||[]).push([[886],{910:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root1\n * @param {TreeNode} root2\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> leafSimilar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root1, root2</span>) </span>{\n  <span class="hljs-keyword">if</span>(!root1 &amp;&amp; !root2)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  <span class="hljs-keyword">if</span>(!root1 || !root2)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  <span class="hljs-keyword">let</span> res1=[],res2=[]\n  res1.push(root1)\n  res2.push(root2)\n  \n  <span class="hljs-keyword">while</span>(res1.length&gt;<span class="hljs-number">0</span> &amp;&amp; res2.length&gt;<span class="hljs-number">0</span>){\n    <span class="hljs-keyword">if</span>(dfsCompare(res1)!==dfsCompare(res2))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  }\n  <span class="hljs-keyword">return</span> res1.length===<span class="hljs-number">0</span> &amp;&amp; res2.length===<span class="hljs-number">0</span>\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfsCompare</span>(<span class="hljs-params">res</span>)</span>{\n    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>){\n      <span class="hljs-keyword">let</span> node=res.pop()\n      <span class="hljs-keyword">if</span>(node.left)res.push(node.left)\n      <span class="hljs-keyword">if</span>(node.right)res.push(node.right)\n      <span class="hljs-keyword">if</span>(!node.left &amp;&amp; !node.right)<span class="hljs-keyword">return</span> node.val\n    }\n  }\n\n};\n</code></pre>\n'],titleSlug:"leaf-similar-trees",hasThinking:!1,content:'<p>\u8bf7\u8003\u8651\u4e00\u9897\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7684\u53f6\u5b50\uff0c\u8fd9\u4e9b\u53f6\u5b50\u7684\u503c\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6392\u5217\u5f62\u6210\u4e00\u4e2a&nbsp;<em>\u53f6\u503c\u5e8f\u5217</em> \u3002</p>\n\n<p><img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png" style="height: 240px; width: 300px;"></p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7ed9\u5b9a\u4e00\u9897\u53f6\u503c\u5e8f\u5217\u4e3a&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;\u7684\u6811\u3002</p>\n\n<p>\u5982\u679c\u6709\u4e24\u9897\u4e8c\u53c9\u6811\u7684\u53f6\u503c\u5e8f\u5217\u662f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba4\u4e3a\u5b83\u4eec\u662f&nbsp;<em>\u53f6\u76f8\u4f3c&nbsp;</em>\u7684\u3002</p>\n\n<p>\u5982\u679c\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5934\u7ed3\u70b9\u5206\u522b\u4e3a&nbsp;<code>root1</code> \u548c&nbsp;<code>root2</code>&nbsp;\u7684\u6811\u662f\u53f6\u76f8\u4f3c\u7684\uff0c\u5219\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u4e24\u9897\u6811\u53ef\u80fd\u4f1a\u6709&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>100</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n</ul>\n'}}}]);
//# sourceMappingURL=sourceCode-content875.49fd7fdd.chunk.js.map