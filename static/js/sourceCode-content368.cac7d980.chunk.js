(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{403:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> MedianFinder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.large=<span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b-a)\n  <span class="hljs-keyword">this</span>.small=<span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b)\n};\n\n<span class="hljs-comment">/** \n * @param {number} num\n * @return {void}\n */</span>\nMedianFinder.prototype.addNum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{\n  <span class="hljs-keyword">this</span>.large.insert(num)\n  <span class="hljs-keyword">this</span>.small.insert(<span class="hljs-keyword">this</span>.large.pop())\n  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.small.size()&gt;<span class="hljs-keyword">this</span>.large.size()){\n    <span class="hljs-keyword">this</span>.large.insert(<span class="hljs-keyword">this</span>.small.pop())\n  }\n};\n\n<span class="hljs-comment">/**\n * @return {number}\n */</span>\nMedianFinder.prototype.findMedian = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.large.size()&gt;<span class="hljs-keyword">this</span>.small.size()){\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.large.peek()\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.large.peek()+<span class="hljs-keyword">this</span>.small.peek())/<span class="hljs-number">2</span>\n  }\n};\n\n<span class="hljs-comment">/** \n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PriorityQueue</span>(<span class="hljs-params">compareFunction</span>)</span>{\n  <span class="hljs-keyword">if</span>(!compareFunction){\n    compareFunction=<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a-b\n  }\n  <span class="hljs-keyword">let</span> heap=[<span class="hljs-literal">null</span>]\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swim</span>(<span class="hljs-params">idx</span>)</span>{\n    <span class="hljs-keyword">if</span>(idx&lt;<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">let</span> k=<span class="hljs-built_in">Math</span>.floor(idx/<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span>(compareFunction(heap[idx],heap[k])&lt;<span class="hljs-number">0</span>){\n      swap(heap,idx,k)\n      idx=k\n      swim(idx)\n    }\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sink</span>(<span class="hljs-params">idx</span>)</span>{\n    <span class="hljs-keyword">let</span> k=<span class="hljs-built_in">Math</span>.floor(idx*<span class="hljs-number">2</span>)\n    <span class="hljs-keyword">if</span>(k&gt;=heap.length)<span class="hljs-keyword">return</span>\n    <span class="hljs-keyword">if</span>(k&lt;heap.length &amp;&amp; heap[k+<span class="hljs-number">1</span>] &amp;&amp; compareFunction(heap[k+<span class="hljs-number">1</span>],heap[k])&lt;<span class="hljs-number">0</span>) k++\n    <span class="hljs-keyword">if</span>(compareFunction(heap[k],heap[idx])&lt;<span class="hljs-number">0</span>){\n      swap(heap,idx,k)\n      idx=k\n      sink(idx)\n    }\n  }\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span>(<span class="hljs-params">arr,i,j</span>)</span>{\n    <span class="hljs-keyword">let</span> temp=arr[i]\n    arr[i]=arr[j]\n    arr[j]=temp\n  }\n  <span class="hljs-keyword">this</span>.insert=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{\n    heap.push(v)\n    swim(heap.length<span class="hljs-number">-1</span>)\n  }\n  <span class="hljs-keyword">this</span>.pop=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    swap(heap,<span class="hljs-number">1</span>,heap.length<span class="hljs-number">-1</span>)\n    <span class="hljs-keyword">let</span> v=heap.pop()\n    sink(<span class="hljs-number">1</span>)\n    <span class="hljs-keyword">return</span> v\n  }\n  <span class="hljs-keyword">this</span>.peek=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> heap[<span class="hljs-number">1</span>]\n  }\n  <span class="hljs-keyword">this</span>.size=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">return</span> heap.length<span class="hljs-number">-1</span>\n  }\n  <span class="hljs-keyword">this</span>.isEmpty=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> heap.length===<span class="hljs-number">1</span>\n  }\n}\n</code></pre>\n'],titleSlug:"find-median-from-data-stream",hasThinking:!0,thinking:'<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>2\u79cd\u65b9\u6cd5\uff0c</p>\n<ol>\n<li>\u6bcf\u6b21<code>addNum</code>\u5c31\u53bb\u6784\u9020\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4(\u63d2\u5165\u6392\u5e8f)\uff0c<code>findMedian</code>\u7684\u65f6\u5019\u5c31\u8fd4\u56de\u6570\u7ec4\u4e2d\u95f4\u90e8\u5206\u5373\u53ef\u3002</li>\n</ol>\n<pre class="hljs"><code><span class="hljs-keyword">var</span> MedianFinder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{  \n  <span class="hljs-keyword">let</span> list=[]\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bsEnd</span>(<span class="hljs-params">arr,n</span>)</span>{\n    <span class="hljs-keyword">let</span> lo=<span class="hljs-number">0</span>,hi=arr.length<span class="hljs-number">-1</span>\n    <span class="hljs-keyword">while</span>(lo&lt;hi){\n      <span class="hljs-keyword">let</span> mid=<span class="hljs-built_in">Math</span>.floor((lo+hi)/<span class="hljs-number">2</span>)\n      <span class="hljs-keyword">if</span>(arr[mid]&lt;n)lo=mid+<span class="hljs-number">1</span>\n      <span class="hljs-keyword">else</span> hi=mid\n    }\n    <span class="hljs-keyword">return</span> hi\n  }\n  <span class="hljs-keyword">this</span>.insert=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>{\n    <span class="hljs-keyword">if</span>(list.length===<span class="hljs-number">0</span> || list[list.length<span class="hljs-number">-1</span>]&lt;=n){\n      list.push(n)\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> idx=bsEnd(list,n)\n      list.splice(idx,<span class="hljs-number">0</span>,n)\n    }\n  }\n  <span class="hljs-keyword">this</span>.findMid=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-keyword">let</span> len=list.length\n    <span class="hljs-keyword">if</span>(len % <span class="hljs-number">2</span>===<span class="hljs-number">0</span>){\n      <span class="hljs-keyword">return</span> (list[<span class="hljs-built_in">Math</span>.floor((len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>)]+list[<span class="hljs-built_in">Math</span>.ceil((len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>)])/<span class="hljs-number">2</span>\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">return</span> list[(len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]\n    }\n  }\n};\n\nMedianFinder.prototype.addNum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{\n  <span class="hljs-keyword">this</span>.insert(num)\n};\n\nMedianFinder.prototype.findMedian = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.findMid()\n};\n</code></pre>\n<ol start="2">\n<li>\u53cc\u5806\u65b9\u6cd5(2\u4e2a\u4f18\u5148\u961f\u5217)\u3002</li>\n</ol>\n<p><code>large</code>\u6392\u5e8f\u4ece\u5927\u5230\u5c0f\uff0c\u5b58\u653e\u6570\u5b57\u8f83\u5c0f\u7684\u4e00\u534a\uff1b</p>\n<p><code>small</code>\u5b58\u653e\u4ece\u5c0f\u5230\u5927\uff0c\u5b58\u653e\u6570\u5b57\u8f83\u5927\u7684\u4e00\u534a\uff1b</p>\n<p><code>large</code>\u4e0d\u80fd\u6bd4<code>small</code>\u66f4\u5c11\u3002</p>\n<p>\u90a3\u4e48<code>large</code>\u91cc\u7684\u6570\u4e00\u5b9a\u90fd\u5c0f\u4e8e\u7b49\u4e8e<code>small</code>\u91cc\u7684\u6570\u5b57\uff0c\u5e76\u4e14<code>large</code>\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5c0f\u4e8e<code>large.peek()</code>\u7684\u6570\u5b57\uff0c</p>\n<p>\u540c\u6837<code>small</code>\u91cc\u6240\u6709\u6570\u5b57\u90fd\u5927\u4e8e<code>small.peek()</code>\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u4e24\u8fb9\u7684\u5806\u9876\u7684\u6570\u5b57\u5c31\u6784\u6210\u4e86\u4e2d\u4f4d\u503c\u3002</p>\n',content:"<p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<p>[2,3,4]&nbsp;\u7684\u4e2d\u4f4d\u6570\u662f 3</p>\n\n<p>[2,3] \u7684\u4e2d\u4f4d\u6570\u662f (2 + 3) / 2 = 2.5</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p>\n\n<ul>\n\t<li>void addNum(int num) - \u4ece\u6570\u636e\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li>\n\t<li>double findMedian() - \u8fd4\u56de\u76ee\u524d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d\u6240\u6709\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d 99% \u7684\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content368.cac7d980.chunk.js.map