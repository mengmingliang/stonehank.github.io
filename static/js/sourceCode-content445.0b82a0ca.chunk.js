(window.webpackJsonp=window.webpackJsonp||[]).push([[410],{480:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> isRectangleCover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">rectangles</span>) </span>{\n  <span class="hljs-keyword">let</span> hash=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()\n  <span class="hljs-keyword">let</span> area=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">let</span> minX=<span class="hljs-literal">Infinity</span>,minY=<span class="hljs-literal">Infinity</span>,maxX=-<span class="hljs-literal">Infinity</span>,maxY=-<span class="hljs-literal">Infinity</span>\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;rectangles.length;i++){\n    <span class="hljs-keyword">let</span> [x1,y1,x2,y2]=rectangles[i]\n    minX=<span class="hljs-built_in">Math</span>.min(minX,x1)\n    minY=<span class="hljs-built_in">Math</span>.min(minY,y1)\n    maxX=<span class="hljs-built_in">Math</span>.max(maxX,x2)\n    maxY=<span class="hljs-built_in">Math</span>.max(maxY,y2)\n    area+=(x2-x1)*(y2-y1)\n    deleteAtDouble(x1+<span class="hljs-string">\'-\'</span>+y2)\n    deleteAtDouble(x1+<span class="hljs-string">\'-\'</span>+y1)\n    deleteAtDouble(x2+<span class="hljs-string">\'-\'</span>+y2)\n    deleteAtDouble(x2+<span class="hljs-string">\'-\'</span>+y1)\n  }\n  \n  <span class="hljs-keyword">if</span>(hash.size!==<span class="hljs-number">4</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  <span class="hljs-keyword">if</span>(!(hash.has(minX+<span class="hljs-string">\'-\'</span>+minY) &amp;&amp;\n       hash.has(minX+<span class="hljs-string">\'-\'</span>+maxY) &amp;&amp;\n       hash.has(maxX+<span class="hljs-string">\'-\'</span>+minY) &amp;&amp;\n       hash.has(maxX+<span class="hljs-string">\'-\'</span>+maxY)))\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n\n  <span class="hljs-keyword">if</span>(area!==(maxX-minX)*(maxY-minY))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  \n  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteAtDouble</span>(<span class="hljs-params">key</span>)</span>{\n    <span class="hljs-keyword">if</span>(!hash.has(key))hash.set(key,<span class="hljs-number">1</span>)\n    <span class="hljs-keyword">else</span> hash.delete(key)\n  }\n};\n</code></pre>\n'],titleSlug:"perfect-rectangle",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u9898\u76ee\u5b9a\u4e49\u7684\u5b8c\u7f8e\u77e9\u5f62\uff0c\u5305\u62ec2\u4e2a\u65b9\u9762\uff1a</p>\n<ol>\n<li>\u6bcf\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u548c\u4e0e\u6574\u4e2a\u77e9\u5f62\u7684\u9762\u79ef\u76f8\u7b49\u3002</li>\n<li>\u4efb\u610f\u4e24\u4e2a\u77e9\u5f62\u90fd\u662f\u4e0d\u76f8\u4ea4\u7684\u3002</li>\n</ol>\n<p>\u5982\u679c\u6309\u7167\u4e0a\u9762\u505a\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u77e9\u5f62\u90fd\u8981\u4e0e\u53e6\u5916\u6240\u6709\u7684\u77e9\u5f62\u68c0\u67e5\u662f\u5426\u76f8\u4ea4\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>O(N^2)</code>\uff0c\u6574\u4f53\u7b97\u6cd5\u901f\u5ea6\u8f83\u6162\u3002</p>\n<p>\u56e0\u6b64\u5bf9\u4e8e\u7b2c<code>2</code>\u70b9\uff0c\u9700\u8981\u4f18\u5316\uff1b\u5982\u679c2\u4e2a\u77e9\u5f62\u4e0d\u76f8\u4ea4\uff0c\u90a3\u4e48\u9664\u4e86\u4ed6\u4eec\u5408\u5e76\u7684\u5927\u77e9\u5f62\u7684\u56db\u4e2a\u8fb9\u89d2\u51fa\u73b0\u7684\u6b21\u6570\u53ea\u6709<code>1</code>\u6b21\uff0c\u5176\u4f59\u6240\u6709\u70b9\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u662f\u5076\u6570\u6b21\u3002</p>\n<p>\u56e0\u6b64\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a<code>hash</code>\uff0c<code>hash</code>\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u70b9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5982\u679c\u5f53\u524d\u70b9\u662f\u8fb9\u89d2\u70b9\uff0c\u90a3\u4e48\u53ea\u80fd\u51fa\u73b01\u6b21\uff1b\n\u5176\u4ed6\u60c5\u51b5\u53ea\u80fd\u51fa\u73b0\u5076\u6570\u6b21\uff1b</p>\n<p>\u518d\u6b21\u4f18\u5316\uff0c\u53ef\u4ee5\u8003\u8651\u5728\u6bcf\u4e2a\u70b9\u51fa\u73b0<code>2</code>\u6b21\u7684\u65f6\u5019\uff0c\u5220\u9664\u8fd9\u4e2a\u70b9\uff0c\u56e0\u6b64\u6700\u540e<code>hash</code>\u5185\u7684\u503c\u53ea\u6709<code>4</code>\u4e2a\u8fb9\u89d2\u70b9\uff0c\u53ef\u4ee5\u964d\u4f4e\u7a7a\u95f4\u4f7f\u7528\u3002</p>\n",content:'<p>\u6211\u4eec\u6709 N \u4e2a\u4e0e\u5750\u6807\u8f74\u5bf9\u9f50\u7684\u77e9\u5f62, \u5176\u4e2d N &gt; 0, \u5224\u65ad\u5b83\u4eec\u662f\u5426\u80fd\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002</p>\n\n<p>\u6bcf\u4e2a\u77e9\u5f62\u7528\u5de6\u4e0b\u89d2\u7684\u70b9\u548c\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u6765\u8868\u793a\u3002\u4f8b\u5982\uff0c&nbsp;\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u5f62\u53ef\u4ee5\u8868\u793a\u4e3a [1,1,2,2]\u3002&nbsp;( \u5de6\u4e0b\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (1, 1) \u4ee5\u53ca\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (2, 2) )\u3002</p>\n\n<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_perfect.gif"></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\n\u8fd4\u56de true\u30025\u4e2a\u77e9\u5f62\u4e00\u8d77\u53ef\u4ee5\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_separated.gif"></p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u4e24\u4e2a\u77e9\u5f62\u4e4b\u95f4\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_hole.gif"></p>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56fe\u5f62\u9876\u7aef\u7559\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_intersect.gif"></p>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56e0\u4e3a\u4e2d\u95f4\u6709\u76f8\u4ea4\u533a\u57df\uff0c\u867d\u7136\u5f62\u6210\u4e86\u77e9\u5f62\uff0c\u4f46\u4e0d\u662f\u7cbe\u786e\u8986\u76d6\u3002\n</pre>\n'}}}]);
//# sourceMappingURL=sourceCode-content445.0b82a0ca.chunk.js.map