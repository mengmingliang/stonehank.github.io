(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{320:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n */</span>\n<span class="hljs-keyword">var</span> BSTIterator = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">let</span> node=root\n  <span class="hljs-keyword">let</span> stack=[]\n  <span class="hljs-keyword">while</span>(node){\n    stack.push(node)\n    node=node.left\n  }\n  <span class="hljs-keyword">this</span>.stack=stack\n};\n\n<span class="hljs-comment">/**\n * @return the next smallest number\n * @return {number}\n */</span>\nBSTIterator.prototype.next = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">this</span>.stack.pop()\n  <span class="hljs-keyword">let</span> node=res.right\n  <span class="hljs-keyword">while</span>(node){\n    <span class="hljs-keyword">this</span>.stack.push(node)\n    node=node.left\n  }\n  <span class="hljs-keyword">return</span> res.val\n};\n\n<span class="hljs-comment">/**\n * @return whether we have a next smallest number\n * @return {boolean}\n */</span>\nBSTIterator.prototype.hasNext = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.stack.length&gt;<span class="hljs-number">0</span>\n};\n\n<span class="hljs-comment">/** \n * Your BSTIterator object will be instantiated and called as such:\n * var obj = Object.create(BSTIterator).createNew(root)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */</span>\n</code></pre>\n'],titleSlug:"binary-search-tree-iterator",hasThinking:!1,content:'<p>\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002</p>\n\n<p>\u8c03\u7528 <code>next()</code> \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png" style="height: 178px; width: 189px;"></strong></p>\n\n<pre>BSTIterator iterator = new BSTIterator(root);\niterator.next();    // \u8fd4\u56de 3\niterator.next();    // \u8fd4\u56de 7\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 9\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 15\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 20\niterator.hasNext(); // \u8fd4\u56de false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;\u548c&nbsp;<code>hasNext()</code>&nbsp;\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f&nbsp;O(1)\uff0c\u5e76\u4f7f\u7528&nbsp;O(<em>h</em>) \u5185\u5b58\uff0c\u5176\u4e2d&nbsp;<em>h&nbsp;</em>\u662f\u6811\u7684\u9ad8\u5ea6\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>next()</code>&nbsp;\u8c03\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8c03\u7528 <code>next()</code>&nbsp;\u65f6\uff0cBST \u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002</li>\n</ul>\n'}}}]);
//# sourceMappingURL=sourceCode-content285.2e19b8db.chunk.js.map