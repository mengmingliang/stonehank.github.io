(window.webpackJsonp=window.webpackJsonp||[]).push([[402],{473:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * function NestedInteger() {\n *\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     @return {boolean}\n *     this.isInteger = function() {\n *         ...\n *     };\n *\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\n *     Return null if this NestedInteger holds a nested list\n *     @return {integer}\n *     this.getInteger = function() {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a single integer equal to value.\n *     @return {void}\n *     this.setInteger = function(value) {\n *         ...\n *     };\n *\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n *     @return {void}\n *     this.add = function(elem) {\n *         ...\n *     };\n *\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\n *     Return null if this NestedInteger holds a single integer\n *     @return {NestedInteger[]}\n *     this.getList = function() {\n *         ...\n *     };\n * };\n */</span>\n<span class="hljs-comment">/**\n * @param {string} s\n * @return {NestedInteger}\n */</span>\n<span class="hljs-keyword">var</span> deserialize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>{\n  <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">new</span> NestedInteger()\n  <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>]===<span class="hljs-string">"["</span>){\n    <span class="hljs-keyword">let</span> subs=<span class="hljs-string">\'\'</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;s.length<span class="hljs-number">-1</span>;i++){\n      <span class="hljs-keyword">if</span>(s[i]===<span class="hljs-string">\'[\'</span>){\n        <span class="hljs-keyword">let</span> tail=getTail(s,i+<span class="hljs-number">1</span>)\n        res.add(deserialize(s.substring(i,tail+<span class="hljs-number">1</span>)))\n        i=tail\n      }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]===<span class="hljs-string">\',\'</span>){\n        <span class="hljs-keyword">if</span>( subs===<span class="hljs-string">\'\'</span>)<span class="hljs-keyword">continue</span>\n        res.add(deserialize(subs))\n        subs=<span class="hljs-string">\'\'</span>\n      }<span class="hljs-keyword">else</span>{\n        subs+=s[i]\n      }\n    }\n    <span class="hljs-keyword">if</span>(subs!==<span class="hljs-string">\'\'</span>)res.add(deserialize(subs))\n  }<span class="hljs-keyword">else</span>{\n    <span class="hljs-keyword">if</span>(s===<span class="hljs-string">\'\'</span>)<span class="hljs-keyword">return</span> res\n    res.setInteger(+s)\n  }\n  <span class="hljs-keyword">return</span> res\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTail</span>(<span class="hljs-params">s,start</span>)</span>{\n    <span class="hljs-keyword">let</span> valid=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=start;i&lt;s.length;i++){\n      <span class="hljs-keyword">if</span>(s[i]===<span class="hljs-string">"["</span>)valid++\n      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]===<span class="hljs-string">"]"</span>)valid--\n      <span class="hljs-keyword">if</span>(valid===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> i\n    }\n  }\n};\n</code></pre>\n'],titleSlug:"mini-parser",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6574\u6570\u7684\u5d4c\u5957\u5217\u8868\uff0c\u5b9e\u73b0\u4e00\u4e2a\u89e3\u6790\u5b83\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u662f\u6574\u6570\u6216\u6574\u6570\u5d4c\u5957\u5217\u8868</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd9\u4e9b\u5b57\u7b26\u4e32\u90fd\u662f\u683c\u5f0f\u826f\u597d\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32\u975e\u7a7a</li>\n\t<li>\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c</li>\n\t<li>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6570\u5b57<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n\u7ed9\u5b9a s = &quot;324&quot;,\n\n\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\uff0c\u5176\u4e2d\u53ea\u5305\u542b\u6574\u6570\u503c 324\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n\u7ed9\u5b9a s = &quot;[123,[456,[789]]]&quot;,\n\n\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\u5305\u542b\u4e00\u4e2a\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n\n1. \u4e00\u4e2a integer \u5305\u542b\u503c 123\n2. \u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n    i.  \u4e00\u4e2a integer \u5305\u542b\u503c 456\n    ii. \u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\n         a. \u4e00\u4e2a integer \u5305\u542b\u503c 789\n</pre>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content438.c8f555ea.chunk.js.map