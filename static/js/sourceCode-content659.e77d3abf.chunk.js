(window.webpackJsonp=window.webpackJsonp||[]).push([[647],{694:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @param {number} k\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> findTarget = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root, k</span>) </span>{\n    <span class="hljs-keyword">let</span> res=<span class="hljs-literal">false</span>\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">preDSF</span>(<span class="hljs-params">node</span>)</span>{\n        <span class="hljs-keyword">let</span> cur=node\n        <span class="hljs-keyword">if</span>(search(k-cur.val,root,cur))<span class="hljs-keyword">return</span> res=<span class="hljs-literal">true</span>\n        <span class="hljs-keyword">if</span>(!res &amp;&amp; node.left) preDSF(node.left)\n        <span class="hljs-keyword">if</span>(!res &amp;&amp; node.right) preDSF(node.right)\n        <span class="hljs-keyword">return</span>\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">n,node,cur</span>)</span>{\n        <span class="hljs-keyword">if</span>(node){\n            <span class="hljs-keyword">if</span>(n&gt;node.val)<span class="hljs-keyword">return</span> search(n,node.right,cur)\n            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&lt;node.val)<span class="hljs-keyword">return</span> search(n,node.left,cur)\n            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(node===cur) <span class="hljs-keyword">return</span> search(n,node.right,cur)\n            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    }\n    preDSF(root)\n    <span class="hljs-keyword">return</span> res\n};\n</code></pre>\n'],titleSlug:"two-sum-iv-input-is-a-bst",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002</p>\n\n<p><strong>\u6848\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6848\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content659.e77d3abf.chunk.js.map