(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{205:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} blocked\n * @param {number[]} source\n * @param {number[]} target\n * @return {boolean}\n */</span>\n<span class="hljs-keyword">var</span> isEscapePossible = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">blocked, source, target</span>) </span>{\n  <span class="hljs-keyword">if</span>(blocked.length===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n  <span class="hljs-keyword">let</span> len=blocked.length\n  <span class="hljs-keyword">let</span> moved=[[<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]\n  <span class="hljs-keyword">let</span> blockedHash={}\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [x,y] <span class="hljs-keyword">of</span> blocked){\n    blockedHash[x+<span class="hljs-string">\' \'</span>+y]=<span class="hljs-literal">true</span>\n  }\n  <span class="hljs-keyword">let</span> r1=connect(source,target),\n      r2=connect(target,source)\n  <span class="hljs-keyword">return</span> r1 &amp;&amp; r2\n\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params">point,tar</span>)</span>{\n    <span class="hljs-keyword">let</span> arr=[point],limit=<span class="hljs-built_in">Math</span>.floor(len*len / <span class="hljs-built_in">Math</span>.PI)\n    <span class="hljs-keyword">let</span> hash={}\n    hash[point[<span class="hljs-number">0</span>]+<span class="hljs-string">\' \'</span>+point[<span class="hljs-number">1</span>]]=<span class="hljs-literal">true</span>\n    <span class="hljs-keyword">while</span>(arr.length&gt;<span class="hljs-number">0</span>){\n      <span class="hljs-keyword">let</span> len=arr.length\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len;i++){\n        <span class="hljs-keyword">let</span> [x,y]=arr.shift()\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [dx,dy] <span class="hljs-keyword">of</span> moved){\n          <span class="hljs-keyword">let</span> nx=x+dx,ny=y+dy\n          <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">0</span> || ny&lt;<span class="hljs-number">0</span> || nx&gt;=<span class="hljs-number">1e6</span> || ny&gt;=<span class="hljs-number">1e6</span>)<span class="hljs-keyword">continue</span>\n          <span class="hljs-keyword">if</span>(blockedHash[nx+<span class="hljs-string">\' \'</span>+ny])<span class="hljs-keyword">continue</span>\n          <span class="hljs-keyword">if</span>(hash[nx+<span class="hljs-string">\' \'</span>+ny])<span class="hljs-keyword">continue</span>\n          hash[nx+<span class="hljs-string">\' \'</span>+ny]=<span class="hljs-literal">true</span>\n          <span class="hljs-keyword">if</span>(nx===tar[<span class="hljs-number">0</span>] &amp;&amp; ny===tar[<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n          <span class="hljs-keyword">if</span>(limit--===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n          arr.push([nx,ny])\n        }\n      }\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  }\n};\n</code></pre>\n'],titleSlug:"escape-a-large-maze",hasThinking:!1,content:"<p>\u5728\u4e00\u4e2a 10^6 x 10^6 \u7684\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u683c\u5757\u7684\u5750\u6807\u4e3a&nbsp;<code>(x, y)</code>\uff0c\u5176\u4e2d&nbsp;<code>0 &lt;= x, y &lt; 10^6</code>\u3002</p>\n\n<p>\u6211\u4eec\u4ece\u6e90\u65b9\u683c&nbsp;<code>source</code>&nbsp;\u5f00\u59cb\u51fa\u53d1\uff0c\u610f\u56fe\u8d76\u5f80\u76ee\u6807\u65b9\u683c&nbsp;<code>target</code>\u3002\u6bcf\u6b21\u79fb\u52a8\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u8d70\u5230\u7f51\u683c\u4e2d\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u65b9\u683c\uff0c\u53ea\u8981\u8be5\u65b9\u683c\u4e0d\u5728\u7ed9\u51fa\u7684\u5c01\u9501\u5217\u8868&nbsp;<code>blocked</code>&nbsp;\u4e0a\u3002</p>\n\n<p>\u53ea\u6709\u5728\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79fb\u52a8\u5230\u8fbe\u76ee\u6807\u65b9\u683c\u65f6\u624d\u8fd4\u56de&nbsp;<code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u6e90\u65b9\u683c\u65e0\u6cd5\u5230\u8fbe\u76ee\u6807\u65b9\u683c\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5728\u7f51\u683c\u4e2d\u79fb\u52a8\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>blocked = [], source = [0,0], target = [999999,999999]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\n\u56e0\u4e3a\u6ca1\u6709\u65b9\u683c\u88ab\u5c01\u9501\uff0c\u6240\u4ee5\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u76ee\u6807\u65b9\u683c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= blocked.length &lt;= 200</code></li>\n\t<li><code>blocked[i].length == 2</code></li>\n\t<li><code>0 &lt;= blocked[i][j] &lt; 10^6</code></li>\n\t<li><code>source.length == target.length == 2</code></li>\n\t<li><code>0 &lt;= source[i][j], target[i][j] &lt; 10^6</code></li>\n\t<li><code>source != target</code></li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content170.289b5e9c.chunk.js.map