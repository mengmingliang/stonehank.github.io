(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{219:function(n){n.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */</span>\n<span class="hljs-keyword">var</span> buildTree = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preorder, inorder</span>) </span>{\n  <span class="hljs-keyword">let</span> preIdx=<span class="hljs-number">0</span>\n  <span class="hljs-keyword">return</span> createTree(<span class="hljs-number">0</span>,inorder.length<span class="hljs-number">-1</span>)\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTree</span>(<span class="hljs-params">lo,hi</span>)</span>{\n    <span class="hljs-keyword">if</span>(lo&gt;hi)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n    <span class="hljs-keyword">let</span> val=preorder[preIdx++]\n    <span class="hljs-keyword">let</span> idx=inorder.indexOf(val)\n    <span class="hljs-keyword">let</span> node=<span class="hljs-keyword">new</span> TreeNode(val)\n    node.left=createTree(lo,idx<span class="hljs-number">-1</span>)\n    node.right=createTree(idx+<span class="hljs-number">1</span>,hi)\n    <span class="hljs-keyword">return</span> node\n  }\n};\n</code></pre>\n'],titleSlug:"construct-binary-tree-from-preorder-and-inorder-traversal",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u6309\u7167<code>preorder</code>\u7684\u987a\u5e8f\u4ece<code>inorder</code>\u5185\u90e8\u67e5\u627e\uff0c\u5bf9\u4e8e\u67e5\u627e\u5230\u7684\u7d22\u5f15<code>idx</code>\uff0c\u5c06\u5f53\u524d<code>inorder</code>\u7684\u5de6<code>lo</code>\u548c\u53f3<code>hi</code>\u8fb9\u754c\u7ee7\u7eed\u5206\u5272\u4e3a<code>[lo,idx-1]</code>\u548c<code>[idx+1,hi]</code>\uff0c\u7ee7\u7eed\u9012\u5f52\u5904\u7406\u3002</p>\n<p>\u548c<code>NO.106</code>\u7684\u533a\u522b\u5728\u4e8e<code>preorder</code>\u9700\u8981\u4ece\u5de6\u5411\u53f3\uff0c\u5e76\u4e14\u5148<code>left</code>\u5b50\u6811\u518d<code>right</code>\u5b50\u6811\u3002</p>\n",content:"<p>\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u51fa</p>\n\n<pre>\u524d\u5e8f\u904d\u5386 preorder =&nbsp;[3,9,20,15,7]\n\u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7]</pre>\n\n<p>\u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content184.c1df86b6.chunk.js.map