(window.webpackJsonp=window.webpackJsonp||[]).push([[496],{557:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string[]} words\n * @return {string[]}\n */</span>\n<span class="hljs-keyword">var</span> findAllConcatenatedWordsInADict = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">words</span>) </span>{\n  <span class="hljs-comment">// trie+dfs</span>\n  <span class="hljs-comment">// let tree={}</span>\n  <span class="hljs-comment">// for(let i=0;i&lt;words.length;i++){</span>\n  <span class="hljs-comment">//   let node=tree</span>\n  <span class="hljs-comment">//   for(let j=0;j&lt;words[i].length;j++){</span>\n  <span class="hljs-comment">//     let cur=words[i][j]</span>\n  <span class="hljs-comment">//     if(node[cur]==null)node[cur]={exact:false,child:{}}</span>\n  <span class="hljs-comment">//     if(j===words[i].length-1)node[cur].exact=true</span>\n  <span class="hljs-comment">//     node=node[cur].child</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// let result=[]</span>\n  <span class="hljs-comment">// let find=false</span>\n  <span class="hljs-comment">// function dfs(str,node,count){</span>\n  <span class="hljs-comment">//   if(str===\'\' &amp;&amp; count&gt;1)return find=true</span>\n  <span class="hljs-comment">//   for(let i=0;i&lt;str.length;i++){</span>\n  <span class="hljs-comment">//     let cur=str[i]</span>\n  <span class="hljs-comment">//     if(node[cur]==null)return</span>\n  <span class="hljs-comment">//     if(node[cur].exact){</span>\n  <span class="hljs-comment">//       dfs(str.substring(i+1),tree,count+1)</span>\n  <span class="hljs-comment">//       if(find)return</span>\n  <span class="hljs-comment">//     }</span>\n  <span class="hljs-comment">//     node=node[cur].child</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// for(let n of words){</span>\n  <span class="hljs-comment">//   find=false</span>\n  <span class="hljs-comment">//   let node=tree</span>\n  <span class="hljs-comment">//   dfs(n,node,0)</span>\n  <span class="hljs-comment">//   if(find)result.push(n)</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return result</span>\n  \n  <span class="hljs-comment">// problem 139\u7684\u5347\u7ea7\u7248</span>\n  <span class="hljs-keyword">let</span> wordDict=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(),\n      result=[]\n  words.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a.length-b.length)\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> word <span class="hljs-keyword">of</span> words){\n    <span class="hljs-keyword">if</span>(canCombine(word,wordDict)){\n      result.push(word)\n    }\n    wordDict.set(word,<span class="hljs-literal">true</span>)\n  }\n  <span class="hljs-keyword">return</span> result\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">canCombine</span>(<span class="hljs-params">s,wordDict</span>)</span>{\n    <span class="hljs-keyword">if</span>(wordDict.size===<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n    <span class="hljs-keyword">let</span> dp=<span class="hljs-built_in">Array</span>(s.length + <span class="hljs-number">1</span>).fill(<span class="hljs-literal">false</span>)\n    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>; i &lt;= s.length; i++){\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>; j &lt; i; j++){\n        <span class="hljs-keyword">if</span>(dp[j] &amp;&amp; wordDict.has(s.substring(j, i))){\n          dp[i] = <span class="hljs-literal">true</span>;\n          <span class="hljs-keyword">break</span>;\n        }\n      }\n    }\n    <span class="hljs-keyword">return</span> dp[s.length];    \n  }\n\n};\n</code></pre>\n'],titleSlug:"concatenated-words",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u4e0d\u542b\u91cd\u590d</strong>\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002</p>\n\n<p>\u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u8f93\u51fa:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u89e3\u91ca:</strong> &quot;catsdogcats&quot;\u7531&quot;cats&quot;, &quot;dog&quot; \u548c &quot;cats&quot;\u7ec4\u6210; \n     &quot;dogcatsdog&quot;\u7531&quot;dog&quot;, &quot;cats&quot;\u548c&quot;dog&quot;\u7ec4\u6210; \n     &quot;ratcatdogcat&quot;\u7531&quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot;\u548c&quot;cat&quot;\u7ec4\u6210\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 <code>10000</code>\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 <code>600000</code>\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ol>\n"}}}]);
//# sourceMappingURL=sourceCode-content522.08d920b0.chunk.js.map