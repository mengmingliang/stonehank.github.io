(window.webpackJsonp=window.webpackJsonp||[]).push([[926],{945:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {string} S\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> numPermsDISequence = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">S</span>) </span>{\n  <span class="hljs-comment">// let mem=new Map()</span>\n  <span class="hljs-comment">// let MOD=1e9+7</span>\n  <span class="hljs-comment">// function calc(S){</span>\n  <span class="hljs-comment">//   if(S.length===1)return 1</span>\n  <span class="hljs-comment">//   if(mem.has(S)) return mem.get(S)</span>\n  <span class="hljs-comment">//   let hash={}</span>\n  <span class="hljs-comment">//   let sum=0</span>\n  <span class="hljs-comment">//   for(let i=0;i&lt;S.length;i++){</span>\n  <span class="hljs-comment">//     let curS=S.substring(0,i)+S.substring(i+1)</span>\n  <span class="hljs-comment">//     if(hash[curS])continue</span>\n  <span class="hljs-comment">//     hash[curS]=true</span>\n  <span class="hljs-comment">//     let res=calc(curS)</span>\n  <span class="hljs-comment">//     mem.set(curS,res)</span>\n  <span class="hljs-comment">//     sum=(sum+res)% MOD</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">//   mem.set(S,sum)</span>\n  <span class="hljs-comment">//   return sum </span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return calc(S) % MOD</span>\n  \n  <span class="hljs-keyword">let</span> n = S.length, mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>\n  <span class="hljs-keyword">let</span> dp = []\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;n+<span class="hljs-number">1</span>;i++){\n    dp[i]=[]\n    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;n+<span class="hljs-number">1</span>;j++){\n      dp[i][j]=<span class="hljs-number">0</span>\n    }\n  }\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++) dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)\n    <span class="hljs-keyword">if</span> (S[i] == <span class="hljs-string">\'I\'</span>){\n      <span class="hljs-keyword">let</span> cur=<span class="hljs-number">0</span>\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n - i; j++){\n        cur = (cur + dp[i][j]) % mod;  \n        dp[i + <span class="hljs-number">1</span>][j] = cur        \n      }\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">let</span> cur=<span class="hljs-number">0</span>\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = n - i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--){\n        cur = (cur + dp[i][j + <span class="hljs-number">1</span>]) % mod;\n        dp[i + <span class="hljs-number">1</span>][j] = cur\n      }\n    }\n  <span class="hljs-keyword">return</span> dp[n][<span class="hljs-number">0</span>];\n};\n</code></pre>\n'],titleSlug:"valid-permutations-for-di-sequence",hasThinking:!1,content:"<p>\u6211\u4eec\u7ed9\u51fa <code>S</code>\uff0c\u4e00\u4e2a\u6e90\u4e8e&nbsp;<code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u7684\u957f\u5ea6\u4e3a <code>n</code>&nbsp;\u7684\u5b57\u7b26\u4e32 \u3002\uff08\u8fd9\u4e9b\u5b57\u6bcd\u4ee3\u8868 &ldquo;\u51cf\u5c11&rdquo; \u548c &ldquo;\u589e\u52a0&rdquo;\u3002\uff09<br>\n<em>\u6709\u6548\u6392\u5217</em>&nbsp;\u662f\u5bf9\u6574\u6570 <code>{0, 1, ..., n}</code>&nbsp;\u7684\u4e00\u4e2a\u6392\u5217&nbsp;<code>P[0], P[1], ..., P[n]</code>\uff0c\u4f7f\u5f97\u5bf9\u6240\u6709\u7684&nbsp;<code>i</code>\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c <code>S[i] == &#39;D&#39;</code>\uff0c\u90a3\u4e48&nbsp;<code>P[i] &gt; P[i+1]</code>\uff0c\u4ee5\u53ca\uff1b</li>\n\t<li>\u5982\u679c <code>S[i] == &#39;I&#39;</code>\uff0c\u90a3\u4e48 <code>P[i] &lt; P[i+1]</code>\u3002</li>\n</ul>\n\n<p>\u6709\u591a\u5c11\u4e2a\u6709\u6548\u6392\u5217\uff1f\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u8bf7<strong>\u8fd4\u56de\u4f60\u7684\u7b54\u6848\u6a21</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;DID&quot;\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n(0, 1, 2, 3) \u7684\u4e94\u4e2a\u6709\u6548\u6392\u5217\u662f\uff1a\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>S</code> \u4ec5\u7531\u96c6\u5408 <code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u4e2d\u7684\u5b57\u7b26\u7ec4\u6210\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content910.fa7660db.chunk.js.map