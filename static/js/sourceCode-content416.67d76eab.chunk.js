(window.webpackJsonp=window.webpackJsonp||[]).push([[378],{451:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * @param {number[][]} envelopes\n * @return {number}\n */</span>\n<span class="hljs-keyword">var</span> maxEnvelopes = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">envelopes</span>) </span>{\n  envelopes.sort(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a[<span class="hljs-number">0</span>]===b[<span class="hljs-number">0</span>]?b[<span class="hljs-number">1</span>]-a[<span class="hljs-number">1</span>]:a[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>])\n  <span class="hljs-comment">// function canFit(a,b){</span>\n  <span class="hljs-comment">//   return a[0]&gt;b[0] &amp;&amp; a[1]&gt;b[1]</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// memorize</span>\n  \n  <span class="hljs-comment">// let mem=[]</span>\n  <span class="hljs-comment">// function getNums(idx){</span>\n  <span class="hljs-comment">//   if(mem[idx]!=null)return mem[idx]</span>\n  <span class="hljs-comment">//   let res=1</span>\n  <span class="hljs-comment">//   let env=envelopes[idx]</span>\n  <span class="hljs-comment">//   for(let i=0;i&lt;idx;i++){</span>\n  <span class="hljs-comment">//     if(canFit(env,envelopes[i])){</span>\n  <span class="hljs-comment">//       res=Math.max(res,getNums(i)+1)</span>\n  <span class="hljs-comment">//     }</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">//   mem[idx]=res</span>\n  <span class="hljs-comment">//   return res</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// let max=0</span>\n  <span class="hljs-comment">// for(let i=0;i&lt;envelopes.length;i++){</span>\n  <span class="hljs-comment">//   max=Math.max(max,getNums(i))</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return max</span>\n  \n  <span class="hljs-comment">// dp</span>\n  \n  <span class="hljs-comment">// let n=envelopes.length</span>\n  <span class="hljs-comment">// let dp=Array(n).fill(0)</span>\n  <span class="hljs-comment">// let max=0</span>\n  <span class="hljs-comment">// for(let i=0;i&lt;n;i++){</span>\n  <span class="hljs-comment">//   dp[i]=1</span>\n  <span class="hljs-comment">//   for(let j=0;j&lt;i;j++){</span>\n  <span class="hljs-comment">//     if(canFit(envelopes[i],envelopes[j]))</span>\n  <span class="hljs-comment">//       dp[i]=Math.max(dp[i],dp[j]+1)</span>\n  <span class="hljs-comment">//   }</span>\n  <span class="hljs-comment">//   max=Math.max(max,dp[i])</span>\n  <span class="hljs-comment">// }</span>\n  <span class="hljs-comment">// return max</span>\n  \n  <span class="hljs-comment">// bs</span>\n  <span class="hljs-keyword">let</span> output = [];\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> envelopes) {\n    <span class="hljs-keyword">let</span> i = binarySearch(output, e);\n    output[i] = e;\n  }\n  <span class="hljs-keyword">return</span> output.length\n  \n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binarySearch</span>(<span class="hljs-params">output, envelope</span>) </span>{\n    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = output.length<span class="hljs-number">-1</span>;\n    <span class="hljs-keyword">while</span>(left &lt;= right) {\n        <span class="hljs-keyword">let</span> mid = <span class="hljs-built_in">Math</span>.floor((right+left)/<span class="hljs-number">2</span>)\n        <span class="hljs-keyword">if</span>(output[mid][<span class="hljs-number">1</span>] &lt; envelope[<span class="hljs-number">1</span>]) { \n          left = mid + <span class="hljs-number">1</span>\n        }<span class="hljs-keyword">else</span> { \n          right = mid - <span class="hljs-number">1</span>\n        }\n    }\n    <span class="hljs-keyword">return</span> left;\n  }\n};\n</code></pre>\n'],titleSlug:"russian-doll-envelopes",hasThinking:!1,content:"<p>\u7ed9\u5b9a\u4e00\u4e9b\u6807\u8bb0\u4e86\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u4fe1\u5c01\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4ee5\u6574\u6570\u5bf9\u5f62\u5f0f&nbsp;<code>(w, h)</code>&nbsp;\u51fa\u73b0\u3002\u5f53\u53e6\u4e00\u4e2a\u4fe1\u5c01\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u6bd4\u8fd9\u4e2a\u4fe1\u5c01\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4fe1\u5c01\u5c31\u53ef\u4ee5\u653e\u8fdb\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\uff0c\u5982\u540c\u4fc4\u7f57\u65af\u5957\u5a03\u4e00\u6837\u3002</p>\n\n<p>\u8bf7\u8ba1\u7b97\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u4fe1\u5c01\u80fd\u7ec4\u6210\u4e00\u7ec4&ldquo;\u4fc4\u7f57\u65af\u5957\u5a03&rdquo;\u4fe1\u5c01\uff08\u5373\u53ef\u4ee5\u628a\u4e00\u4e2a\u4fe1\u5c01\u653e\u5230\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\u9762\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4e0d\u5141\u8bb8\u65cb\u8f6c\u4fe1\u5c01\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca:</strong> \u6700\u591a\u4fe1\u5c01\u7684\u4e2a\u6570\u4e3a <code>3, \u7ec4\u5408\u4e3a: </code>[2,3] =&gt; [5,4] =&gt; [6,7]\u3002\n</pre>\n"}}}]);
//# sourceMappingURL=sourceCode-content416.67d76eab.chunk.js.map