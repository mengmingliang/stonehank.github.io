(window.webpackJsonp=window.webpackJsonp||[]).push([[262],{346:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Initialize your data structure here.\n */</span>\n<span class="hljs-keyword">var</span> WordDictionary = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">this</span>.tire={}\n};\n\n<span class="hljs-comment">/**\n * Adds a word into the data structure. \n * @param {string} word\n * @return {void}\n */</span>\nWordDictionary.prototype.addWord = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{\n  <span class="hljs-keyword">let</span> t=<span class="hljs-keyword">this</span>.tire\n  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;word.length;i++){\n    <span class="hljs-keyword">let</span> l=word[i]\n    <span class="hljs-keyword">if</span>(t[l]==<span class="hljs-literal">null</span>)t[l]={}\n    <span class="hljs-keyword">if</span>(i===word.length<span class="hljs-number">-1</span>)t[l][<span class="hljs-string">\'exact\'</span>]=<span class="hljs-literal">true</span>\n    t=t[l]\n  }\n};\n\n<span class="hljs-comment">/**\n * Returns if the word is in the data structure. A word could contain the dot character \'.\' to represent any one letter. \n * @param {string} word\n * @return {boolean}\n */</span>\nWordDictionary.prototype.search = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">tire,idx</span>)</span>{\n    <span class="hljs-keyword">if</span>(idx===word.length){\n      <span class="hljs-keyword">return</span> tire.exact\n    }\n    <span class="hljs-keyword">let</span> l=word[idx]\n    <span class="hljs-keyword">if</span>(l===<span class="hljs-string">\'.\'</span>){\n      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> tire){\n        <span class="hljs-keyword">if</span>(dfs(tire[k],idx+<span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n      }\n    }<span class="hljs-keyword">else</span>{\n      <span class="hljs-keyword">if</span>(tire[l]==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n      <span class="hljs-keyword">if</span>(dfs(tire[l],idx+<span class="hljs-number">1</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  }\n  <span class="hljs-keyword">return</span> dfs(<span class="hljs-keyword">this</span>.tire,<span class="hljs-number">0</span>)\n};\n\n<span class="hljs-comment">/** \n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary()\n * obj.addWord(word)\n * var param_2 = obj.search(word)\n */</span>\n</code></pre>\n'],titleSlug:"add-and-search-word-data-structure-design",hasThinking:!0,thinking:"<hr>\n<p>\u601d\u8def\uff1a</p>\n<p>\u5148\u6784\u5efa<code>Tire</code>\u6811\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u7528<code>{}</code>\u5d4c\u5957\u6784\u6210\u3002</p>\n<p><code>addWord</code>\u4e2d\uff0c\u5c06\u5355\u8bcd\u6bcf\u4e2a\u5b57\u6bcd\u6dfb\u52a0\u5230<code>tire</code>\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u6dfb\u52a0\u7ed3\u5c3e\u6807\u5fd7\u3002</p>\n<p><code>search</code>\u4e2d\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5b57\u7b26\u641c\u7d22\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fdb\u5165\u66f4\u6df1\u4e00\u5c42\u7ee7\u7eed\u641c\u7d22\uff0c\u5176\u4e2d<code>.</code>\u53ef\u4ee5\u4ee3\u8868\u4efb\u610f\u503c\uff0c\u9700\u8981\u904d\u5386\u5f53\u524d<code>tire</code>\u6240\u6709\u7684\u5b57\u6bcd\u90fd\u5c1d\u8bd5\u4e00\u904d\uff0c\u76f4\u5230\u627e\u5230\u5bf9\u5e94\u5355\u8bcd\u3002</p>\n",content:"<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;\u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd&nbsp;<code>.</code>&nbsp;\u6216&nbsp;<code>a-z</code>&nbsp;\u3002&nbsp;<code>.</code> \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u5355\u8bcd\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd <code>a-z</code>&nbsp;\u7ec4\u6210\u7684\u3002</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content311.cce3155f.chunk.js.map