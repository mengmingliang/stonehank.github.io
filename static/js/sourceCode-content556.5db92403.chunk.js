(window.webpackJsonp=window.webpackJsonp||[]).push([[533],{591:function(s){s.exports={code:['<pre class="hljs"><code><span class="hljs-comment">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class="hljs-comment">/**\n * @param {TreeNode} root\n * @return {number[]}\n */</span>\n<span class="hljs-keyword">var</span> findFrequentTreeSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{\n  <span class="hljs-keyword">if</span>(!root)<span class="hljs-keyword">return</span> []\n  <span class="hljs-keyword">let</span> hash={},ans=[]\n  <span class="hljs-keyword">let</span> max=<span class="hljs-number">0</span>\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calcTreeSum</span>(<span class="hljs-params">root</span>)</span>{\n    <span class="hljs-keyword">let</span> sum=root.val\n    <span class="hljs-keyword">if</span>(root.left)sum+=calcTreeSum(root.left)\n    <span class="hljs-keyword">if</span>(root.right)sum+=calcTreeSum(root.right)\n    <span class="hljs-keyword">if</span>(!hash[sum])hash[sum]=<span class="hljs-number">1</span>\n    <span class="hljs-keyword">else</span> hash[sum]++\n    <span class="hljs-keyword">if</span>(hash[sum]&gt;max){\n      max=hash[sum]\n      ans=[sum]\n    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hash[sum]===max){\n      ans.push(sum)\n    }\n    <span class="hljs-keyword">return</span> sum\n  }\n  calcTreeSum(root)\n  <span class="hljs-keyword">return</span> ans\n};\n</code></pre>\n'],titleSlug:"most-frequent-subtree-sum",hasThinking:!1,content:"<p>\u7ed9\u51fa\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u5143\u7d20\u548c\u5b9a\u4e49\u4e3a\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5143\u7d20\u4e4b\u548c\uff08\u5305\u62ec\u7ed3\u70b9\u672c\u8eab\uff09\u3002\u7136\u540e\u6c42\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u5982\u679c\u6709\u591a\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u540c\uff0c\u8fd4\u56de\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\uff08\u4e0d\u9650\u987a\u5e8f\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1</strong><br>\n\u8f93\u5165:</p>\n\n<pre>  5\n /  \\\n2   -3\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2, -3, 4]\uff0c\u6240\u6709\u7684\u503c\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2</strong><br>\n\u8f93\u5165:</p>\n\n<pre>  5\n /  \\\n2   -5\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2]\uff0c\u53ea\u6709 2 \u51fa\u73b0\u4e24\u6b21\uff0c-5 \u53ea\u51fa\u73b0 1 \u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>&nbsp;\u5047\u8bbe\u4efb\u610f\u5b50\u6811\u5143\u7d20\u548c\u5747\u53ef\u4ee5\u7528 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8868\u793a\u3002</p>\n"}}}]);
//# sourceMappingURL=sourceCode-content556.5db92403.chunk.js.map